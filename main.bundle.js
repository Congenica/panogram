/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 378);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _isPlaceholder = __webpack_require__(53);


/**
 * Optimized internal two-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
module.exports = function _curry2(fn) {
  return function f2(a, b) {
    switch (arguments.length) {
      case 0:
        return f2;
      case 1:
        return _isPlaceholder(a) ? f2
             : _curry1(function(_b) { return fn(a, _b); });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f2
             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b); })
             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })
             : fn(a, b);
    }
  };
};


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var _isPlaceholder = __webpack_require__(53);


/**
 * Optimized internal one-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
module.exports = function _curry1(fn) {
  return function f1(a) {
    if (arguments.length === 0 || _isPlaceholder(a)) {
      return f1;
    } else {
      return fn.apply(this, arguments);
    }
  };
};


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _curry2 = __webpack_require__(0);
var _isPlaceholder = __webpack_require__(53);


/**
 * Optimized internal three-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
module.exports = function _curry3(fn) {
  return function f3(a, b, c) {
    switch (arguments.length) {
      case 0:
        return f3;
      case 1:
        return _isPlaceholder(a) ? f3
             : _curry2(function(_b, _c) { return fn(a, _b, _c); });
      case 2:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f3
             : _isPlaceholder(a) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })
             : _isPlaceholder(b) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })
             : _curry1(function(_c) { return fn(a, b, _c); });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3
             : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) { return fn(_a, _b, c); })
             : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })
             : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })
             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b, c); })
             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b, c); })
             : _isPlaceholder(c) ? _curry1(function(_c) { return fn(a, b, _c); })
             : fn(a, b, c);
    }
  };
};


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var _isArray = __webpack_require__(25);
var _isTransformer = __webpack_require__(78);


/**
 * Returns a function that dispatches with different strategies based on the
 * object in list position (last argument). If it is an array, executes [fn].
 * Otherwise, if it has a function with one of the given method names, it will
 * execute that function (functor case). Otherwise, if it is a transformer,
 * uses transducer [xf] to return a new transformer (transducer case).
 * Otherwise, it will default to executing [fn].
 *
 * @private
 * @param {Array} methodNames properties to check for a custom implementation
 * @param {Function} xf transducer to initialize if object is transformer
 * @param {Function} fn default ramda implementation
 * @return {Function} A function that dispatches on object in list position
 */
module.exports = function _dispatchable(methodNames, xf, fn) {
  return function() {
    if (arguments.length === 0) {
      return fn();
    }
    var args = Array.prototype.slice.call(arguments, 0);
    var obj = args.pop();
    if (!_isArray(obj)) {
      var idx = 0;
      while (idx < methodNames.length) {
        if (typeof obj[methodNames[idx]] === 'function') {
          return obj[methodNames[idx]].apply(obj, args);
        }
        idx += 1;
      }
      if (_isTransformer(obj)) {
        var transducer = xf.apply(null, args);
        return transducer(obj);
      }
    }
    return fn.apply(this, arguments);
  };
};


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = {
  init: function() {
    return this.xf['@@transducer/init']();
  },
  result: function(result) {
    return this.xf['@@transducer/result'](result);
  }
};


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["k"] = clone2DArray;
/* harmony export (immutable) */ __webpack_exports__["f"] = cloneObject;
/* harmony export (immutable) */ __webpack_exports__["h"] = arrayContains;
/* harmony export (immutable) */ __webpack_exports__["l"] = arrayIndexOf;
/* harmony export (immutable) */ __webpack_exports__["p"] = indexOfLastMinElementInArray;
/* harmony export (immutable) */ __webpack_exports__["q"] = filterUnique;
/* harmony export (immutable) */ __webpack_exports__["m"] = replaceInArray;
/* harmony export (immutable) */ __webpack_exports__["j"] = removeFirstOccurrenceByValue;
/* harmony export (immutable) */ __webpack_exports__["i"] = isInt;
/* harmony export (immutable) */ __webpack_exports__["r"] = toObjectWithTrue;
/* harmony export (immutable) */ __webpack_exports__["e"] = romanize;
/* unused harmony export makeFlattened2DArrayCopy */
/* unused harmony export swap */
/* harmony export (immutable) */ __webpack_exports__["n"] = permute2DArrayInFirstDimension;
/* harmony export (immutable) */ __webpack_exports__["g"] = Timer;
/* harmony export (immutable) */ __webpack_exports__["c"] = stringifyObject;
/* harmony export (immutable) */ __webpack_exports__["o"] = printObject;
/* unused harmony export padString */
/* harmony export (immutable) */ __webpack_exports__["a"] = unescapeRestData;
/* harmony export (immutable) */ __webpack_exports__["d"] = getSelectorFromXML;
/* harmony export (immutable) */ __webpack_exports__["b"] = getSubSelectorTextFromXML;
// Functions in this file provide functionality which is not present in
// one of { InternetExplorer 8, Chrome v28, Firefox 3 } but may be present
// in later verisons of the browsers and/or libriries such as Ext/Prototype
// However the goal was to release a dependency-free package, thus some
// of the mehtods available in other libraries were re-implemented.
// None of the methods modify any of the built-in type prototypes.
// Loop types are picked based on http://jsperf.com/loops/128


// To allow debug code to run in IE7 && IE8
// if (!window.console) { var console = {log: function() {}}; } // WTF IS THIS?

// For IE7 && IE8 again
if (typeof String.prototype.trim !== "function") {
    String.prototype.trim = function () {
        return this.replace(/^\s+|\s+$/g, "");
    };
}

// And again (IE7 && IE8 fix)
if (!Array.prototype.forEach) {
    Array.prototype.forEach = function (fun) {
        var t = Object(this);
        var len = t.length >>> 0;
        if (typeof fun !== "function") throw new TypeError();

        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
        for (var i = 0; i < len; i++) {
            if (i in t) fun.call(thisArg, t[i], i, t);
        }
    };
}

// Fix for Safari v4 && v5
if (typeof HTMLElement !== "undefined" && !HTMLElement.prototype.click && document.createEvent) {
    HTMLElement.prototype.click = function () {
        var eventObj = document.createEvent("MouseEvents");
        eventObj.initEvent("click", true, true);
        this.dispatchEvent(eventObj);
    };
}

// Used for: cloning a 2D array of integers (i.e. no deep copy of elements is necessary)
// Specific implementation is pciked based on http://jsperf.com/clone-2d-array/4
function clone2DArray(arr2D) {
    var new2D = [];
    for (var i = 0; i < arr2D.length; ++i) {
        new2D.push(arr2D[i].slice());
    }
    return new2D;
}

// Creates a shallow copy of the given object
// Specific implementation is picked based on http://jsperf.com/cloning-an-object/4
function cloneObject(obj) {
    var target = {};
    for (var i in obj) {
        if (obj.hasOwnProperty(i)) target[i] = obj[i];
    }
    return target;
}

// Equivalent to (Array.indexOf() != -1)
function arrayContains(array, item) {
    if (Array.prototype.indexOf) {
        return !(array.indexOf(item) < 0);
    } else {
        for (var i = 0, len = array.length; i < len; ++i) {
            if (array[i] === item) return true;
        }
        return false;
    }
}

// Equivalent to Array.indexOf
function arrayIndexOf(array, item) {
    if (Array.prototype.indexOf) {
        return array.indexOf(item);
    } else {
        for (var i = 0, len = array.length; i < len; ++i) {
            if (array[i] === item) return i;
        }
        return -1;
    }
}

function indexOfLastMinElementInArray(array) {
    var min = array[0];
    var minIndex = 0;

    for (var i = 1, len = array.length; i < len; ++i) {
        if (array[i] <= min) {
            minIndex = i;
            min = array[i];
        }
    }
    return minIndex;
}

// Returns an array of unique values from the given array
// Specific implementation is picked based on http://jsperf.com/array-unique2/19
function filterUnique(array) {
    var hash = {},
        result = [],
        i = array.length;
    while (i--) {
        if (!hash[array[i]]) {
            hash[array[i]] = true;
            result.push(array[i]);
        }
    }
    return result;
}

// Replaces the first occurence of `value` in `array` by `newValue`. Does nothing if `value` is not in `array`
function replaceInArray(array, value, newValue) {
    for (var i = 0, len = array.length; i < len; ++i) {
        if (array[i] === value) {
            array[i] = newValue;
            break;
        }
    }
}

// Removes the first occurence of `value` in `array`. Does nothing if `value` is not in `array`
function removeFirstOccurrenceByValue(array, item) {
    for (var i = 0, len = array.length; i < len; ++i) {
        if (array[i] == item) {
            array.splice(i, 1);
            break;
        }
    }
}

// Used for: user input validation
function isInt(n) {
    //return +n === n && !(n % 1);
    //return !(n % 1);
    return !isNaN(n) && parseInt(n) == parseFloat(n);
}

function toObjectWithTrue(array) {
    var obj = {};
    for (var i = 0; i < array.length; ++i) if (array[i] !== undefined) obj[array[i]] = true;
    return obj;
}

function romanize(num) {
    if (!+num) return false;
    var digits = String(+num).split(""),
        key = ["", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM", "", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC", "", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"],
        roman = "",
        i = 3;
    while (i--) roman = (key[+digits.pop() + i * 10] || "") + roman;
    return Array(+digits.join("") + 1).join("M") + roman;
}

/*function objectKeys(obj) {
    if (Object.keys)
        return Object.keyhs(obj);

    var keys = [];
    for (var i in obj) {
      if (obj.hasOwnProperty(i)) {
        keys.push(i);
      }
    }
    return keys;
}*/

//-------------------------------------------------------------
// Used during ordering for bucket order permutations
//-------------------------------------------------------------
function makeFlattened2DArrayCopy(array) {
    var flattenedcopy = [].concat.apply([], array);
    return flattenedcopy;
}

function swap(array, i, j) {
    var b = array[j];
    array[j] = array[i];
    array[i] = b;
}

function permute2DArrayInFirstDimension(permutations, array, from) {
    var len = array.length;

    if (from == len - 1) {
        permutations.push(makeFlattened2DArrayCopy(array));
        return;
    }

    for (var j = from; j < len; j++) {
        swap(array, from, j);
        permute2DArrayInFirstDimension(permutations, array, from + 1);
        swap(array, from, j);
    }
}
//-------------------------------------------------------------


//-------------------------------------------------------------
// Used for profiling code
function Timer() {
    this.startTime = undefined;
    this.lastCheck = undefined;
    this.start();
}

Timer.prototype = {

    start: function () {
        this.startTime = new Date().getTime();
        this.lastCheck = this.startTime;
    },

    restart: function () {
        this.start();
    },

    report: function () {
        var current = new Date().getTime();
        var elapsed = current - this.lastCheck;
        return elapsed;
    },

    printSinceLast: function (msg) {
        var current = new Date().getTime();
        var elapsed = current - this.lastCheck;
        this.lastCheck = current;
        console.log(msg + elapsed + "ms");
    }
};
//-------------------------------------------------------------


//-------------------------------------------------------------
function stringifyObject(obj) {
    return _printObjectInternal(obj, 1);
}

function printObject(obj) {
    console.log(_printObjectInternal(obj, 0));
}

function _printObjectInternal(o, level) {
    if (level > 10) return "...[too deep, possibly a recursive object]...";

    var output = "";

    if (typeof o == "object") {

        if (Object.prototype.toString.call(o) === "[object Array]") {
            output = "[";
            for (var i = 0; i < o.length; i++) {
                if (i > 0) output += ", ";
                output += _printObjectInternal(o[i], level + 1);
            }
            output += "]";
        } else {
            output = "{";
            var idx = 0;
            if (level == 0) output += "\n";
            for (var property in o) {
                if (!o.hasOwnProperty(property)) continue;

                if (level != 0 && idx != 0) output += ", ";
                output += property + ": " + _printObjectInternal(o[property], level + 1);

                if (level == 0) output += "\n";
                idx++;
            }
            output += "}";
        }
    } else if (typeof o == "string") {
        output = "'" + o + "'";
    } else output = "" + o;

    return output;
}

function padString(string, width, padding, onLeft) {
    return width <= string.length ? string : padString(onLeft ? padding + string : string + padding, width, padding, onLeft);
}

function unescapeRestData(data) {
    // http://stackoverflow.com/questions/4480757/how-do-i-unescape-html-entities-in-js-change-lt-to
    var tempNode = document.createElement("div");
    tempNode.innerHTML = data.replace(/&amp;/, "&");
    return tempNode.innerText || tempNode.text || tempNode.textContent;
}

function getSelectorFromXML(responseXML, selectorName, attributeName, attributeValue) {
    if (responseXML.querySelector) {
        // modern browsers
        return responseXML.querySelector(selectorName + "[" + attributeName + "='" + attributeValue + "']");
    } else {
        // IE7 && IE8 && some other older browsers
        // http://www.w3schools.com/XPath/xpath_syntax.asp
        // http://msdn.microsoft.com/en-us/library/ms757846%28v=vs.85%29.aspx
        var query = "//" + selectorName + "[@" + attributeName + "='" + attributeValue + "']";
        try {
            return responseXML.selectSingleNode(query);
        } catch (e) {
            // Firefox v3.0-
            console.warn("your browser is unsupported");
            window.stop && window.stop();
            throw "Unsupported browser";
        }
    }
}

function getSubSelectorTextFromXML(responseXML, selectorName, attributeName, attributeValue, subselectorName) {
    var selector = getSelectorFromXML(responseXML, selectorName, attributeName, attributeValue);

    var value = selector.innerText || selector.text || selector.textContent;

    if (!value) // fix IE behavior where (undefined || "" || undefined) == undefined
        value = "";

    return value;
}

//-------------------------------------------------------------

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = {
  Version: '1.7',
  
  Browser: {
    IE:             false,
    Opera:          false,
    WebKit:         false,
    Gecko:          false,
    MobileSafari:   false
  },
  
  BrowserFeatures: {
    XPath: false,
    SelectorsAPI: false,
    ElementExtensions: false,
    SpecificElementExtensions: false
  },
  
  ScriptFragment: '<script[^>]*>([\\S\\s]*?)<\/script>',
  JSONFilter: /^\/\*-secure-([\s\S]*)\*\/\s*$/,

  emptyFunction: function(){},
  K: function(x){ return x; }
}


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var _arity = __webpack_require__(20);
var _curry1 = __webpack_require__(1);
var _curry2 = __webpack_require__(0);
var _curryN = __webpack_require__(51);


/**
 * Returns a curried equivalent of the provided function, with the specified
 * arity. The curried function has two unusual capabilities. First, its
 * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value `R.__` may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is `R.__`, the
 * following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.5.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curry
 * @example
 *
 *      var sumArgs = (...args) => R.sum(args);
 *
 *      var curriedAddFourNumbers = R.curryN(4, sumArgs);
 *      var f = curriedAddFourNumbers(1, 2);
 *      var g = f(3);
 *      g(4); //=> 10
 */
module.exports = _curry2(function curryN(length, fn) {
  if (length === 1) {
    return _curry1(fn);
  }
  return _arity(length, _curryN(length, [], fn));
});


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($H) {var Prototype = __webpack_require__(6);
(function() {

  var _toString = Object.prototype.toString,
      NULL_TYPE = 'Null',
      UNDEFINED_TYPE = 'Undefined',
      BOOLEAN_TYPE = 'Boolean',
      NUMBER_TYPE = 'Number',
      STRING_TYPE = 'String',
      OBJECT_TYPE = 'Object',
      FUNCTION_CLASS = '[object Function]',
      BOOLEAN_CLASS = '[object Boolean]',
      NUMBER_CLASS = '[object Number]',
      STRING_CLASS = '[object String]',
      ARRAY_CLASS = '[object Array]',
      DATE_CLASS = '[object Date]',
      NATIVE_JSON_STRINGIFY_SUPPORT = JSON &&
        typeof JSON.stringify === 'function' &&
        JSON.stringify(0) === '0' &&
        typeof JSON.stringify(Prototype.K) === 'undefined';

  function Type(o) {
    switch(o) {
      case null: return NULL_TYPE;
      case (void 0): return UNDEFINED_TYPE;
    }
    var type = typeof o;
    switch(type) {
      case 'boolean': return BOOLEAN_TYPE;
      case 'number':  return NUMBER_TYPE;
      case 'string':  return STRING_TYPE;
    }
    return OBJECT_TYPE;
  }

  function extend(destination, source) {
    for (var property in source)
      destination[property] = source[property];
    return destination;
  }

  function inspect(object) {
    try {
      if (isUndefined(object)) return 'undefined';
      if (object === null) return 'null';
      return object.inspect ? object.inspect() : String(object);
    } catch (e) {
      if (e instanceof RangeError) return '...';
      throw e;
    }
  }

  function toJSON(value) {
    return Str('', { '': value }, []);
  }

  function Str(key, holder, stack) {
    var value = holder[key],
        type = typeof value;

    if (Type(value) === OBJECT_TYPE && typeof value.toJSON === 'function') {
      value = value.toJSON(key);
    }

    var _class = _toString.call(value);

    switch (_class) {
      case NUMBER_CLASS:
      case BOOLEAN_CLASS:
      case STRING_CLASS:
        value = value.valueOf();
    }

    switch (value) {
      case null: return 'null';
      case true: return 'true';
      case false: return 'false';
    }

    type = typeof value;
    switch (type) {
      case 'string':
        return value.inspect(true);
      case 'number':
        return isFinite(value) ? String(value) : 'null';
      case 'object':

        for (var i = 0, length = stack.length; i < length; i++) {
          if (stack[i] === value) { throw new TypeError(); }
        }
        stack.push(value);

        var partial = [];
        if (_class === ARRAY_CLASS) {
          for (var i = 0, length = value.length; i < length; i++) {
            var str = Str(i, value, stack);
            partial.push(typeof str === 'undefined' ? 'null' : str);
          }
          partial = '[' + partial.join(',') + ']';
        } else {
          var keys = Object.keys(value);
          for (var i = 0, length = keys.length; i < length; i++) {
            var key = keys[i], str = Str(key, value, stack);
            if (typeof str !== "undefined") {
               partial.push(key.inspect(true)+ ':' + str);
             }
          }
          partial = '{' + partial.join(',') + '}';
        }
        stack.pop();
        return partial;
    }
  }

  function stringify(object) {
    return JSON.stringify(object);
  }

  function toQueryString(object) {
    return $H(object).toQueryString();
  }

  function toHTML(object) {
    return object && object.toHTML ? object.toHTML() : String.interpret(object);
  }

  function keys(object) {
    if (Type(object) !== OBJECT_TYPE) { throw new TypeError(); }
    var results = [];
    for (var property in object) {
      if (object.hasOwnProperty(property)) {
        results.push(property);
      }
    }
    return results;
  }

  function values(object) {
    var results = [];
    for (var property in object)
      results.push(object[property]);
    return results;
  }

  function clone(object) {
    return extend({ }, object);
  }

  function isElement(object) {
    return !!(object && object.nodeType == 1);
  }

  function isArray(object) {
    return _toString.call(object) === ARRAY_CLASS;
  }

  var hasNativeIsArray = (typeof Array.isArray == 'function')
    && Array.isArray([]) && !Array.isArray({});

  if (hasNativeIsArray) {
    isArray = Array.isArray;
  }

  function isHash(object) {
    return object instanceof __webpack_require__(31).Hash; // important to make the "require" here
  }

  function isFunction(object) {
    return _toString.call(object) === FUNCTION_CLASS;
  }

  function isString(object) {
    return _toString.call(object) === STRING_CLASS;
  }

  function isNumber(object) {
    return _toString.call(object) === NUMBER_CLASS;
  }

  function isDate(object) {
    return _toString.call(object) === DATE_CLASS;
  }

  function isUndefined(object) {
    return typeof object === "undefined";
  }

  extend(Object, {
    extend:        extend,
    inspect:       inspect,
    toJSON:        NATIVE_JSON_STRINGIFY_SUPPORT ? stringify : toJSON,
    toQueryString: toQueryString,
    toHTML:        toHTML,
    keys:          Object.keys || keys,
    values:        values,
    clone:         clone,
    isElement:     isElement,
    isArray:       isArray,
    isHash:        isHash,
    isFunction:    isFunction,
    isString:      isString,
    isNumber:      isNumber,
    isDate:        isDate,
    isUndefined:   isUndefined
  });
})();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(45)))

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = function _has(prop, obj) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
};


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var Prototype = __webpack_require__(6);
                __webpack_require__(8);
module.exports = Class = (function() {

  var IS_DONTENUM_BUGGY = (function(){
    for (var p in { toString: 1 }) {
      if (p === 'toString') return false;
    }
    return true;
  })();

  function subclass() {};
  function create() {
    var parent = null, properties = [].slice.call(arguments);
    if (Object.isFunction(properties[0]))
      parent = properties.shift();

    function klass() {
      this.initialize.apply(this, arguments);
    }

    Object.extend(klass, Class.Methods);
    klass.superclass = parent;
    klass.subclasses = [];

    if (parent) {
      subclass.prototype = parent.prototype;
      klass.prototype = new subclass;
      parent.subclasses.push(klass);
    }

    for (var i = 0, length = properties.length; i < length; i++)
      klass.addMethods(properties[i]);

    if (!klass.prototype.initialize)
      klass.prototype.initialize = Prototype.emptyFunction;

    klass.prototype.constructor = klass;
    return klass;
  }

  function addMethods(source) {
    var ancestor   = this.superclass && this.superclass.prototype,
        properties = Object.keys(source);

    if (IS_DONTENUM_BUGGY) {
      if (source.toString != Object.prototype.toString)
        properties.push("toString");
      if (source.valueOf != Object.prototype.valueOf)
        properties.push("valueOf");
    }

    for (var i = 0, length = properties.length; i < length; i++) {
      var property = properties[i], value = source[property];
      if (ancestor && Object.isFunction(value) &&
          value.argumentNames()[0] == "$super") {
        var method = value;
        value = (function(m) {
          return function() { return ancestor[m].apply(this, arguments); };
        })(property).wrap(method);

        value.valueOf = method.valueOf.bind(method);
        value.toString = method.toString.bind(method);
      }
      this.prototype[property] = value;
    }

    return this;
  }

  return {
    create: create,
    Methods: {
      addMethods: addMethods
    }
  };
})();

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _map = __webpack_require__(55);
var _reduce = __webpack_require__(14);
var _xmap = __webpack_require__(271);
var curryN = __webpack_require__(7);
var keys = __webpack_require__(21);


/**
 * Takes a function and
 * a [functor](https://github.com/fantasyland/fantasy-land#functor),
 * applies the function to each of the functor's values, and returns
 * a functor of the same shape.
 *
 * Ramda provides suitable `map` implementations for `Array` and `Object`,
 * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
 *
 * Dispatches to the `map` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * Also treats functions as functors and will compose them together.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Functor f => (a -> b) -> f a -> f b
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {Array} list The list to be iterated over.
 * @return {Array} The new list.
 * @see R.transduce, R.addIndex
 * @example
 *
 *      var double = x => x * 2;
 *
 *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
 *
 *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
 * @symb R.map(f, [a, b]) = [f(a), f(b)]
 * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
 * @symb R.map(f, functor_o) = functor_o.map(f)
 */
module.exports = _curry2(_dispatchable(['map'], _xmap, function map(fn, functor) {
  switch (Object.prototype.toString.call(functor)) {
    case '[object Function]':
      return curryN(functor.length, function() {
        return fn.call(this, functor.apply(this, arguments));
      });
    case '[object Object]':
      return _reduce(function(acc, key) {
        acc[key] = fn(functor[key]);
        return acc;
      }, {}, keys(functor));
    default:
      return _map(fn, functor);
  }
}));


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
//attributes for graphical elements in the editor
const PedigreeEditorAttributes = {
    propagateLastName: true, // when true, father's last name is propagated as "last name at birth" to descendants
    radius: 40,
    orbRadius: 6,
    touchOrbRadius: 8,
    personHoverBoxRadius: 90, // 80    for old handles, 90 for new
    newHandles: true, // false for old handles
    personHandleLength: 75, // 60    for old handles, 75 for new
    personHandleBreakX: 55,
    personHandleBreakY: 53,
    personSiblingHandleLengthX: 65,
    personSiblingHandleLengthY: 30,
    enableHandleHintImages: true,
    handleStrokeWidth: 5,
    groupNodesScale: 0.85,
    childlessLength: 14,
    infertileMarkerHeight: 4,
    infertileMarkerWidth: 14,
    twinCommonVerticalLength: 6,
    twinMonozygothicLineShiftY: 24,
    curvedLinesCornerRadius: 25,
    unbornShape: { 'font-size': 50, 'font-family': 'Cambria' },
    carrierShape: { fill: '#595959' },
    carrierDotRadius: 8,
    presymptomaticShape: { fill: '#777777', "stroke": "#777777" },
    presymptomaticShapeWidth: 8,
    evaluationShape: { 'font-size': 40, 'font-family': 'Arial' },
    nodeShape: { fill: "#DDDDDD", stroke: "#595959" }, // this
    nodeShapeMenuOn: { fill: "#000", stroke: "none", "fill-opacity": 0.1 },
    nodeShapeMenuOff: { fill: "#000", stroke: "none", "fill-opacity": 0 },
    nodeShapeMenuOnPartner: { fill: "#000", stroke: "none", "fill-opacity": 0.1 },
    nodeShapeMenuOffPartner: { fill: "#000", stroke: "none", "fill-opacity": 0 },
    nodeShapeDiag: { fill: "#DDDDDD", stroke: "#595959" }, // this
    boxOnHover: { fill: "gray", stroke: "none", opacity: 1, "fill-opacity": .35 },
    menuBtnIcon: { fill: "#1F1F1F", stroke: "none" },
    deleteBtnIcon: { fill: "#990000", stroke: "none" },
    btnMaskHoverOn: { opacity: .6, stroke: 'none' },
    btnMaskHoverOff: { opacity: 0 },
    btnMaskClick: { opacity: 1 },
    orbHue: .53,
    phShape: { fill: "white", "fill-opacity": 0, "stroke": 'black', "stroke-dasharray": "- " },
    dragMeLabel: { 'font-size': 14, 'font-family': 'Tahoma' },
    pedNumberLabel: { 'font-size': 19, 'font-family': 'Serif' },
    descendantGroupLabel: { 'font-size': 21, 'font-family': 'Tahoma' },
    label: { 'font-size': 20, 'font-family': 'Arial' },
    nameLabels: { 'font-size': 20, 'font-family': 'Arial' },
    commentLabel: { 'font-size': 19, 'font-family': 'Arial' },
    externalIDLabels: { 'font-size': 18, 'font-family': 'Arial', 'cursor': 'pointer' },
    disorderShapes: {},
    partnershipNode: { fill: '#dc7868', stroke: 'black', 'stroke-width': 2 }, //#E25740
    partnershipRadius: 6.5,
    partnershipHandleBreakY: 15,
    partnershipHandleLength: 36,
    partnershipLines: { "stroke-width": 1.25, stroke: '#303058' },
    consangrPartnershipLines: { "stroke-width": 1.25, stroke: '#402058' },
    noContactLines: { "stroke-width": 1.75, stroke: '#333333', "stroke-dasharray": "." },
    notInContactLineSize: 20,
    graphToCanvasScale: 12,
    layoutRelativePersonWidth: 10,
    layoutRelativeOtherWidth: 2,
    layoutScale: { xscale: 12.0, yscale: 8 }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = PedigreeEditorAttributes;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var Prototype, Class;
Prototype = __webpack_require__(6);
            __webpack_require__(8);
Class =     __webpack_require__(10);

Object.extend(Function.prototype, (function() {
  var slice = Array.prototype.slice;

  function update(array, args) {
    var arrayLength = array.length, length = args.length;
    while (length--) array[arrayLength + length] = args[length];
    return array;
  }

  function merge(array, args) {
    array = slice.call(array, 0);
    return update(array, args);
  }

  function argumentNames() {
    var names = this.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1]
      .replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, '')
      .replace(/\s+/g, '').split(',');
    return names.length == 1 && !names[0] ? [] : names;
  }

  function bind(context) {
    if (arguments.length < 2 && Object.isUndefined(arguments[0])) return this;
    var __method = this, args = slice.call(arguments, 1);
    return function() {
      var a = merge(args, arguments);
      return __method.apply(context, a);
    }
  }

  function bindAsEventListener(context) {
    var __method = this, args = slice.call(arguments, 1);
    return function(event) {
      var a = update([event], args);
      return __method.apply(context, a);
    }
  }

  function curry() {
    if (!arguments.length) return this;
    var __method = this, args = slice.call(arguments, 0);
    return function() {
      var a = merge(args, arguments);
      return __method.apply(this, a);
    }
  }

  function delay(timeout) {
    var __method = this, args = slice.call(arguments, 1);
    timeout = timeout * 1000;
    return setTimeout(function() {
      return __method.apply(__method, args);
    }, timeout);
  }

  function defer() {
    var args = update([0.01], arguments);
    return this.delay.apply(this, args);
  }

  function wrap(wrapper) {
    var __method = this;
    return function() {
      var a = update([__method.bind(this)], arguments);
      return wrapper.apply(this, a);
    }
  }

  function methodize() {
    if (this._methodized) return this._methodized;
    var __method = this;
    return this._methodized = function() {
      var a = update([this], arguments);
      return __method.apply(null, a);
    };
  }

  return {
    argumentNames:       argumentNames,
    bind:                bind,
    bindAsEventListener: bindAsEventListener,
    curry:               curry,
    delay:               delay,
    defer:               defer,
    wrap:                wrap,
    methodize:           methodize
  }
})());

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var _xwrap = __webpack_require__(126);
var bind = __webpack_require__(101);
var isArrayLike = __webpack_require__(36);


module.exports = (function() {
  function _arrayReduce(xf, acc, list) {
    var idx = 0;
    var len = list.length;
    while (idx < len) {
      acc = xf['@@transducer/step'](acc, list[idx]);
      if (acc && acc['@@transducer/reduced']) {
        acc = acc['@@transducer/value'];
        break;
      }
      idx += 1;
    }
    return xf['@@transducer/result'](acc);
  }

  function _iterableReduce(xf, acc, iter) {
    var step = iter.next();
    while (!step.done) {
      acc = xf['@@transducer/step'](acc, step.value);
      if (acc && acc['@@transducer/reduced']) {
        acc = acc['@@transducer/value'];
        break;
      }
      step = iter.next();
    }
    return xf['@@transducer/result'](acc);
  }

  function _methodReduce(xf, acc, obj) {
    return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));
  }

  var symIterator = (typeof Symbol !== 'undefined') ? Symbol.iterator : '@@iterator';
  return function _reduce(fn, acc, list) {
    if (typeof fn === 'function') {
      fn = _xwrap(fn);
    }
    if (isArrayLike(list)) {
      return _arrayReduce(fn, acc, list);
    }
    if (typeof list.reduce === 'function') {
      return _methodReduce(fn, acc, list);
    }
    if (list[symIterator] != null) {
      return _iterableReduce(fn, acc, list[symIterator]());
    }
    if (typeof list.next === 'function') {
      return _iterableReduce(fn, acc, list);
    }
    throw new TypeError('reduce: list must be array or iterable');
  };
}());


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

var Prototype, Class;
Prototype = __webpack_require__(6);
            __webpack_require__(8);
Class =     __webpack_require__(10);
            __webpack_require__(13);
(function(proto) {

  function toISOString() {
    return this.getUTCFullYear() + '-' +
      (this.getUTCMonth() + 1).toPaddedString(2) + '-' +
      this.getUTCDate().toPaddedString(2) + 'T' +
      this.getUTCHours().toPaddedString(2) + ':' +
      this.getUTCMinutes().toPaddedString(2) + ':' +
      this.getUTCSeconds().toPaddedString(2) + 'Z';
  }


  function toJSON() {
    return this.toISOString();
  }

  if (!proto.toISOString) proto.toISOString = toISOString;
  if (!proto.toJSON) proto.toJSON = toJSON;

})(Date.prototype);

/***/ }),
/* 16 */
/***/ (function(module, exports) {

/**
 * Private `concat` function to merge two array-like objects.
 *
 * @private
 * @param {Array|Arguments} [set1=[]] An array-like object.
 * @param {Array|Arguments} [set2=[]] An array-like object.
 * @return {Array} A new, merged array.
 * @example
 *
 *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 */
module.exports = function _concat(set1, set2) {
  set1 = set1 || [];
  set2 = set2 || [];
  var idx;
  var len1 = set1.length;
  var len2 = set2.length;
  var result = [];

  idx = 0;
  while (idx < len1) {
    result[result.length] = set1[idx];
    idx += 1;
  }
  idx = 0;
  while (idx < len2) {
    result[result.length] = set2[idx];
    idx += 1;
  }
  return result;
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($w) {var Enumerable, Prototype, Class, Template;
Prototype =   __webpack_require__(6);
              __webpack_require__(8);
Class =       __webpack_require__(10);
              __webpack_require__(13);
              __webpack_require__(15);
              __webpack_require__(18);
              __webpack_require__(23);
Template =    __webpack_require__(24);
Enumerable =  __webpack_require__(28);


module.exports = {
  A: $A,
  w: $w
};

function $A(iterable) {
  if (!iterable) return [];
  if ('toArray' in Object(iterable)) return iterable.toArray();
  var length = iterable.length || 0, results = new Array(length);
  while (length--) results[length] = iterable[length];
  return results;
}


function $w(string) {
  if (!Object.isString(string)) return [];
  string = string.strip();
  return string ? string.split(/\s+/) : [];
}

Array.from = $A;


(function() {
  var arrayProto = Array.prototype,
      slice = arrayProto.slice,
      _each = arrayProto.forEach; // use native browser JS 1.6 implementation if available

  function each(iterator, context) {
    for (var i = 0, length = this.length >>> 0; i < length; i++) {
      if (i in this) iterator.call(context, this[i], i, this);
    }
  }
  if (!_each) _each = each;

  function clear() {
    this.length = 0;
    return this;
  }

  function first() {
    return this[0];
  }

  function last() {
    return this[this.length - 1];
  }

  function compact() {
    return this.select(function(value) {
      return value != null;
    });
  }

  function flatten() {
    return this.inject([], function(array, value) {
      if (Object.isArray(value))
        return array.concat(value.flatten());
      array.push(value);
      return array;
    });
  }

  function without() {
    var values = slice.call(arguments, 0);
    return this.select(function(value) {
      return !values.include(value);
    });
  }

  function reverse(inline) {
    return (inline === false ? this.toArray() : this)._reverse();
  }

  function uniq(sorted) {
    return this.inject([], function(array, value, index) {
      if (0 == index || (sorted ? array.last() != value : !array.include(value)))
        array.push(value);
      return array;
    });
  }

  function intersect(array) {
    return this.uniq().findAll(function(item) {
      return array.detect(function(value) { return item === value });
    });
  }


  function clone() {
    return slice.call(this, 0);
  }

  function size() {
    return this.length;
  }

  function inspect() {
    return '[' + this.map(Object.inspect).join(', ') + ']';
  }

  function indexOf(item, i) {
    i || (i = 0);
    var length = this.length;
    if (i < 0) i = length + i;
    for (; i < length; i++)
      if (this[i] === item) return i;
    return -1;
  }

  function lastIndexOf(item, i) {
    i = isNaN(i) ? this.length : (i < 0 ? this.length + i : i) + 1;
    var n = this.slice(0, i).reverse().indexOf(item);
    return (n < 0) ? n : i - n - 1;
  }

  function concat() {
    var array = slice.call(this, 0), item;
    for (var i = 0, length = arguments.length; i < length; i++) {
      item = arguments[i];
      if (Object.isArray(item) && !('callee' in item)) {
        for (var j = 0, arrayLength = item.length; j < arrayLength; j++)
          array.push(item[j]);
      } else {
        array.push(item);
      }
    }
    return array;
  }

  Object.extend(arrayProto, Enumerable);

  if (!arrayProto._reverse)
    arrayProto._reverse = arrayProto.reverse;

  Object.extend(arrayProto, {
    _each:     _each,
    clear:     clear,
    first:     first,
    last:      last,
    compact:   compact,
    flatten:   flatten,
    without:   without,
    reverse:   reverse,
    uniq:      uniq,
    intersect: intersect,
    clone:     clone,
    toArray:   clone,
    size:      size,
    inspect:   inspect
  });

  var CONCAT_ARGUMENTS_BUGGY = (function() {
    return [].concat(arguments)[0][0] !== 1;
  })(1,2)

  if (CONCAT_ARGUMENTS_BUGGY) arrayProto.concat = concat;

  if (!arrayProto.indexOf) arrayProto.indexOf = indexOf;
  if (!arrayProto.lastIndexOf) arrayProto.lastIndexOf = lastIndexOf;
})();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(181)))

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var Prototype, Class;
Prototype = __webpack_require__(6);
            __webpack_require__(8);
Class =     __webpack_require__(10);
            __webpack_require__(13);
            __webpack_require__(15);
RegExp.prototype.match = RegExp.prototype.test;

RegExp.escape = function(str) {
  return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
};

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _equals = __webpack_require__(246);


/**
 * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
 * cyclical data structures.
 *
 * Dispatches symmetrically to the `equals` methods of both arguments, if
 * present.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Relation
 * @sig a -> b -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @example
 *
 *      R.equals(1, 1); //=> true
 *      R.equals(1, '1'); //=> false
 *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
 *
 *      var a = {}; a.v = a;
 *      var b = {}; b.v = b;
 *      R.equals(a, b); //=> true
 */
module.exports = _curry2(function equals(a, b) {
  return _equals(a, b, [], []);
});


/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = function _arity(n, fn) {
  /* eslint-disable no-unused-vars */
  switch (n) {
    case 0: return function() { return fn.apply(this, arguments); };
    case 1: return function(a0) { return fn.apply(this, arguments); };
    case 2: return function(a0, a1) { return fn.apply(this, arguments); };
    case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };
    case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };
    case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };
    case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };
    case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };
    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };
    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };
    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };
    default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
  }
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _has = __webpack_require__(9);
var _isArguments = __webpack_require__(119);


/**
 * Returns a list containing the names of all the enumerable own properties of
 * the supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own properties.
 * @example
 *
 *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
 */
module.exports = (function() {
  // cover IE < 9 keys issues
  var hasEnumBug = !({toString: null}).propertyIsEnumerable('toString');
  var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString',
                            'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
  // Safari bug
  var hasArgsEnumBug = (function() {
    'use strict';
    return arguments.propertyIsEnumerable('length');
  }());

  var contains = function contains(list, item) {
    var idx = 0;
    while (idx < list.length) {
      if (list[idx] === item) {
        return true;
      }
      idx += 1;
    }
    return false;
  };

  return typeof Object.keys === 'function' && !hasArgsEnumBug ?
    _curry1(function keys(obj) {
      return Object(obj) !== obj ? [] : Object.keys(obj);
    }) :
    _curry1(function keys(obj) {
      if (Object(obj) !== obj) {
        return [];
      }
      var prop, nIdx;
      var ks = [];
      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);
      for (prop in obj) {
        if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
          ks[ks.length] = prop;
        }
      }
      if (hasEnumBug) {
        nIdx = nonEnumerableProps.length - 1;
        while (nIdx >= 0) {
          prop = nonEnumerableProps[nIdx];
          if (_has(prop, obj) && !contains(ks, prop)) {
            ks[ks.length] = prop;
          }
          nIdx -= 1;
        }
      }
      return ks;
    });
}());


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var _reduce = __webpack_require__(14);


/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It may use
 * `R.reduced` to shortcut the iteration.
 *
 * The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.
 *
 * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduce` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
 *
 * Dispatches to the `reduce` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduced, R.addIndex, R.reduceRight
 * @example
 *
 *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
 *                -               -10
 *               / \              / \
 *              -   4           -6   4
 *             / \              / \
 *            -   3   ==>     -3   3
 *           / \              / \
 *          -   2           -1   2
 *         / \              / \
 *        0   1            0   1
 *
 * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
 */
module.exports = _curry3(_reduce);


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var Prototype, Class;
Prototype = __webpack_require__(6);
            __webpack_require__(8);
Class =     __webpack_require__(10);
            __webpack_require__(13);
            __webpack_require__(15);
            __webpack_require__(18);
Object.extend(String, {
  interpret: function(value) {
    return value == null ? '' : String(value);
  },
  specialChar: {
    '\b': '\\b',
    '\t': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '\\': '\\\\'
  }
});

Object.extend(String.prototype, (function() {
  var NATIVE_JSON_PARSE_SUPPORT = JSON &&
    typeof JSON.parse === 'function' &&
    JSON.parse('{"test": true}').test;

  function prepareReplacement(replacement) {
    if (Object.isFunction(replacement)) return replacement;
    var template = new Template(replacement);
    return function(match) { return template.evaluate(match) };
  }

  function gsub(pattern, replacement) {
    var result = '', source = this, match;
    replacement = prepareReplacement(replacement);

    if (Object.isString(pattern))
      pattern = RegExp.escape(pattern);

    if (!(pattern.length || pattern.source)) {
      replacement = replacement('');
      return replacement + source.split('').join(replacement) + replacement;
    }

    while (source.length > 0) {
      if (match = source.match(pattern)) {
        result += source.slice(0, match.index);
        result += String.interpret(replacement(match));
        source  = source.slice(match.index + match[0].length);
      } else {
        result += source, source = '';
      }
    }
    return result;
  }

  function sub(pattern, replacement, count) {
    replacement = prepareReplacement(replacement);
    count = Object.isUndefined(count) ? 1 : count;

    return this.gsub(pattern, function(match) {
      if (--count < 0) return match[0];
      return replacement(match);
    });
  }

  function scan(pattern, iterator) {
    this.gsub(pattern, iterator);
    return String(this);
  }

  function truncate(length, truncation) {
    length = length || 30;
    truncation = Object.isUndefined(truncation) ? '...' : truncation;
    return this.length > length ?
      this.slice(0, length - truncation.length) + truncation : String(this);
  }

  function strip() {
    return this.replace(/^\s+/, '').replace(/\s+$/, '');
  }

  function stripTags() {
    return this.replace(/<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?>|<\/\w+>/gi, '');
  }

  function stripScripts() {
    return this.replace(new RegExp(Prototype.ScriptFragment, 'img'), '');
  }

  function extractScripts() {
    var matchAll = new RegExp(Prototype.ScriptFragment, 'img'),
        matchOne = new RegExp(Prototype.ScriptFragment, 'im');
    return (this.match(matchAll) || []).map(function(scriptTag) {
      return (scriptTag.match(matchOne) || ['', ''])[1];
    });
  }

  function evalScripts() {
    return this.extractScripts().map(function(script) { return eval(script) });
  }

  function escapeHTML() {
    return this.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
  }

  function unescapeHTML() {
    return this.stripTags().replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&');
  }


  function toQueryParams(separator) {
    var match = this.strip().match(/([^?#]*)(#.*)?$/);
    if (!match) return { };

    return match[1].split(separator || '&').inject({ }, function(hash, pair) {
      if ((pair = pair.split('='))[0]) {
        var key = decodeURIComponent(pair.shift()),
            value = pair.length > 1 ? pair.join('=') : pair[0];

        if (value != undefined) value = decodeURIComponent(value);

        if (key in hash) {
          if (!Object.isArray(hash[key])) hash[key] = [hash[key]];
          hash[key].push(value);
        }
        else hash[key] = value;
      }
      return hash;
    });
  }

  function toArray() {
    return this.split('');
  }

  function succ() {
    return this.slice(0, this.length - 1) +
      String.fromCharCode(this.charCodeAt(this.length - 1) + 1);
  }

  function times(count) {
    return count < 1 ? '' : new Array(count + 1).join(this);
  }

  function camelize() {
    return this.replace(/-+(.)?/g, function(match, chr) {
      return chr ? chr.toUpperCase() : '';
    });
  }

  function capitalize() {
    return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();
  }

  function underscore() {
    return this.replace(/::/g, '/')
               .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
               .replace(/([a-z\d])([A-Z])/g, '$1_$2')
               .replace(/-/g, '_')
               .toLowerCase();
  }

  function dasherize() {
    return this.replace(/_/g, '-');
  }

  function inspect(useDoubleQuotes) {
    var escapedString = this.replace(/[\x00-\x1f\\]/g, function(character) {
      if (character in String.specialChar) {
        return String.specialChar[character];
      }
      return '\\u00' + character.charCodeAt().toPaddedString(2, 16);
    });
    if (useDoubleQuotes) return '"' + escapedString.replace(/"/g, '\\"') + '"';
    return "'" + escapedString.replace(/'/g, '\\\'') + "'";
  }

  function unfilterJSON(filter) {
    return this.replace(filter || Prototype.JSONFilter, '$1');
  }

  function isJSON() {
    var str = this;
    if (str.blank()) return false;
    str = str.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@');
    str = str.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']');
    str = str.replace(/(?:^|:|,)(?:\s*\[)+/g, '');
    return (/^[\],:{}\s]*$/).test(str);
  }

  function evalJSON(sanitize) {
    var json = this.unfilterJSON(),
        cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    if (cx.test(json)) {
      json = json.replace(cx, function (a) {
        return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      });
    }
    try {
      if (!sanitize || json.isJSON()) return eval('(' + json + ')');
    } catch (e) { }
    throw new SyntaxError('Badly formed JSON string: ' + this.inspect());
  }

  function parseJSON() {
    var json = this.unfilterJSON();
    return JSON.parse(json);
  }

  function include(pattern) {
    return this.indexOf(pattern) > -1;
  }

  function startsWith(pattern) {
    return this.lastIndexOf(pattern, 0) === 0;
  }

  function endsWith(pattern) {
    var d = this.length - pattern.length;
    return d >= 0 && this.indexOf(pattern, d) === d;
  }

  function empty() {
    return this == '';
  }

  function blank() {
    return /^\s*$/.test(this);
  }

  function interpolate(object, pattern) {
    return new Template(this, pattern).evaluate(object);
  }

  return {
    gsub:           gsub,
    sub:            sub,
    scan:           scan,
    truncate:       truncate,
    strip:          String.prototype.trim || strip,
    stripTags:      stripTags,
    stripScripts:   stripScripts,
    extractScripts: extractScripts,
    evalScripts:    evalScripts,
    escapeHTML:     escapeHTML,
    unescapeHTML:   unescapeHTML,
    toQueryParams:  toQueryParams,
    parseQuery:     toQueryParams,
    toArray:        toArray,
    succ:           succ,
    times:          times,
    camelize:       camelize,
    capitalize:     capitalize,
    underscore:     underscore,
    dasherize:      dasherize,
    inspect:        inspect,
    unfilterJSON:   unfilterJSON,
    isJSON:         isJSON,
    evalJSON:       NATIVE_JSON_PARSE_SUPPORT ? parseJSON : evalJSON,
    include:        include,
    startsWith:     startsWith,
    endsWith:       endsWith,
    empty:          empty,
    blank:          blank,
    interpolate:    interpolate
  };
})());

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var Prototype, Class, Template;
Prototype = __webpack_require__(6);
            __webpack_require__(8);
Class =     __webpack_require__(10);
            __webpack_require__(13);
            __webpack_require__(15);
            __webpack_require__(18);
            __webpack_require__(23);
module.exports = Template = Class.create({
  initialize: function(template, pattern) {
    this.template = template.toString();
    this.pattern = pattern || Template.Pattern;
  },

  evaluate: function(object) {
    if (object && Object.isFunction(object.toTemplateReplacements))
      object = object.toTemplateReplacements();

    return this.template.gsub(this.pattern, function(match) {
      if (object == null) return (match[1] + '');

      var before = match[1] || '';
      if (before == '\\') return match[2];

      var ctx = object, expr = match[3],
          pattern = /^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;

      match = pattern.exec(expr);
      if (match == null) return before;

      while (match != null) {
        var comp = match[1].startsWith('[') ? match[2].replace(/\\\\]/g, ']') : match[1];
        ctx = ctx[comp];
        if (null == ctx || '' == match[3]) break;
        expr = expr.substring('[' == match[3] ? match[1].length : match[0].length);
        match = pattern.exec(expr);
      }

      return before + String.interpret(ctx);
    });
  }
});
Template.Pattern = /(^|.|\r|\n)(#\{(.*?)\})/;

/***/ }),
/* 25 */
/***/ (function(module, exports) {

/**
 * Tests whether or not an object is an array.
 *
 * @private
 * @param {*} val The object to test.
 * @return {Boolean} `true` if `val` is an array, `false` otherwise.
 * @example
 *
 *      _isArray([]); //=> true
 *      _isArray(null); //=> false
 *      _isArray({}); //=> false
 */
module.exports = Array.isArray || function _isArray(val) {
  return (val != null &&
          val.length >= 0 &&
          Object.prototype.toString.call(val) === '[object Array]');
};


/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = function _reduced(x) {
  return x && x['@@transducer/reduced'] ? x :
    {
      '@@transducer/value': x,
      '@@transducer/reduced': true
    };
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

!function t(e,r){ true?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports.Raphael=r():e.Raphael=r()}(this,function(){return function(t){function e(i){if(r[i])return r[i].exports;var n=r[i]={exports:{},id:i,loaded:!1};return t[i].call(n.exports,n,n.exports,e),n.loaded=!0,n.exports}var r={};return e.m=t,e.c=r,e.p="",e(0)}([function(t,e,r){var i,n;i=[r(1),r(3),r(4)],n=function(t){return t}.apply(e,i),!(void 0!==n&&(t.exports=n))},function(t,e,r){var i,n;i=[r(2)],n=function(t){function e(r){if(e.is(r,"function"))return w?r():t.on("raphael.DOMload",r);if(e.is(r,Q))return e._engine.create[z](e,r.splice(0,3+e.is(r[0],$))).add(r);var i=Array.prototype.slice.call(arguments,0);if(e.is(i[i.length-1],"function")){var n=i.pop();return w?n.call(e._engine.create[z](e,i)):t.on("raphael.DOMload",function(){n.call(e._engine.create[z](e,i))})}return e._engine.create[z](e,arguments)}function r(t){if("function"==typeof t||Object(t)!==t)return t;var e=new t.constructor;for(var i in t)t[A](i)&&(e[i]=r(t[i]));return e}function i(t,e){for(var r=0,i=t.length;r<i;r++)if(t[r]===e)return t.push(t.splice(r,1)[0])}function n(t,e,r){function n(){var a=Array.prototype.slice.call(arguments,0),s=a.join("␀"),o=n.cache=n.cache||{},l=n.count=n.count||[];return o[A](s)?(i(l,s),r?r(o[s]):o[s]):(l.length>=1e3&&delete o[l.shift()],l.push(s),o[s]=t[z](e,a),r?r(o[s]):o[s])}return n}function a(){return this.hex}function s(t,e){for(var r=[],i=0,n=t.length;n-2*!e>i;i+=2){var a=[{x:+t[i-2],y:+t[i-1]},{x:+t[i],y:+t[i+1]},{x:+t[i+2],y:+t[i+3]},{x:+t[i+4],y:+t[i+5]}];e?i?n-4==i?a[3]={x:+t[0],y:+t[1]}:n-2==i&&(a[2]={x:+t[0],y:+t[1]},a[3]={x:+t[2],y:+t[3]}):a[0]={x:+t[n-2],y:+t[n-1]}:n-4==i?a[3]=a[2]:i||(a[0]={x:+t[i],y:+t[i+1]}),r.push(["C",(-a[0].x+6*a[1].x+a[2].x)/6,(-a[0].y+6*a[1].y+a[2].y)/6,(a[1].x+6*a[2].x-a[3].x)/6,(a[1].y+6*a[2].y-a[3].y)/6,a[2].x,a[2].y])}return r}function o(t,e,r,i,n){var a=-3*e+9*r-9*i+3*n,s=t*a+6*e-12*r+6*i;return t*s-3*e+3*r}function l(t,e,r,i,n,a,s,l,h){null==h&&(h=1),h=h>1?1:h<0?0:h;for(var u=h/2,c=12,f=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],p=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],d=0,g=0;g<c;g++){var v=u*f[g]+u,x=o(v,t,r,n,s),y=o(v,e,i,a,l),m=x*x+y*y;d+=p[g]*Y.sqrt(m)}return u*d}function h(t,e,r,i,n,a,s,o,h){if(!(h<0||l(t,e,r,i,n,a,s,o)<h)){var u=1,c=u/2,f=u-c,p,d=.01;for(p=l(t,e,r,i,n,a,s,o,f);H(p-h)>d;)c/=2,f+=(p<h?1:-1)*c,p=l(t,e,r,i,n,a,s,o,f);return f}}function u(t,e,r,i,n,a,s,o){if(!(W(t,r)<G(n,s)||G(t,r)>W(n,s)||W(e,i)<G(a,o)||G(e,i)>W(a,o))){var l=(t*i-e*r)*(n-s)-(t-r)*(n*o-a*s),h=(t*i-e*r)*(a-o)-(e-i)*(n*o-a*s),u=(t-r)*(a-o)-(e-i)*(n-s);if(u){var c=l/u,f=h/u,p=+c.toFixed(2),d=+f.toFixed(2);if(!(p<+G(t,r).toFixed(2)||p>+W(t,r).toFixed(2)||p<+G(n,s).toFixed(2)||p>+W(n,s).toFixed(2)||d<+G(e,i).toFixed(2)||d>+W(e,i).toFixed(2)||d<+G(a,o).toFixed(2)||d>+W(a,o).toFixed(2)))return{x:c,y:f}}}}function c(t,e){return p(t,e)}function f(t,e){return p(t,e,1)}function p(t,r,i){var n=e.bezierBBox(t),a=e.bezierBBox(r);if(!e.isBBoxIntersect(n,a))return i?0:[];for(var s=l.apply(0,t),o=l.apply(0,r),h=W(~~(s/5),1),c=W(~~(o/5),1),f=[],p=[],d={},g=i?0:[],v=0;v<h+1;v++){var x=e.findDotsAtSegment.apply(e,t.concat(v/h));f.push({x:x.x,y:x.y,t:v/h})}for(v=0;v<c+1;v++)x=e.findDotsAtSegment.apply(e,r.concat(v/c)),p.push({x:x.x,y:x.y,t:v/c});for(v=0;v<h;v++)for(var y=0;y<c;y++){var m=f[v],b=f[v+1],_=p[y],w=p[y+1],k=H(b.x-m.x)<.001?"y":"x",B=H(w.x-_.x)<.001?"y":"x",C=u(m.x,m.y,b.x,b.y,_.x,_.y,w.x,w.y);if(C){if(d[C.x.toFixed(4)]==C.y.toFixed(4))continue;d[C.x.toFixed(4)]=C.y.toFixed(4);var S=m.t+H((C[k]-m[k])/(b[k]-m[k]))*(b.t-m.t),A=_.t+H((C[B]-_[B])/(w[B]-_[B]))*(w.t-_.t);S>=0&&S<=1.001&&A>=0&&A<=1.001&&(i?g++:g.push({x:C.x,y:C.y,t1:G(S,1),t2:G(A,1)}))}}return g}function d(t,r,i){t=e._path2curve(t),r=e._path2curve(r);for(var n,a,s,o,l,h,u,c,f,d,g=i?0:[],v=0,x=t.length;v<x;v++){var y=t[v];if("M"==y[0])n=l=y[1],a=h=y[2];else{"C"==y[0]?(f=[n,a].concat(y.slice(1)),n=f[6],a=f[7]):(f=[n,a,n,a,l,h,l,h],n=l,a=h);for(var m=0,b=r.length;m<b;m++){var _=r[m];if("M"==_[0])s=u=_[1],o=c=_[2];else{"C"==_[0]?(d=[s,o].concat(_.slice(1)),s=d[6],o=d[7]):(d=[s,o,s,o,u,c,u,c],s=u,o=c);var w=p(f,d,i);if(i)g+=w;else{for(var k=0,B=w.length;k<B;k++)w[k].segment1=v,w[k].segment2=m,w[k].bez1=f,w[k].bez2=d;g=g.concat(w)}}}}}return g}function g(t,e,r,i,n,a){null!=t?(this.a=+t,this.b=+e,this.c=+r,this.d=+i,this.e=+n,this.f=+a):(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0)}function v(){return this.x+j+this.y}function x(){return this.x+j+this.y+j+this.width+" × "+this.height}function y(t,e,r,i,n,a){function s(t){return((c*t+u)*t+h)*t}function o(t,e){var r=l(t,e);return((d*r+p)*r+f)*r}function l(t,e){var r,i,n,a,o,l;for(n=t,l=0;l<8;l++){if(a=s(n)-t,H(a)<e)return n;if(o=(3*c*n+2*u)*n+h,H(o)<1e-6)break;n-=a/o}if(r=0,i=1,n=t,n<r)return r;if(n>i)return i;for(;r<i;){if(a=s(n),H(a-t)<e)return n;t>a?r=n:i=n,n=(i-r)/2+r}return n}var h=3*e,u=3*(i-e)-h,c=1-h-u,f=3*r,p=3*(n-r)-f,d=1-f-p;return o(t,1/(200*a))}function m(t,e){var r=[],i={};if(this.ms=e,this.times=1,t){for(var n in t)t[A](n)&&(i[ht(n)]=t[n],r.push(ht(n)));r.sort(Bt)}this.anim=i,this.top=r[r.length-1],this.percents=r}function b(r,i,n,a,s,o){n=ht(n);var l,h,u,c=[],f,p,d,v=r.ms,x={},m={},b={};if(a)for(w=0,B=Ee.length;w<B;w++){var _=Ee[w];if(_.el.id==i.id&&_.anim==r){_.percent!=n?(Ee.splice(w,1),u=1):h=_,i.attr(_.totalOrigin);break}}else a=+m;for(var w=0,B=r.percents.length;w<B;w++){if(r.percents[w]==n||r.percents[w]>a*r.top){n=r.percents[w],p=r.percents[w-1]||0,v=v/r.top*(n-p),f=r.percents[w+1],l=r.anim[n];break}a&&i.attr(r.anim[r.percents[w]])}if(l){if(h)h.initstatus=a,h.start=new Date-h.ms*a;else{for(var C in l)if(l[A](C)&&(pt[A](C)||i.paper.customAttributes[A](C)))switch(x[C]=i.attr(C),null==x[C]&&(x[C]=ft[C]),m[C]=l[C],pt[C]){case $:b[C]=(m[C]-x[C])/v;break;case"colour":x[C]=e.getRGB(x[C]);var S=e.getRGB(m[C]);b[C]={r:(S.r-x[C].r)/v,g:(S.g-x[C].g)/v,b:(S.b-x[C].b)/v};break;case"path":var T=Qt(x[C],m[C]),E=T[1];for(x[C]=T[0],b[C]=[],w=0,B=x[C].length;w<B;w++){b[C][w]=[0];for(var M=1,N=x[C][w].length;M<N;M++)b[C][w][M]=(E[w][M]-x[C][w][M])/v}break;case"transform":var L=i._,z=le(L[C],m[C]);if(z)for(x[C]=z.from,m[C]=z.to,b[C]=[],b[C].real=!0,w=0,B=x[C].length;w<B;w++)for(b[C][w]=[x[C][w][0]],M=1,N=x[C][w].length;M<N;M++)b[C][w][M]=(m[C][w][M]-x[C][w][M])/v;else{var F=i.matrix||new g,R={_:{transform:L.transform},getBBox:function(){return i.getBBox(1)}};x[C]=[F.a,F.b,F.c,F.d,F.e,F.f],se(R,m[C]),m[C]=R._.transform,b[C]=[(R.matrix.a-F.a)/v,(R.matrix.b-F.b)/v,(R.matrix.c-F.c)/v,(R.matrix.d-F.d)/v,(R.matrix.e-F.e)/v,(R.matrix.f-F.f)/v]}break;case"csv":var j=I(l[C])[q](k),D=I(x[C])[q](k);if("clip-rect"==C)for(x[C]=D,b[C]=[],w=D.length;w--;)b[C][w]=(j[w]-x[C][w])/v;m[C]=j;break;default:for(j=[][P](l[C]),D=[][P](x[C]),b[C]=[],w=i.paper.customAttributes[C].length;w--;)b[C][w]=((j[w]||0)-(D[w]||0))/v}var V=l.easing,O=e.easing_formulas[V];if(!O)if(O=I(V).match(st),O&&5==O.length){var Y=O;O=function(t){return y(t,+Y[1],+Y[2],+Y[3],+Y[4],v)}}else O=St;if(d=l.start||r.start||+new Date,_={anim:r,percent:n,timestamp:d,start:d+(r.del||0),status:0,initstatus:a||0,stop:!1,ms:v,easing:O,from:x,diff:b,to:m,el:i,callback:l.callback,prev:p,next:f,repeat:o||r.times,origin:i.attr(),totalOrigin:s},Ee.push(_),a&&!h&&!u&&(_.stop=!0,_.start=new Date-v*a,1==Ee.length))return Ne();u&&(_.start=new Date-_.ms*a),1==Ee.length&&Me(Ne)}t("raphael.anim.start."+i.id,i,r)}}function _(t){for(var e=0;e<Ee.length;e++)Ee[e].el.paper==t&&Ee.splice(e--,1)}e.version="2.2.0",e.eve=t;var w,k=/[, ]+/,B={circle:1,rect:1,path:1,ellipse:1,text:1,image:1},C=/\{(\d+)\}/g,S="prototype",A="hasOwnProperty",T={doc:document,win:window},E={was:Object.prototype[A].call(T.win,"Raphael"),is:T.win.Raphael},M=function(){this.ca=this.customAttributes={}},N,L="appendChild",z="apply",P="concat",F="ontouchstart"in T.win||T.win.DocumentTouch&&T.doc instanceof DocumentTouch,R="",j=" ",I=String,q="split",D="click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel"[q](j),V={mousedown:"touchstart",mousemove:"touchmove",mouseup:"touchend"},O=I.prototype.toLowerCase,Y=Math,W=Y.max,G=Y.min,H=Y.abs,X=Y.pow,U=Y.PI,$="number",Z="string",Q="array",J="toString",K="fill",tt=Object.prototype.toString,et={},rt="push",it=e._ISURL=/^url\(['"]?(.+?)['"]?\)$/i,nt=/^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\))\s*$/i,at={NaN:1,Infinity:1,"-Infinity":1},st=/^(?:cubic-)?bezier\(([^,]+),([^,]+),([^,]+),([^\)]+)\)/,ot=Y.round,lt="setAttribute",ht=parseFloat,ut=parseInt,ct=I.prototype.toUpperCase,ft=e._availableAttrs={"arrow-end":"none","arrow-start":"none",blur:0,"clip-rect":"0 0 1e9 1e9",cursor:"default",cx:0,cy:0,fill:"#fff","fill-opacity":1,font:'10px "Arial"',"font-family":'"Arial"',"font-size":"10","font-style":"normal","font-weight":400,gradient:0,height:0,href:"http://raphaeljs.com/","letter-spacing":0,opacity:1,path:"M0,0",r:0,rx:0,ry:0,src:"",stroke:"#000","stroke-dasharray":"","stroke-linecap":"butt","stroke-linejoin":"butt","stroke-miterlimit":0,"stroke-opacity":1,"stroke-width":1,target:"_blank","text-anchor":"middle",title:"Raphael",transform:"",width:0,x:0,y:0,"class":""},pt=e._availableAnimAttrs={blur:$,"clip-rect":"csv",cx:$,cy:$,fill:"colour","fill-opacity":$,"font-size":$,height:$,opacity:$,path:"path",r:$,rx:$,ry:$,stroke:"colour","stroke-opacity":$,"stroke-width":$,transform:"transform",width:$,x:$,y:$},dt=/[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]/g,gt=/[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/,vt={hs:1,rg:1},xt=/,?([achlmqrstvxz]),?/gi,yt=/([achlmrqstvz])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/gi,mt=/([rstm])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/gi,bt=/(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/gi,_t=e._radial_gradient=/^r(?:\(([^,]+?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*([^\)]+?)\))?/,wt={},kt=function(t,e){return t.key-e.key},Bt=function(t,e){return ht(t)-ht(e)},Ct=function(){},St=function(t){return t},At=e._rectPath=function(t,e,r,i,n){return n?[["M",t+n,e],["l",r-2*n,0],["a",n,n,0,0,1,n,n],["l",0,i-2*n],["a",n,n,0,0,1,-n,n],["l",2*n-r,0],["a",n,n,0,0,1,-n,-n],["l",0,2*n-i],["a",n,n,0,0,1,n,-n],["z"]]:[["M",t,e],["l",r,0],["l",0,i],["l",-r,0],["z"]]},Tt=function(t,e,r,i){return null==i&&(i=r),[["M",t,e],["m",0,-i],["a",r,i,0,1,1,0,2*i],["a",r,i,0,1,1,0,-2*i],["z"]]},Et=e._getPath={path:function(t){return t.attr("path")},circle:function(t){var e=t.attrs;return Tt(e.cx,e.cy,e.r)},ellipse:function(t){var e=t.attrs;return Tt(e.cx,e.cy,e.rx,e.ry)},rect:function(t){var e=t.attrs;return At(e.x,e.y,e.width,e.height,e.r)},image:function(t){var e=t.attrs;return At(e.x,e.y,e.width,e.height)},text:function(t){var e=t._getBBox();return At(e.x,e.y,e.width,e.height)},set:function(t){var e=t._getBBox();return At(e.x,e.y,e.width,e.height)}},Mt=e.mapPath=function(t,e){if(!e)return t;var r,i,n,a,s,o,l;for(t=Qt(t),n=0,s=t.length;n<s;n++)for(l=t[n],a=1,o=l.length;a<o;a+=2)r=e.x(l[a],l[a+1]),i=e.y(l[a],l[a+1]),l[a]=r,l[a+1]=i;return t};if(e._g=T,e.type=T.win.SVGAngle||T.doc.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")?"SVG":"VML","VML"==e.type){var Nt=T.doc.createElement("div"),Lt;if(Nt.innerHTML='<v:shape adj="1"/>',Lt=Nt.firstChild,Lt.style.behavior="url(#default#VML)",!Lt||"object"!=typeof Lt.adj)return e.type=R;Nt=null}e.svg=!(e.vml="VML"==e.type),e._Paper=M,e.fn=N=M.prototype=e.prototype,e._id=0,e.is=function(t,e){return e=O.call(e),"finite"==e?!at[A](+t):"array"==e?t instanceof Array:"null"==e&&null===t||e==typeof t&&null!==t||"object"==e&&t===Object(t)||"array"==e&&Array.isArray&&Array.isArray(t)||tt.call(t).slice(8,-1).toLowerCase()==e},e.angle=function(t,r,i,n,a,s){if(null==a){var o=t-i,l=r-n;return o||l?(180+180*Y.atan2(-l,-o)/U+360)%360:0}return e.angle(t,r,a,s)-e.angle(i,n,a,s)},e.rad=function(t){return t%360*U/180},e.deg=function(t){return Math.round(180*t/U%360*1e3)/1e3},e.snapTo=function(t,r,i){if(i=e.is(i,"finite")?i:10,e.is(t,Q)){for(var n=t.length;n--;)if(H(t[n]-r)<=i)return t[n]}else{t=+t;var a=r%t;if(a<i)return r-a;if(a>t-i)return r-a+t}return r};var zt=e.createUUID=function(t,e){return function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(t,e).toUpperCase()}}(/[xy]/g,function(t){var e=16*Y.random()|0,r="x"==t?e:3&e|8;return r.toString(16)});e.setWindow=function(r){t("raphael.setWindow",e,T.win,r),T.win=r,T.doc=T.win.document,e._engine.initWin&&e._engine.initWin(T.win)};var Pt=function(t){if(e.vml){var r=/^\s+|\s+$/g,i;try{var a=new ActiveXObject("htmlfile");a.write("<body>"),a.close(),i=a.body}catch(s){i=createPopup().document.body}var o=i.createTextRange();Pt=n(function(t){try{i.style.color=I(t).replace(r,R);var e=o.queryCommandValue("ForeColor");return e=(255&e)<<16|65280&e|(16711680&e)>>>16,"#"+("000000"+e.toString(16)).slice(-6)}catch(n){return"none"}})}else{var l=T.doc.createElement("i");l.title="Raphaël Colour Picker",l.style.display="none",T.doc.body.appendChild(l),Pt=n(function(t){return l.style.color=t,T.doc.defaultView.getComputedStyle(l,R).getPropertyValue("color")})}return Pt(t)},Ft=function(){return"hsb("+[this.h,this.s,this.b]+")"},Rt=function(){return"hsl("+[this.h,this.s,this.l]+")"},jt=function(){return this.hex},It=function(t,r,i){if(null==r&&e.is(t,"object")&&"r"in t&&"g"in t&&"b"in t&&(i=t.b,r=t.g,t=t.r),null==r&&e.is(t,Z)){var n=e.getRGB(t);t=n.r,r=n.g,i=n.b}return(t>1||r>1||i>1)&&(t/=255,r/=255,i/=255),[t,r,i]},qt=function(t,r,i,n){t*=255,r*=255,i*=255;var a={r:t,g:r,b:i,hex:e.rgb(t,r,i),toString:jt};return e.is(n,"finite")&&(a.opacity=n),a};e.color=function(t){var r;return e.is(t,"object")&&"h"in t&&"s"in t&&"b"in t?(r=e.hsb2rgb(t),t.r=r.r,t.g=r.g,t.b=r.b,t.hex=r.hex):e.is(t,"object")&&"h"in t&&"s"in t&&"l"in t?(r=e.hsl2rgb(t),t.r=r.r,t.g=r.g,t.b=r.b,t.hex=r.hex):(e.is(t,"string")&&(t=e.getRGB(t)),e.is(t,"object")&&"r"in t&&"g"in t&&"b"in t?(r=e.rgb2hsl(t),t.h=r.h,t.s=r.s,t.l=r.l,r=e.rgb2hsb(t),t.v=r.b):(t={hex:"none"},t.r=t.g=t.b=t.h=t.s=t.v=t.l=-1)),t.toString=jt,t},e.hsb2rgb=function(t,e,r,i){this.is(t,"object")&&"h"in t&&"s"in t&&"b"in t&&(r=t.b,e=t.s,i=t.o,t=t.h),t*=360;var n,a,s,o,l;return t=t%360/60,l=r*e,o=l*(1-H(t%2-1)),n=a=s=r-l,t=~~t,n+=[l,o,0,0,o,l][t],a+=[o,l,l,o,0,0][t],s+=[0,0,o,l,l,o][t],qt(n,a,s,i)},e.hsl2rgb=function(t,e,r,i){this.is(t,"object")&&"h"in t&&"s"in t&&"l"in t&&(r=t.l,e=t.s,t=t.h),(t>1||e>1||r>1)&&(t/=360,e/=100,r/=100),t*=360;var n,a,s,o,l;return t=t%360/60,l=2*e*(r<.5?r:1-r),o=l*(1-H(t%2-1)),n=a=s=r-l/2,t=~~t,n+=[l,o,0,0,o,l][t],a+=[o,l,l,o,0,0][t],s+=[0,0,o,l,l,o][t],qt(n,a,s,i)},e.rgb2hsb=function(t,e,r){r=It(t,e,r),t=r[0],e=r[1],r=r[2];var i,n,a,s;return a=W(t,e,r),s=a-G(t,e,r),i=0==s?null:a==t?(e-r)/s:a==e?(r-t)/s+2:(t-e)/s+4,i=(i+360)%6*60/360,n=0==s?0:s/a,{h:i,s:n,b:a,toString:Ft}},e.rgb2hsl=function(t,e,r){r=It(t,e,r),t=r[0],e=r[1],r=r[2];var i,n,a,s,o,l;return s=W(t,e,r),o=G(t,e,r),l=s-o,i=0==l?null:s==t?(e-r)/l:s==e?(r-t)/l+2:(t-e)/l+4,i=(i+360)%6*60/360,a=(s+o)/2,n=0==l?0:a<.5?l/(2*a):l/(2-2*a),{h:i,s:n,l:a,toString:Rt}},e._path2string=function(){return this.join(",").replace(xt,"$1")};var Dt=e._preload=function(t,e){var r=T.doc.createElement("img");r.style.cssText="position:absolute;left:-9999em;top:-9999em",r.onload=function(){e.call(this),this.onload=null,T.doc.body.removeChild(this)},r.onerror=function(){T.doc.body.removeChild(this)},T.doc.body.appendChild(r),r.src=t};e.getRGB=n(function(t){if(!t||(t=I(t)).indexOf("-")+1)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:a};if("none"==t)return{r:-1,g:-1,b:-1,hex:"none",toString:a};!(vt[A](t.toLowerCase().substring(0,2))||"#"==t.charAt())&&(t=Pt(t));var r,i,n,s,o,l,h,u=t.match(nt);return u?(u[2]&&(s=ut(u[2].substring(5),16),n=ut(u[2].substring(3,5),16),i=ut(u[2].substring(1,3),16)),u[3]&&(s=ut((l=u[3].charAt(3))+l,16),n=ut((l=u[3].charAt(2))+l,16),i=ut((l=u[3].charAt(1))+l,16)),u[4]&&(h=u[4][q](gt),i=ht(h[0]),"%"==h[0].slice(-1)&&(i*=2.55),n=ht(h[1]),"%"==h[1].slice(-1)&&(n*=2.55),s=ht(h[2]),"%"==h[2].slice(-1)&&(s*=2.55),"rgba"==u[1].toLowerCase().slice(0,4)&&(o=ht(h[3])),h[3]&&"%"==h[3].slice(-1)&&(o/=100)),u[5]?(h=u[5][q](gt),i=ht(h[0]),"%"==h[0].slice(-1)&&(i*=2.55),n=ht(h[1]),"%"==h[1].slice(-1)&&(n*=2.55),s=ht(h[2]),"%"==h[2].slice(-1)&&(s*=2.55),("deg"==h[0].slice(-3)||"°"==h[0].slice(-1))&&(i/=360),"hsba"==u[1].toLowerCase().slice(0,4)&&(o=ht(h[3])),h[3]&&"%"==h[3].slice(-1)&&(o/=100),e.hsb2rgb(i,n,s,o)):u[6]?(h=u[6][q](gt),i=ht(h[0]),"%"==h[0].slice(-1)&&(i*=2.55),n=ht(h[1]),"%"==h[1].slice(-1)&&(n*=2.55),s=ht(h[2]),"%"==h[2].slice(-1)&&(s*=2.55),("deg"==h[0].slice(-3)||"°"==h[0].slice(-1))&&(i/=360),"hsla"==u[1].toLowerCase().slice(0,4)&&(o=ht(h[3])),h[3]&&"%"==h[3].slice(-1)&&(o/=100),e.hsl2rgb(i,n,s,o)):(u={r:i,g:n,b:s,toString:a},u.hex="#"+(16777216|s|n<<8|i<<16).toString(16).slice(1),e.is(o,"finite")&&(u.opacity=o),u)):{r:-1,g:-1,b:-1,hex:"none",error:1,toString:a}},e),e.hsb=n(function(t,r,i){return e.hsb2rgb(t,r,i).hex}),e.hsl=n(function(t,r,i){return e.hsl2rgb(t,r,i).hex}),e.rgb=n(function(t,e,r){function i(t){return t+.5|0}return"#"+(16777216|i(r)|i(e)<<8|i(t)<<16).toString(16).slice(1)}),e.getColor=function(t){var e=this.getColor.start=this.getColor.start||{h:0,s:1,b:t||.75},r=this.hsb2rgb(e.h,e.s,e.b);return e.h+=.075,e.h>1&&(e.h=0,e.s-=.2,e.s<=0&&(this.getColor.start={h:0,s:1,b:e.b})),r.hex},e.getColor.reset=function(){delete this.start},e.parsePathString=function(t){if(!t)return null;var r=Vt(t);if(r.arr)return Yt(r.arr);var i={a:7,c:6,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,z:0},n=[];return e.is(t,Q)&&e.is(t[0],Q)&&(n=Yt(t)),n.length||I(t).replace(yt,function(t,e,r){var a=[],s=e.toLowerCase();if(r.replace(bt,function(t,e){e&&a.push(+e)}),"m"==s&&a.length>2&&(n.push([e][P](a.splice(0,2))),s="l",e="m"==e?"l":"L"),"r"==s)n.push([e][P](a));else for(;a.length>=i[s]&&(n.push([e][P](a.splice(0,i[s]))),i[s]););}),n.toString=e._path2string,r.arr=Yt(n),n},e.parseTransformString=n(function(t){if(!t)return null;var r={r:3,s:4,t:2,m:6},i=[];return e.is(t,Q)&&e.is(t[0],Q)&&(i=Yt(t)),i.length||I(t).replace(mt,function(t,e,r){var n=[],a=O.call(e);r.replace(bt,function(t,e){e&&n.push(+e)}),i.push([e][P](n))}),i.toString=e._path2string,i});var Vt=function(t){var e=Vt.ps=Vt.ps||{};return e[t]?e[t].sleep=100:e[t]={sleep:100},setTimeout(function(){for(var r in e)e[A](r)&&r!=t&&(e[r].sleep--,!e[r].sleep&&delete e[r])}),e[t]};e.findDotsAtSegment=function(t,e,r,i,n,a,s,o,l){var h=1-l,u=X(h,3),c=X(h,2),f=l*l,p=f*l,d=u*t+3*c*l*r+3*h*l*l*n+p*s,g=u*e+3*c*l*i+3*h*l*l*a+p*o,v=t+2*l*(r-t)+f*(n-2*r+t),x=e+2*l*(i-e)+f*(a-2*i+e),y=r+2*l*(n-r)+f*(s-2*n+r),m=i+2*l*(a-i)+f*(o-2*a+i),b=h*t+l*r,_=h*e+l*i,w=h*n+l*s,k=h*a+l*o,B=90-180*Y.atan2(v-y,x-m)/U;return(v>y||x<m)&&(B+=180),{x:d,y:g,m:{x:v,y:x},n:{x:y,y:m},start:{x:b,y:_},end:{x:w,y:k},alpha:B}},e.bezierBBox=function(t,r,i,n,a,s,o,l){e.is(t,"array")||(t=[t,r,i,n,a,s,o,l]);var h=Zt.apply(null,t);return{x:h.min.x,y:h.min.y,x2:h.max.x,y2:h.max.y,width:h.max.x-h.min.x,height:h.max.y-h.min.y}},e.isPointInsideBBox=function(t,e,r){return e>=t.x&&e<=t.x2&&r>=t.y&&r<=t.y2},e.isBBoxIntersect=function(t,r){var i=e.isPointInsideBBox;return i(r,t.x,t.y)||i(r,t.x2,t.y)||i(r,t.x,t.y2)||i(r,t.x2,t.y2)||i(t,r.x,r.y)||i(t,r.x2,r.y)||i(t,r.x,r.y2)||i(t,r.x2,r.y2)||(t.x<r.x2&&t.x>r.x||r.x<t.x2&&r.x>t.x)&&(t.y<r.y2&&t.y>r.y||r.y<t.y2&&r.y>t.y)},e.pathIntersection=function(t,e){return d(t,e)},e.pathIntersectionNumber=function(t,e){return d(t,e,1)},e.isPointInsidePath=function(t,r,i){var n=e.pathBBox(t);return e.isPointInsideBBox(n,r,i)&&d(t,[["M",r,i],["H",n.x2+10]],1)%2==1},e._removedFactory=function(e){return function(){t("raphael.log",null,"Raphaël: you are calling to method “"+e+"” of removed object",e)}};var Ot=e.pathBBox=function(t){var e=Vt(t);if(e.bbox)return r(e.bbox);if(!t)return{x:0,y:0,width:0,height:0,x2:0,y2:0};t=Qt(t);for(var i=0,n=0,a=[],s=[],o,l=0,h=t.length;l<h;l++)if(o=t[l],"M"==o[0])i=o[1],n=o[2],a.push(i),s.push(n);else{var u=Zt(i,n,o[1],o[2],o[3],o[4],o[5],o[6]);a=a[P](u.min.x,u.max.x),s=s[P](u.min.y,u.max.y),i=o[5],n=o[6]}var c=G[z](0,a),f=G[z](0,s),p=W[z](0,a),d=W[z](0,s),g=p-c,v=d-f,x={x:c,y:f,x2:p,y2:d,width:g,height:v,cx:c+g/2,cy:f+v/2};return e.bbox=r(x),x},Yt=function(t){var i=r(t);return i.toString=e._path2string,i},Wt=e._pathToRelative=function(t){var r=Vt(t);if(r.rel)return Yt(r.rel);e.is(t,Q)&&e.is(t&&t[0],Q)||(t=e.parsePathString(t));var i=[],n=0,a=0,s=0,o=0,l=0;"M"==t[0][0]&&(n=t[0][1],a=t[0][2],s=n,o=a,l++,i.push(["M",n,a]));for(var h=l,u=t.length;h<u;h++){var c=i[h]=[],f=t[h];if(f[0]!=O.call(f[0]))switch(c[0]=O.call(f[0]),c[0]){case"a":c[1]=f[1],c[2]=f[2],c[3]=f[3],c[4]=f[4],c[5]=f[5],c[6]=+(f[6]-n).toFixed(3),c[7]=+(f[7]-a).toFixed(3);break;case"v":c[1]=+(f[1]-a).toFixed(3);break;case"m":s=f[1],o=f[2];default:for(var p=1,d=f.length;p<d;p++)c[p]=+(f[p]-(p%2?n:a)).toFixed(3)}else{c=i[h]=[],"m"==f[0]&&(s=f[1]+n,o=f[2]+a);for(var g=0,v=f.length;g<v;g++)i[h][g]=f[g]}var x=i[h].length;switch(i[h][0]){case"z":n=s,a=o;break;case"h":n+=+i[h][x-1];break;case"v":a+=+i[h][x-1];break;default:n+=+i[h][x-2],a+=+i[h][x-1]}}return i.toString=e._path2string,r.rel=Yt(i),i},Gt=e._pathToAbsolute=function(t){var r=Vt(t);if(r.abs)return Yt(r.abs);if(e.is(t,Q)&&e.is(t&&t[0],Q)||(t=e.parsePathString(t)),!t||!t.length)return[["M",0,0]];var i=[],n=0,a=0,o=0,l=0,h=0;"M"==t[0][0]&&(n=+t[0][1],a=+t[0][2],o=n,l=a,h++,i[0]=["M",n,a]);for(var u=3==t.length&&"M"==t[0][0]&&"R"==t[1][0].toUpperCase()&&"Z"==t[2][0].toUpperCase(),c,f,p=h,d=t.length;p<d;p++){if(i.push(c=[]),f=t[p],f[0]!=ct.call(f[0]))switch(c[0]=ct.call(f[0]),c[0]){case"A":c[1]=f[1],c[2]=f[2],c[3]=f[3],c[4]=f[4],c[5]=f[5],c[6]=+(f[6]+n),c[7]=+(f[7]+a);break;case"V":c[1]=+f[1]+a;break;case"H":c[1]=+f[1]+n;break;case"R":for(var g=[n,a][P](f.slice(1)),v=2,x=g.length;v<x;v++)g[v]=+g[v]+n,g[++v]=+g[v]+a;i.pop(),i=i[P](s(g,u));break;case"M":o=+f[1]+n,l=+f[2]+a;default:for(v=1,x=f.length;v<x;v++)c[v]=+f[v]+(v%2?n:a)}else if("R"==f[0])g=[n,a][P](f.slice(1)),i.pop(),i=i[P](s(g,u)),c=["R"][P](f.slice(-2));else for(var y=0,m=f.length;y<m;y++)c[y]=f[y];switch(c[0]){case"Z":n=o,a=l;break;case"H":n=c[1];break;case"V":a=c[1];break;case"M":o=c[c.length-2],l=c[c.length-1];default:n=c[c.length-2],a=c[c.length-1]}}return i.toString=e._path2string,r.abs=Yt(i),i},Ht=function(t,e,r,i){return[t,e,r,i,r,i]},Xt=function(t,e,r,i,n,a){var s=1/3,o=2/3;return[s*t+o*r,s*e+o*i,s*n+o*r,s*a+o*i,n,a]},Ut=function(t,e,r,i,a,s,o,l,h,u){var c=120*U/180,f=U/180*(+a||0),p=[],d,g=n(function(t,e,r){var i=t*Y.cos(r)-e*Y.sin(r),n=t*Y.sin(r)+e*Y.cos(r);return{x:i,y:n}});if(u)S=u[0],A=u[1],B=u[2],C=u[3];else{d=g(t,e,-f),t=d.x,e=d.y,d=g(l,h,-f),l=d.x,h=d.y;var v=Y.cos(U/180*a),x=Y.sin(U/180*a),y=(t-l)/2,m=(e-h)/2,b=y*y/(r*r)+m*m/(i*i);b>1&&(b=Y.sqrt(b),r=b*r,i=b*i);var _=r*r,w=i*i,k=(s==o?-1:1)*Y.sqrt(H((_*w-_*m*m-w*y*y)/(_*m*m+w*y*y))),B=k*r*m/i+(t+l)/2,C=k*-i*y/r+(e+h)/2,S=Y.asin(((e-C)/i).toFixed(9)),A=Y.asin(((h-C)/i).toFixed(9));S=t<B?U-S:S,A=l<B?U-A:A,S<0&&(S=2*U+S),A<0&&(A=2*U+A),o&&S>A&&(S-=2*U),!o&&A>S&&(A-=2*U)}var T=A-S;if(H(T)>c){var E=A,M=l,N=h;A=S+c*(o&&A>S?1:-1),l=B+r*Y.cos(A),h=C+i*Y.sin(A),p=Ut(l,h,r,i,a,0,o,M,N,[A,E,B,C])}T=A-S;var L=Y.cos(S),z=Y.sin(S),F=Y.cos(A),R=Y.sin(A),j=Y.tan(T/4),I=4/3*r*j,D=4/3*i*j,V=[t,e],O=[t+I*z,e-D*L],W=[l+I*R,h-D*F],G=[l,h];if(O[0]=2*V[0]-O[0],O[1]=2*V[1]-O[1],u)return[O,W,G][P](p);p=[O,W,G][P](p).join()[q](",");for(var X=[],$=0,Z=p.length;$<Z;$++)X[$]=$%2?g(p[$-1],p[$],f).y:g(p[$],p[$+1],f).x;return X},$t=function(t,e,r,i,n,a,s,o,l){var h=1-l;return{x:X(h,3)*t+3*X(h,2)*l*r+3*h*l*l*n+X(l,3)*s,y:X(h,3)*e+3*X(h,2)*l*i+3*h*l*l*a+X(l,3)*o}},Zt=n(function(t,e,r,i,n,a,s,o){var l=n-2*r+t-(s-2*n+r),h=2*(r-t)-2*(n-r),u=t-r,c=(-h+Y.sqrt(h*h-4*l*u))/2/l,f=(-h-Y.sqrt(h*h-4*l*u))/2/l,p=[e,o],d=[t,s],g;return H(c)>"1e12"&&(c=.5),H(f)>"1e12"&&(f=.5),c>0&&c<1&&(g=$t(t,e,r,i,n,a,s,o,c),d.push(g.x),p.push(g.y)),f>0&&f<1&&(g=$t(t,e,r,i,n,a,s,o,f),d.push(g.x),p.push(g.y)),l=a-2*i+e-(o-2*a+i),h=2*(i-e)-2*(a-i),u=e-i,c=(-h+Y.sqrt(h*h-4*l*u))/2/l,f=(-h-Y.sqrt(h*h-4*l*u))/2/l,H(c)>"1e12"&&(c=.5),H(f)>"1e12"&&(f=.5),c>0&&c<1&&(g=$t(t,e,r,i,n,a,s,o,c),d.push(g.x),p.push(g.y)),f>0&&f<1&&(g=$t(t,e,r,i,n,a,s,o,f),d.push(g.x),p.push(g.y)),{min:{x:G[z](0,d),y:G[z](0,p)},max:{x:W[z](0,d),y:W[z](0,p)}}}),Qt=e._path2curve=n(function(t,e){var r=!e&&Vt(t);if(!e&&r.curve)return Yt(r.curve);for(var i=Gt(t),n=e&&Gt(e),a={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},s={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},o=(function(t,e,r){var i,n,a={T:1,Q:1};if(!t)return["C",e.x,e.y,e.x,e.y,e.x,e.y];switch(!(t[0]in a)&&(e.qx=e.qy=null),t[0]){case"M":e.X=t[1],e.Y=t[2];break;case"A":t=["C"][P](Ut[z](0,[e.x,e.y][P](t.slice(1))));break;case"S":"C"==r||"S"==r?(i=2*e.x-e.bx,n=2*e.y-e.by):(i=e.x,n=e.y),t=["C",i,n][P](t.slice(1));break;case"T":"Q"==r||"T"==r?(e.qx=2*e.x-e.qx,e.qy=2*e.y-e.qy):(e.qx=e.x,e.qy=e.y),t=["C"][P](Xt(e.x,e.y,e.qx,e.qy,t[1],t[2]));break;case"Q":e.qx=t[1],e.qy=t[2],t=["C"][P](Xt(e.x,e.y,t[1],t[2],t[3],t[4]));break;case"L":t=["C"][P](Ht(e.x,e.y,t[1],t[2]));break;case"H":t=["C"][P](Ht(e.x,e.y,t[1],e.y));break;case"V":t=["C"][P](Ht(e.x,e.y,e.x,t[1]));break;case"Z":t=["C"][P](Ht(e.x,e.y,e.X,e.Y))}return t}),l=function(t,e){if(t[e].length>7){t[e].shift();for(var r=t[e];r.length;)u[e]="A",n&&(c[e]="A"),t.splice(e++,0,["C"][P](r.splice(0,6)));t.splice(e,1),g=W(i.length,n&&n.length||0)}},h=function(t,e,r,a,s){t&&e&&"M"==t[s][0]&&"M"!=e[s][0]&&(e.splice(s,0,["M",a.x,a.y]),r.bx=0,r.by=0,r.x=t[s][1],r.y=t[s][2],g=W(i.length,n&&n.length||0))},u=[],c=[],f="",p="",d=0,g=W(i.length,n&&n.length||0);d<g;d++){i[d]&&(f=i[d][0]),"C"!=f&&(u[d]=f,d&&(p=u[d-1])),i[d]=o(i[d],a,p),"A"!=u[d]&&"C"==f&&(u[d]="C"),l(i,d),n&&(n[d]&&(f=n[d][0]),"C"!=f&&(c[d]=f,d&&(p=c[d-1])),n[d]=o(n[d],s,p),"A"!=c[d]&&"C"==f&&(c[d]="C"),l(n,d)),h(i,n,a,s,d),h(n,i,s,a,d);var v=i[d],x=n&&n[d],y=v.length,m=n&&x.length;a.x=v[y-2],a.y=v[y-1],a.bx=ht(v[y-4])||a.x,a.by=ht(v[y-3])||a.y,s.bx=n&&(ht(x[m-4])||s.x),s.by=n&&(ht(x[m-3])||s.y),s.x=n&&x[m-2],s.y=n&&x[m-1]}return n||(r.curve=Yt(i)),n?[i,n]:i},null,Yt),Jt=e._parseDots=n(function(t){for(var r=[],i=0,n=t.length;i<n;i++){var a={},s=t[i].match(/^([^:]*):?([\d\.]*)/);if(a.color=e.getRGB(s[1]),a.color.error)return null;a.opacity=a.color.opacity,a.color=a.color.hex,s[2]&&(a.offset=s[2]+"%"),r.push(a)}for(i=1,n=r.length-1;i<n;i++)if(!r[i].offset){for(var o=ht(r[i-1].offset||0),l=0,h=i+1;h<n;h++)if(r[h].offset){l=r[h].offset;break}l||(l=100,h=n),l=ht(l);for(var u=(l-o)/(h-i+1);i<h;i++)o+=u,r[i].offset=o+"%"}return r}),Kt=e._tear=function(t,e){t==e.top&&(e.top=t.prev),t==e.bottom&&(e.bottom=t.next),t.next&&(t.next.prev=t.prev),t.prev&&(t.prev.next=t.next)},te=e._tofront=function(t,e){e.top!==t&&(Kt(t,e),t.next=null,t.prev=e.top,e.top.next=t,e.top=t)},ee=e._toback=function(t,e){e.bottom!==t&&(Kt(t,e),t.next=e.bottom,t.prev=null,e.bottom.prev=t,e.bottom=t)},re=e._insertafter=function(t,e,r){Kt(t,r),e==r.top&&(r.top=t),e.next&&(e.next.prev=t),t.next=e.next,t.prev=e,e.next=t},ie=e._insertbefore=function(t,e,r){Kt(t,r),e==r.bottom&&(r.bottom=t),e.prev&&(e.prev.next=t),t.prev=e.prev,e.prev=t,t.next=e},ne=e.toMatrix=function(t,e){var r=Ot(t),i={_:{transform:R},getBBox:function(){return r}};return se(i,e),i.matrix},ae=e.transformPath=function(t,e){return Mt(t,ne(t,e))},se=e._extractTransform=function(t,r){if(null==r)return t._.transform;r=I(r).replace(/\.{3}|\u2026/g,t._.transform||R);var i=e.parseTransformString(r),n=0,a=0,s=0,o=1,l=1,h=t._,u=new g;if(h.transform=i||[],i)for(var c=0,f=i.length;c<f;c++){var p=i[c],d=p.length,v=I(p[0]).toLowerCase(),x=p[0]!=v,y=x?u.invert():0,m,b,_,w,k;"t"==v&&3==d?x?(m=y.x(0,0),b=y.y(0,0),_=y.x(p[1],p[2]),w=y.y(p[1],p[2]),u.translate(_-m,w-b)):u.translate(p[1],p[2]):"r"==v?2==d?(k=k||t.getBBox(1),u.rotate(p[1],k.x+k.width/2,k.y+k.height/2),n+=p[1]):4==d&&(x?(_=y.x(p[2],p[3]),w=y.y(p[2],p[3]),u.rotate(p[1],_,w)):u.rotate(p[1],p[2],p[3]),n+=p[1]):"s"==v?2==d||3==d?(k=k||t.getBBox(1),u.scale(p[1],p[d-1],k.x+k.width/2,k.y+k.height/2),o*=p[1],l*=p[d-1]):5==d&&(x?(_=y.x(p[3],p[4]),w=y.y(p[3],p[4]),u.scale(p[1],p[2],_,w)):u.scale(p[1],p[2],p[3],p[4]),o*=p[1],l*=p[2]):"m"==v&&7==d&&u.add(p[1],p[2],p[3],p[4],p[5],p[6]),h.dirtyT=1,t.matrix=u}t.matrix=u,h.sx=o,h.sy=l,h.deg=n,h.dx=a=u.e,h.dy=s=u.f,1==o&&1==l&&!n&&h.bbox?(h.bbox.x+=+a,h.bbox.y+=+s):h.dirtyT=1},oe=function(t){var e=t[0];switch(e.toLowerCase()){case"t":return[e,0,0];case"m":return[e,1,0,0,1,0,0];case"r":return 4==t.length?[e,0,t[2],t[3]]:[e,0];case"s":return 5==t.length?[e,1,1,t[3],t[4]]:3==t.length?[e,1,1]:[e,1]}},le=e._equaliseTransform=function(t,r){r=I(r).replace(/\.{3}|\u2026/g,t),t=e.parseTransformString(t)||[],r=e.parseTransformString(r)||[];for(var i=W(t.length,r.length),n=[],a=[],s=0,o,l,h,u;s<i;s++){if(h=t[s]||oe(r[s]),u=r[s]||oe(h),h[0]!=u[0]||"r"==h[0].toLowerCase()&&(h[2]!=u[2]||h[3]!=u[3])||"s"==h[0].toLowerCase()&&(h[3]!=u[3]||h[4]!=u[4]))return;for(n[s]=[],a[s]=[],o=0,l=W(h.length,u.length);o<l;o++)o in h&&(n[s][o]=h[o]),o in u&&(a[s][o]=u[o])}return{from:n,to:a}};e._getContainer=function(t,r,i,n){var a;if(a=null!=n||e.is(t,"object")?t:T.doc.getElementById(t),null!=a)return a.tagName?null==r?{container:a,width:a.style.pixelWidth||a.offsetWidth,height:a.style.pixelHeight||a.offsetHeight}:{container:a,width:r,height:i}:{container:1,x:t,y:r,width:i,height:n}},e.pathToRelative=Wt,e._engine={},e.path2curve=Qt,e.matrix=function(t,e,r,i,n,a){return new g(t,e,r,i,n,a)},function(t){function r(t){return t[0]*t[0]+t[1]*t[1]}function i(t){var e=Y.sqrt(r(t));t[0]&&(t[0]/=e),t[1]&&(t[1]/=e)}t.add=function(t,e,r,i,n,a){var s=[[],[],[]],o=[[this.a,this.c,this.e],[this.b,this.d,this.f],[0,0,1]],l=[[t,r,n],[e,i,a],[0,0,1]],h,u,c,f;for(t&&t instanceof g&&(l=[[t.a,t.c,t.e],[t.b,t.d,t.f],[0,0,1]]),h=0;h<3;h++)for(u=0;u<3;u++){for(f=0,c=0;c<3;c++)f+=o[h][c]*l[c][u];s[h][u]=f}this.a=s[0][0],this.b=s[1][0],this.c=s[0][1],this.d=s[1][1],this.e=s[0][2],this.f=s[1][2]},t.invert=function(){var t=this,e=t.a*t.d-t.b*t.c;return new g(t.d/e,-t.b/e,-t.c/e,t.a/e,(t.c*t.f-t.d*t.e)/e,(t.b*t.e-t.a*t.f)/e)},t.clone=function(){return new g(this.a,this.b,this.c,this.d,this.e,this.f)},t.translate=function(t,e){
this.add(1,0,0,1,t,e)},t.scale=function(t,e,r,i){null==e&&(e=t),(r||i)&&this.add(1,0,0,1,r,i),this.add(t,0,0,e,0,0),(r||i)&&this.add(1,0,0,1,-r,-i)},t.rotate=function(t,r,i){t=e.rad(t),r=r||0,i=i||0;var n=+Y.cos(t).toFixed(9),a=+Y.sin(t).toFixed(9);this.add(n,a,-a,n,r,i),this.add(1,0,0,1,-r,-i)},t.x=function(t,e){return t*this.a+e*this.c+this.e},t.y=function(t,e){return t*this.b+e*this.d+this.f},t.get=function(t){return+this[I.fromCharCode(97+t)].toFixed(4)},t.toString=function(){return e.svg?"matrix("+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)].join()+")":[this.get(0),this.get(2),this.get(1),this.get(3),0,0].join()},t.toFilter=function(){return"progid:DXImageTransform.Microsoft.Matrix(M11="+this.get(0)+", M12="+this.get(2)+", M21="+this.get(1)+", M22="+this.get(3)+", Dx="+this.get(4)+", Dy="+this.get(5)+", sizingmethod='auto expand')"},t.offset=function(){return[this.e.toFixed(4),this.f.toFixed(4)]},t.split=function(){var t={};t.dx=this.e,t.dy=this.f;var n=[[this.a,this.c],[this.b,this.d]];t.scalex=Y.sqrt(r(n[0])),i(n[0]),t.shear=n[0][0]*n[1][0]+n[0][1]*n[1][1],n[1]=[n[1][0]-n[0][0]*t.shear,n[1][1]-n[0][1]*t.shear],t.scaley=Y.sqrt(r(n[1])),i(n[1]),t.shear/=t.scaley;var a=-n[0][1],s=n[1][1];return s<0?(t.rotate=e.deg(Y.acos(s)),a<0&&(t.rotate=360-t.rotate)):t.rotate=e.deg(Y.asin(a)),t.isSimple=!(+t.shear.toFixed(9)||t.scalex.toFixed(9)!=t.scaley.toFixed(9)&&t.rotate),t.isSuperSimple=!+t.shear.toFixed(9)&&t.scalex.toFixed(9)==t.scaley.toFixed(9)&&!t.rotate,t.noRotation=!+t.shear.toFixed(9)&&!t.rotate,t},t.toTransformString=function(t){var e=t||this[q]();return e.isSimple?(e.scalex=+e.scalex.toFixed(4),e.scaley=+e.scaley.toFixed(4),e.rotate=+e.rotate.toFixed(4),(e.dx||e.dy?"t"+[e.dx,e.dy]:R)+(1!=e.scalex||1!=e.scaley?"s"+[e.scalex,e.scaley,0,0]:R)+(e.rotate?"r"+[e.rotate,0,0]:R)):"m"+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)]}}(g.prototype);for(var he=function(){this.returnValue=!1},ue=function(){return this.originalEvent.preventDefault()},ce=function(){this.cancelBubble=!0},fe=function(){return this.originalEvent.stopPropagation()},pe=function(t){var e=T.doc.documentElement.scrollTop||T.doc.body.scrollTop,r=T.doc.documentElement.scrollLeft||T.doc.body.scrollLeft;return{x:t.clientX+r,y:t.clientY+e}},de=function(){return T.doc.addEventListener?function(t,e,r,i){var n=function(t){var e=pe(t);return r.call(i,t,e.x,e.y)};if(t.addEventListener(e,n,!1),F&&V[e]){var a=function(e){for(var n=pe(e),a=e,s=0,o=e.targetTouches&&e.targetTouches.length;s<o;s++)if(e.targetTouches[s].target==t){e=e.targetTouches[s],e.originalEvent=a,e.preventDefault=ue,e.stopPropagation=fe;break}return r.call(i,e,n.x,n.y)};t.addEventListener(V[e],a,!1)}return function(){return t.removeEventListener(e,n,!1),F&&V[e]&&t.removeEventListener(V[e],a,!1),!0}}:T.doc.attachEvent?function(t,e,r,i){var n=function(t){t=t||T.win.event;var e=T.doc.documentElement.scrollTop||T.doc.body.scrollTop,n=T.doc.documentElement.scrollLeft||T.doc.body.scrollLeft,a=t.clientX+n,s=t.clientY+e;return t.preventDefault=t.preventDefault||he,t.stopPropagation=t.stopPropagation||ce,r.call(i,t,a,s)};t.attachEvent("on"+e,n);var a=function(){return t.detachEvent("on"+e,n),!0};return a}:void 0}(),ge=[],ve=function(e){for(var r=e.clientX,i=e.clientY,n=T.doc.documentElement.scrollTop||T.doc.body.scrollTop,a=T.doc.documentElement.scrollLeft||T.doc.body.scrollLeft,s,o=ge.length;o--;){if(s=ge[o],F&&e.touches){for(var l=e.touches.length,h;l--;)if(h=e.touches[l],h.identifier==s.el._drag.id){r=h.clientX,i=h.clientY,(e.originalEvent?e.originalEvent:e).preventDefault();break}}else e.preventDefault();var u=s.el.node,c,f=u.nextSibling,p=u.parentNode,d=u.style.display;T.win.opera&&p.removeChild(u),u.style.display="none",c=s.el.paper.getElementByPoint(r,i),u.style.display=d,T.win.opera&&(f?p.insertBefore(u,f):p.appendChild(u)),c&&t("raphael.drag.over."+s.el.id,s.el,c),r+=a,i+=n,t("raphael.drag.move."+s.el.id,s.move_scope||s.el,r-s.el._drag.x,i-s.el._drag.y,r,i,e)}},xe=function(r){e.unmousemove(ve).unmouseup(xe);for(var i=ge.length,n;i--;)n=ge[i],n.el._drag={},t("raphael.drag.end."+n.el.id,n.end_scope||n.start_scope||n.move_scope||n.el,r);ge=[]},ye=e.el={},me=D.length;me--;)!function(t){e[t]=ye[t]=function(r,i){return e.is(r,"function")&&(this.events=this.events||[],this.events.push({name:t,f:r,unbind:de(this.shape||this.node||T.doc,t,r,i||this)})),this},e["un"+t]=ye["un"+t]=function(r){for(var i=this.events||[],n=i.length;n--;)i[n].name!=t||!e.is(r,"undefined")&&i[n].f!=r||(i[n].unbind(),i.splice(n,1),!i.length&&delete this.events);return this}}(D[me]);ye.data=function(r,i){var n=wt[this.id]=wt[this.id]||{};if(0==arguments.length)return n;if(1==arguments.length){if(e.is(r,"object")){for(var a in r)r[A](a)&&this.data(a,r[a]);return this}return t("raphael.data.get."+this.id,this,n[r],r),n[r]}return n[r]=i,t("raphael.data.set."+this.id,this,i,r),this},ye.removeData=function(t){return null==t?wt[this.id]={}:wt[this.id]&&delete wt[this.id][t],this},ye.getData=function(){return r(wt[this.id]||{})},ye.hover=function(t,e,r,i){return this.mouseover(t,r).mouseout(e,i||r)},ye.unhover=function(t,e){return this.unmouseover(t).unmouseout(e)};var be=[];ye.drag=function(r,i,n,a,s,o){function l(l){(l.originalEvent||l).preventDefault();var h=l.clientX,u=l.clientY,c=T.doc.documentElement.scrollTop||T.doc.body.scrollTop,f=T.doc.documentElement.scrollLeft||T.doc.body.scrollLeft;if(this._drag.id=l.identifier,F&&l.touches)for(var p=l.touches.length,d;p--;)if(d=l.touches[p],this._drag.id=d.identifier,d.identifier==this._drag.id){h=d.clientX,u=d.clientY;break}this._drag.x=h+f,this._drag.y=u+c,!ge.length&&e.mousemove(ve).mouseup(xe),ge.push({el:this,move_scope:a,start_scope:s,end_scope:o}),i&&t.on("raphael.drag.start."+this.id,i),r&&t.on("raphael.drag.move."+this.id,r),n&&t.on("raphael.drag.end."+this.id,n),t("raphael.drag.start."+this.id,s||a||this,l.clientX+f,l.clientY+c,l)}return this._drag={},be.push({el:this,start:l}),this.mousedown(l),this},ye.onDragOver=function(e){e?t.on("raphael.drag.over."+this.id,e):t.unbind("raphael.drag.over."+this.id)},ye.undrag=function(){for(var r=be.length;r--;)be[r].el==this&&(this.unmousedown(be[r].start),be.splice(r,1),t.unbind("raphael.drag.*."+this.id));!be.length&&e.unmousemove(ve).unmouseup(xe),ge=[]},N.circle=function(t,r,i){var n=e._engine.circle(this,t||0,r||0,i||0);return this.__set__&&this.__set__.push(n),n},N.rect=function(t,r,i,n,a){var s=e._engine.rect(this,t||0,r||0,i||0,n||0,a||0);return this.__set__&&this.__set__.push(s),s},N.ellipse=function(t,r,i,n){var a=e._engine.ellipse(this,t||0,r||0,i||0,n||0);return this.__set__&&this.__set__.push(a),a},N.path=function(t){t&&!e.is(t,Z)&&!e.is(t[0],Q)&&(t+=R);var r=e._engine.path(e.format[z](e,arguments),this);return this.__set__&&this.__set__.push(r),r},N.image=function(t,r,i,n,a){var s=e._engine.image(this,t||"about:blank",r||0,i||0,n||0,a||0);return this.__set__&&this.__set__.push(s),s},N.text=function(t,r,i){var n=e._engine.text(this,t||0,r||0,I(i));return this.__set__&&this.__set__.push(n),n},N.set=function(t){!e.is(t,"array")&&(t=Array.prototype.splice.call(arguments,0,arguments.length));var r=new ze(t);return this.__set__&&this.__set__.push(r),r.paper=this,r.type="set",r},N.setStart=function(t){this.__set__=t||this.set()},N.setFinish=function(t){var e=this.__set__;return delete this.__set__,e},N.getSize=function(){var t=this.canvas.parentNode;return{width:t.offsetWidth,height:t.offsetHeight}},N.setSize=function(t,r){return e._engine.setSize.call(this,t,r)},N.setViewBox=function(t,r,i,n,a){return e._engine.setViewBox.call(this,t,r,i,n,a)},N.top=N.bottom=null,N.raphael=e;var _e=function(t){var e=t.getBoundingClientRect(),r=t.ownerDocument,i=r.body,n=r.documentElement,a=n.clientTop||i.clientTop||0,s=n.clientLeft||i.clientLeft||0,o=e.top+(T.win.pageYOffset||n.scrollTop||i.scrollTop)-a,l=e.left+(T.win.pageXOffset||n.scrollLeft||i.scrollLeft)-s;return{y:o,x:l}};N.getElementByPoint=function(t,e){var r=this,i=r.canvas,n=T.doc.elementFromPoint(t,e);if(T.win.opera&&"svg"==n.tagName){var a=_e(i),s=i.createSVGRect();s.x=t-a.x,s.y=e-a.y,s.width=s.height=1;var o=i.getIntersectionList(s,null);o.length&&(n=o[o.length-1])}if(!n)return null;for(;n.parentNode&&n!=i.parentNode&&!n.raphael;)n=n.parentNode;return n==r.canvas.parentNode&&(n=i),n=n&&n.raphael?r.getById(n.raphaelid):null},N.getElementsByBBox=function(t){var r=this.set();return this.forEach(function(i){e.isBBoxIntersect(i.getBBox(),t)&&r.push(i)}),r},N.getById=function(t){for(var e=this.bottom;e;){if(e.id==t)return e;e=e.next}return null},N.forEach=function(t,e){for(var r=this.bottom;r;){if(t.call(e,r)===!1)return this;r=r.next}return this},N.getElementsByPoint=function(t,e){var r=this.set();return this.forEach(function(i){i.isPointInside(t,e)&&r.push(i)}),r},ye.isPointInside=function(t,r){var i=this.realPath=Et[this.type](this);return this.attr("transform")&&this.attr("transform").length&&(i=e.transformPath(i,this.attr("transform"))),e.isPointInsidePath(i,t,r)},ye.getBBox=function(t){if(this.removed)return{};var e=this._;return t?(!e.dirty&&e.bboxwt||(this.realPath=Et[this.type](this),e.bboxwt=Ot(this.realPath),e.bboxwt.toString=x,e.dirty=0),e.bboxwt):((e.dirty||e.dirtyT||!e.bbox)&&(!e.dirty&&this.realPath||(e.bboxwt=0,this.realPath=Et[this.type](this)),e.bbox=Ot(Mt(this.realPath,this.matrix)),e.bbox.toString=x,e.dirty=e.dirtyT=0),e.bbox)},ye.clone=function(){if(this.removed)return null;var t=this.paper[this.type]().attr(this.attr());return this.__set__&&this.__set__.push(t),t},ye.glow=function(t){if("text"==this.type)return null;t=t||{};var e={width:(t.width||10)+(+this.attr("stroke-width")||1),fill:t.fill||!1,opacity:null==t.opacity?.5:t.opacity,offsetx:t.offsetx||0,offsety:t.offsety||0,color:t.color||"#000"},r=e.width/2,i=this.paper,n=i.set(),a=this.realPath||Et[this.type](this);a=this.matrix?Mt(a,this.matrix):a;for(var s=1;s<r+1;s++)n.push(i.path(a).attr({stroke:e.color,fill:e.fill?e.color:"none","stroke-linejoin":"round","stroke-linecap":"round","stroke-width":+(e.width/r*s).toFixed(3),opacity:+(e.opacity/r).toFixed(3)}));return n.insertBefore(this).translate(e.offsetx,e.offsety)};var we={},ke=function(t,r,i,n,a,s,o,u,c){return null==c?l(t,r,i,n,a,s,o,u):e.findDotsAtSegment(t,r,i,n,a,s,o,u,h(t,r,i,n,a,s,o,u,c))},Be=function(t,r){return function(i,n,a){i=Qt(i);for(var s,o,l,h,u="",c={},f,p=0,d=0,g=i.length;d<g;d++){if(l=i[d],"M"==l[0])s=+l[1],o=+l[2];else{if(h=ke(s,o,l[1],l[2],l[3],l[4],l[5],l[6]),p+h>n){if(r&&!c.start){if(f=ke(s,o,l[1],l[2],l[3],l[4],l[5],l[6],n-p),u+=["C"+f.start.x,f.start.y,f.m.x,f.m.y,f.x,f.y],a)return u;c.start=u,u=["M"+f.x,f.y+"C"+f.n.x,f.n.y,f.end.x,f.end.y,l[5],l[6]].join(),p+=h,s=+l[5],o=+l[6];continue}if(!t&&!r)return f=ke(s,o,l[1],l[2],l[3],l[4],l[5],l[6],n-p),{x:f.x,y:f.y,alpha:f.alpha}}p+=h,s=+l[5],o=+l[6]}u+=l.shift()+l}return c.end=u,f=t?p:r?c:e.findDotsAtSegment(s,o,l[0],l[1],l[2],l[3],l[4],l[5],1),f.alpha&&(f={x:f.x,y:f.y,alpha:f.alpha}),f}},Ce=Be(1),Se=Be(),Ae=Be(0,1);e.getTotalLength=Ce,e.getPointAtLength=Se,e.getSubpath=function(t,e,r){if(this.getTotalLength(t)-r<1e-6)return Ae(t,e).end;var i=Ae(t,r,1);return e?Ae(i,e).end:i},ye.getTotalLength=function(){var t=this.getPath();if(t)return this.node.getTotalLength?this.node.getTotalLength():Ce(t)},ye.getPointAtLength=function(t){var e=this.getPath();if(e)return Se(e,t)},ye.getPath=function(){var t,r=e._getPath[this.type];if("text"!=this.type&&"set"!=this.type)return r&&(t=r(this)),t},ye.getSubpath=function(t,r){var i=this.getPath();if(i)return e.getSubpath(i,t,r)};var Te=e.easing_formulas={linear:function(t){return t},"<":function(t){return X(t,1.7)},">":function(t){return X(t,.48)},"<>":function(t){var e=.48-t/1.04,r=Y.sqrt(.1734+e*e),i=r-e,n=X(H(i),1/3)*(i<0?-1:1),a=-r-e,s=X(H(a),1/3)*(a<0?-1:1),o=n+s+.5;return 3*(1-o)*o*o+o*o*o},backIn:function(t){var e=1.70158;return t*t*((e+1)*t-e)},backOut:function(t){t-=1;var e=1.70158;return t*t*((e+1)*t+e)+1},elastic:function(t){return t==!!t?t:X(2,-10*t)*Y.sin((t-.075)*(2*U)/.3)+1},bounce:function(t){var e=7.5625,r=2.75,i;return t<1/r?i=e*t*t:t<2/r?(t-=1.5/r,i=e*t*t+.75):t<2.5/r?(t-=2.25/r,i=e*t*t+.9375):(t-=2.625/r,i=e*t*t+.984375),i}};Te.easeIn=Te["ease-in"]=Te["<"],Te.easeOut=Te["ease-out"]=Te[">"],Te.easeInOut=Te["ease-in-out"]=Te["<>"],Te["back-in"]=Te.backIn,Te["back-out"]=Te.backOut;var Ee=[],Me=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){setTimeout(t,16)},Ne=function(){for(var r=+new Date,i=0;i<Ee.length;i++){var n=Ee[i];if(!n.el.removed&&!n.paused){var a=r-n.start,s=n.ms,o=n.easing,l=n.from,h=n.diff,u=n.to,c=n.t,f=n.el,p={},d,g={},v;if(n.initstatus?(a=(n.initstatus*n.anim.top-n.prev)/(n.percent-n.prev)*s,n.status=n.initstatus,delete n.initstatus,n.stop&&Ee.splice(i--,1)):n.status=(n.prev+(n.percent-n.prev)*(a/s))/n.anim.top,!(a<0))if(a<s){var x=o(a/s);for(var y in l)if(l[A](y)){switch(pt[y]){case $:d=+l[y]+x*s*h[y];break;case"colour":d="rgb("+[Le(ot(l[y].r+x*s*h[y].r)),Le(ot(l[y].g+x*s*h[y].g)),Le(ot(l[y].b+x*s*h[y].b))].join(",")+")";break;case"path":d=[];for(var m=0,_=l[y].length;m<_;m++){d[m]=[l[y][m][0]];for(var w=1,k=l[y][m].length;w<k;w++)d[m][w]=+l[y][m][w]+x*s*h[y][m][w];d[m]=d[m].join(j)}d=d.join(j);break;case"transform":if(h[y].real)for(d=[],m=0,_=l[y].length;m<_;m++)for(d[m]=[l[y][m][0]],w=1,k=l[y][m].length;w<k;w++)d[m][w]=l[y][m][w]+x*s*h[y][m][w];else{var B=function(t){return+l[y][t]+x*s*h[y][t]};d=[["m",B(0),B(1),B(2),B(3),B(4),B(5)]]}break;case"csv":if("clip-rect"==y)for(d=[],m=4;m--;)d[m]=+l[y][m]+x*s*h[y][m];break;default:var C=[][P](l[y]);for(d=[],m=f.paper.customAttributes[y].length;m--;)d[m]=+C[m]+x*s*h[y][m]}p[y]=d}f.attr(p),function(e,r,i){setTimeout(function(){t("raphael.anim.frame."+e,r,i)})}(f.id,f,n.anim)}else{if(function(r,i,n){setTimeout(function(){t("raphael.anim.frame."+i.id,i,n),t("raphael.anim.finish."+i.id,i,n),e.is(r,"function")&&r.call(i)})}(n.callback,f,n.anim),f.attr(u),Ee.splice(i--,1),n.repeat>1&&!n.next){for(v in u)u[A](v)&&(g[v]=n.totalOrigin[v]);n.el.attr(g),b(n.anim,n.el,n.anim.percents[0],null,n.totalOrigin,n.repeat-1)}n.next&&!n.stop&&b(n.anim,n.el,n.next,null,n.totalOrigin,n.repeat)}}}Ee.length&&Me(Ne)},Le=function(t){return t>255?255:t<0?0:t};ye.animateWith=function(t,r,i,n,a,s){var o=this;if(o.removed)return s&&s.call(o),o;var l=i instanceof m?i:e.animation(i,n,a,s),h,u;b(l,o,l.percents[0],null,o.attr());for(var c=0,f=Ee.length;c<f;c++)if(Ee[c].anim==r&&Ee[c].el==t){Ee[f-1].start=Ee[c].start;break}return o},ye.onAnimation=function(e){return e?t.on("raphael.anim.frame."+this.id,e):t.unbind("raphael.anim.frame."+this.id),this},m.prototype.delay=function(t){var e=new m(this.anim,this.ms);return e.times=this.times,e.del=+t||0,e},m.prototype.repeat=function(t){var e=new m(this.anim,this.ms);return e.del=this.del,e.times=Y.floor(W(t,0))||1,e},e.animation=function(t,r,i,n){if(t instanceof m)return t;!e.is(i,"function")&&i||(n=n||i||null,i=null),t=Object(t),r=+r||0;var a={},s,o;for(o in t)t[A](o)&&ht(o)!=o&&ht(o)+"%"!=o&&(s=!0,a[o]=t[o]);if(s)return i&&(a.easing=i),n&&(a.callback=n),new m({100:a},r);if(n){var l=0;for(var h in t){var u=ut(h);t[A](h)&&u>l&&(l=u)}l+="%",!t[l].callback&&(t[l].callback=n)}return new m(t,r)},ye.animate=function(t,r,i,n){var a=this;if(a.removed)return n&&n.call(a),a;var s=t instanceof m?t:e.animation(t,r,i,n);return b(s,a,s.percents[0],null,a.attr()),a},ye.setTime=function(t,e){return t&&null!=e&&this.status(t,G(e,t.ms)/t.ms),this},ye.status=function(t,e){var r=[],i=0,n,a;if(null!=e)return b(t,this,-1,G(e,1)),this;for(n=Ee.length;i<n;i++)if(a=Ee[i],a.el.id==this.id&&(!t||a.anim==t)){if(t)return a.status;r.push({anim:a.anim,status:a.status})}return t?0:r},ye.pause=function(e){for(var r=0;r<Ee.length;r++)Ee[r].el.id!=this.id||e&&Ee[r].anim!=e||t("raphael.anim.pause."+this.id,this,Ee[r].anim)!==!1&&(Ee[r].paused=!0);return this},ye.resume=function(e){for(var r=0;r<Ee.length;r++)if(Ee[r].el.id==this.id&&(!e||Ee[r].anim==e)){var i=Ee[r];t("raphael.anim.resume."+this.id,this,i.anim)!==!1&&(delete i.paused,this.status(i.anim,i.status))}return this},ye.stop=function(e){for(var r=0;r<Ee.length;r++)Ee[r].el.id!=this.id||e&&Ee[r].anim!=e||t("raphael.anim.stop."+this.id,this,Ee[r].anim)!==!1&&Ee.splice(r--,1);return this},t.on("raphael.remove",_),t.on("raphael.clear",_),ye.toString=function(){return"Raphaël’s object"};var ze=function(t){if(this.items=[],this.length=0,this.type="set",t)for(var e=0,r=t.length;e<r;e++)!t[e]||t[e].constructor!=ye.constructor&&t[e].constructor!=ze||(this[this.items.length]=this.items[this.items.length]=t[e],this.length++)},Pe=ze.prototype;Pe.push=function(){for(var t,e,r=0,i=arguments.length;r<i;r++)t=arguments[r],!t||t.constructor!=ye.constructor&&t.constructor!=ze||(e=this.items.length,this[e]=this.items[e]=t,this.length++);return this},Pe.pop=function(){return this.length&&delete this[this.length--],this.items.pop()},Pe.forEach=function(t,e){for(var r=0,i=this.items.length;r<i;r++)if(t.call(e,this.items[r],r)===!1)return this;return this};for(var Fe in ye)ye[A](Fe)&&(Pe[Fe]=function(t){return function(){var e=arguments;return this.forEach(function(r){r[t][z](r,e)})}}(Fe));return Pe.attr=function(t,r){if(t&&e.is(t,Q)&&e.is(t[0],"object"))for(var i=0,n=t.length;i<n;i++)this.items[i].attr(t[i]);else for(var a=0,s=this.items.length;a<s;a++)this.items[a].attr(t,r);return this},Pe.clear=function(){for(;this.length;)this.pop()},Pe.splice=function(t,e,r){t=t<0?W(this.length+t,0):t,e=W(0,G(this.length-t,e));var i=[],n=[],a=[],s;for(s=2;s<arguments.length;s++)a.push(arguments[s]);for(s=0;s<e;s++)n.push(this[t+s]);for(;s<this.length-t;s++)i.push(this[t+s]);var o=a.length;for(s=0;s<o+i.length;s++)this.items[t+s]=this[t+s]=s<o?a[s]:i[s-o];for(s=this.items.length=this.length-=e-o;this[s];)delete this[s++];return new ze(n)},Pe.exclude=function(t){for(var e=0,r=this.length;e<r;e++)if(this[e]==t)return this.splice(e,1),!0},Pe.animate=function(t,r,i,n){(e.is(i,"function")||!i)&&(n=i||null);var a=this.items.length,s=a,o,l=this,h;if(!a)return this;n&&(h=function(){!--a&&n.call(l)}),i=e.is(i,Z)?i:h;var u=e.animation(t,r,i,h);for(o=this.items[--s].animate(u);s--;)this.items[s]&&!this.items[s].removed&&this.items[s].animateWith(o,u,u),this.items[s]&&!this.items[s].removed||a--;return this},Pe.insertAfter=function(t){for(var e=this.items.length;e--;)this.items[e].insertAfter(t);return this},Pe.getBBox=function(){for(var t=[],e=[],r=[],i=[],n=this.items.length;n--;)if(!this.items[n].removed){var a=this.items[n].getBBox();t.push(a.x),e.push(a.y),r.push(a.x+a.width),i.push(a.y+a.height)}return t=G[z](0,t),e=G[z](0,e),r=W[z](0,r),i=W[z](0,i),{x:t,y:e,x2:r,y2:i,width:r-t,height:i-e}},Pe.clone=function(t){t=this.paper.set();for(var e=0,r=this.items.length;e<r;e++)t.push(this.items[e].clone());return t},Pe.toString=function(){return"Raphaël‘s set"},Pe.glow=function(t){var e=this.paper.set();return this.forEach(function(r,i){var n=r.glow(t);null!=n&&n.forEach(function(t,r){e.push(t)})}),e},Pe.isPointInside=function(t,e){var r=!1;return this.forEach(function(i){if(i.isPointInside(t,e))return r=!0,!1}),r},e.registerFont=function(t){if(!t.face)return t;this.fonts=this.fonts||{};var e={w:t.w,face:{},glyphs:{}},r=t.face["font-family"];for(var i in t.face)t.face[A](i)&&(e.face[i]=t.face[i]);if(this.fonts[r]?this.fonts[r].push(e):this.fonts[r]=[e],!t.svg){e.face["units-per-em"]=ut(t.face["units-per-em"],10);for(var n in t.glyphs)if(t.glyphs[A](n)){var a=t.glyphs[n];if(e.glyphs[n]={w:a.w,k:{},d:a.d&&"M"+a.d.replace(/[mlcxtrv]/g,function(t){return{l:"L",c:"C",x:"z",t:"m",r:"l",v:"c"}[t]||"M"})+"z"},a.k)for(var s in a.k)a[A](s)&&(e.glyphs[n].k[s]=a.k[s])}}return t},N.getFont=function(t,r,i,n){if(n=n||"normal",i=i||"normal",r=+r||{normal:400,bold:700,lighter:300,bolder:800}[r]||400,e.fonts){var a=e.fonts[t];if(!a){var s=new RegExp("(^|\\s)"+t.replace(/[^\w\d\s+!~.:_-]/g,R)+"(\\s|$)","i");for(var o in e.fonts)if(e.fonts[A](o)&&s.test(o)){a=e.fonts[o];break}}var l;if(a)for(var h=0,u=a.length;h<u&&(l=a[h],l.face["font-weight"]!=r||l.face["font-style"]!=i&&l.face["font-style"]||l.face["font-stretch"]!=n);h++);return l}},N.print=function(t,r,i,n,a,s,o,l){s=s||"middle",o=W(G(o||0,1),-1),l=W(G(l||1,3),1);var h=I(i)[q](R),u=0,c=0,f=R,p;if(e.is(n,"string")&&(n=this.getFont(n)),n){p=(a||16)/n.face["units-per-em"];for(var d=n.face.bbox[q](k),g=+d[0],v=d[3]-d[1],x=0,y=+d[1]+("baseline"==s?v+ +n.face.descent:v/2),m=0,b=h.length;m<b;m++){if("\n"==h[m])u=0,w=0,c=0,x+=v*l;else{var _=c&&n.glyphs[h[m-1]]||{},w=n.glyphs[h[m]];u+=c?(_.w||n.w)+(_.k&&_.k[h[m]]||0)+n.w*o:0,c=1}w&&w.d&&(f+=e.transformPath(w.d,["t",u*p,x*p,"s",p,p,g,y,"t",(t-g)/p,(r-y)/p]))}}return this.path(f).attr({fill:"#000",stroke:"none"})},N.add=function(t){if(e.is(t,"array"))for(var r=this.set(),i=0,n=t.length,a;i<n;i++)a=t[i]||{},B[A](a.type)&&r.push(this[a.type]().attr(a));return r},e.format=function(t,r){var i=e.is(r,Q)?[0][P](r):arguments;return t&&e.is(t,Z)&&i.length-1&&(t=t.replace(C,function(t,e){return null==i[++e]?R:i[e]})),t||R},e.fullfill=function(){var t=/\{([^\}]+)\}/g,e=/(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g,r=function(t,r,i){var n=i;return r.replace(e,function(t,e,r,i,a){e=e||i,n&&(e in n&&(n=n[e]),"function"==typeof n&&a&&(n=n()))}),n=(null==n||n==i?t:n)+""};return function(e,i){return String(e).replace(t,function(t,e){return r(t,e,i)})}}(),e.ninja=function(){if(E.was)T.win.Raphael=E.is;else{window.Raphael=void 0;try{delete window.Raphael}catch(t){}}return e},e.st=Pe,t.on("raphael.DOMload",function(){w=!0}),function(t,r,i){function n(){/in/.test(t.readyState)?setTimeout(n,9):e.eve("raphael.DOMload")}null==t.readyState&&t.addEventListener&&(t.addEventListener(r,i=function(){t.removeEventListener(r,i,!1),t.readyState="complete"},!1),t.readyState="loading"),n()}(document,"DOMContentLoaded"),e}.apply(e,i),!(void 0!==n&&(t.exports=n))},function(t,e,r){var i,n;!function(r){var a="0.5.0",s="hasOwnProperty",o=/[\.\/]/,l=/\s*,\s*/,h="*",u=function(){},c=function(t,e){return t-e},f,p,d={n:{}},g=function(){for(var t=0,e=this.length;t<e;t++)if("undefined"!=typeof this[t])return this[t]},v=function(){for(var t=this.length;--t;)if("undefined"!=typeof this[t])return this[t]},x=Object.prototype.toString,y=String,m=Array.isArray||function(t){return t instanceof Array||"[object Array]"==x.call(t)};eve=function(t,e){var r=d,i=p,n=Array.prototype.slice.call(arguments,2),a=eve.listeners(t),s=0,o=!1,l,h=[],u={},x=[],y=f,m=[];x.firstDefined=g,x.lastDefined=v,f=t,p=0;for(var b=0,_=a.length;b<_;b++)"zIndex"in a[b]&&(h.push(a[b].zIndex),a[b].zIndex<0&&(u[a[b].zIndex]=a[b]));for(h.sort(c);h[s]<0;)if(l=u[h[s++]],x.push(l.apply(e,n)),p)return p=i,x;for(b=0;b<_;b++)if(l=a[b],"zIndex"in l)if(l.zIndex==h[s]){if(x.push(l.apply(e,n)),p)break;do if(s++,l=u[h[s]],l&&x.push(l.apply(e,n)),p)break;while(l)}else u[l.zIndex]=l;else if(x.push(l.apply(e,n)),p)break;return p=i,f=y,x},eve._events=d,eve.listeners=function(t){var e=m(t)?t:t.split(o),r=d,i,n,a,s,l,u,c,f,p=[r],g=[];for(s=0,l=e.length;s<l;s++){for(f=[],u=0,c=p.length;u<c;u++)for(r=p[u].n,n=[r[e[s]],r[h]],a=2;a--;)i=n[a],i&&(f.push(i),g=g.concat(i.f||[]));p=f}return g},eve.separator=function(t){t?(t=y(t).replace(/(?=[\.\^\]\[\-])/g,"\\"),t="["+t+"]",o=new RegExp(t)):o=/[\.\/]/},eve.on=function(t,e){if("function"!=typeof e)return function(){};for(var r=m(t)?m(t[0])?t:[t]:y(t).split(l),i=0,n=r.length;i<n;i++)!function(t){for(var r=m(t)?t:y(t).split(o),i=d,n,a=0,s=r.length;a<s;a++)i=i.n,i=i.hasOwnProperty(r[a])&&i[r[a]]||(i[r[a]]={n:{}});for(i.f=i.f||[],a=0,s=i.f.length;a<s;a++)if(i.f[a]==e){n=!0;break}!n&&i.f.push(e)}(r[i]);return function(t){+t==+t&&(e.zIndex=+t)}},eve.f=function(t){var e=[].slice.call(arguments,1);return function(){eve.apply(null,[t,null].concat(e).concat([].slice.call(arguments,0)))}},eve.stop=function(){p=1},eve.nt=function(t){var e=m(f)?f.join("."):f;return t?new RegExp("(?:\\.|\\/|^)"+t+"(?:\\.|\\/|$)").test(e):e},eve.nts=function(){return m(f)?f:f.split(o)},eve.off=eve.unbind=function(t,e){if(!t)return void(eve._events=d={n:{}});var r=m(t)?m(t[0])?t:[t]:y(t).split(l);if(r.length>1)for(var i=0,n=r.length;i<n;i++)eve.off(r[i],e);else{r=m(t)?t:y(t).split(o);var a,u,c,i,n,f,p,g=[d];for(i=0,n=r.length;i<n;i++)for(f=0;f<g.length;f+=c.length-2){if(c=[f,1],a=g[f].n,r[i]!=h)a[r[i]]&&c.push(a[r[i]]);else for(u in a)a[s](u)&&c.push(a[u]);g.splice.apply(g,c)}for(i=0,n=g.length;i<n;i++)for(a=g[i];a.n;){if(e){if(a.f){for(f=0,p=a.f.length;f<p;f++)if(a.f[f]==e){a.f.splice(f,1);break}!a.f.length&&delete a.f}for(u in a.n)if(a.n[s](u)&&a.n[u].f){var v=a.n[u].f;for(f=0,p=v.length;f<p;f++)if(v[f]==e){v.splice(f,1);break}!v.length&&delete a.n[u].f}}else{delete a.f;for(u in a.n)a.n[s](u)&&a.n[u].f&&delete a.n[u].f}a=a.n}}},eve.once=function(t,e){var r=function(){return eve.off(t,r),e.apply(this,arguments)};return eve.on(t,r)},eve.version=a,eve.toString=function(){return"You are running Eve "+a},"undefined"!=typeof t&&t.exports?t.exports=eve:(i=[],n=function(){return eve}.apply(e,i),!(void 0!==n&&(t.exports=n)))}(this)},function(t,e,r){var i,n;i=[r(1)],n=function(t){if(!t||t.svg){var e="hasOwnProperty",r=String,i=parseFloat,n=parseInt,a=Math,s=a.max,o=a.abs,l=a.pow,h=/[, ]+/,u=t.eve,c="",f=" ",p="http://www.w3.org/1999/xlink",d={block:"M5,0 0,2.5 5,5z",classic:"M5,0 0,2.5 5,5 3.5,3 3.5,2z",diamond:"M2.5,0 5,2.5 2.5,5 0,2.5z",open:"M6,1 1,3.5 6,6",oval:"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z"},g={};t.toString=function(){return"Your browser supports SVG.\nYou are running Raphaël "+this.version};var v=function(i,n){if(n){"string"==typeof i&&(i=v(i));for(var a in n)n[e](a)&&("xlink:"==a.substring(0,6)?i.setAttributeNS(p,a.substring(6),r(n[a])):i.setAttribute(a,r(n[a])))}else i=t._g.doc.createElementNS("http://www.w3.org/2000/svg",i),i.style&&(i.style.webkitTapHighlightColor="rgba(0,0,0,0)");return i},x=function(e,n){var h="linear",u=e.id+n,f=.5,p=.5,d=e.node,g=e.paper,x=d.style,y=t._g.doc.getElementById(u);if(!y){if(n=r(n).replace(t._radial_gradient,function(t,e,r){if(h="radial",e&&r){f=i(e),p=i(r);var n=2*(p>.5)-1;l(f-.5,2)+l(p-.5,2)>.25&&(p=a.sqrt(.25-l(f-.5,2))*n+.5)&&.5!=p&&(p=p.toFixed(5)-1e-5*n)}return c}),n=n.split(/\s*\-\s*/),"linear"==h){var b=n.shift();if(b=-i(b),isNaN(b))return null;var _=[0,0,a.cos(t.rad(b)),a.sin(t.rad(b))],w=1/(s(o(_[2]),o(_[3]))||1);_[2]*=w,_[3]*=w,_[2]<0&&(_[0]=-_[2],_[2]=0),_[3]<0&&(_[1]=-_[3],_[3]=0)}var k=t._parseDots(n);if(!k)return null;if(u=u.replace(/[\(\)\s,\xb0#]/g,"_"),e.gradient&&u!=e.gradient.id&&(g.defs.removeChild(e.gradient),delete e.gradient),!e.gradient){y=v(h+"Gradient",{id:u}),e.gradient=y,v(y,"radial"==h?{fx:f,fy:p}:{x1:_[0],y1:_[1],x2:_[2],y2:_[3],gradientTransform:e.matrix.invert()}),g.defs.appendChild(y);for(var B=0,C=k.length;B<C;B++)y.appendChild(v("stop",{offset:k[B].offset?k[B].offset:B?"100%":"0%","stop-color":k[B].color||"#fff","stop-opacity":isFinite(k[B].opacity)?k[B].opacity:1}))}}return v(d,{fill:m(u),opacity:1,"fill-opacity":1}),x.fill=c,x.opacity=1,x.fillOpacity=1,1},y=function(){var t=document.documentMode;return t&&(9===t||10===t)},m=function(t){if(y())return"url('#"+t+"')";var e=document.location,r=e.protocol+"//"+e.host+e.pathname+e.search;return"url('"+r+"#"+t+"')"},b=function(t){var e=t.getBBox(1);v(t.pattern,{patternTransform:t.matrix.invert()+" translate("+e.x+","+e.y+")"})},_=function(i,n,a){if("path"==i.type){for(var s=r(n).toLowerCase().split("-"),o=i.paper,l=a?"end":"start",h=i.node,u=i.attrs,f=u["stroke-width"],p=s.length,x="classic",y,m,b,_,w,k=3,B=3,C=5;p--;)switch(s[p]){case"block":case"classic":case"oval":case"diamond":case"open":case"none":x=s[p];break;case"wide":B=5;break;case"narrow":B=2;break;case"long":k=5;break;case"short":k=2}if("open"==x?(k+=2,B+=2,C+=2,b=1,_=a?4:1,w={fill:"none",stroke:u.stroke}):(_=b=k/2,w={fill:u.stroke,stroke:"none"}),i._.arrows?a?(i._.arrows.endPath&&g[i._.arrows.endPath]--,i._.arrows.endMarker&&g[i._.arrows.endMarker]--):(i._.arrows.startPath&&g[i._.arrows.startPath]--,i._.arrows.startMarker&&g[i._.arrows.startMarker]--):i._.arrows={},"none"!=x){var S="raphael-marker-"+x,A="raphael-marker-"+l+x+k+B+"-obj"+i.id;t._g.doc.getElementById(S)?g[S]++:(o.defs.appendChild(v(v("path"),{"stroke-linecap":"round",d:d[x],id:S})),g[S]=1);var T=t._g.doc.getElementById(A),E;T?(g[A]++,E=T.getElementsByTagName("use")[0]):(T=v(v("marker"),{id:A,markerHeight:B,markerWidth:k,orient:"auto",refX:_,refY:B/2}),E=v(v("use"),{"xlink:href":"#"+S,transform:(a?"rotate(180 "+k/2+" "+B/2+") ":c)+"scale("+k/C+","+B/C+")","stroke-width":(1/((k/C+B/C)/2)).toFixed(4)}),T.appendChild(E),o.defs.appendChild(T),g[A]=1),v(E,w);var M=b*("diamond"!=x&&"oval"!=x);a?(y=i._.arrows.startdx*f||0,m=t.getTotalLength(u.path)-M*f):(y=M*f,m=t.getTotalLength(u.path)-(i._.arrows.enddx*f||0)),w={},w["marker-"+l]="url(#"+A+")",(m||y)&&(w.d=t.getSubpath(u.path,y,m)),v(h,w),i._.arrows[l+"Path"]=S,i._.arrows[l+"Marker"]=A,i._.arrows[l+"dx"]=M,i._.arrows[l+"Type"]=x,i._.arrows[l+"String"]=n}else a?(y=i._.arrows.startdx*f||0,m=t.getTotalLength(u.path)-y):(y=0,m=t.getTotalLength(u.path)-(i._.arrows.enddx*f||0)),i._.arrows[l+"Path"]&&v(h,{d:t.getSubpath(u.path,y,m)}),delete i._.arrows[l+"Path"],delete i._.arrows[l+"Marker"],delete i._.arrows[l+"dx"],delete i._.arrows[l+"Type"],delete i._.arrows[l+"String"];for(w in g)if(g[e](w)&&!g[w]){var N=t._g.doc.getElementById(w);N&&N.parentNode.removeChild(N)}}},w={"-":[3,1],".":[1,1],"-.":[3,1,1,1],"-..":[3,1,1,1,1,1],". ":[1,3],"- ":[4,3],"--":[8,3],"- .":[4,3,1,3],"--.":[8,3,1,3],"--..":[8,3,1,3,1,3]},k=function(t,e,i){if(e=w[r(e).toLowerCase()]){for(var n=t.attrs["stroke-width"]||"1",a={round:n,square:n,butt:0}[t.attrs["stroke-linecap"]||i["stroke-linecap"]]||0,s=[],o=e.length;o--;)s[o]=e[o]*n+(o%2?1:-1)*a;v(t.node,{"stroke-dasharray":s.join(",")})}else v(t.node,{"stroke-dasharray":"none"})},B=function(i,a){var l=i.node,u=i.attrs,f=l.style.visibility;l.style.visibility="hidden";for(var d in a)if(a[e](d)){if(!t._availableAttrs[e](d))continue;var g=a[d];switch(u[d]=g,d){case"blur":i.blur(g);break;case"title":var y=l.getElementsByTagName("title");if(y.length&&(y=y[0]))y.firstChild.nodeValue=g;else{y=v("title");var m=t._g.doc.createTextNode(g);y.appendChild(m),l.appendChild(y)}break;case"href":case"target":var w=l.parentNode;if("a"!=w.tagName.toLowerCase()){var B=v("a");w.insertBefore(B,l),B.appendChild(l),w=B}"target"==d?w.setAttributeNS(p,"show","blank"==g?"new":g):w.setAttributeNS(p,d,g);break;case"cursor":l.style.cursor=g;break;case"transform":i.transform(g);break;case"arrow-start":_(i,g);break;case"arrow-end":_(i,g,1);break;case"clip-rect":var C=r(g).split(h);if(4==C.length){i.clip&&i.clip.parentNode.parentNode.removeChild(i.clip.parentNode);var A=v("clipPath"),T=v("rect");A.id=t.createUUID(),v(T,{x:C[0],y:C[1],width:C[2],height:C[3]}),A.appendChild(T),i.paper.defs.appendChild(A),v(l,{"clip-path":"url(#"+A.id+")"}),i.clip=T}if(!g){var E=l.getAttribute("clip-path");if(E){var M=t._g.doc.getElementById(E.replace(/(^url\(#|\)$)/g,c));M&&M.parentNode.removeChild(M),v(l,{"clip-path":c}),delete i.clip}}break;case"path":"path"==i.type&&(v(l,{d:g?u.path=t._pathToAbsolute(g):"M0,0"}),i._.dirty=1,i._.arrows&&("startString"in i._.arrows&&_(i,i._.arrows.startString),"endString"in i._.arrows&&_(i,i._.arrows.endString,1)));break;case"width":if(l.setAttribute(d,g),i._.dirty=1,!u.fx)break;d="x",g=u.x;case"x":u.fx&&(g=-u.x-(u.width||0));case"rx":if("rx"==d&&"rect"==i.type)break;case"cx":l.setAttribute(d,g),i.pattern&&b(i),i._.dirty=1;break;case"height":if(l.setAttribute(d,g),i._.dirty=1,!u.fy)break;d="y",g=u.y;case"y":u.fy&&(g=-u.y-(u.height||0));case"ry":if("ry"==d&&"rect"==i.type)break;case"cy":l.setAttribute(d,g),i.pattern&&b(i),i._.dirty=1;break;case"r":"rect"==i.type?v(l,{rx:g,ry:g}):l.setAttribute(d,g),i._.dirty=1;break;case"src":"image"==i.type&&l.setAttributeNS(p,"href",g);break;case"stroke-width":1==i._.sx&&1==i._.sy||(g/=s(o(i._.sx),o(i._.sy))||1),l.setAttribute(d,g),u["stroke-dasharray"]&&k(i,u["stroke-dasharray"],a),
i._.arrows&&("startString"in i._.arrows&&_(i,i._.arrows.startString),"endString"in i._.arrows&&_(i,i._.arrows.endString,1));break;case"stroke-dasharray":k(i,g,a);break;case"fill":var N=r(g).match(t._ISURL);if(N){A=v("pattern");var L=v("image");A.id=t.createUUID(),v(A,{x:0,y:0,patternUnits:"userSpaceOnUse",height:1,width:1}),v(L,{x:0,y:0,"xlink:href":N[1]}),A.appendChild(L),function(e){t._preload(N[1],function(){var t=this.offsetWidth,r=this.offsetHeight;v(e,{width:t,height:r}),v(L,{width:t,height:r})})}(A),i.paper.defs.appendChild(A),v(l,{fill:"url(#"+A.id+")"}),i.pattern=A,i.pattern&&b(i);break}var z=t.getRGB(g);if(z.error){if(("circle"==i.type||"ellipse"==i.type||"r"!=r(g).charAt())&&x(i,g)){if("opacity"in u||"fill-opacity"in u){var P=t._g.doc.getElementById(l.getAttribute("fill").replace(/^url\(#|\)$/g,c));if(P){var F=P.getElementsByTagName("stop");v(F[F.length-1],{"stop-opacity":("opacity"in u?u.opacity:1)*("fill-opacity"in u?u["fill-opacity"]:1)})}}u.gradient=g,u.fill="none";break}}else delete a.gradient,delete u.gradient,!t.is(u.opacity,"undefined")&&t.is(a.opacity,"undefined")&&v(l,{opacity:u.opacity}),!t.is(u["fill-opacity"],"undefined")&&t.is(a["fill-opacity"],"undefined")&&v(l,{"fill-opacity":u["fill-opacity"]});z[e]("opacity")&&v(l,{"fill-opacity":z.opacity>1?z.opacity/100:z.opacity});case"stroke":z=t.getRGB(g),l.setAttribute(d,z.hex),"stroke"==d&&z[e]("opacity")&&v(l,{"stroke-opacity":z.opacity>1?z.opacity/100:z.opacity}),"stroke"==d&&i._.arrows&&("startString"in i._.arrows&&_(i,i._.arrows.startString),"endString"in i._.arrows&&_(i,i._.arrows.endString,1));break;case"gradient":("circle"==i.type||"ellipse"==i.type||"r"!=r(g).charAt())&&x(i,g);break;case"opacity":u.gradient&&!u[e]("stroke-opacity")&&v(l,{"stroke-opacity":g>1?g/100:g});case"fill-opacity":if(u.gradient){P=t._g.doc.getElementById(l.getAttribute("fill").replace(/^url\(#|\)$/g,c)),P&&(F=P.getElementsByTagName("stop"),v(F[F.length-1],{"stop-opacity":g}));break}default:"font-size"==d&&(g=n(g,10)+"px");var R=d.replace(/(\-.)/g,function(t){return t.substring(1).toUpperCase()});l.style[R]=g,i._.dirty=1,l.setAttribute(d,g)}}S(i,a),l.style.visibility=f},C=1.2,S=function(i,a){if("text"==i.type&&(a[e]("text")||a[e]("font")||a[e]("font-size")||a[e]("x")||a[e]("y"))){var s=i.attrs,o=i.node,l=o.firstChild?n(t._g.doc.defaultView.getComputedStyle(o.firstChild,c).getPropertyValue("font-size"),10):10;if(a[e]("text")){for(s.text=a.text;o.firstChild;)o.removeChild(o.firstChild);for(var h=r(a.text).split("\n"),u=[],f,p=0,d=h.length;p<d;p++)f=v("tspan"),p&&v(f,{dy:l*C,x:s.x}),f.appendChild(t._g.doc.createTextNode(h[p])),o.appendChild(f),u[p]=f}else for(u=o.getElementsByTagName("tspan"),p=0,d=u.length;p<d;p++)p?v(u[p],{dy:l*C,x:s.x}):v(u[0],{dy:0});v(o,{x:s.x,y:s.y}),i._.dirty=1;var g=i._getBBox(),x=s.y-(g.y+g.height/2);x&&t.is(x,"finite")&&v(u[0],{dy:x})}},A=function(t){return t.parentNode&&"a"===t.parentNode.tagName.toLowerCase()?t.parentNode:t},T=function(e,r){function i(){return("0000"+(Math.random()*Math.pow(36,5)<<0).toString(36)).slice(-5)}var n=0,a=0;this[0]=this.node=e,e.raphael=!0,this.id=i(),e.raphaelid=this.id,this.matrix=t.matrix(),this.realPath=null,this.paper=r,this.attrs=this.attrs||{},this._={transform:[],sx:1,sy:1,deg:0,dx:0,dy:0,dirty:1},!r.bottom&&(r.bottom=this),this.prev=r.top,r.top&&(r.top.next=this),r.top=this,this.next=null},E=t.el;T.prototype=E,E.constructor=T,t._engine.path=function(t,e){var r=v("path");e.canvas&&e.canvas.appendChild(r);var i=new T(r,e);return i.type="path",B(i,{fill:"none",stroke:"#000",path:t}),i},E.rotate=function(t,e,n){if(this.removed)return this;if(t=r(t).split(h),t.length-1&&(e=i(t[1]),n=i(t[2])),t=i(t[0]),null==n&&(e=n),null==e||null==n){var a=this.getBBox(1);e=a.x+a.width/2,n=a.y+a.height/2}return this.transform(this._.transform.concat([["r",t,e,n]])),this},E.scale=function(t,e,n,a){if(this.removed)return this;if(t=r(t).split(h),t.length-1&&(e=i(t[1]),n=i(t[2]),a=i(t[3])),t=i(t[0]),null==e&&(e=t),null==a&&(n=a),null==n||null==a)var s=this.getBBox(1);return n=null==n?s.x+s.width/2:n,a=null==a?s.y+s.height/2:a,this.transform(this._.transform.concat([["s",t,e,n,a]])),this},E.translate=function(t,e){return this.removed?this:(t=r(t).split(h),t.length-1&&(e=i(t[1])),t=i(t[0])||0,e=+e||0,this.transform(this._.transform.concat([["t",t,e]])),this)},E.transform=function(r){var i=this._;if(null==r)return i.transform;if(t._extractTransform(this,r),this.clip&&v(this.clip,{transform:this.matrix.invert()}),this.pattern&&b(this),this.node&&v(this.node,{transform:this.matrix}),1!=i.sx||1!=i.sy){var n=this.attrs[e]("stroke-width")?this.attrs["stroke-width"]:1;this.attr({"stroke-width":n})}return this},E.hide=function(){return this.removed||(this.node.style.display="none"),this},E.show=function(){return this.removed||(this.node.style.display=""),this},E.remove=function(){var e=A(this.node);if(!this.removed&&e.parentNode){var r=this.paper;r.__set__&&r.__set__.exclude(this),u.unbind("raphael.*.*."+this.id),this.gradient&&r.defs.removeChild(this.gradient),t._tear(this,r),e.parentNode.removeChild(e),this.removeData();for(var i in this)this[i]="function"==typeof this[i]?t._removedFactory(i):null;this.removed=!0}},E._getBBox=function(){if("none"==this.node.style.display){this.show();var t=!0}var e=!1,r;this.paper.canvas.parentElement?r=this.paper.canvas.parentElement.style:this.paper.canvas.parentNode&&(r=this.paper.canvas.parentNode.style),r&&"none"==r.display&&(e=!0,r.display="");var i={};try{i=this.node.getBBox()}catch(n){i={x:this.node.clientLeft,y:this.node.clientTop,width:this.node.clientWidth,height:this.node.clientHeight}}finally{i=i||{},e&&(r.display="none")}return t&&this.hide(),i},E.attr=function(r,i){if(this.removed)return this;if(null==r){var n={};for(var a in this.attrs)this.attrs[e](a)&&(n[a]=this.attrs[a]);return n.gradient&&"none"==n.fill&&(n.fill=n.gradient)&&delete n.gradient,n.transform=this._.transform,n}if(null==i&&t.is(r,"string")){if("fill"==r&&"none"==this.attrs.fill&&this.attrs.gradient)return this.attrs.gradient;if("transform"==r)return this._.transform;for(var s=r.split(h),o={},l=0,c=s.length;l<c;l++)r=s[l],r in this.attrs?o[r]=this.attrs[r]:t.is(this.paper.customAttributes[r],"function")?o[r]=this.paper.customAttributes[r].def:o[r]=t._availableAttrs[r];return c-1?o:o[s[0]]}if(null==i&&t.is(r,"array")){for(o={},l=0,c=r.length;l<c;l++)o[r[l]]=this.attr(r[l]);return o}if(null!=i){var f={};f[r]=i}else null!=r&&t.is(r,"object")&&(f=r);for(var p in f)u("raphael.attr."+p+"."+this.id,this,f[p]);for(p in this.paper.customAttributes)if(this.paper.customAttributes[e](p)&&f[e](p)&&t.is(this.paper.customAttributes[p],"function")){var d=this.paper.customAttributes[p].apply(this,[].concat(f[p]));this.attrs[p]=f[p];for(var g in d)d[e](g)&&(f[g]=d[g])}return B(this,f),this},E.toFront=function(){if(this.removed)return this;var e=A(this.node);e.parentNode.appendChild(e);var r=this.paper;return r.top!=this&&t._tofront(this,r),this},E.toBack=function(){if(this.removed)return this;var e=A(this.node),r=e.parentNode;r.insertBefore(e,r.firstChild),t._toback(this,this.paper);var i=this.paper;return this},E.insertAfter=function(e){if(this.removed||!e)return this;var r=A(this.node),i=A(e.node||e[e.length-1].node);return i.nextSibling?i.parentNode.insertBefore(r,i.nextSibling):i.parentNode.appendChild(r),t._insertafter(this,e,this.paper),this},E.insertBefore=function(e){if(this.removed||!e)return this;var r=A(this.node),i=A(e.node||e[0].node);return i.parentNode.insertBefore(r,i),t._insertbefore(this,e,this.paper),this},E.blur=function(e){var r=this;if(0!==+e){var i=v("filter"),n=v("feGaussianBlur");r.attrs.blur=e,i.id=t.createUUID(),v(n,{stdDeviation:+e||1.5}),i.appendChild(n),r.paper.defs.appendChild(i),r._blur=i,v(r.node,{filter:"url(#"+i.id+")"})}else r._blur&&(r._blur.parentNode.removeChild(r._blur),delete r._blur,delete r.attrs.blur),r.node.removeAttribute("filter");return r},t._engine.circle=function(t,e,r,i){var n=v("circle");t.canvas&&t.canvas.appendChild(n);var a=new T(n,t);return a.attrs={cx:e,cy:r,r:i,fill:"none",stroke:"#000"},a.type="circle",v(n,a.attrs),a},t._engine.rect=function(t,e,r,i,n,a){var s=v("rect");t.canvas&&t.canvas.appendChild(s);var o=new T(s,t);return o.attrs={x:e,y:r,width:i,height:n,rx:a||0,ry:a||0,fill:"none",stroke:"#000"},o.type="rect",v(s,o.attrs),o},t._engine.ellipse=function(t,e,r,i,n){var a=v("ellipse");t.canvas&&t.canvas.appendChild(a);var s=new T(a,t);return s.attrs={cx:e,cy:r,rx:i,ry:n,fill:"none",stroke:"#000"},s.type="ellipse",v(a,s.attrs),s},t._engine.image=function(t,e,r,i,n,a){var s=v("image");v(s,{x:r,y:i,width:n,height:a,preserveAspectRatio:"none"}),s.setAttributeNS(p,"href",e),t.canvas&&t.canvas.appendChild(s);var o=new T(s,t);return o.attrs={x:r,y:i,width:n,height:a,src:e},o.type="image",o},t._engine.text=function(e,r,i,n){var a=v("text");e.canvas&&e.canvas.appendChild(a);var s=new T(a,e);return s.attrs={x:r,y:i,"text-anchor":"middle",text:n,"font-family":t._availableAttrs["font-family"],"font-size":t._availableAttrs["font-size"],stroke:"none",fill:"#000"},s.type="text",B(s,s.attrs),s},t._engine.setSize=function(t,e){return this.width=t||this.width,this.height=e||this.height,this.canvas.setAttribute("width",this.width),this.canvas.setAttribute("height",this.height),this._viewBox&&this.setViewBox.apply(this,this._viewBox),this},t._engine.create=function(){var e=t._getContainer.apply(0,arguments),r=e&&e.container,i=e.x,n=e.y,a=e.width,s=e.height;if(!r)throw new Error("SVG container not found.");var o=v("svg"),l="overflow:hidden;",h;return i=i||0,n=n||0,a=a||512,s=s||342,v(o,{height:s,version:1.1,width:a,xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink"}),1==r?(o.style.cssText=l+"position:absolute;left:"+i+"px;top:"+n+"px",t._g.doc.body.appendChild(o),h=1):(o.style.cssText=l+"position:relative",r.firstChild?r.insertBefore(o,r.firstChild):r.appendChild(o)),r=new t._Paper,r.width=a,r.height=s,r.canvas=o,r.clear(),r._left=r._top=0,h&&(r.renderfix=function(){}),r.renderfix(),r},t._engine.setViewBox=function(t,e,r,i,n){u("raphael.setViewBox",this,this._viewBox,[t,e,r,i,n]);var a=this.getSize(),o=s(r/a.width,i/a.height),l=this.top,h=n?"xMidYMid meet":"xMinYMin",c,p;for(null==t?(this._vbSize&&(o=1),delete this._vbSize,c="0 0 "+this.width+f+this.height):(this._vbSize=o,c=t+f+e+f+r+f+i),v(this.canvas,{viewBox:c,preserveAspectRatio:h});o&&l;)p="stroke-width"in l.attrs?l.attrs["stroke-width"]:1,l.attr({"stroke-width":p}),l._.dirty=1,l._.dirtyT=1,l=l.prev;return this._viewBox=[t,e,r,i,!!n],this},t.prototype.renderfix=function(){var t=this.canvas,e=t.style,r;try{r=t.getScreenCTM()||t.createSVGMatrix()}catch(i){r=t.createSVGMatrix()}var n=-r.e%1,a=-r.f%1;(n||a)&&(n&&(this._left=(this._left+n)%1,e.left=this._left+"px"),a&&(this._top=(this._top+a)%1,e.top=this._top+"px"))},t.prototype.clear=function(){t.eve("raphael.clear",this);for(var e=this.canvas;e.firstChild;)e.removeChild(e.firstChild);this.bottom=this.top=null,(this.desc=v("desc")).appendChild(t._g.doc.createTextNode("Created with Raphaël "+t.version)),e.appendChild(this.desc),e.appendChild(this.defs=v("defs"))},t.prototype.remove=function(){u("raphael.remove",this),this.canvas.parentNode&&this.canvas.parentNode.removeChild(this.canvas);for(var e in this)this[e]="function"==typeof this[e]?t._removedFactory(e):null};var M=t.st;for(var N in E)E[e](N)&&!M[e](N)&&(M[N]=function(t){return function(){var e=arguments;return this.forEach(function(r){r[t].apply(r,e)})}}(N))}}.apply(e,i),!(void 0!==n&&(t.exports=n))},function(t,e,r){var i,n;i=[r(1)],n=function(t){if(!t||t.vml){var e="hasOwnProperty",r=String,i=parseFloat,n=Math,a=n.round,s=n.max,o=n.min,l=n.abs,h="fill",u=/[, ]+/,c=t.eve,f=" progid:DXImageTransform.Microsoft",p=" ",d="",g={M:"m",L:"l",C:"c",Z:"x",m:"t",l:"r",c:"v",z:"x"},v=/([clmz]),?([^clmz]*)/gi,x=/ progid:\S+Blur\([^\)]+\)/g,y=/-?[^,\s-]+/g,m="position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)",b=21600,_={path:1,rect:1,image:1},w={circle:1,ellipse:1},k=function(e){var i=/[ahqstv]/gi,n=t._pathToAbsolute;if(r(e).match(i)&&(n=t._path2curve),i=/[clmz]/g,n==t._pathToAbsolute&&!r(e).match(i)){var s=r(e).replace(v,function(t,e,r){var i=[],n="m"==e.toLowerCase(),s=g[e];return r.replace(y,function(t){n&&2==i.length&&(s+=i+g["m"==e?"l":"L"],i=[]),i.push(a(t*b))}),s+i});return s}var o=n(e),l,h;s=[];for(var u=0,c=o.length;u<c;u++){l=o[u],h=o[u][0].toLowerCase(),"z"==h&&(h="x");for(var f=1,x=l.length;f<x;f++)h+=a(l[f]*b)+(f!=x-1?",":d);s.push(h)}return s.join(p)},B=function(e,r,i){var n=t.matrix();return n.rotate(-e,.5,.5),{dx:n.x(r,i),dy:n.y(r,i)}},C=function(t,e,r,i,n,a){var s=t._,o=t.matrix,u=s.fillpos,c=t.node,f=c.style,d=1,g="",v,x=b/e,y=b/r;if(f.visibility="hidden",e&&r){if(c.coordsize=l(x)+p+l(y),f.rotation=a*(e*r<0?-1:1),a){var m=B(a,i,n);i=m.dx,n=m.dy}if(e<0&&(g+="x"),r<0&&(g+=" y")&&(d=-1),f.flip=g,c.coordorigin=i*-x+p+n*-y,u||s.fillsize){var _=c.getElementsByTagName(h);_=_&&_[0],c.removeChild(_),u&&(m=B(a,o.x(u[0],u[1]),o.y(u[0],u[1])),_.position=m.dx*d+p+m.dy*d),s.fillsize&&(_.size=s.fillsize[0]*l(e)+p+s.fillsize[1]*l(r)),c.appendChild(_)}f.visibility="visible"}};t.toString=function(){return"Your browser doesn’t support SVG. Falling down to VML.\nYou are running Raphaël "+this.version};var S=function(t,e,i){for(var n=r(e).toLowerCase().split("-"),a=i?"end":"start",s=n.length,o="classic",l="medium",h="medium";s--;)switch(n[s]){case"block":case"classic":case"oval":case"diamond":case"open":case"none":o=n[s];break;case"wide":case"narrow":h=n[s];break;case"long":case"short":l=n[s]}var u=t.node.getElementsByTagName("stroke")[0];u[a+"arrow"]=o,u[a+"arrowlength"]=l,u[a+"arrowwidth"]=h},A=function(n,l){n.attrs=n.attrs||{};var c=n.node,f=n.attrs,g=c.style,v,x=_[n.type]&&(l.x!=f.x||l.y!=f.y||l.width!=f.width||l.height!=f.height||l.cx!=f.cx||l.cy!=f.cy||l.rx!=f.rx||l.ry!=f.ry||l.r!=f.r),y=w[n.type]&&(f.cx!=l.cx||f.cy!=l.cy||f.r!=l.r||f.rx!=l.rx||f.ry!=l.ry),m=n;for(var B in l)l[e](B)&&(f[B]=l[B]);if(x&&(f.path=t._getPath[n.type](n),n._.dirty=1),l.href&&(c.href=l.href),l.title&&(c.title=l.title),l.target&&(c.target=l.target),l.cursor&&(g.cursor=l.cursor),"blur"in l&&n.blur(l.blur),(l.path&&"path"==n.type||x)&&(c.path=k(~r(f.path).toLowerCase().indexOf("r")?t._pathToAbsolute(f.path):f.path),n._.dirty=1,"image"==n.type&&(n._.fillpos=[f.x,f.y],n._.fillsize=[f.width,f.height],C(n,1,1,0,0,0))),"transform"in l&&n.transform(l.transform),y){var A=+f.cx,E=+f.cy,M=+f.rx||+f.r||0,L=+f.ry||+f.r||0;c.path=t.format("ar{0},{1},{2},{3},{4},{1},{4},{1}x",a((A-M)*b),a((E-L)*b),a((A+M)*b),a((E+L)*b),a(A*b)),n._.dirty=1}if("clip-rect"in l){var z=r(l["clip-rect"]).split(u);if(4==z.length){z[2]=+z[2]+ +z[0],z[3]=+z[3]+ +z[1];var P=c.clipRect||t._g.doc.createElement("div"),F=P.style;F.clip=t.format("rect({1}px {2}px {3}px {0}px)",z),c.clipRect||(F.position="absolute",F.top=0,F.left=0,F.width=n.paper.width+"px",F.height=n.paper.height+"px",c.parentNode.insertBefore(P,c),P.appendChild(c),c.clipRect=P)}l["clip-rect"]||c.clipRect&&(c.clipRect.style.clip="auto")}if(n.textpath){var R=n.textpath.style;l.font&&(R.font=l.font),l["font-family"]&&(R.fontFamily='"'+l["font-family"].split(",")[0].replace(/^['"]+|['"]+$/g,d)+'"'),l["font-size"]&&(R.fontSize=l["font-size"]),l["font-weight"]&&(R.fontWeight=l["font-weight"]),l["font-style"]&&(R.fontStyle=l["font-style"])}if("arrow-start"in l&&S(m,l["arrow-start"]),"arrow-end"in l&&S(m,l["arrow-end"],1),null!=l.opacity||null!=l.fill||null!=l.src||null!=l.stroke||null!=l["stroke-width"]||null!=l["stroke-opacity"]||null!=l["fill-opacity"]||null!=l["stroke-dasharray"]||null!=l["stroke-miterlimit"]||null!=l["stroke-linejoin"]||null!=l["stroke-linecap"]){var j=c.getElementsByTagName(h),I=!1;if(j=j&&j[0],!j&&(I=j=N(h)),"image"==n.type&&l.src&&(j.src=l.src),l.fill&&(j.on=!0),null!=j.on&&"none"!=l.fill&&null!==l.fill||(j.on=!1),j.on&&l.fill){var q=r(l.fill).match(t._ISURL);if(q){j.parentNode==c&&c.removeChild(j),j.rotate=!0,j.src=q[1],j.type="tile";var D=n.getBBox(1);j.position=D.x+p+D.y,n._.fillpos=[D.x,D.y],t._preload(q[1],function(){n._.fillsize=[this.offsetWidth,this.offsetHeight]})}else j.color=t.getRGB(l.fill).hex,j.src=d,j.type="solid",t.getRGB(l.fill).error&&(m.type in{circle:1,ellipse:1}||"r"!=r(l.fill).charAt())&&T(m,l.fill,j)&&(f.fill="none",f.gradient=l.fill,j.rotate=!1)}if("fill-opacity"in l||"opacity"in l){var V=((+f["fill-opacity"]+1||2)-1)*((+f.opacity+1||2)-1)*((+t.getRGB(l.fill).o+1||2)-1);V=o(s(V,0),1),j.opacity=V,j.src&&(j.color="none")}c.appendChild(j);var O=c.getElementsByTagName("stroke")&&c.getElementsByTagName("stroke")[0],Y=!1;!O&&(Y=O=N("stroke")),(l.stroke&&"none"!=l.stroke||l["stroke-width"]||null!=l["stroke-opacity"]||l["stroke-dasharray"]||l["stroke-miterlimit"]||l["stroke-linejoin"]||l["stroke-linecap"])&&(O.on=!0),("none"==l.stroke||null===l.stroke||null==O.on||0==l.stroke||0==l["stroke-width"])&&(O.on=!1);var W=t.getRGB(l.stroke);O.on&&l.stroke&&(O.color=W.hex),V=((+f["stroke-opacity"]+1||2)-1)*((+f.opacity+1||2)-1)*((+W.o+1||2)-1);var G=.75*(i(l["stroke-width"])||1);if(V=o(s(V,0),1),null==l["stroke-width"]&&(G=f["stroke-width"]),l["stroke-width"]&&(O.weight=G),G&&G<1&&(V*=G)&&(O.weight=1),O.opacity=V,l["stroke-linejoin"]&&(O.joinstyle=l["stroke-linejoin"]||"miter"),O.miterlimit=l["stroke-miterlimit"]||8,l["stroke-linecap"]&&(O.endcap="butt"==l["stroke-linecap"]?"flat":"square"==l["stroke-linecap"]?"square":"round"),"stroke-dasharray"in l){var H={"-":"shortdash",".":"shortdot","-.":"shortdashdot","-..":"shortdashdotdot",". ":"dot","- ":"dash","--":"longdash","- .":"dashdot","--.":"longdashdot","--..":"longdashdotdot"};O.dashstyle=H[e](l["stroke-dasharray"])?H[l["stroke-dasharray"]]:d}Y&&c.appendChild(O)}if("text"==m.type){m.paper.canvas.style.display=d;var X=m.paper.span,U=100,$=f.font&&f.font.match(/\d+(?:\.\d*)?(?=px)/);g=X.style,f.font&&(g.font=f.font),f["font-family"]&&(g.fontFamily=f["font-family"]),f["font-weight"]&&(g.fontWeight=f["font-weight"]),f["font-style"]&&(g.fontStyle=f["font-style"]),$=i(f["font-size"]||$&&$[0])||10,g.fontSize=$*U+"px",m.textpath.string&&(X.innerHTML=r(m.textpath.string).replace(/</g,"&#60;").replace(/&/g,"&#38;").replace(/\n/g,"<br>"));var Z=X.getBoundingClientRect();m.W=f.w=(Z.right-Z.left)/U,m.H=f.h=(Z.bottom-Z.top)/U,m.X=f.x,m.Y=f.y+m.H/2,("x"in l||"y"in l)&&(m.path.v=t.format("m{0},{1}l{2},{1}",a(f.x*b),a(f.y*b),a(f.x*b)+1));for(var Q=["x","y","text","font","font-family","font-weight","font-style","font-size"],J=0,K=Q.length;J<K;J++)if(Q[J]in l){m._.dirty=1;break}switch(f["text-anchor"]){case"start":m.textpath.style["v-text-align"]="left",m.bbx=m.W/2;break;case"end":m.textpath.style["v-text-align"]="right",m.bbx=-m.W/2;break;default:m.textpath.style["v-text-align"]="center",m.bbx=0}m.textpath.style["v-text-kern"]=!0}},T=function(e,a,s){e.attrs=e.attrs||{};var o=e.attrs,l=Math.pow,h,u,c="linear",f=".5 .5";if(e.attrs.gradient=a,a=r(a).replace(t._radial_gradient,function(t,e,r){return c="radial",e&&r&&(e=i(e),r=i(r),l(e-.5,2)+l(r-.5,2)>.25&&(r=n.sqrt(.25-l(e-.5,2))*(2*(r>.5)-1)+.5),f=e+p+r),d}),a=a.split(/\s*\-\s*/),"linear"==c){var g=a.shift();if(g=-i(g),isNaN(g))return null}var v=t._parseDots(a);if(!v)return null;if(e=e.shape||e.node,v.length){e.removeChild(s),s.on=!0,s.method="none",s.color=v[0].color,s.color2=v[v.length-1].color;for(var x=[],y=0,m=v.length;y<m;y++)v[y].offset&&x.push(v[y].offset+p+v[y].color);s.colors=x.length?x.join():"0% "+s.color,"radial"==c?(s.type="gradientTitle",s.focus="100%",s.focussize="0 0",s.focusposition=f,s.angle=0):(s.type="gradient",s.angle=(270-g)%360),e.appendChild(s)}return 1},E=function(e,r){this[0]=this.node=e,e.raphael=!0,this.id=t._oid++,e.raphaelid=this.id,this.X=0,this.Y=0,this.attrs={},this.paper=r,this.matrix=t.matrix(),this._={transform:[],sx:1,sy:1,dx:0,dy:0,deg:0,dirty:1,dirtyT:1},!r.bottom&&(r.bottom=this),this.prev=r.top,r.top&&(r.top.next=this),r.top=this,this.next=null},M=t.el;E.prototype=M,M.constructor=E,M.transform=function(e){if(null==e)return this._.transform;var i=this.paper._viewBoxShift,n=i?"s"+[i.scale,i.scale]+"-1-1t"+[i.dx,i.dy]:d,a;i&&(a=e=r(e).replace(/\.{3}|\u2026/g,this._.transform||d)),t._extractTransform(this,n+e);var s=this.matrix.clone(),o=this.skew,l=this.node,h,u=~r(this.attrs.fill).indexOf("-"),c=!r(this.attrs.fill).indexOf("url(");if(s.translate(1,1),c||u||"image"==this.type)if(o.matrix="1 0 0 1",o.offset="0 0",h=s.split(),u&&h.noRotation||!h.isSimple){l.style.filter=s.toFilter();var f=this.getBBox(),g=this.getBBox(1),v=f.x-g.x,x=f.y-g.y;l.coordorigin=v*-b+p+x*-b,C(this,1,1,v,x,0)}else l.style.filter=d,C(this,h.scalex,h.scaley,h.dx,h.dy,h.rotate);else l.style.filter=d,o.matrix=r(s),o.offset=s.offset();return null!==a&&(this._.transform=a,t._extractTransform(this,a)),this},M.rotate=function(t,e,n){if(this.removed)return this;if(null!=t){if(t=r(t).split(u),t.length-1&&(e=i(t[1]),n=i(t[2])),t=i(t[0]),null==n&&(e=n),null==e||null==n){var a=this.getBBox(1);e=a.x+a.width/2,n=a.y+a.height/2}return this._.dirtyT=1,this.transform(this._.transform.concat([["r",t,e,n]])),this}},M.translate=function(t,e){return this.removed?this:(t=r(t).split(u),t.length-1&&(e=i(t[1])),t=i(t[0])||0,e=+e||0,this._.bbox&&(this._.bbox.x+=t,this._.bbox.y+=e),this.transform(this._.transform.concat([["t",t,e]])),this)},M.scale=function(t,e,n,a){if(this.removed)return this;if(t=r(t).split(u),t.length-1&&(e=i(t[1]),n=i(t[2]),a=i(t[3]),isNaN(n)&&(n=null),isNaN(a)&&(a=null)),t=i(t[0]),null==e&&(e=t),null==a&&(n=a),null==n||null==a)var s=this.getBBox(1);return n=null==n?s.x+s.width/2:n,a=null==a?s.y+s.height/2:a,this.transform(this._.transform.concat([["s",t,e,n,a]])),this._.dirtyT=1,this},M.hide=function(){return!this.removed&&(this.node.style.display="none"),this},M.show=function(){return!this.removed&&(this.node.style.display=d),this},M.auxGetBBox=t.el.getBBox,M.getBBox=function(){var t=this.auxGetBBox();if(this.paper&&this.paper._viewBoxShift){var e={},r=1/this.paper._viewBoxShift.scale;return e.x=t.x-this.paper._viewBoxShift.dx,e.x*=r,e.y=t.y-this.paper._viewBoxShift.dy,e.y*=r,e.width=t.width*r,e.height=t.height*r,e.x2=e.x+e.width,e.y2=e.y+e.height,e}return t},M._getBBox=function(){return this.removed?{}:{x:this.X+(this.bbx||0)-this.W/2,y:this.Y-this.H,width:this.W,height:this.H}},M.remove=function(){if(!this.removed&&this.node.parentNode){this.paper.__set__&&this.paper.__set__.exclude(this),t.eve.unbind("raphael.*.*."+this.id),t._tear(this,this.paper),this.node.parentNode.removeChild(this.node),this.shape&&this.shape.parentNode.removeChild(this.shape);for(var e in this)this[e]="function"==typeof this[e]?t._removedFactory(e):null;this.removed=!0}},M.attr=function(r,i){if(this.removed)return this;if(null==r){var n={};for(var a in this.attrs)this.attrs[e](a)&&(n[a]=this.attrs[a]);return n.gradient&&"none"==n.fill&&(n.fill=n.gradient)&&delete n.gradient,n.transform=this._.transform,n}if(null==i&&t.is(r,"string")){if(r==h&&"none"==this.attrs.fill&&this.attrs.gradient)return this.attrs.gradient;for(var s=r.split(u),o={},l=0,f=s.length;l<f;l++)r=s[l],r in this.attrs?o[r]=this.attrs[r]:t.is(this.paper.customAttributes[r],"function")?o[r]=this.paper.customAttributes[r].def:o[r]=t._availableAttrs[r];return f-1?o:o[s[0]]}if(this.attrs&&null==i&&t.is(r,"array")){for(o={},l=0,f=r.length;l<f;l++)o[r[l]]=this.attr(r[l]);return o}var p;null!=i&&(p={},p[r]=i),null==i&&t.is(r,"object")&&(p=r);for(var d in p)c("raphael.attr."+d+"."+this.id,this,p[d]);if(p){for(d in this.paper.customAttributes)if(this.paper.customAttributes[e](d)&&p[e](d)&&t.is(this.paper.customAttributes[d],"function")){var g=this.paper.customAttributes[d].apply(this,[].concat(p[d]));this.attrs[d]=p[d];for(var v in g)g[e](v)&&(p[v]=g[v])}p.text&&"text"==this.type&&(this.textpath.string=p.text),A(this,p)}return this},M.toFront=function(){return!this.removed&&this.node.parentNode.appendChild(this.node),this.paper&&this.paper.top!=this&&t._tofront(this,this.paper),this},M.toBack=function(){return this.removed?this:(this.node.parentNode.firstChild!=this.node&&(this.node.parentNode.insertBefore(this.node,this.node.parentNode.firstChild),t._toback(this,this.paper)),this)},M.insertAfter=function(e){return this.removed?this:(e.constructor==t.st.constructor&&(e=e[e.length-1]),e.node.nextSibling?e.node.parentNode.insertBefore(this.node,e.node.nextSibling):e.node.parentNode.appendChild(this.node),t._insertafter(this,e,this.paper),this)},M.insertBefore=function(e){return this.removed?this:(e.constructor==t.st.constructor&&(e=e[0]),e.node.parentNode.insertBefore(this.node,e.node),t._insertbefore(this,e,this.paper),this)},M.blur=function(e){var r=this.node.runtimeStyle,i=r.filter;return i=i.replace(x,d),0!==+e?(this.attrs.blur=e,r.filter=i+p+f+".Blur(pixelradius="+(+e||1.5)+")",r.margin=t.format("-{0}px 0 0 -{0}px",a(+e||1.5))):(r.filter=i,r.margin=0,delete this.attrs.blur),this},t._engine.path=function(t,e){var r=N("shape");r.style.cssText=m,r.coordsize=b+p+b,r.coordorigin=e.coordorigin;var i=new E(r,e),n={fill:"none",stroke:"#000"};t&&(n.path=t),i.type="path",i.path=[],i.Path=d,A(i,n),e.canvas&&e.canvas.appendChild(r);var a=N("skew");return a.on=!0,r.appendChild(a),i.skew=a,i.transform(d),i},t._engine.rect=function(e,r,i,n,a,s){var o=t._rectPath(r,i,n,a,s),l=e.path(o),h=l.attrs;return l.X=h.x=r,l.Y=h.y=i,l.W=h.width=n,l.H=h.height=a,h.r=s,h.path=o,l.type="rect",l},t._engine.ellipse=function(t,e,r,i,n){var a=t.path(),s=a.attrs;return a.X=e-i,a.Y=r-n,a.W=2*i,a.H=2*n,a.type="ellipse",A(a,{cx:e,cy:r,rx:i,ry:n}),a},t._engine.circle=function(t,e,r,i){var n=t.path(),a=n.attrs;return n.X=e-i,n.Y=r-i,n.W=n.H=2*i,n.type="circle",A(n,{cx:e,cy:r,r:i}),n},t._engine.image=function(e,r,i,n,a,s){var o=t._rectPath(i,n,a,s),l=e.path(o).attr({stroke:"none"}),u=l.attrs,c=l.node,f=c.getElementsByTagName(h)[0];return u.src=r,l.X=u.x=i,l.Y=u.y=n,l.W=u.width=a,l.H=u.height=s,u.path=o,l.type="image",f.parentNode==c&&c.removeChild(f),f.rotate=!0,f.src=r,f.type="tile",l._.fillpos=[i,n],l._.fillsize=[a,s],c.appendChild(f),C(l,1,1,0,0,0),l},t._engine.text=function(e,i,n,s){var o=N("shape"),l=N("path"),h=N("textpath");i=i||0,n=n||0,s=s||"",l.v=t.format("m{0},{1}l{2},{1}",a(i*b),a(n*b),a(i*b)+1),l.textpathok=!0,h.string=r(s),h.on=!0,o.style.cssText=m,o.coordsize=b+p+b,o.coordorigin="0 0";var u=new E(o,e),c={fill:"#000",stroke:"none",font:t._availableAttrs.font,text:s};u.shape=o,u.path=l,u.textpath=h,u.type="text",u.attrs.text=r(s),u.attrs.x=i,u.attrs.y=n,u.attrs.w=1,u.attrs.h=1,A(u,c),o.appendChild(h),o.appendChild(l),e.canvas.appendChild(o);var f=N("skew");return f.on=!0,o.appendChild(f),u.skew=f,u.transform(d),u},t._engine.setSize=function(e,r){var i=this.canvas.style;return this.width=e,this.height=r,e==+e&&(e+="px"),r==+r&&(r+="px"),i.width=e,i.height=r,i.clip="rect(0 "+e+" "+r+" 0)",this._viewBox&&t._engine.setViewBox.apply(this,this._viewBox),this},t._engine.setViewBox=function(e,r,i,n,a){t.eve("raphael.setViewBox",this,this._viewBox,[e,r,i,n,a]);var s=this.getSize(),o=s.width,l=s.height,h,u;return a&&(h=l/n,u=o/i,i*h<o&&(e-=(o-i*h)/2/h),n*u<l&&(r-=(l-n*u)/2/u)),this._viewBox=[e,r,i,n,!!a],this._viewBoxShift={dx:-e,dy:-r,scale:s},this.forEach(function(t){t.transform("...")}),this};var N;t._engine.initWin=function(t){var e=t.document;e.styleSheets.length<31?e.createStyleSheet().addRule(".rvml","behavior:url(#default#VML)"):e.styleSheets[0].addRule(".rvml","behavior:url(#default#VML)");try{!e.namespaces.rvml&&e.namespaces.add("rvml","urn:schemas-microsoft-com:vml"),N=function(t){return e.createElement("<rvml:"+t+' class="rvml">')}}catch(r){N=function(t){return e.createElement("<"+t+' xmlns="urn:schemas-microsoft.com:vml" class="rvml">')}}},t._engine.initWin(t._g.win),t._engine.create=function(){var e=t._getContainer.apply(0,arguments),r=e.container,i=e.height,n,a=e.width,s=e.x,o=e.y;if(!r)throw new Error("VML container not found.");var l=new t._Paper,h=l.canvas=t._g.doc.createElement("div"),u=h.style;return s=s||0,o=o||0,a=a||512,i=i||342,l.width=a,l.height=i,a==+a&&(a+="px"),i==+i&&(i+="px"),l.coordsize=1e3*b+p+1e3*b,l.coordorigin="0 0",l.span=t._g.doc.createElement("span"),l.span.style.cssText="position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;",h.appendChild(l.span),u.cssText=t.format("top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden",a,i),1==r?(t._g.doc.body.appendChild(h),u.left=s+"px",u.top=o+"px",u.position="absolute"):r.firstChild?r.insertBefore(h,r.firstChild):r.appendChild(h),l.renderfix=function(){},l},t.prototype.clear=function(){t.eve("raphael.clear",this),this.canvas.innerHTML=d,this.span=t._g.doc.createElement("span"),this.span.style.cssText="position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;",this.canvas.appendChild(this.span),this.bottom=this.top=null},t.prototype.remove=function(){t.eve("raphael.remove",this),this.canvas.parentNode.removeChild(this.canvas);for(var e in this)this[e]="function"==typeof this[e]?t._removedFactory(e):null;return!0};var L=t.st;for(var z in M)M[e](z)&&!L[e](z)&&(L[z]=function(t){return function(){var e=arguments;return this.forEach(function(r){r[t].apply(r,e)})}}(z))}}.apply(e,i),!(void 0!==n&&(t.exports=n))}])});

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var Enumerable, Prototype, Class, Template;
Prototype = __webpack_require__(6);
            __webpack_require__(8);
Class =     __webpack_require__(10);
            __webpack_require__(13);
            __webpack_require__(15);
            __webpack_require__(18);
            __webpack_require__(23);
Template =  __webpack_require__(24);

$break = {};
module.exports = Enumerable = (function() {
  function each(iterator, context) {
    var index = 0;
    try {
      this._each(function(value) {
        iterator.call(context, value, index++);
      });
    } catch (e) {
      if (e != $break) throw e;
    }
    return this;
  }

  function eachSlice(number, iterator, context) {
    var index = -number, slices = [], array = this.toArray();
    if (number < 1) return array;
    while ((index += number) < array.length)
      slices.push(array.slice(index, index+number));
    return slices.collect(iterator, context);
  }

  function all(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = true;
    this.each(function(value, index) {
      result = result && !!iterator.call(context, value, index);
      if (!result) throw $break;
    });
    return result;
  }

  function any(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = false;
    this.each(function(value, index) {
      if (result = !!iterator.call(context, value, index))
        throw $break;
    });
    return result;
  }

  function collect(iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];
    this.each(function(value, index) {
      results.push(iterator.call(context, value, index));
    });
    return results;
  }

  function detect(iterator, context) {
    var result;
    this.each(function(value, index) {
      if (iterator.call(context, value, index)) {
        result = value;
        throw $break;
      }
    });
    return result;
  }

  function findAll(iterator, context) {
    var results = [];
    this.each(function(value, index) {
      if (iterator.call(context, value, index))
        results.push(value);
    });
    return results;
  }

  function grep(filter, iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];

    if (Object.isString(filter))
      filter = new RegExp(RegExp.escape(filter));

    this.each(function(value, index) {
      if (filter.match(value))
        results.push(iterator.call(context, value, index));
    });
    return results;
  }

  function include(object) {
    if (Object.isFunction(this.indexOf))
      if (this.indexOf(object) != -1) return true;

    var found = false;
    this.each(function(value) {
      if (value == object) {
        found = true;
        throw $break;
      }
    });
    return found;
  }

  function inGroupsOf(number, fillWith) {
    fillWith = Object.isUndefined(fillWith) ? null : fillWith;
    return this.eachSlice(number, function(slice) {
      while(slice.length < number) slice.push(fillWith);
      return slice;
    });
  }

  function inject(memo, iterator, context) {
    this.each(function(value, index) {
      memo = iterator.call(context, memo, value, index);
    });
    return memo;
  }

  function invoke(method) {
    var args = $A(arguments).slice(1);
    return this.map(function(value) {
      return value[method].apply(value, args);
    });
  }

  function max(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function(value, index) {
      value = iterator.call(context, value, index);
      if (result == null || value >= result)
        result = value;
    });
    return result;
  }

  function min(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function(value, index) {
      value = iterator.call(context, value, index);
      if (result == null || value < result)
        result = value;
    });
    return result;
  }

  function partition(iterator, context) {
    iterator = iterator || Prototype.K;
    var trues = [], falses = [];
    this.each(function(value, index) {
      (iterator.call(context, value, index) ?
        trues : falses).push(value);
    });
    return [trues, falses];
  }

  function pluck(property) {
    var results = [];
    this.each(function(value) {
      results.push(value[property]);
    });
    return results;
  }

  function reject(iterator, context) {
    var results = [];
    this.each(function(value, index) {
      if (!iterator.call(context, value, index))
        results.push(value);
    });
    return results;
  }

  function sortBy(iterator, context) {
    return this.map(function(value, index) {
      return {
        value: value,
        criteria: iterator.call(context, value, index)
      };
    }).sort(function(left, right) {
      var a = left.criteria, b = right.criteria;
      return a < b ? -1 : a > b ? 1 : 0;
    }).pluck('value');
  }

  function toArray() {
    return this.map();
  }

  function zip() {
    var iterator = Prototype.K, args = $A(arguments);
    if (Object.isFunction(args.last()))
      iterator = args.pop();

    var collections = [this].concat(args).map($A);
    return this.map(function(value, index) {
      return iterator(collections.pluck(index));
    });
  }

  function size() {
    return this.toArray().length;
  }

  function inspect() {
    return '#<Enumerable:' + this.toArray().inspect() + '>';
  }









  return {
    each:       each,
    eachSlice:  eachSlice,
    all:        all,
    every:      all,
    any:        any,
    some:       any,
    collect:    collect,
    map:        collect,
    detect:     detect,
    findAll:    findAll,
    select:     findAll,
    filter:     findAll,
    grep:       grep,
    include:    include,
    member:     include,
    inGroupsOf: inGroupsOf,
    inject:     inject,
    invoke:     invoke,
    max:        max,
    min:        min,
    partition:  partition,
    pluck:      pluck,
    reject:     reject,
    sortBy:     sortBy,
    toArray:    toArray,
    entries:    toArray,
    zip:        zip,
    size:       size,
    inspect:    inspect,
    find:       detect
  };
})();

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var _indexOf = __webpack_require__(118);


module.exports = function _contains(a, list) {
  return _indexOf(list, a, 0) >= 0;
};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

var _checkForMethod = __webpack_require__(34);
var _curry3 = __webpack_require__(2);


/**
 * Returns the elements of the given list or string (or object with a `slice`
 * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
 *
 * Dispatches to the `slice` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @sig Number -> Number -> String -> String
 * @param {Number} fromIndex The start index (inclusive).
 * @param {Number} toIndex The end index (exclusive).
 * @param {*} list
 * @return {*}
 * @example
 *
 *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
 *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
 *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
 *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
 *      R.slice(0, 3, 'ramda');                     //=> 'ram'
 */
module.exports = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {
  return Array.prototype.slice.call(list, fromIndex, toIndex);
}));


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var Hash, Enumerable, Prototype, Class, Template, $A, $w;
Prototype =   __webpack_require__(6);
              __webpack_require__(8);
Class =       __webpack_require__(10);
              __webpack_require__(13);
              __webpack_require__(15);
              __webpack_require__(18);
              __webpack_require__(23);
Template =    __webpack_require__(24);
Enumerable =  __webpack_require__(28);
$A =          __webpack_require__(17).A;
$w =          __webpack_require__(17).w;

function $H(object) {
  return new Hash(object);
};

Hash = Class.create(Enumerable, (function() {
  function initialize(object) {
    this._object = Object.isHash(object) ? object.toObject() : Object.clone(object);
  }


  function _each(iterator) {
    for (var key in this._object) {
      var value = this._object[key], pair = [key, value];
      pair.key = key;
      pair.value = value;
      iterator(pair);
    }
  }

  function set(key, value) {
    return this._object[key] = value;
  }

  function get(key) {
    if (this._object[key] !== Object.prototype[key])
      return this._object[key];
  }

  function unset(key) {
    var value = this._object[key];
    delete this._object[key];
    return value;
  }

  function toObject() {
    return Object.clone(this._object);
  }



  function keys() {
    return this.pluck('key');
  }

  function values() {
    return this.pluck('value');
  }

  function index(value) {
    var match = this.detect(function(pair) {
      return pair.value === value;
    });
    return match && match.key;
  }

  function merge(object) {
    return this.clone().update(object);
  }

  function update(object) {
    return new Hash(object).inject(this, function(result, pair) {
      result.set(pair.key, pair.value);
      return result;
    });
  }

  function toQueryPair(key, value) {
    if (Object.isUndefined(value)) return key;
    return key + '=' + encodeURIComponent(String.interpret(value));
  }

  function toQueryString() {
    return this.inject([], function(results, pair) {
      var key = encodeURIComponent(pair.key), values = pair.value;

      if (values && typeof values == 'object') {
        if (Object.isArray(values)) {
          var queryValues = [];
          for (var i = 0, len = values.length, value; i < len; i++) {
            value = values[i];
            queryValues.push(toQueryPair(key, value));
          }
          return results.concat(queryValues);
        }
      } else results.push(toQueryPair(key, values));
      return results;
    }).join('&');
  }

  function inspect() {
    return '#<Hash:{' + this.map(function(pair) {
      return pair.map(Object.inspect).join(': ');
    }).join(', ') + '}>';
  }

  function clone() {
    return new Hash(this);
  }

  return {
    initialize:             initialize,
    _each:                  _each,
    set:                    set,
    get:                    get,
    unset:                  unset,
    toObject:               toObject,
    toTemplateReplacements: toObject,
    keys:                   keys,
    values:                 values,
    index:                  index,
    merge:                  merge,
    update:                 update,
    toQueryString:          toQueryString,
    inspect:                inspect,
    toJSON:                 toObject,
    clone:                  clone
  };
})());
Hash.from = $H;
module.exports = {
    H:$H,
    Hash:Hash
};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);


/**
 * Returns a function that always returns the given value. Note that for
 * non-primitives the value returned is a reference to the original value.
 *
 * This function is known as `const`, `constant`, or `K` (for K combinator) in
 * other languages and libraries.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> (* -> a)
 * @param {*} val The value to wrap in a function
 * @return {Function} A Function :: * -> val.
 * @example
 *
 *      var t = R.always('Tee');
 *      t(); //=> 'Tee'
 */
module.exports = _curry1(function always(val) {
  return function() {
    return val;
  };
});


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns the larger of its two arguments.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> a
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.maxBy, R.min
 * @example
 *
 *      R.max(789, 123); //=> 789
 *      R.max('a', 'b'); //=> 'b'
 */
module.exports = _curry2(function max(a, b) { return b > a ? b : a; });


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var _isArray = __webpack_require__(25);


/**
 * This checks whether a function has a [methodname] function. If it isn't an
 * array it will execute that function otherwise it will default to the ramda
 * implementation.
 *
 * @private
 * @param {Function} fn ramda implemtation
 * @param {String} methodname property to check for a custom implementation
 * @return {Object} Whatever the return value of the method is.
 */
module.exports = function _checkForMethod(methodname, fn) {
  return function() {
    var length = arguments.length;
    if (length === 0) {
      return fn();
    }
    var obj = arguments[length - 1];
    return (_isArray(obj) || typeof obj[methodname] !== 'function') ?
      fn.apply(this, arguments) :
      obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
  };
};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _isFunction = __webpack_require__(52);
var curryN = __webpack_require__(7);
var toString = __webpack_require__(40);


/**
 * Turns a named method with a specified arity into a function that can be
 * called directly supplied with arguments and a target object.
 *
 * The returned function is curried and accepts `arity + 1` parameters where
 * the final parameter is the target object.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)
 * @param {Number} arity Number of arguments the returned function should take
 *        before the target object.
 * @param {String} method Name of the method to call.
 * @return {Function} A new curried function.
 * @example
 *
 *      var sliceFrom = R.invoker(1, 'slice');
 *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'
 *      var sliceFrom6 = R.invoker(2, 'slice')(6);
 *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'
 * @symb R.invoker(0, 'method')(o) = o['method']()
 * @symb R.invoker(1, 'method')(a, o) = o['method'](a)
 * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)
 */
module.exports = _curry2(function invoker(arity, method) {
  return curryN(arity + 1, function() {
    var target = arguments[arity];
    if (target != null && _isFunction(target[method])) {
      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
    }
    throw new TypeError(toString(target) + ' does not have a method named "' + method + '"');
  });
});


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _isArray = __webpack_require__(25);
var _isString = __webpack_require__(54);


/**
 * Tests whether or not an object is similar to an array.
 *
 * @func
 * @memberOf R
 * @since v0.5.0
 * @category Type
 * @category List
 * @sig * -> Boolean
 * @param {*} x The object to test.
 * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
 * @deprecated since v0.23.0
 * @example
 *
 *      R.isArrayLike([]); //=> true
 *      R.isArrayLike(true); //=> false
 *      R.isArrayLike({}); //=> false
 *      R.isArrayLike({length: 10}); //=> false
 *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
 */
module.exports = _curry1(function isArrayLike(x) {
  if (_isArray(x)) { return true; }
  if (!x) { return false; }
  if (typeof x !== 'object') { return false; }
  if (_isString(x)) { return false; }
  if (x.nodeType === 1) { return !!x.length; }
  if (x.length === 0) { return true; }
  if (x.length > 0) {
    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
  }
  return false;
});


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _isString = __webpack_require__(54);


/**
 * Returns the nth element of the given list or string. If n is negative the
 * element at index length + n is returned.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> a | Undefined
 * @sig Number -> String -> String
 * @param {Number} offset
 * @param {*} list
 * @return {*}
 * @example
 *
 *      var list = ['foo', 'bar', 'baz', 'quux'];
 *      R.nth(1, list); //=> 'bar'
 *      R.nth(-1, list); //=> 'quux'
 *      R.nth(-99, list); //=> undefined
 *
 *      R.nth(2, 'abc'); //=> 'c'
 *      R.nth(3, 'abc'); //=> ''
 * @symb R.nth(-1, [a, b, c]) = c
 * @symb R.nth(0, [a, b, c]) = a
 * @symb R.nth(1, [a, b, c]) = b
 */
module.exports = _curry2(function nth(offset, list) {
  var idx = offset < 0 ? list.length + offset : offset;
  return _isString(list) ? list.charAt(idx) : list[idx];
});


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Retrieve the value at a given path.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> {a} -> a | Undefined
 * @param {Array} path The path to use.
 * @param {Object} obj The object to retrieve the nested property from.
 * @return {*} The data at `path`.
 * @see R.prop
 * @example
 *
 *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
 *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined
 */
module.exports = _curry2(function path(paths, obj) {
  var val = obj;
  var idx = 0;
  while (idx < paths.length) {
    if (val == null) {
      return;
    }
    val = val[paths[idx]];
    idx += 1;
  }
  return val;
});


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var map = __webpack_require__(11);
var prop = __webpack_require__(79);


/**
 * Returns a new list by plucking the same named property off all objects in
 * the list supplied.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig k -> [{k: v}] -> [v]
 * @param {Number|String} key The key name to pluck off of each object.
 * @param {Array} list The array to consider.
 * @return {Array} The list of values for the given key.
 * @see R.props
 * @example
 *
 *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]
 *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]
 * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]
 * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]
 */
module.exports = _curry2(function pluck(p, list) {
  return map(prop(p), list);
});


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _toString = __webpack_require__(258);


/**
 * Returns the string representation of the given value. `eval`'ing the output
 * should result in a value equivalent to the input value. Many of the built-in
 * `toString` methods do not satisfy this requirement.
 *
 * If the given value is an `[object Object]` with a `toString` method other
 * than `Object.prototype.toString`, this method is invoked with no arguments
 * to produce the return value. This means user-defined constructor functions
 * can provide a suitable `toString` method. For example:
 *
 *     function Point(x, y) {
 *       this.x = x;
 *       this.y = y;
 *     }
 *
 *     Point.prototype.toString = function() {
 *       return 'new Point(' + this.x + ', ' + this.y + ')';
 *     };
 *
 *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category String
 * @sig * -> String
 * @param {*} val
 * @return {String}
 * @example
 *
 *      R.toString(42); //=> '42'
 *      R.toString('abc'); //=> '"abc"'
 *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'
 *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{"bar": 2, "baz": 3, "foo": 1}'
 *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date("2001-02-03T04:05:06.000Z")'
 */
module.exports = _curry1(function toString(val) { return _toString(val, []); });


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__ = __webpack_require__(12);

/**
 * AbstractNodeVisuals is the general abstract class for the graphic engine used by nodes on the Pedigree graph.
 * Objects of this class have information about the positioning of the graphical elements of the node.
 *
 * @class AbstractNodeVisuals
 * @constructor
 * @param {AbstractNode} node The node for which the graphics are drawn
 * @param {Number} x The x coordinate on the canvas
 * @param {Number} y The y coordinate on the canvas
 */

const AbstractNodeVisuals = Class.create({

    initialize: function (node, x, y) {
        //console.log("abstract node visuals");
        this._node = node;
        this._absoluteX = x;
        this._absoluteY = y;
        this._hoverBox = null;
        this._isGrown = false;
        //console.log("abstract node visuals end");
    },

    /**
     * Returns the node for which the graphics are being drawn
     *
     * @method getNode
     * @return {AbstractNode}
     */
    getNode: function () {
        return this._node;
    },

    /**
     * Returns the current X coordinate of this node on the canvas, taking into consideration transformation data.
     *
     * @method getX
     * @return {Number} the x coordinate
     */
    getX: function () {
        return this._absoluteX;
    },

    /**
     * Updates whatever needs to change when node id changes (e.g. id label) 
     *
     * @method onSetID
     */
    onSetID: function (id) {},

    /**
     * Returns the current Y coordinate of this node on the canvas, taking into consideration transformation data.
     *
     * @method getY
     * @return {Number} The y coordinate
     */
    getY: function () {
        return this._absoluteY;
    },

    /**
     * Returns the Y coordinate of the lowest part of this node's graphic on the canvas
     *
     * @method getY
     * @return {Number} The y coordinate
     */
    getBottomY: function () {
        return this._absoluteY;
    },

    /**
     * Changes the position of the node to (X,Y)
     *
     * @method setPos
     * @param {Number} x The x coordinate
     * @param {Number} y The y coordinate
     * @param {Boolean} animate Set to true if you want to animate the transition
     * @param {Function} callback The function called at the end of the animation
     */
    setPos: function (x, y, animate, callback) {
        //console.log("Node " + this.getNode().getID() + ", xy: " + x + "/" + y);
        this._absoluteX = x;
        this._absoluteY = y;
        callback && callback();
    },

    /**
     * Expands the node graphics a bit
     *
     * @method grow
     */
    grow: function () {
        this._isGrown = true;
    },

    /**
     * Shrinks node graphics to the original size
     *
     * @method shrink
     */
    shrink: function () {
        this._isGrown = false;
    },

    /**
     * Returns current growth status of the node (true if grown, false if not)
     *
     * @method isGrown
     */
    isGrown: function () {
        return this._isGrown;
    },

    /**
     * Returns true if this node's graphic representation covers coordinates (x,y)
     *
     * @method containsXY
     */
    containsXY: function (x, y) {
        return false;
    },

    /**
     * Returns true if this node is selected. A selected node is a node with visible Hoverbox.
     *
     * @method isSelected
     * @return {Boolean}
     */
    isSelected: function () {
        return this._isSelected;
    },

    /**
     * Sets this node's selected property to isSelected. A selected node is a node with visible Hoverbox.
     *
     * @method setSelected
     * @param {Boolean} isSelected True if the node is selected
     */
    setSelected: function (isSelected) {
        this._isSelected = isSelected;
    },

    /**
     * Returns a Raphael set of all the graphics and labels associated with this node.
     *
     * @method getAllGraphics
     * @return {Raphael.st}
     */
    getAllGraphics: function () {
        return editor.getPaper().set(this.getShapes());
    },

    /**
     * Returns a Raphael set of graphic elements of which the icon of the node consists. Does not
     * include hoverbox elements or labels.
     *
     * @method getShapes
     * @return {Raphael.st}
     */
    getShapes: function () {
        return editor.getPaper().set();
    },

    /**
     * Removes all the graphical elements of this node from the canvas
     *
     * @method remove
     */
    remove: function () {
        this.getHoverBox() && this.getHoverBox().remove();
        this.getAllGraphics().remove();
    },

    /**
     * Returns the hoverbox object for this node
     *
     * @method getHoverBox
     * @return {AbstractHoverbox}
     */
    getHoverBox: function () {
        return this._hoverBox;
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = AbstractNodeVisuals;


const ChildlessBehaviorVisuals = {

    /**
     * Returns the childless status shape for this Person
     *
     * @method getChildlessShape
     * @return {Raphael.el}
     */
    getChildlessShape: function () {
        return this._childlessShape;
    },

    /**
     * Returns the Raphaël element for this Person's childless status reason label
     *
     * @method getChildlessStatusLabel
     * @return {Raphael.el}
     */
    getChildlessStatusLabel: function () {
        return this._childlessStatusLabel;
    },

    /**
     * Updates the childless status icon for this Node based on the childless/infertility status.
     *
     * @method updateChildlessShapes
     */
    updateChildlessShapes: function () {
        var status = this.getNode().getChildlessStatus();
        this._childlessShape && this._childlessShape.remove();

        if (status) {
            var x = this.getX();
            var y = this.getY();
            var r = __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].infertileMarkerWidth;
            var lowY = this.getBottomY() + __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].infertileMarkerHeight;

            var childlessPath = [["M", x, y], ["L", x, lowY], ["M", x - r, lowY], ["l", 2 * r, 0]];
            if (status == "infertile") childlessPath.push(["M", x - r, lowY + 5], ["l", 2 * r, 0]);

            var strokeWidth = 2.5; //editor.getWorkspace().getSizeNormalizedToDefaultZoom(2);
            this._childlessShape = editor.getPaper().path(childlessPath);
            this._childlessShape.attr({ "stroke-width": strokeWidth, stroke: "#3C3C3C" });
            this._childlessShape.toBack();
        }
    },

    /**
     * Updates the childless status reason label for this Person
     *
     * @method updateChildlessStatusLabel
     */
    updateChildlessStatusLabel: function () {
        this._childlessStatusLabel && this._childlessStatusLabel.remove();
        this._childlessStatusLabel = null;

        var text = "";
        this.getNode().getChildlessReason() && (text += this.getNode().getChildlessReason());

        if (text.strip() != "") {
            this._childlessStatusLabel = editor.getPaper().text(this.getX(), this.getBottomY() + 18, "(" + text.slice(0, 15) + ")");
            this._childlessStatusLabel.attr({ "font-size": 18, "font-family": "Cambria" });
            this._childlessStatusLabel.toBack();
        }

        this.drawLabels();
    }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = ChildlessBehaviorVisuals;


/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__queues__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers__ = __webpack_require__(5);
/* harmony export (immutable) */ __webpack_exports__["a"] = BaseGraph;



// BaseGraph represents the pedigree tree as a graph of nodes and edges with certain
//           properties attached to both (e.g. names for nodes and weights for edges).
//
//           Nodes represent either persons or partnerships, while edges represent
//           either "is part of this partnership" or "is a child of" relationships
//           between the connected nodes.
//
// BaseGraph contains only the information found in the pedigree (plus possibly
//           some cached data), i.e. there is no layout data here.

function BaseGraph(defaultPersonNodeWidth, defaultNonPersonNodeWidth) {
    this.v = []; // for each V lists (as unordered arrays of ids) vertices connected from V
    this.inedges = []; // for each V lists (as unordered arrays of ids) vertices connecting to V

    this.maxRealVertexId = -1; // used for separation of real vertices from virtual-multi-rank-edge-breaking ones (stored for performance)

    this.weights = []; // for each V contains outgoing edge weights as {target1: weight1, t2: w2}

    this.type = []; // for each V node type (see TYPE)
    this.properties = []; // for each V a set of type-specific properties {"gender": "M"/"F"/"U", etc.}

    this.vWidth = [];
    this.defaultPersonNodeWidth = defaultPersonNodeWidth ? defaultPersonNodeWidth : 10;
    this.defaultNonPersonNodeWidth = defaultNonPersonNodeWidth ? defaultNonPersonNodeWidth : 2;
}

const TYPE = {
    RELATIONSHIP: 1,
    CHILDHUB: 2,
    PERSON: 3,
    VIRTUALEDGE: 4 // for nodes not present in the original graph used as intermediate steps in multi-rank edges
};
/* harmony export (immutable) */ __webpack_exports__["b"] = TYPE;


BaseGraph.prototype = {

    serialize: function (saveWidth) {
        var output = [];

        for (var v = 0; v < this.v.length; v++) {
            var data = {};

            data["id"] = v;

            if (saveWidth) // may not want this for compactness of output when all width are equal to default
                data["width"] = this.vWidth[v];

            if (this.type[v] == TYPE.PERSON) {
                //
            } else if (this.type[v] == TYPE.RELATIONSHIP) {
                data["rel"] = true;
                data["hub"] = true;
            } else if (this.type[v] == TYPE.CHILDHUB) {
                data["chhub"] = true;
            } else data["virt"] = true;

            data["prop"] = this.properties[v];

            const out = [];
            var outEdges = this.getOutEdges(v);
            for (var i = 0; i < outEdges.length; i++) {
                var to = outEdges[i];
                var weight = this.getEdgeWeight(v, to);
                if (weight == 1) out.push({ "to": outEdges[i] });else out.push({ "to": outEdges[i], "weight": weight });
            }

            if (out.length > 0) data["outedges"] = out;

            output.push(data);
        }

        return output;
    },

    //-[construction for ordering]--------------------------

    // After rank assignment, edges between nodes more than one rank apart are replaced by
    // chains of unit length edges between temporary or ‘‘virtual’’ nodes. The virtual nodes are
    // placed on the intermediate ranks, converting the original graph into one whose edges connect
    // only nodes on adjacent ranks
    //
    // Note: ranks is modified to contain ranks of virtual nodes as well

    makeGWithSplitMultiRankEdges: function (ranks) {
        var i;
        var newG = new BaseGraph(this.defaultPersonNodeWidth, this.defaultNonPersonNodeWidth);

        // add all original vertices
        for (i = 0; i < this.v.length; i++) {
            newG._addVertex(i, this.type[i], this.properties[i], this.vWidth[i]);
        }

        // go over all original edges:
        // - if edge conects vertices with adjacent ranks just add it
        // - else create a series of virtual vertices and edges and add them together
        for (var sourceV = 0; sourceV < this.v.length; sourceV++) {

            var sourceRank = ranks[sourceV];

            for (i = 0; i < this.v[sourceV].length; i++) {
                var targetV = this.v[sourceV][i];

                var weight = this.getEdgeWeight(sourceV, targetV);

                var targetRank = ranks[targetV];

                if (targetRank < sourceRank) throw "Assertion failed: only forward edges";

                if (targetRank == sourceRank + 1 || targetRank == sourceRank) {
                    newG.addEdge(sourceV, targetV, weight);
                } else {
                    // create virtual vertices & edges
                    var prevV = sourceV;
                    for (var midRank = sourceRank + 1; midRank <= targetRank - 1; midRank++) {
                        var nextV = newG._addVertex(null, TYPE.VIRTUALEDGE, { "fName": "_" + sourceV + "->" + targetV + "_" + (midRank - sourceRank - 1) }, this.defaultNonPersonNodeWidth);
                        ranks[nextV] = midRank;
                        newG.addEdge(prevV, nextV, weight);
                        prevV = nextV;
                    }
                    newG.addEdge(prevV, targetV, weight);
                }
            }
        }

        newG.validate();

        return newG;
    },

    makeGWithCollapsedMultiRankEdges: function () {
        var i;
        // performs the opposite of what makeGWithSplitMultiRankEdges() does
        var newG = new BaseGraph(this.defaultPersonNodeWidth, this.defaultNonPersonNodeWidth);

        // add all original vertices
        for (i = 0; i <= this.maxRealVertexId; i++) {
            newG._addVertex(i, this.type[i], this.properties[i], this.vWidth[i]);
        }

        // go over all original edges:
        // - if edge conects two non-virtual vertices just add it
        // - else add an edge to the first non-virtual edge at the end of the chain of virtual edges
        for (var sourceV = 0; sourceV <= this.maxRealVertexId; sourceV++) {

            for (i = 0; i < this.v[sourceV].length; i++) {
                var targetV = this.v[sourceV][i];

                var weight = this.getEdgeWeight(sourceV, targetV);

                while (targetV > this.maxRealVertexId) targetV = this.getOutEdges(targetV)[0];

                newG.addEdge(sourceV, targetV, weight);
            }
        }

        newG.validate();

        return newG;
    },

    //--------------------------[construction for ordering]-

    getLeafAndParentlessNodes: function () {
        var result = { "parentlessNodes": [],
            "leafNodes": [] };

        // find all vertices without an in-edge
        for (var vid = 0; vid <= this.maxRealVertexId; vid++) {
            if (this.getInEdges(vid).length == 0) {
                result.parentlessNodes.push(vid);
            } else if (this.getOutEdges(vid).length == 0) {
                result.leafNodes.push(vid);
            }
        }

        return result;
    },

    // id: optional. If not specified then next available is used.
    // note: unlike insertVetex() does not do any id shifting and should be used only for initialization of the graph
    _addVertex: function (id, type, properties, width) {
        if (id && this.v[id]) throw "addVertex: vertex with id=" + id + " is already in G";

        var nextId = id == null ? this.v.length : id;

        this.v[nextId] = [];

        this.inedges[nextId] = [];

        this.weights[nextId] = {};

        this.vWidth[nextId] = width;

        this.type[nextId] = type;

        this.properties[nextId] = properties;

        if (type != TYPE.VIRTUALEDGE && nextId > this.maxRealVertexId) this.maxRealVertexId = nextId;

        return nextId;
    },

    addEdge: function (fromV, toV, weight) {
        // adds an edge, but does not update all the internal structures for performance reasons.
        // shoudl be used for bulk updates where it makes sense to do one maintenance run for all the nodes
        if (this.v.length < Math.max(fromV, toV)) throw "addEdge: vertex ID=" + Math.max(fromV, toV) + "] is not in G";

        if (this.hasEdge(fromV, toV)) throw "addEdge: edge from ID=" + fromV + " to ID=" + toV + " already exists";
        // [maybe] add weights if the same edge is present more than once?

        this.v[fromV].push(toV);
        this.inedges[toV].push(fromV);
        this.weights[fromV][toV] = weight;
    },

    removeEdge: function (fromV, toV) {
        if (!this.hasEdge(fromV, toV)) throw "removeEdge: edge does not exist";

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["j" /* removeFirstOccurrenceByValue */])(this.v[fromV], toV);
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["j" /* removeFirstOccurrenceByValue */])(this.inedges[toV], fromV);

        var weight = this.weights[fromV][toV];
        delete this.weights[fromV][toV];

        return weight;
    },

    insertVertex: function (type, properties, edgeWeights, inedges, outedges, width) {
        width = width ? width : type == TYPE.PERSON ? this.defaultPersonNodeWidth : this.defaultNonPersonNodeWidth;

        if (type == TYPE.PERSON && !properties.hasOwnProperty("gender")) properties["gender"] = "U";

        var newNodeId = type == TYPE.VIRTUALEDGE ? this.v.length : this.maxRealVertexId + 1; // all real node IDs should be <= maxRealVertexId, so have to insert new node here

        // shift all IDs greater or equal to newNodeId up by one (can only hapen when virtual nodes are present)
        if (this.v.length >= newNodeId) {
            // as all existing IDs >= v are increased by one, and all references should be updated
            var test = function (u) {
                return u >= newNodeId;
            };
            var modification = function (u) {
                return u + 1;
            };
            this._updateAllReferencesToNewIDs(test, modification);
        }

        this.v.splice(newNodeId, 0, []);
        this.inedges.splice(newNodeId, 0, []);
        this.weights.splice(newNodeId, 0, {});
        this.vWidth.splice(newNodeId, 0, width);
        this.type.splice(newNodeId, 0, type);
        this.properties.splice(newNodeId, 0, properties);

        if (type != TYPE.VIRTUALEDGE) this.maxRealVertexId++;

        var i;
        // add new edges
        for (i = 0; i < inedges.length; i++) this.addEdge(inedges[i], newNodeId, edgeWeights);
        for (i = 0; i < outedges.length; i++) this.addEdge(newNodeId, outedges[i], edgeWeights);

        return newNodeId;
    },

    unplugVirtualVertex: function (v) {
        // disconnectes virtual node from parent/child so that it is easy to recycle/remove later
        if (v <= this.getMaxRealVertexId()) throw "Attempting to unplug a non-virtual vertex";

        // virtiual nodes guaranteed to have only one in and one out edge
        var parent = this.inedges[v][0];
        var child = this.v[v][0];

        // replace outgoing edge for parent from V to child
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["m" /* replaceInArray */])(this.v[parent], v, child);
        this.weights[parent][child] = this.weights[parent][v];
        delete this.weights[parent][v];

        // replace incoming edge for child from V to parent
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["m" /* replaceInArray */])(this.inedges[child], v, parent);

        this.v[v] = [];
        this.inedges[v] = [];
        this.weights[v] = {};
    },

    remove: function (v) {
        var i;
        for (i = 0; i < this.v[v].length; i++) {
            var target = this.v[v][i];
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["j" /* removeFirstOccurrenceByValue */])(this.inedges[target], v);
        }
        for (i = 0; i < this.inedges[v].length; i++) {
            var incoming = this.inedges[v][i];
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["j" /* removeFirstOccurrenceByValue */])(this.v[incoming], v);
            delete this.weights[incoming][v];
        }

        //console.log("V before: " + stringifyObject(this.v));
        this.v.splice(v, 1);
        //console.log("V after: " + stringifyObject(this.v));
        this.inedges.splice(v, 1);
        this.weights.splice(v, 1);
        this.vWidth.splice(v, 1);
        this.type.splice(v, 1);
        this.properties.splice(v, 1);
        if (v <= this.maxRealVertexId) this.maxRealVertexId--;

        // as all IDs above v are decreased by one, and all references should be updated
        var test = function (u) {
            return u > v;
        };
        var modification = function (u) {
            return u - 1;
        };
        this._updateAllReferencesToNewIDs(test, modification);
    },

    _updateAllReferencesToNewIDs: function (test, modification) {
        // updates all references (e.g. out- and in- edge targets, etc.) pointing to
        // ids passing the test() according to modification()
        // decrease all IDs above v by one in all the arrays (v, inedges, weights)

        for (var i = 0; i < this.v.length; i++) {
            for (var j = 0; j < this.v[i].length; j++) if (test(this.v[i][j])) this.v[i][j] = modification(this.v[i][j]);
            for (var j = 0; j < this.inedges[i].length; j++) if (test(this.inedges[i][j])) this.inedges[i][j] = modification(this.inedges[i][j]);

            var newWeights = {};
            var weights = this.weights[i];
            for (var u in weights) {
                if (weights.hasOwnProperty(u)) u = parseInt(u);
                if (test(u)) newWeights[modification(u)] = weights[u];else newWeights[u] = weights[u];
            }
            this.weights[i] = newWeights;
        }
    },

    validate: function () {
        //console.log("-- VALIDATING: " + stringifyObject(this));

        if (this.v.length == 0) return;

        for (var v = 0; v < this.v.length; v++) {
            var outEdges = this.getOutEdges(v);
            var inEdges = this.getInEdges(v);

            if (this.isPerson(v)) {
                if (inEdges.length > 1) throw "Assertion failed: person nodes can't have two in-edges as people are produced by a single pregnancy (failed for " + this.getVertexDescription(v) + ")";
                for (var i = 0; i < outEdges.length; i++) if (!this.isRelationship(outEdges[i]) && !this.isVirtual(outEdges[i])) throw "Assertion failed: person nodes have only out edges to relationships (failed for " + this.getVertexDescription(v) + ")";
            } else if (this.isRelationship(v)) {
                // TODO: for childless relations this is not true!
                if (outEdges.length == 0) throw "Assertion failed: all relationships should have a childhub associated with them (failed for " + this.getVertexDescription(v) + ")";
                if (outEdges.length > 1) throw "Assertion failed: all relationships should have only one outedge (to a childhub) (failed for " + this.getVertexDescription(v) + ")";
                if (!this.isChildhub(outEdges[0])) throw "Assertion failed: relationships should only have out edges to childhubs (failed for " + this.getVertexDescription(v) + ")";
                if (inEdges.length != 2) throw "Assertion failed: relationships should always have exactly two associated persons (failed for " + this.getVertexDescription(v) + ")";
            } else if (this.isVirtual(v)) {
                if (outEdges.length != 1) throw "Assertion failed: all virtual nodes have exactly one out edge (to a virtual node or a relationship)";
                if (inEdges.length != 1) throw "Assertion failed: all virtual nodes have exactly one in edge (from a person or a virtual node)";
                if (!this.isRelationship(outEdges[0]) && !this.isVirtual(outEdges[0])) throw "Assertion failed: all virtual nodes may only have an outedge to a virtual node or a relationship";
            } else if (this.isChildhub(v)) {
                if (outEdges.length < 1) throw "Assertion failed: all childhubs should have at least one child associated with them"; // if not, re-ranking relationship nodes breaks
                for (var i = 0; i < outEdges.length; i++) if (!this.isPerson(outEdges[i])) throw "Assertion failed: childhubs are only connected to people (failed for " + this.getVertexDescription(v) + ")";
            }
        }

        var leafAndRootlessInfo = this.getLeafAndParentlessNodes();

        // check for cycles - supposedly pedigrees can't have any
        if (leafAndRootlessInfo.parentlessNodes.length == 0) throw "Assertion failed: pedigrees should have no cycles (no parentless nodes found)";
        for (var j = 0; j < leafAndRootlessInfo.parentlessNodes.length; j++) {
            if (this._DFSFindCycles(leafAndRootlessInfo.parentlessNodes[j], {})) throw "Assertion failed: pedigrees should have no cycles";
        }

        // check for disconnected components
        var reachable = {};
        this._markAllReachableComponents(leafAndRootlessInfo.parentlessNodes[0], reachable);
        for (var v = 0; v < this.v.length; v++) {
            if (!reachable.hasOwnProperty(v)) throw "Assertion failed: disconnected component detected (" + this.getVertexDescription(v) + ")";
        }
    },

    _DFSFindCycles: function (vertex, visited) {
        visited[vertex] = true;

        var outEdges = this.getOutEdges(vertex);

        for (var i = 0; i < outEdges.length; i++) {
            var v = outEdges[i];

            if (visited.hasOwnProperty(v)) {
                return true;
            } else if (this._DFSFindCycles(v, visited)) {
                return true;
            }
        }

        delete visited[vertex];
        return false;
    },

    _markAllReachableComponents: function (vertex, reachable) {
        reachable[vertex] = true;

        var outEdges = this.getOutEdges(vertex);
        for (var i = 0; i < outEdges.length; i++) {
            var v = outEdges[i];
            if (!reachable.hasOwnProperty(v)) this._markAllReachableComponents(v, reachable);
        }

        var inEdges = this.getInEdges(vertex);
        for (var j = 0; j < inEdges.length; j++) {
            var v = inEdges[j];
            if (!reachable.hasOwnProperty(v)) this._markAllReachableComponents(v, reachable);
        }
    },

    getVertexNameById: function (v) {
        var firstname = this.properties[v].hasOwnProperty("fName") ? this.properties[v]["fName"] : "";
        var lastname = this.properties[v].hasOwnProperty("lName") ? this.properties[v]["lName"] : "";

        if (firstname != "" && lastname != "") firstname += " ";

        return firstname + lastname;
    },

    getVertexDescription: function (v) {
        var desc = "id: " + v + ", name: <" + this.getVertexNameById(v) + ">, type: ";
        switch (this.type[v]) {
            case TYPE.PERSON:
                desc += "PERSON";break;
            case TYPE.RELATIONSHIP:
                desc += "RELATION";break;
            case TYPE.CHILDHUB:
                desc += "CHILDHUB";break;
            case TYPE.VIRTUALEDGE:
                desc += "VIRTUAL";break;
            default:
                desc += "ERROR";break;
        }
        return "[" + desc + "]";
    },

    getVertexWidth: function (v) {
        return this.vWidth[v];
    },

    getVertexHalfWidth: function (v) {
        return Math.floor(this.vWidth[v] / 2);
    },

    getEdgeWeight: function (fromV, toV) {
        return this.weights[fromV][toV];
    },

    hasEdge: function (fromV, toV) {
        return this.weights[fromV].hasOwnProperty(toV);
    },

    isValidId: function (v) {
        return v >= 0 && v < this.v.length;
    },

    getNumVertices: function () {
        return this.v.length;
    },

    getMaxRealVertexId: function () {
        return this.maxRealVertexId; // all vertices with IDs greater than this are of type VIRTUALEDGE
    },

    getOutEdges: function (v) {
        return this.v[v];
    },

    getInEdges: function (v) {
        return this.inedges[v];
    },

    getAllEdgesWithWeights: function (v) {
        var edgeToWeight = {};

        var outEdges = this.getOutEdges(v);
        for (var i = 0; i < outEdges.length; i++) {
            var u = outEdges[i];
            edgeToWeight[u] = { "weight": this.weights[v][u], "out": true };
        }
        var inEdges = this.getInEdges(v);
        for (var i = 0; i < inEdges.length; i++) {
            var u = inEdges[i];
            edgeToWeight[u] = { "weight": this.weights[u][v], "out": false };
        }

        return edgeToWeight;
    },

    getAllEdges: function (v) {
        return this.getOutEdges(v).concat(this.getInEdges(v));
    },

    isRelationship: function (v) {
        return this.type[v] == TYPE.RELATIONSHIP;
    },

    isChildhub: function (v) {
        return this.type[v] == TYPE.CHILDHUB;
    },

    isPerson: function (v) {
        return this.type[v] == TYPE.PERSON;
    },

    isVirtual: function (v) {
        return this.type[v] == TYPE.VIRTUALEDGE; // also: v > getmaxRealVertexId()
    },

    isAdopted: function (v) {
        if (this.properties[v].hasOwnProperty("isAdopted")) return this.properties[v]["isAdopted"];
        return false;
    },

    getGender: function (v) {
        if (!this.isPerson(v)) throw "Assertion failed: attempting to get gender of a non-person";
        return this.properties[v]["gender"];
    },

    getOppositeGender: function (v) {
        if (!this.isPerson(v)) throw "Assertion failed: attempting to get gender of a non-person";

        if (this.getGender(v) == "U") {
            return "U";
        } else if (this.getGender(v) == "M") {
            return "F";
        } else {
            return "M";
        }
    },

    getRelationshipChildhub: function (v) {
        if (!this.isRelationship(v)) throw "Assertion failed: applying getRelationshipChildhub() to a non-relationship node";

        return this.v[v][0];
    },

    getAllRelationships: function (v) {
        if (!this.isPerson(v)) throw "Assertion failed: attempting to get relationships of a non-person";

        var relationships = this.v[v];

        var result = [];
        for (var r = 0; r < relationships.length; ++r) {
            var edgeTo = relationships[r];
            var relationship = this.downTheChainUntilNonVirtual(edgeTo);
            result.push(relationship);
        }
        return result;
    },

    getAllPartners: function (v) {
        if (!this.isPerson(v)) throw "Assertion failed: attempting to get partners of a non-person";

        var relationships = this.getAllRelationships(v);

        var result = [];
        for (var r = 0; r < relationships.length; ++r) {
            var partners = this.getParents(relationships[r]);
            if (partners[0] != v) result.push(partners[0]);else result.push(partners[1]);
        }
        return result;
    },

    getParents: function (v) {
        if (!this.isPerson(v) && !this.isRelationship(v)) throw "Assertion failed: attempting to get parents of a non-person and non-relationship";

        // skips through relationship and child nodes and returns an array of two real parents. If none found returns []

        var parentRelationship = this.isPerson(v) ? this.getProducingRelationship(v) : v;

        if (parentRelationship == null) // no parents
            return [];

        var inEdges = this.getInEdges(parentRelationship);

        if (inEdges.length != 2) throw "Assertion failed: exactly two parents";

        return [this.upTheChainUntilNonVirtual(inEdges[0]), this.upTheChainUntilNonVirtual(inEdges[1])];
    },

    getPathToParents: function (v) {
        // returns an array with two elements: path to parent1 (excluding v) and path to parent2 (excluding v):
        // [ [virtual_node_11, ..., virtual_node_1n, parent1], [virtual_node_21, ..., virtual_node_2n, parent21] ]

        var result = [];

        if (!this.isRelationship(v)) throw "Assertion failed: incorrect v in getPathToParents()";

        var inEdges = this.getInEdges(v);

        result.push(this.getUpPathEndingInNonVirtual(inEdges[0]));
        result.push(this.getUpPathEndingInNonVirtual(inEdges[1]));

        return result;
    },

    getProducingRelationship: function (v) {
        if (!this.isPerson(v)) throw "Assertion failed: attempting to get producing relationship of a non-person";

        // find the relationship which produces this node (or null if not present)
        if (this.inedges[v].length == 0) return null;
        var chHub = this.inedges[v][0];

        if (this.inedges[chHub].length == 0) return null;
        return this.inedges[chHub][0];
    },

    upTheChainUntilNonVirtual: function (v) {
        if (!this.isVirtual(v)) return v;

        return this.upTheChainUntilNonVirtual(this.inedges[v][0]); // virtual nodes have only one in-edges, all the way up until a person node
    },

    downTheChainUntilNonVirtual: function (v) {
        if (!this.isVirtual(v)) return v;

        return this.downTheChainUntilNonVirtual(this.v[v][0]); // virtual nodes have only one in-edges, all the way up until a person node
    },

    getUpPathEndingInNonVirtual: function (v) {
        var path = [v];

        while (this.isVirtual(v)) {
            v = this.inedges[v][0];
            path.push(v);
        }

        return path;
    },

    getUnusedTwinGroupId: function (v) {
        if (!this.isRelationship(v)) throw "Assertion failed: incorrect v in getNumTwinGroups()";

        var childhubId = this.v[v][0];
        var children = this.v[childhubId];

        var twinGroupExists = [];
        for (var c = 0; c < children.length; c++) {
            var child = children[c];
            if (this.properties[child].hasOwnProperty("twinGroup")) twinGroupExists[this.properties[child]["twinGroup"]] = true;
        }

        var firstFreeTwinGroupId = 0;
        for (var i = 0; i < twinGroupExists.length; i++) {
            if (twinGroupExists[i] !== undefined) firstFreeTwinGroupId = i + 1;else break;
        }
        return firstFreeTwinGroupId;
    },

    getTwinGroupId: function (v) {
        if (!this.properties[v].hasOwnProperty("twinGroup")) return null;
        return this.properties[v]["twinGroup"];
    },

    getAllTwinsOf: function (v) {
        if (!this.isPerson(v)) throw "Assertion failed: incorrect v in getAllTwinsOf()";

        if (!this.properties[v].hasOwnProperty("twinGroup")) return [v];

        var twinGroupId = this.properties[v]["twinGroup"];

        if (this.inedges[v].length == 0) throw "Assertion failed: a node with no parents can not have twins";

        var childhubId = this.inedges[v][0];
        var children = this.v[childhubId];

        var twins = [];
        for (var c = 0; c < children.length; c++) {
            var child = children[c];
            if (this.properties[child].hasOwnProperty("twinGroup") && this.properties[child]["twinGroup"] == twinGroupId) twins.push(child);
        }
        return twins;
    },

    isParentToTwinEdge: function (fromV, toV) {
        if (this.isPerson(toV) && this.isChildhub(fromV) && this.getTwinGroupId(toV) != null) return true;

        return false;
    },

    getAllAncestors: function (v) {
        var ancestors = {};
        ancestors[v] = true;

        var q = new __WEBPACK_IMPORTED_MODULE_0__queues__["a" /* Queue */]();
        q.push(v);

        while (q.size() > 0) {
            var nextV = q.pop();

            var inEdges = this.getInEdges(nextV);
            for (var j = 0; j < inEdges.length; j++) {
                var v = inEdges[j];
                if (!ancestors.hasOwnProperty(v)) {
                    q.push(v);
                    ancestors[v] = true;
                }
            }
        }
        return ancestors;
    }
};

/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Raphael) {/* harmony export (immutable) */ __webpack_exports__["c"] = sector;
/* harmony export (immutable) */ __webpack_exports__["e"] = generateOrb;
/* harmony export (immutable) */ __webpack_exports__["a"] = drawCornerCurve;
/* harmony export (immutable) */ __webpack_exports__["b"] = drawLevelChangeCurve;
/* harmony export (immutable) */ __webpack_exports__["f"] = findXInterceptGivenLineAndY;
/* harmony export (immutable) */ __webpack_exports__["d"] = getElementHalfHeight;
/**
 * Returns a raphael element representing a Pi-Chart-like slice of the icon representing the given gender
 *
 * @param canvas Raphael paper object
 * @param {Number} xPosition
 * @param {Number} yPosition
 * @param {Number} radius Radius of the associated shape
 * @param {String} gender Can be "M", "F" or "U"
 * @param {Number} startAngle Has to be equal or greater than 0
 * @param {Number} endAngle
 * @param {String} color CSS color
 * @return {Raphael.el}
 */
function sector(canvas, xPosition, yPosition, radius, gender, startAngle, endAngle, color) {
    var sectorPath,
        gen = gender,
        cx = xPosition,
        cy = yPosition,
        r = radius,
        paper = canvas,
        rad = Math.PI / 180,
        shapeAttributes = { fill: color, "stroke-width": .0 };

    //returns coordinates of the point on the circle (with radius = _radius) at angle alpha
    var circleCoordinate = function (alpha) {
        var x = cx + r * Math.cos(-alpha * rad),
            y = cy + r * Math.sin(-alpha * rad);
        return [x, y];
    };

    if (gen === "F") {
        if (endAngle - startAngle == 360) {
            return paper.circle(cx, cy, r).attr(shapeAttributes);
        }
        var x1 = circleCoordinate(startAngle)[0],
            x2 = circleCoordinate(endAngle)[0],
            y1 = circleCoordinate(startAngle)[1],
            y2 = circleCoordinate(endAngle)[1];

        return paper.path(["M", cx, cy, "L", x1, y1, "A", r, r, 0, +(endAngle - startAngle > 180), 0, x2, y2, "z"]).attr(shapeAttributes);
    } else if (gen === "M") {
        //returns the side of the square on which the coordinate exists. Sides are numbered 0-3 counter-clockwise,
        //starting with the right side
        function sideAtAngle(angle) {
            return ((angle + 45) / 90).floor() % 4;
        }

        //returns the tangent value of the parameter degrees
        function tanOfDegrees(degrees) {
            var radians = degrees * Math.PI / 180;
            return Math.tan(radians);
        }

        //returns the coordinate of point at angle alpha on the square
        function getCoord(alpha) {
            var side = sideAtAngle(alpha);
            var result = {};
            var xFactor = side % 2;
            var yFactor = 1 - side % 2;
            var sideFactor = side % 3 ? -1 : 1;

            result.angle = (alpha - side * 90 - (side == 0 && alpha > 45 ? 360 : 0)) * (side < 2 ? -1 : 1);
            // Find the distance from the middle of the line
            var d = r * tanOfDegrees(result.angle);
            // Compute the coordinates
            result.x = cx + xFactor * d + yFactor * sideFactor * r;
            result.y = cy + yFactor * d + xFactor * sideFactor * r;
            return result;
        }

        //returns the coordinate of the next corner (going counter-clockwise, and starting with side given in the
        //parameter
        function getNextCorner(side) {
            var factorA = side % 3 ? -1 : 1,
                factorB = side < 2 ? -1 : 1,
                result = {};
            result.x = cx + factorA * r;
            result.y = cy + factorB * r;
            return result;
        }

        var startSide = sideAtAngle(startAngle),
            endSide = sideAtAngle(endAngle);
        if (endSide == 0 && endAngle > startAngle) {
            endSide = startAngle >= 315 ? 0 : 4;
        }
        var numSides = endSide - startSide;

        var startCoord = getCoord(startAngle),
            endCoord = getCoord(endAngle),
            sectorPathData = ["M", endCoord.x, endCoord.y, "L", cx, cy, "L", startCoord.x, startCoord.y],
            currentSide = startSide;

        while (numSides > 0) {
            sectorPathData.push("L", getNextCorner(currentSide).x + " " + getNextCorner(currentSide).y);
            currentSide = ++currentSide % 4;
            numSides--;
        }
        sectorPathData.push("L", endCoord.x, endCoord.y, "z");
        return paper.path(sectorPathData).attr(shapeAttributes);
    } else {
        var shape = sector(paper, cx, cy, r * (Math.sqrt(3) / 2), "M", startAngle, endAngle, color);
        shape.transform(["...r-45,", cx, cy]).attr(shapeAttributes);
        return shape;
    }
}

/**
 * Creates a 3D looking orb
 *
 * @method generateOrb
 * @param canvas Raphael paper
 * @param {Number} x X coordinate for the orb
 * @param {Number} y Y coordinate for the orb
 * @param {Number} r Radius of the orb
 * @param {Number} hue Hue value between 0 and 1
 * @return {Raphael.st}
 */
function generateOrb(canvas, x, y, r, gender) {
    if (!gender || gender == "F") {
        return canvas.set(canvas.ellipse(x, y, r, r), canvas.ellipse(x, y, r - r / 5, r - r / 20).attr({ stroke: "none", fill: "r(.5,.1)#ccc-#ccc", opacity: 0 }));
    }

    if (gender == "M") {
        var rr = r - 1;
        return canvas.set(canvas.rect(x - rr, y - rr, rr * 2, rr * 2, 0), canvas.rect(x - rr, y - rr, rr * 2, rr * 2, 1).attr({ stroke: "none", fill: "330-#ccc-#ccc", opacity: 0 }));
    }

    if (gender == "U") {
        var rr = (r - 1) * 0.9;
        return canvas.set(canvas.rect(x - rr, y - rr, rr * 2, rr * 2, 0).attr({ transform: "r45" }), canvas.rect(x - rr, y - rr, rr * 2, rr * 2, 1).attr({ stroke: "none", fill: "330-#ccc-#ccc", opacity: 0 }).attr({ transform: "r45" }));
    }
}

/**
 * Draws a quarter-circle-like curve connecting xFrom,Yfrom and xTo,yTo
 * with the given attributes and bend (upwars or downwards)
 * 
 * Iff "doubleCurve" is true, cones the curve and shifts one curve by (shiftx1, shifty1) and the other by (shiftx2, shifty2)
 */
function drawCornerCurve(xFrom, yFrom, xTo, yTo, bendDown, attr, doubleCurve, shiftx1, shifty1, shiftx2, shifty2) {
    var xDistance = xTo - xFrom;
    var yDistance = yFrom - yTo;

    var dist1x = xDistance / 2;
    var dist2x = xDistance / 10;
    var dist1y = yDistance / 2;
    var dist2y = yDistance / 10;

    var curve;
    var raphaelPath;

    if (bendDown) {
        raphaelPath = "M " + xFrom + " " + yFrom + " C " + (xFrom + dist1x) + " " + (yFrom + dist2y) + " " + (xTo + dist2x) + " " + (yTo + dist1y) + " " + xTo + " " + yTo;
        curve = editor.getPaper().path(raphaelPath).attr(attr).toBack();
    } else {
        raphaelPath = "M " + xFrom + " " + yFrom + " C " + (xFrom - dist2x) + " " + (yFrom - dist1y) + " " + (xTo - dist1x) + " " + (yTo - dist2y) + " " + xTo + " " + yTo;
        curve = editor.getPaper().path(raphaelPath).attr(attr).toBack();
    }

    if (doubleCurve) {
        var curve2 = curve.clone().toBack();
        curve.transform("t " + shiftx1 + "," + shifty1 + "...");
        curve2.transform("t " + shiftx2 + "," + shifty2 + "...");
    }
}

function drawLevelChangeCurve(xFrom, yFrom, xTo, yTo, attr, doubleCurve, shiftx1, shifty1, shiftx2, shifty2) {
    var xDistance = xTo - xFrom;
    var dist1x = xDistance / 2;

    var raphaelPath = " M " + xFrom + " " + yFrom;
    raphaelPath += " C " + (xFrom + dist1x) + " " + yFrom + " " + (xTo - dist1x) + " " + yTo + " " + xTo + " " + yTo;

    var curve = editor.getPaper().path(raphaelPath).attr(attr).toBack();
    if (doubleCurve) {
        var curve2 = curve.clone().toBack();
        curve.transform("t " + shiftx1 + "," + shifty1 + "...");
        curve2.transform("t " + shiftx2 + "," + shifty2 + "...");
    }
}

/**
 * Computes the intersection point between a horizontal line @ y == crossY and a line from x1,y1 to x2,y2
 */
function findXInterceptGivenLineAndY(crossY, x1, y1, x2, y2) {
    // y = ax + b   
    if (x1 == x2) return x1;
    var a = (y1 - y2) / (x1 - x2);
    var b = y1 - a * x1;
    var interceptX = (crossY - b) / a;
    return interceptX;
}

function getElementHalfHeight(t) {
    return Math.floor(t.getBBox().height / 2);
}

/**
 * Joins all the subsets into one set and returns it.
 * @return {Raphael.st}
 */
Raphael.st.flatten = function () {
    var flattenedSet = new Raphael.st.constructor();
    this.forEach(function (element) {
        flattenedSet = flattenedSet.concat(element.flatten());
    });
    return flattenedSet;
};

/**
 * Returns set containing the given element
 * @return {Raphael.st}
 */
Raphael.el.flatten = function () {
    return this.paper.set(this);
};

/**
 * Returns a set containing the elements of this set and the given set. Doesn't modify the original sets.
 * @param {Raphael.st} set
 * @return {Raphael.st}
 */
Raphael.st.concat = function (set) {
    var newSet = this.copy();
    if (typeof set.forEach == "function") {
        set.forEach(function (element) {
            newSet.push(element);
        });
    } else {
        newSet.push(set);
    }
    return newSet;
};

/**
 * Returns True if this set contains target. Target has to be directly in this set, and not in a subset.
 *
 * @param {Raphael.st|Raphael.el} target
 * @return {boolean}
 */
Raphael.st.contains = function (target) {
    var found = false;
    this.forEach(function (element) {
        if (element == target) {
            found = true;
        }
    });
    return found;
};

/**
 * Returns a new set containing the same elements as this set
 * @return {Raphael.st}
 */
Raphael.st.copy = function () {
    var newSet = new Raphael.st.constructor();
    this.forEach(function (element) {
        newSet.push(element);
    });
    return newSet;
};

//Animation helpers
window.requestAnimFrame = function () {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        window.setTimeout(callback, 1000 / 60);
    };
}();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(27)))

/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = Queue;
/* unused harmony export Stack */
function Queue() {
    this.data = [];
}

Queue.prototype = {

    setTo: function (list) {
        this.data = list.slice();
    },

    push: function (v) {
        this.data.push(v);
    },

    pop: function (v) {
        return this.data.shift();
    },

    size: function () {
        return this.data.length;
    },

    clear: function () {
        this.data = [];
    }
};

function Stack() {
    this.data = [];
}

Stack.prototype = {

    setTo: function (list) {
        this.data = list.slice();
    },

    push: function (v) {
        this.data.push(v);
    },

    pop: function (v) {
        return this.data.pop();
    },

    size: function () {
        return this.data.length;
    }
};

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($H, $R, Sizzle) {var __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/
(function() {

/**
 * @preserve
 * Prototype JavaScript framework, version 1.7.1
 *  (c) 2005-2010 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/
/*
 * Prototype JavaScript framework, version 1.7.1
 *  (c) 2005-2010 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/
var Prototype = {
  Version: '1.7.1',
  Browser: (function(){
    var ua = navigator.userAgent;
    // Opera (at least) 8.x+ has "Opera" as a [[Class]] of `window.opera`
    // This is a safer inference than plain boolean type conversion of `window.opera`
    var isOpera = Object.prototype.toString.call(window.opera) == '[object Opera]';
    return {
      IE:             !!window.attachEvent && !isOpera,
      Opera:          isOpera,
      WebKit:         ua.indexOf('AppleWebKit/') > -1,
      Gecko:          ua.indexOf('Gecko') > -1 && ua.indexOf('KHTML') === -1,
      MobileSafari:   /Apple.*Mobile/.test(ua)
    }
  })(),
  BrowserFeatures: {
    XPath: !!document.evaluate,
    SelectorsAPI: !!document.querySelector,
    ElementExtensions: (function() {
      var constructor = window.Element || window.HTMLElement;
      return !!(constructor && constructor.prototype);
    })(),
    SpecificElementExtensions: (function() {
      // First, try the named class
      if (typeof window.HTMLDivElement !== 'undefined')
        return true;
      var div = document.createElement('div'),
          form = document.createElement('form'),
          isSupported = false;
      if (div['__proto__'] && (div['__proto__'] !== form['__proto__'])) {
        isSupported = true;
      }
      div = form = null;
      return isSupported;
    })()
  },
  ScriptFragment: '<script[^>]*>([\\S\\s]*?)<\/script\\s*>',
  JSONFilter: /^\/\*-secure-([\s\S]*)\*\/\s*$/,
  emptyFunction: function() { },
  K: function(x) { return x }
};
if (Prototype.Browser.MobileSafari)
  Prototype.BrowserFeatures.SpecificElementExtensions = false;
/* Based on Alex Arnell's inheritance implementation. */
var Class = (function() {
  
  // Some versions of JScript fail to enumerate over properties, names of which 
  // correspond to non-enumerable properties in the prototype chain
  var IS_DONTENUM_BUGGY = (function(){
    for (var p in { toString: 1 }) {
      // check actual property name, so that it works with augmented Object.prototype
      if (p === 'toString') return false;
    }
    return true;
  })();
  
  function subclass() {};
  function create() {
    var parent = null, properties = $A(arguments);
    if (Object.isFunction(properties[0]))
      parent = properties.shift();
    function klass() {
      this.initialize.apply(this, arguments);
    }
    Object.extend(klass, Class.Methods);
    klass.superclass = parent;
    klass.subclasses = [];
    if (parent) {
      subclass.prototype = parent.prototype;
      klass.prototype = new subclass;
      parent.subclasses.push(klass);
    }
    for (var i = 0, length = properties.length; i < length; i++)
      klass.addMethods(properties[i]);
    if (!klass.prototype.initialize)
      klass.prototype.initialize = Prototype.emptyFunction;
    klass.prototype.constructor = klass;
    return klass;
  }
  function addMethods(source) {
    var ancestor   = this.superclass && this.superclass.prototype,
        properties = Object.keys(source);
    // IE6 doesn't enumerate `toString` and `valueOf` (among other built-in `Object.prototype`) properties,
    // Force copy if they're not Object.prototype ones.
    // Do not copy other Object.prototype.* for performance reasons
    if (IS_DONTENUM_BUGGY) {
      if (source.toString != Object.prototype.toString)
        properties.push("toString");
      if (source.valueOf != Object.prototype.valueOf)
        properties.push("valueOf");
    }
    for (var i = 0, length = properties.length; i < length; i++) {
      var property = properties[i], value = source[property];
      if (ancestor && Object.isFunction(value) &&
          value.argumentNames()[0] == "$super") {
        var method = value;
        value = (function(m) {
          return function() { return ancestor[m].apply(this, arguments); };
        })(property).wrap(method);
        
        // We used to use `bind` to ensure that `toString` and `valueOf`
        // methods were called in the proper context, but now that we're 
        // relying on native bind and/or an existing polyfill, we can't rely
        // on the nuanced behavior of whatever `bind` implementation is on
        // the page.
        //
        // MDC's polyfill, for instance, doesn't like binding functions that
        // haven't got a `prototype` property defined.
        value.valueOf = (function(method) {
          return function() { return method.valueOf.call(method); };
        })(method);
        
        value.toString = (function(method) {
          return function() { return method.toString.call(method); };
        })(method);
      }
      this.prototype[property] = value;
    }
    return this;
  }
  return {
    create: create,
    Methods: {
      addMethods: addMethods
    }
  };
})();
(function() {
  var _toString = Object.prototype.toString,
      _hasOwnProperty = Object.prototype.hasOwnProperty,
      NULL_TYPE = 'Null',
      UNDEFINED_TYPE = 'Undefined',
      BOOLEAN_TYPE = 'Boolean',
      NUMBER_TYPE = 'Number',
      STRING_TYPE = 'String',
      OBJECT_TYPE = 'Object',
      FUNCTION_CLASS = '[object Function]',
      BOOLEAN_CLASS = '[object Boolean]',
      NUMBER_CLASS = '[object Number]',
      STRING_CLASS = '[object String]',
      ARRAY_CLASS = '[object Array]',
      DATE_CLASS = '[object Date]',
      NATIVE_JSON_STRINGIFY_SUPPORT = window.JSON &&
        typeof JSON.stringify === 'function' &&
        JSON.stringify(0) === '0' &&
        typeof JSON.stringify(Prototype.K) === 'undefined';
        
  
  
  var DONT_ENUMS = ['toString', 'toLocaleString', 'valueOf',
   'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];
  
  // Some versions of JScript fail to enumerate over properties, names of which 
  // correspond to non-enumerable properties in the prototype chain
  var IS_DONTENUM_BUGGY = (function(){
    for (var p in { toString: 1 }) {
      // check actual property name, so that it works with augmented Object.prototype
      if (p === 'toString') return false;
    }
    return true;
  })();
        
  function Type(o) {
    switch(o) {
      case null: return NULL_TYPE;
      case (void 0): return UNDEFINED_TYPE;
    }
    var type = typeof o;
    switch(type) {
      case 'boolean': return BOOLEAN_TYPE;
      case 'number':  return NUMBER_TYPE;
      case 'string':  return STRING_TYPE;
    }
    return OBJECT_TYPE;
  }
  
  function extend(destination, source) {
    for (var property in source)
      destination[property] = source[property];
    return destination;
  }
  function inspect(object) {
    try {
      if (isUndefined(object)) return 'undefined';
      if (object === null) return 'null';
      return object.inspect ? object.inspect() : String(object);
    } catch (e) {
      if (e instanceof RangeError) return '...';
      throw e;
    }
  }
  function toJSON(value) {
    return Str('', { '': value }, []);
  }
  function Str(key, holder, stack) {
    var value = holder[key];
    if (Type(value) === OBJECT_TYPE && typeof value.toJSON === 'function') {
      value = value.toJSON(key);
    }
    var _class = _toString.call(value);
    switch (_class) {
      case NUMBER_CLASS:
      case BOOLEAN_CLASS:
      case STRING_CLASS:
        value = value.valueOf();
    }
    switch (value) {
      case null: return 'null';
      case true: return 'true';
      case false: return 'false';
    }
    var type = typeof value;
    switch (type) {
      case 'string':
        return value.inspect(true);
      case 'number':
        return isFinite(value) ? String(value) : 'null';
      case 'object':
        for (var i = 0, length = stack.length; i < length; i++) {
          if (stack[i] === value) {
            throw new TypeError("Cyclic reference to '" + value + "' in object");
          }
        }
        stack.push(value);
        var partial = [];
        if (_class === ARRAY_CLASS) {
          for (var i = 0, length = value.length; i < length; i++) {
            var str = Str(i, value, stack);
            partial.push(typeof str === 'undefined' ? 'null' : str);
          }
          partial = '[' + partial.join(',') + ']';
        } else {
          var keys = Object.keys(value);
          for (var i = 0, length = keys.length; i < length; i++) {
            var key = keys[i], str = Str(key, value, stack);
            if (typeof str !== "undefined") {
               partial.push(key.inspect(true)+ ':' + str);
             }
          }
          partial = '{' + partial.join(',') + '}';
        }
        stack.pop();
        return partial;
    }
  }
  function stringify(object) {
    return JSON.stringify(object);
  }
  function toQueryString(object) {
    return $H(object).toQueryString();
  }
  function toHTML(object) {
    return object && object.toHTML ? object.toHTML() : String.interpret(object);
  }
  function keys(object) {
    if (Type(object) !== OBJECT_TYPE) { throw new TypeError(); }
    var results = [];
    for (var property in object) {
      if (_hasOwnProperty.call(object, property))
        results.push(property);
    }
    
    // Account for the DontEnum properties in affected browsers.
    if (IS_DONTENUM_BUGGY) {
      for (var i = 0; property = DONT_ENUMS[i]; i++) {
        if (_hasOwnProperty.call(object, property))
          results.push(property);
      }
    }
    
    return results;
  }
  function values(object) {
    var results = [];
    for (var property in object)
      results.push(object[property]);
    return results;
  }
  function clone(object) {
    return extend({ }, object);
  }
  function isElement(object) {
    return !!(object && object.nodeType == 1);
  }
  function isArray(object) {
    return _toString.call(object) === ARRAY_CLASS;
  }
  
  var hasNativeIsArray = (typeof Array.isArray == 'function') 
    && Array.isArray([]) && !Array.isArray({});
  
  if (hasNativeIsArray) {
    isArray = Array.isArray;
  }
  function isHash(object) {
    return object instanceof Hash;
  }
  function isFunction(object) {
    return _toString.call(object) === FUNCTION_CLASS;
  }
  function isString(object) {
    return _toString.call(object) === STRING_CLASS;
  }
  function isNumber(object) {
    return _toString.call(object) === NUMBER_CLASS;
  }
  
  function isDate(object) {
    return _toString.call(object) === DATE_CLASS;
  }
  function isUndefined(object) {
    return typeof object === "undefined";
  }
  extend(Object, {
    extend:        extend,
    inspect:       inspect,
    toJSON:        NATIVE_JSON_STRINGIFY_SUPPORT ? stringify : toJSON,
    toQueryString: toQueryString,
    toHTML:        toHTML,
    keys:          Object.keys || keys,
    values:        values,
    clone:         clone,
    isElement:     isElement,
    isArray:       isArray,
    isHash:        isHash,
    isFunction:    isFunction,
    isString:      isString,
    isNumber:      isNumber,
    isDate:        isDate,
    isUndefined:   isUndefined
  });
})();
Object.extend(Function.prototype, (function() {
  var slice = Array.prototype.slice;
  function update(array, args) {
    var arrayLength = array.length, length = args.length;
    while (length--) array[arrayLength + length] = args[length];
    return array;
  }
  function merge(array, args) {
    array = slice.call(array, 0);
    return update(array, args);
  }
  function argumentNames() {
    var names = this.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1]
      .replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, '')
      .replace(/\s+/g, '').split(',');
    return names.length == 1 && !names[0] ? [] : names;
  }
  function bind(context) {
    if (arguments.length < 2 && Object.isUndefined(arguments[0]))
      return this;
    if (!Object.isFunction(this))
      throw new TypeError("The object is not callable.");
      
    var nop = function() {};
    var __method = this, args = slice.call(arguments, 1);
    
    var bound = function() {
      var a = merge(args, arguments);
      // Ignore the supplied context when the bound function is called with
      // the "new" keyword.
      var c = this instanceof bound ? this : context;
      return __method.apply(c, a);
    };
        
    nop.prototype   = this.prototype;
    bound.prototype = new nop();
    return bound;
  }
  function bindAsEventListener(context) {
    var __method = this, args = slice.call(arguments, 1);
    return function(event) {
      var a = update([event || window.event], args);
      return __method.apply(context, a);
    }
  }
  function curry() {
    if (!arguments.length) return this;
    var __method = this, args = slice.call(arguments, 0);
    return function() {
      var a = merge(args, arguments);
      return __method.apply(this, a);
    }
  }
  function delay(timeout) {
    var __method = this, args = slice.call(arguments, 1);
    timeout = timeout * 1000;
    return window.setTimeout(function() {
      return __method.apply(__method, args);
    }, timeout);
  }
  function defer() {
    var args = update([0.01], arguments);
    return this.delay.apply(this, args);
  }
  function wrap(wrapper) {
    var __method = this;
    return function() {
      var a = update([__method.bind(this)], arguments);
      return wrapper.apply(this, a);
    }
  }
  function methodize() {
    if (this._methodized) return this._methodized;
    var __method = this;
    return this._methodized = function() {
      var a = update([this], arguments);
      return __method.apply(null, a);
    };
  }
  
  var extensions = {
    argumentNames:       argumentNames,
    bindAsEventListener: bindAsEventListener,
    curry:               curry,
    delay:               delay,
    defer:               defer,
    wrap:                wrap,
    methodize:           methodize
  };
  
  if (!Function.prototype.bind)
    extensions.bind = bind;
  return extensions;
})());
(function(proto) {
  
  
  function toISOString() {
    return this.getUTCFullYear() + '-' +
      (this.getUTCMonth() + 1).toPaddedString(2) + '-' +
      this.getUTCDate().toPaddedString(2) + 'T' +
      this.getUTCHours().toPaddedString(2) + ':' +
      this.getUTCMinutes().toPaddedString(2) + ':' +
      this.getUTCSeconds().toPaddedString(2) + 'Z';
  }
  
  function toJSON() {
    return this.toISOString();
  }
  
  if (!proto.toISOString) proto.toISOString = toISOString;
  if (!proto.toJSON) proto.toJSON = toJSON;
  
})(Date.prototype);
RegExp.prototype.match = RegExp.prototype.test;
RegExp.escape = function(str) {
  return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
};
var PeriodicalExecuter = Class.create({
  initialize: function(callback, frequency) {
    this.callback = callback;
    this.frequency = frequency;
    this.currentlyExecuting = false;
    this.registerCallback();
  },
  registerCallback: function() {
    this.timer = setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
  },
  execute: function() {
    this.callback(this);
  },
  stop: function() {
    if (!this.timer) return;
    clearInterval(this.timer);
    this.timer = null;
  },
  onTimerEvent: function() {
    if (!this.currentlyExecuting) {
      // IE doesn't support `finally` statements unless all errors are caught.
      // We mimic the behaviour of `finally` statements by duplicating code
      // that would belong in it. First at the bottom of the `try` statement
      // (for errorless cases). Secondly, inside a `catch` statement which
      // rethrows any caught errors.
      try {
        this.currentlyExecuting = true;
        this.execute();
        this.currentlyExecuting = false;
      } catch(e) {
        this.currentlyExecuting = false;
        throw e;
      }
    }
  }
});
Object.extend(String, {
  interpret: function(value) {
    return value == null ? '' : String(value);
  },
  specialChar: {
    '\b': '\\b',
    '\t': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '\\': '\\\\'
  }
});
Object.extend(String.prototype, (function() {
  var NATIVE_JSON_PARSE_SUPPORT = window.JSON &&
    typeof JSON.parse === 'function' &&
    JSON.parse('{"test": true}').test;
  function prepareReplacement(replacement) {
    if (Object.isFunction(replacement)) return replacement;
    var template = new Template(replacement);
    return function(match) { return template.evaluate(match) };
  }
  function gsub(pattern, replacement) {
    var result = '', source = this, match;
    replacement = prepareReplacement(replacement);
    if (Object.isString(pattern))
      pattern = RegExp.escape(pattern);
    if (!(pattern.length || pattern.source)) {
      replacement = replacement('');
      return replacement + source.split('').join(replacement) + replacement;
    }
    while (source.length > 0) {
      match = source.match(pattern);
      if (match && match[0].length > 0) {
        result += source.slice(0, match.index);
        result += String.interpret(replacement(match));
        source  = source.slice(match.index + match[0].length);
      } else {
        result += source, source = '';
      }
    }
    return result;
  }
  function sub(pattern, replacement, count) {
    replacement = prepareReplacement(replacement);
    count = Object.isUndefined(count) ? 1 : count;
    return this.gsub(pattern, function(match) {
      if (--count < 0) return match[0];
      return replacement(match);
    });
  }
  function scan(pattern, iterator) {
    this.gsub(pattern, iterator);
    return String(this);
  }
  function truncate(length, truncation) {
    length = length || 30;
    truncation = Object.isUndefined(truncation) ? '...' : truncation;
    return this.length > length ?
      this.slice(0, length - truncation.length) + truncation : String(this);
  }
  function strip() {
    return this.replace(/^\s+/, '').replace(/\s+$/, '');
  }
  function stripTags() {
    return this.replace(/<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?>|<\/\w+>/gi, '');
  }
  function stripScripts() {
    return this.replace(new RegExp(Prototype.ScriptFragment, 'img'), '');
  }
  function extractScripts() {
    var matchAll = new RegExp(Prototype.ScriptFragment, 'img'),
        matchOne = new RegExp(Prototype.ScriptFragment, 'im');
    return (this.match(matchAll) || []).map(function(scriptTag) {
      return (scriptTag.match(matchOne) || ['', ''])[1];
    });
  }
  function evalScripts() {
    return this.extractScripts().map(function(script) { return eval(script); });
  }
  function escapeHTML() {
    return this.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
  }
  function unescapeHTML() {
    // Warning: In 1.7 String#unescapeHTML will no longer call String#stripTags.
    return this.stripTags().replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&');
  }
  function toQueryParams(separator) {
    var match = this.strip().match(/([^?#]*)(#.*)?$/);
    if (!match) return { };
    return match[1].split(separator || '&').inject({ }, function(hash, pair) {
      if ((pair = pair.split('='))[0]) {
        var key = decodeURIComponent(pair.shift()),
            value = pair.length > 1 ? pair.join('=') : pair[0];
        if (value != undefined) {
          value = value.gsub('+', ' ');
          value = decodeURIComponent(value);
        }
        if (key in hash) {
          if (!Object.isArray(hash[key])) hash[key] = [hash[key]];
          hash[key].push(value);
        }
        else hash[key] = value;
      }
      return hash;
    });
  }
  function toArray() {
    return this.split('');
  }
  function succ() {
    return this.slice(0, this.length - 1) +
      String.fromCharCode(this.charCodeAt(this.length - 1) + 1);
  }
  function times(count) {
    return count < 1 ? '' : new Array(count + 1).join(this);
  }
  function camelize() {
    return this.replace(/-+(.)?/g, function(match, chr) {
      return chr ? chr.toUpperCase() : '';
    });
  }
  function capitalize() {
    return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();
  }
  function underscore() {
    return this.replace(/::/g, '/')
               .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
               .replace(/([a-z\d])([A-Z])/g, '$1_$2')
               .replace(/-/g, '_')
               .toLowerCase();
  }
  function dasherize() {
    return this.replace(/_/g, '-');
  }
  function inspect(useDoubleQuotes) {
    var escapedString = this.replace(/[\x00-\x1f\\]/g, function(character) {
      if (character in String.specialChar) {
        return String.specialChar[character];
      }
      return '\\u00' + character.charCodeAt().toPaddedString(2, 16);
    });
    if (useDoubleQuotes) return '"' + escapedString.replace(/"/g, '\\"') + '"';
    return "'" + escapedString.replace(/'/g, '\\\'') + "'";
  }
  function unfilterJSON(filter) {
    return this.replace(filter || Prototype.JSONFilter, '$1');
  }
  function isJSON() {
    var str = this;
    if (str.blank()) return false;
    str = str.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@');
    str = str.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']');
    str = str.replace(/(?:^|:|,)(?:\s*\[)+/g, '');
    return (/^[\],:{}\s]*$/).test(str);
  }
  function evalJSON(sanitize) {
    var json = this.unfilterJSON(),
        cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    if (cx.test(json)) {
      json = json.replace(cx, function (a) {
        return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      });
    }
    try {
      if (!sanitize || json.isJSON()) return eval('(' + json + ')');
    } catch (e) { }
    throw new SyntaxError('Badly formed JSON string: ' + this.inspect());
  }
  
  function parseJSON() {
    var json = this.unfilterJSON();
    return JSON.parse(json);
  }
  function include(pattern) {
    return this.indexOf(pattern) !== -1;
  }
  function startsWith(pattern, position) {
    position = Object.isNumber(position) ? position : 0;
    // We use `lastIndexOf` instead of `indexOf` to avoid tying execution
    // time to string length when string doesn't start with pattern.
    return this.lastIndexOf(pattern, position) === position;
  }
  function endsWith(pattern, position) {
    pattern = String(pattern);
    position = Object.isNumber(position) ? position : this.length;
    if (position < 0) position = 0;
    if (position > this.length) position = this.length;
    var d = position - pattern.length;
    // We use `indexOf` instead of `lastIndexOf` to avoid tying execution
    // time to string length when string doesn't end with pattern.
    return d >= 0 && this.indexOf(pattern, d) === d;
  }
  function empty() {
    return this == '';
  }
  function blank() {
    return /^\s*$/.test(this);
  }
  function interpolate(object, pattern) {
    return new Template(this, pattern).evaluate(object);
  }
  return {
    gsub:           gsub,
    sub:            sub,
    scan:           scan,
    truncate:       truncate,
    // Firefox 3.5+ supports String.prototype.trim
    // (`trim` is ~ 5x faster than `strip` in FF3.5)
    strip:          String.prototype.trim || strip,
    stripTags:      stripTags,
    stripScripts:   stripScripts,
    extractScripts: extractScripts,
    evalScripts:    evalScripts,
    escapeHTML:     escapeHTML,
    unescapeHTML:   unescapeHTML,
    toQueryParams:  toQueryParams,
    parseQuery:     toQueryParams,
    toArray:        toArray,
    succ:           succ,
    times:          times,
    camelize:       camelize,
    capitalize:     capitalize,
    underscore:     underscore,
    dasherize:      dasherize,
    inspect:        inspect,
    unfilterJSON:   unfilterJSON,
    isJSON:         isJSON,
    evalJSON:       NATIVE_JSON_PARSE_SUPPORT ? parseJSON : evalJSON,
    //ECMA 6 supports contains(), if it exists map include() to contains()
    include:        String.prototype.contains || include,
    // Firefox 18+ supports String.prototype.startsWith, String.prototype.endsWith
    startsWith:     String.prototype.startsWith || startsWith,
    endsWith:       String.prototype.endsWith || endsWith,
    empty:          empty,
    blank:          blank,
    interpolate:    interpolate
  };
})());
var Template = Class.create({
  initialize: function(template, pattern) {
    this.template = template.toString();
    this.pattern = pattern || Template.Pattern;
  },
  evaluate: function(object) {
    if (object && Object.isFunction(object.toTemplateReplacements))
      object = object.toTemplateReplacements();
    return this.template.gsub(this.pattern, function(match) {
      if (object == null) return (match[1] + '');
      var before = match[1] || '';
      if (before == '\\') return match[2];
      var ctx = object, expr = match[3],
          pattern = /^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;
          
      match = pattern.exec(expr);
      if (match == null) return before;
      while (match != null) {
        var comp = match[1].startsWith('[') ? match[2].replace(/\\\\]/g, ']') : match[1];
        ctx = ctx[comp];
        if (null == ctx || '' == match[3]) break;
        expr = expr.substring('[' == match[3] ? match[1].length : match[0].length);
        match = pattern.exec(expr);
      }
      return before + String.interpret(ctx);
    });
  }
});
Template.Pattern = /(^|.|\r|\n)(#\{(.*?)\})/;
var $break = { };
var Enumerable = (function() {
  function each(iterator, context) {
    try {
      this._each(iterator, context);
    } catch (e) {
      if (e != $break) throw e;
    }
    return this;
  }
  function eachSlice(number, iterator, context) {
    var index = -number, slices = [], array = this.toArray();
    if (number < 1) return array;
    while ((index += number) < array.length)
      slices.push(array.slice(index, index+number));
    return slices.collect(iterator, context);
  }
  function all(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = true;
    this.each(function(value, index) {
      if (!iterator.call(context, value, index, this)) {
          result = false;
          throw $break;
      }
    }, this);
    return result;
  }
  function any(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = false;
    this.each(function(value, index) {
      if (result = !!iterator.call(context, value, index, this))
        throw $break;
    }, this);
    return result;
  }
  function collect(iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];
    this.each(function(value, index) {
      results.push(iterator.call(context, value, index, this));
    }, this);
    return results;
  }
  function detect(iterator, context) {
    var result;
    this.each(function(value, index) {
      if (iterator.call(context, value, index, this)) {
        result = value;
        throw $break;
      }
    }, this);
    return result;
  }
  function findAll(iterator, context) {
    var results = [];
    this.each(function(value, index) {
      if (iterator.call(context, value, index, this))
        results.push(value);
    }, this);
    return results;
  }
  function grep(filter, iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];
    if (Object.isString(filter))
      filter = new RegExp(RegExp.escape(filter));
    this.each(function(value, index) {
      if (filter.match(value))
        results.push(iterator.call(context, value, index, this));
    }, this);
    return results;
  }
  function include(object) {
    if (Object.isFunction(this.indexOf) && this.indexOf(object) != -1)
      return true;
    var found = false;
    this.each(function(value) {
      if (value == object) {
        found = true;
        throw $break;
      }
    });
    return found;
  }
  function inGroupsOf(number, fillWith) {
    fillWith = Object.isUndefined(fillWith) ? null : fillWith;
    return this.eachSlice(number, function(slice) {
      while(slice.length < number) slice.push(fillWith);
      return slice;
    });
  }
  function inject(memo, iterator, context) {
    this.each(function(value, index) {
      memo = iterator.call(context, memo, value, index, this);
    }, this);
    return memo;
  }
  function invoke(method) {
    var args = $A(arguments).slice(1);
    return this.map(function(value) {
      return value[method].apply(value, args);
    });
  }
  function max(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function(value, index) {
      value = iterator.call(context, value, index, this);
      if (result == null || value >= result)
        result = value;
    }, this);
    return result;
  }
  function min(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function(value, index) {
      value = iterator.call(context, value, index, this);
      if (result == null || value < result)
        result = value;
    }, this);
    return result;
  }
  function partition(iterator, context) {
    iterator = iterator || Prototype.K;
    var trues = [], falses = [];
    this.each(function(value, index) {
      (iterator.call(context, value, index, this) ?
        trues : falses).push(value);
    }, this);
    return [trues, falses];
  }
  function pluck(property) {
    var results = [];
    this.each(function(value) {
      results.push(value[property]);
    });
    return results;
  }
  function reject(iterator, context) {
    var results = [];
    this.each(function(value, index) {
      if (!iterator.call(context, value, index, this))
        results.push(value);
    }, this);
    return results;
  }
  function sortBy(iterator, context) {
    return this.map(function(value, index) {
      return {
        value: value,
        criteria: iterator.call(context, value, index, this)
      };
    }, this).sort(function(left, right) {
      var a = left.criteria, b = right.criteria;
      return a < b ? -1 : a > b ? 1 : 0;
    }).pluck('value');
  }
  function toArray() {
    return this.map();
  }
  function zip() {
    var iterator = Prototype.K, args = $A(arguments);
    if (Object.isFunction(args.last()))
      iterator = args.pop();
    var collections = [this].concat(args).map($A);
    return this.map(function(value, index) {
      return iterator(collections.pluck(index));
    });
  }
  function size() {
    return this.toArray().length;
  }
  function inspect() {
    return '#<Enumerable:' + this.toArray().inspect() + '>';
  }
  return {
    each:       each,
    eachSlice:  eachSlice,
    all:        all,
    every:      all,
    any:        any,
    some:       any,
    collect:    collect,
    map:        collect,
    detect:     detect,
    findAll:    findAll,
    select:     findAll,
    filter:     findAll,
    grep:       grep,
    include:    include,
    member:     include,
    inGroupsOf: inGroupsOf,
    inject:     inject,
    invoke:     invoke,
    max:        max,
    min:        min,
    partition:  partition,
    pluck:      pluck,
    reject:     reject,
    sortBy:     sortBy,
    toArray:    toArray,
    entries:    toArray,
    zip:        zip,
    size:       size,
    inspect:    inspect,
    find:       detect
  };
})();
function $A(iterable) {
  if (!iterable) return [];
  // Safari <2.0.4 crashes when accessing property of a node list with property accessor.
  // It nevertheless works fine with `in` operator, which is why we use it here
  if ('toArray' in Object(iterable)) return iterable.toArray();
  var length = iterable.length || 0, results = new Array(length);
  while (length--) results[length] = iterable[length];
  return results;
}
function $w(string) {
  if (!Object.isString(string)) return [];
  string = string.strip();
  return string ? string.split(/\s+/) : [];
}
Array.from = $A;
(function() {
  var arrayProto = Array.prototype,
      slice = arrayProto.slice,
      _each = arrayProto.forEach,
      _entries = arrayProto.entries; // use native browser JS 1.6 implementation if available
  function each(iterator, context) {
    for (var i = 0, length = this.length >>> 0; i < length; i++) {
      if (i in this) iterator.call(context, this[i], i, this);
    }
  }
  if (!_each) _each = each;
  
  function clear() {
    this.length = 0;
    return this;
  }
  function first() {
    return this[0];
  }
  function last() {
    return this[this.length - 1];
  }
  function compact() {
    return this.select(function(value) {
      return value != null;
    });
  }
  function flatten() {
    return this.inject([], function(array, value) {
      if (Object.isArray(value))
        return array.concat(value.flatten());
      array.push(value);
      return array;
    });
  }
  function without() {
    var values = slice.call(arguments, 0);
    return this.select(function(value) {
      return !values.include(value);
    });
  }
  function reverse(inline) {
    return (inline === false ? this.toArray() : this)._reverse();
  }
  function uniq(sorted) {
    return this.inject([], function(array, value, index) {
      if (0 == index || (sorted ? array.last() != value : !array.include(value)))
        array.push(value);
      return array;
    });
  }
  function intersect(array) {
    return this.uniq().findAll(function(item) {
      return array.indexOf(item) !== -1;
    });
  }
  function clone() {
    return slice.call(this, 0);
  }
  function size() {
    return this.length;
  }
  function inspect() {
    return '[' + this.map(Object.inspect).join(', ') + ']';
  }
  function indexOf(item, i) {
    if (this == null) throw new TypeError();
    
    var array = Object(this), length = array.length >>> 0;
    if (length === 0) return -1;
    
    // The rules for the `fromIndex` argument are tricky. Let's follow the
    // spec line-by-line.
    i = Number(i);
    if (isNaN(i)) {
      i = 0;
    } else if (i !== 0 && isFinite(i)) {
      // Equivalent to ES5's `ToInteger` operation.
      i = (i > 0 ? 1 : -1) * Math.floor(Math.abs(i));
    }
    
    // If the search index is greater than the length of the array,
    // return -1.
    if (i > length) return -1;
    
    // If the search index is negative, take its absolute value, subtract it
    // from the length, and make that the new search index. If it's still
    // negative, make it 0.
    var k = i >= 0 ? i : Math.max(length - Math.abs(i), 0);
    for (; k < length; k++)
      if (k in array && array[k] === item) return k;
    return -1;
  }
  
  function lastIndexOf(item, i) {
    if (this == null) throw new TypeError();
    
    var array = Object(this), length = array.length >>> 0;
    if (length === 0) return -1;
    
    // The rules for the `fromIndex` argument are tricky. Let's follow the
    // spec line-by-line.
    if (!Object.isUndefined(i)) {
      i = Number(i);
      if (isNaN(i)) {
        i = 0;
      } else if (i !== 0 && isFinite(i)) {
        // Equivalent to ES5's `ToInteger` operation.
        i = (i > 0 ? 1 : -1) * Math.floor(Math.abs(i));
      }
    } else {
      i = length;
    }
    
    // If fromIndex is positive, clamp it to the last index in the array;
    // if it's negative, subtract its absolute value from the array's length.
    var k = i >= 0 ? Math.min(i, length - 1) :
     length - Math.abs(i);
    // (If fromIndex is still negative, it'll bypass this loop altogether and
    // return -1.)
    for (; k >= 0; k--)
      if (k in array && array[k] === item) return k;
    return -1;
  }
  // Replaces a built-in function. No PDoc needed.
  //
  // Used instead of the broken version of Array#concat in some versions of
  // Opera. Made to be ES5-compliant.
  function concat(_) {
    var array = [], items = slice.call(arguments, 0), item, n = 0;
    items.unshift(this);
    for (var i = 0, length = items.length; i < length; i++) {
      item = items[i];
      if (Object.isArray(item) && !('callee' in item)) {
        for (var j = 0, arrayLength = item.length; j < arrayLength; j++) {
          if (j in item) array[n] = item[j];
          n++;
        }
      } else {
        array[n++] = item;
      }
    }
    array.length = n;
    return array;
  }
  
  // Certain ES5 array methods have the same names as Prototype array methods
  // and perform the same functions.
  //
  // Prototype's implementations of these methods differ from the ES5 spec in
  // the way a missing iterator function is handled. Prototype uses 
  // `Prototype.K` as a default iterator, while ES5 specifies that a
  // `TypeError` must be thrown. Implementing the ES5 spec completely would 
  // break backward compatibility and would force users to pass `Prototype.K`
  // manually. 
  //
  // Instead, if native versions of these methods exist, we wrap the existing
  // methods with our own behavior. This has very little performance impact.
  // It violates the spec by suppressing `TypeError`s for certain methods,
  // but that's an acceptable trade-off.
  
  function wrapNative(method) {
    return function() {
      if (arguments.length === 0) {
        // No iterator was given. Instead of throwing a `TypeError`, use
        // `Prototype.K` as the default iterator.
        return method.call(this, Prototype.K);
      } else if (arguments[0] === undefined) {
        // Same as above.
        var args = slice.call(arguments, 1);
        args.unshift(Prototype.K);
        return method.apply(this, args);
      } else {
        // Pass straight through to the native method.
        return method.apply(this, arguments);
      }
    };
  }
  
  // Note that #map, #filter, #some, and #every take some extra steps for
  // ES5 compliance: the context in which they're called is coerced to an
  // object, and that object's `length` property is coerced to a finite
  // integer. This makes it easier to use the methods as generics.
  //
  // This means that they behave a little differently from other methods in
  // `Enumerable`/`Array` that don't collide with ES5, but that's OK.
  
  function map(iterator) {
    if (this == null) throw new TypeError();
    iterator = iterator || Prototype.K;
    var object = Object(this);
    var results = [], context = arguments[1], n = 0;
    for (var i = 0, length = object.length >>> 0; i < length; i++) {
      if (i in object) {
        results[n] = iterator.call(context, object[i], i, object);
      }
      n++;
    }
    results.length = n;
    return results;
  }
  
  if (arrayProto.map) {
    map = wrapNative(Array.prototype.map);
  }
  
  function filter(iterator) {
    if (this == null || !Object.isFunction(iterator))
      throw new TypeError();
    
    var object = Object(this);
    var results = [], context = arguments[1], value;
    for (var i = 0, length = object.length >>> 0; i < length; i++) {
      if (i in object) {
        value = object[i];
        if (iterator.call(context, value, i, object)) {
          results.push(value);
        }
      }
    }
    return results;
  }
  if (arrayProto.filter) {
    // `Array#filter` requires an iterator by nature, so we don't need to
    // wrap it.
    filter = Array.prototype.filter;
  }
  function some(iterator) {
    if (this == null) throw new TypeError();
    iterator = iterator || Prototype.K;
    var context = arguments[1];
    var object = Object(this);
    for (var i = 0, length = object.length >>> 0; i < length; i++) {
      if (i in object && iterator.call(context, object[i], i, object)) {
        return true;
      }
    }
      
    return false;
  }
  
  if (arrayProto.some) {
    var some = wrapNative(Array.prototype.some);
  }
  
  
  function every(iterator) {
    if (this == null) throw new TypeError();
    iterator = iterator || Prototype.K;
    var context = arguments[1];
    var object = Object(this);
    for (var i = 0, length = object.length >>> 0; i < length; i++) {
      if (i in object && !iterator.call(context, object[i], i, object)) {
        return false;
      }
    }
      
    return true;
  }
  
  if (arrayProto.every) {
    var every = wrapNative(Array.prototype.every);
  }
  
  function entries() {
    if (this == null) throw new TypeError();
    return this.map(function(i,index) {
        return [index,i];
    });
  }
  // Prototype's `Array#inject` behaves similarly to ES5's `Array#reduce`.
  var _reduce = arrayProto.reduce;
  function inject(memo, iterator) {
    iterator = iterator || Prototype.K;
    var context = arguments[2];
    // The iterator must be bound, as `Array#reduce` always binds to
    // `undefined`.
    return _reduce.call(this, iterator.bind(context), memo);
  }
  
  // Piggyback on `Array#reduce` if it exists; otherwise fall back to the
  // standard `Enumerable.inject`.
  if (!arrayProto.reduce) {
    var inject = Enumerable.inject;
  }
  Object.extend(arrayProto, Enumerable);
  if (!arrayProto._reverse)
    arrayProto._reverse = arrayProto.reverse;
  Object.extend(arrayProto, {
    _each:     _each,
    
    map:       map,
    collect:   map,
    select:    filter,
    filter:    filter,
    findAll:   filter,
    some:      some,
    any:       some,
    every:     every,
    all:       every,
    inject:    inject,
    
    clear:     clear,
    first:     first,
    last:      last,
    compact:   compact,
    flatten:   flatten,
    without:   without,
    reverse:   reverse,
    uniq:      uniq,
    intersect: intersect,
    clone:     clone,
    toArray:   clone,
    size:      size,
    inspect:   inspect,
    entries:   _entries || entries
  });
  // fix for opera
  var CONCAT_ARGUMENTS_BUGGY = (function() {
    return [].concat(arguments)[0][0] !== 1;
  })(1,2);
  if (CONCAT_ARGUMENTS_BUGGY) arrayProto.concat = concat;
  // Use native browser JS 1.6 implementations if available.
  if (!arrayProto.indexOf) arrayProto.indexOf = indexOf;
  if (!arrayProto.lastIndexOf) arrayProto.lastIndexOf = lastIndexOf;
})();
function $H(object) {
  return new Hash(object);
};
var Hash = Class.create(Enumerable, (function() {
  function initialize(object) {
    this._object = Object.isHash(object) ? object.toObject() : Object.clone(object);
  }
  // Docs for #each even though technically it's implemented by Enumerable
  // Our _internal_ each
  function _each(iterator, context) {
    var i = 0;
    for (var key in this._object) {
      var value = this._object[key], pair = [key, value];
      pair.key = key;
      pair.value = value;
      iterator.call(context, pair, i);
      i++;
    }
  }
  function set(key, value) {
    return this._object[key] = value;
  }
  function get(key) {
    // simulating poorly supported hasOwnProperty
    if (this._object[key] !== Object.prototype[key])
      return this._object[key];
  }
  function unset(key) {
    var value = this._object[key];
    delete this._object[key];
    return value;
  }
  function toObject() {
    return Object.clone(this._object);
  }
  
  
  function keys() {
    return this.pluck('key');
  }
  function values() {
    return this.pluck('value');
  }
  function index(value) {
    var match = this.detect(function(pair) {
      return pair.value === value;
    });
    return match && match.key;
  }
  function merge(object) {
    return this.clone().update(object);
  }
  function update(object) {
    return new Hash(object).inject(this, function(result, pair) {
      result.set(pair.key, pair.value);
      return result;
    });
  }
  // Private. No PDoc necessary.
  function toQueryPair(key, value) {
    if (Object.isUndefined(value)) return key;
    
    value = String.interpret(value);
    // Normalize newlines as \r\n because the HTML spec says newlines should
    // be encoded as CRLFs.
    value = value.gsub(/(\r)?\n/, '\r\n');
    value = encodeURIComponent(value);
    // Likewise, according to the spec, spaces should be '+' rather than
    // '%20'.
    value = value.gsub(/%20/, '+');
    return key + '=' + value;
  }
  function toQueryString() {
    return this.inject([], function(results, pair) {
      var key = encodeURIComponent(pair.key), values = pair.value;
      
      if (values && typeof values == 'object') {
        if (Object.isArray(values)) {
          // We used to use `Array#map` here to get the query pair for each
          // item in the array, but that caused test regressions once we
          // added the sparse array behavior for array iterator methods.
          // Changed to an ordinary `for` loop so that we can handle
          // `undefined` values ourselves rather than have them skipped.
          var queryValues = [];
          for (var i = 0, len = values.length, value; i < len; i++) {
            value = values[i];
            queryValues.push(toQueryPair(key, value));            
          }
          return results.concat(queryValues);
        }
      } else results.push(toQueryPair(key, values));
      return results;
    }).join('&');
  }
  function inspect() {
    return '#<Hash:{' + this.map(function(pair) {
      return pair.map(Object.inspect).join(': ');
    }).join(', ') + '}>';
  }
  function clone() {
    return new Hash(this);
  }
  return {
    initialize:             initialize,
    _each:                  _each,
    set:                    set,
    get:                    get,
    unset:                  unset,
    toObject:               toObject,
    toTemplateReplacements: toObject,
    keys:                   keys,
    values:                 values,
    index:                  index,
    merge:                  merge,
    update:                 update,
    toQueryString:          toQueryString,
    inspect:                inspect,
    toJSON:                 toObject,
    clone:                  clone
  };
})());
Hash.from = $H;
Object.extend(Number.prototype, (function() {
  function toColorPart() {
    return this.toPaddedString(2, 16);
  }
  function succ() {
    return this + 1;
  }
  function times(iterator, context) {
    $R(0, this, true).each(iterator, context);
    return this;
  }
  function toPaddedString(length, radix) {
    var string = this.toString(radix || 10);
    return '0'.times(length - string.length) + string;
  }
  function abs() {
    return Math.abs(this);
  }
  function round() {
    return Math.round(this);
  }
  function ceil() {
    return Math.ceil(this);
  }
  function floor() {
    return Math.floor(this);
  }
  return {
    toColorPart:    toColorPart,
    succ:           succ,
    times:          times,
    toPaddedString: toPaddedString,
    abs:            abs,
    round:          round,
    ceil:           ceil,
    floor:          floor
  };
})());
function $R(start, end, exclusive) {
  return new ObjectRange(start, end, exclusive);
}
var ObjectRange = Class.create(Enumerable, (function() {
  function initialize(start, end, exclusive) {
    this.start = start;
    this.end = end;
    this.exclusive = exclusive;
  }
  function _each(iterator, context) {
    var value = this.start, i;
    for (i = 0; this.include(value); i++) {
      iterator.call(context, value, i);
      value = value.succ();
    }
  }
  function include(value) {
    if (value < this.start)
      return false;
    if (this.exclusive)
      return value < this.end;
    return value <= this.end;
  }
  return {
    initialize: initialize,
    _each:      _each,
    include:    include
  };
})());
var Abstract = { };
var Try = {
  these: function() {
    var returnValue;
    for (var i = 0, length = arguments.length; i < length; i++) {
      var lambda = arguments[i];
      try {
        returnValue = lambda();
        break;
      } catch (e) { }
    }
    return returnValue;
  }
};
var Ajax = {
  getTransport: function() {
    return Try.these(
      function() {return new XMLHttpRequest()},
      function() {return new ActiveXObject('Msxml2.XMLHTTP')},
      function() {return new ActiveXObject('Microsoft.XMLHTTP')}
    ) || false;
  },
  activeRequestCount: 0
};
Ajax.Responders = {
  responders: [],
  _each: function(iterator, context) {
    this.responders._each(iterator, context);
  },
  register: function(responder) {
    if (!this.include(responder))
      this.responders.push(responder);
  },
  unregister: function(responder) {
    this.responders = this.responders.without(responder);
  },
  dispatch: function(callback, request, transport, json) {
    this.each(function(responder) {
      if (Object.isFunction(responder[callback])) {
        try {
          responder[callback].apply(responder, [request, transport, json]);
        } catch (e) { }
      }
    });
  }
};
Object.extend(Ajax.Responders, Enumerable);
Ajax.Responders.register({
  onCreate:   function() { Ajax.activeRequestCount++ },
  onComplete: function() { Ajax.activeRequestCount-- }
});
Ajax.Base = Class.create({
  initialize: function(options) {
    this.options = {
      method:       'post',
      asynchronous: true,
      contentType:  'application/x-www-form-urlencoded',
      encoding:     'UTF-8',
      parameters:   '',
      evalJSON:     true,
      evalJS:       true
    };
    Object.extend(this.options, options || { });
    this.options.method = this.options.method.toLowerCase();
    if (Object.isHash(this.options.parameters))
      this.options.parameters = this.options.parameters.toObject();
  }
});
Ajax.Request = Class.create(Ajax.Base, {
  _complete: false,
  initialize: function($super, url, options) {
    $super(options);
    this.transport = Ajax.getTransport();
    this.request(url);
  },
  request: function(url) {
    this.url = url;
    this.method = this.options.method;
    var params = Object.isString(this.options.parameters) ?
          this.options.parameters :
          Object.toQueryString(this.options.parameters);
    if (!['get', 'post'].include(this.method)) {
      // simulate other verbs over post
      params += (params ? '&' : '') + "_method=" + this.method;
      this.method = 'post';
    }
    if (params && this.method === 'get') {
      // when GET, append parameters to URL
      this.url += (this.url.include('?') ? '&' : '?') + params;
    }
    this.parameters = params.toQueryParams();
    try {
      var response = new Ajax.Response(this);
      if (this.options.onCreate) this.options.onCreate(response);
      Ajax.Responders.dispatch('onCreate', this, response);
      this.transport.open(this.method.toUpperCase(), this.url,
        this.options.asynchronous);
      if (this.options.asynchronous) this.respondToReadyState.bind(this).defer(1);
      this.transport.onreadystatechange = this.onStateChange.bind(this);
      this.setRequestHeaders();
      this.body = this.method == 'post' ? (this.options.postBody || params) : null;
      this.transport.send(this.body);
      /* Force Firefox to handle ready state 4 for synchronous requests */
      if (!this.options.asynchronous && this.transport.overrideMimeType)
        this.onStateChange();
    }
    catch (e) {
      this.dispatchException(e);
    }
  },
  onStateChange: function() {
    var readyState = this.transport.readyState;
    if (readyState > 1 && !((readyState == 4) && this._complete))
      this.respondToReadyState(this.transport.readyState);
  },
  setRequestHeaders: function() {
    var headers = {
      'X-Requested-With': 'XMLHttpRequest',
      'X-Prototype-Version': Prototype.Version,
      'Accept': 'text/javascript, text/html, application/xml, text/xml, */*'
    };
    if (this.method == 'post') {
      headers['Content-type'] = this.options.contentType +
        (this.options.encoding ? '; charset=' + this.options.encoding : '');
      /* Force "Connection: close" for older Mozilla browsers to work
       * around a bug where XMLHttpRequest sends an incorrect
       * Content-length header. See Mozilla Bugzilla #246651.
       */
      if (this.transport.overrideMimeType &&
          (navigator.userAgent.match(/Gecko\/(\d{4})/) || [0,2005])[1] < 2005)
            headers['Connection'] = 'close';
    }
    // user-defined headers
    if (typeof this.options.requestHeaders == 'object') {
      var extras = this.options.requestHeaders;
      if (Object.isFunction(extras.push))
        for (var i = 0, length = extras.length; i < length; i += 2)
          headers[extras[i]] = extras[i+1];
      else
        $H(extras).each(function(pair) { headers[pair.key] = pair.value });
    }
    // skip null or undefined values
    for (var name in headers)
      if (headers[name] != null)
        this.transport.setRequestHeader(name, headers[name]);
  },
  success: function() {
    var status = this.getStatus();
    return !status || (status >= 200 && status < 300) || status == 304;
  },
  getStatus: function() {
    try {
      // IE sometimes returns 1223 for a 204 response.
      if (this.transport.status === 1223) return 204;
      return this.transport.status || 0;
    } catch (e) { return 0 }
  },
  respondToReadyState: function(readyState) {
    var state = Ajax.Request.Events[readyState], response = new Ajax.Response(this);
    if (state == 'Complete') {
      try {
        this._complete = true;
        (this.options['on' + response.status]
         || this.options['on' + (this.success() ? 'Success' : 'Failure')]
         || Prototype.emptyFunction)(response, response.headerJSON);
      } catch (e) {
        this.dispatchException(e);
      }
      var contentType = response.getHeader('Content-type');
      if (this.options.evalJS == 'force'
          || (this.options.evalJS && this.isSameOrigin() && contentType
          && contentType.match(/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s*$/i)))
        this.evalResponse();
    }
    try {
      (this.options['on' + state] || Prototype.emptyFunction)(response, response.headerJSON);
      Ajax.Responders.dispatch('on' + state, this, response, response.headerJSON);
    } catch (e) {
      this.dispatchException(e);
    }
    if (state == 'Complete') {
      // avoid memory leak in MSIE: clean up
      this.transport.onreadystatechange = Prototype.emptyFunction;
    }
  },
  isSameOrigin: function() {
    var m = this.url.match(/^\s*https?:\/\/[^\/]*/);
    return !m || (m[0] == '#{protocol}//#{domain}#{port}'.interpolate({
      protocol: location.protocol,
      domain: document.domain,
      port: location.port ? ':' + location.port : ''
    }));
  },
  getHeader: function(name) {
    try {
      return this.transport.getResponseHeader(name) || null;
    } catch (e) { return null; }
  },
  evalResponse: function() {
    try {
      return eval((this.transport.responseText || '').unfilterJSON());
    } catch (e) {
      this.dispatchException(e);
    }
  },
  dispatchException: function(exception) {
    (this.options.onException || Prototype.emptyFunction)(this, exception);
    Ajax.Responders.dispatch('onException', this, exception);
  }
});
Ajax.Request.Events =
  ['Uninitialized', 'Loading', 'Loaded', 'Interactive', 'Complete'];
Ajax.Response = Class.create({
  // Don't document the constructor; should never be manually instantiated.
  initialize: function(request){
    this.request = request;
    var transport  = this.transport  = request.transport,
        readyState = this.readyState = transport.readyState;
    if ((readyState > 2 && !Prototype.Browser.IE) || readyState == 4) {
      this.status       = this.getStatus();
      this.statusText   = this.getStatusText();
      this.responseText = String.interpret(transport.responseText);
      this.headerJSON   = this._getHeaderJSON();
    }
    if (readyState == 4) {
      var xml = transport.responseXML;
      this.responseXML  = Object.isUndefined(xml) ? null : xml;
      this.responseJSON = this._getResponseJSON();
    }
  },
  status:      0,
  statusText: '',
  getStatus: Ajax.Request.prototype.getStatus,
  getStatusText: function() {
    try {
      return this.transport.statusText || '';
    } catch (e) { return '' }
  },
  getHeader: Ajax.Request.prototype.getHeader,
  getAllHeaders: function() {
    try {
      return this.getAllResponseHeaders();
    } catch (e) { return null }
  },
  getResponseHeader: function(name) {
    return this.transport.getResponseHeader(name);
  },
  getAllResponseHeaders: function() {
    return this.transport.getAllResponseHeaders();
  },
  _getHeaderJSON: function() {
    var json = this.getHeader('X-JSON');
    if (!json) return null;
    try {
      // Browsers expect HTTP headers to be ASCII and nothing else. Running
      // them through `decodeURIComponent` processes them with the page's
      // specified encoding.
      json = decodeURIComponent(escape(json));
    } catch(e) {
      // Except Chrome doesn't seem to need this, and calling
      // `decodeURIComponent` on text that's already in the proper encoding
      // will throw a `URIError`. The ugly solution is to assume that a
      // `URIError` raised here signifies that the text is, in fact, already 
      // in the correct encoding, and treat the failure as a good sign.
      //
      // This is ugly, but so too is sending extended characters in an HTTP
      // header with no spec to back you up.
    }
    
    try {
      return json.evalJSON(this.request.options.sanitizeJSON ||
        !this.request.isSameOrigin());
    } catch (e) {
      this.request.dispatchException(e);
    }
  },
  _getResponseJSON: function() {
    var options = this.request.options;
    if (!options.evalJSON || (options.evalJSON != 'force' &&
      !(this.getHeader('Content-type') || '').include('application/json')) ||
        this.responseText.blank())
          return null;
    try {
      return this.responseText.evalJSON(options.sanitizeJSON ||
        !this.request.isSameOrigin());
    } catch (e) {
      this.request.dispatchException(e);
    }
  }
});
Ajax.Updater = Class.create(Ajax.Request, {
  initialize: function($super, container, url, options) {
    this.container = {
      success: (container.success || container),
      failure: (container.failure || (container.success ? null : container))
    };
    options = Object.clone(options);
    var onComplete = options.onComplete;
    options.onComplete = (function(response, json) {
      this.updateContent(response.responseText);
      if (Object.isFunction(onComplete)) onComplete(response, json);
    }).bind(this);
    $super(url, options);
  },
  updateContent: function(responseText) {
    var receiver = this.container[this.success() ? 'success' : 'failure'],
        options = this.options;
    if (!options.evalScripts) responseText = responseText.stripScripts();
    if (receiver = $(receiver)) {
      if (options.insertion) {
        if (Object.isString(options.insertion)) {
          var insertion = { }; insertion[options.insertion] = responseText;
          receiver.insert(insertion);
        }
        else options.insertion(receiver, responseText);
      }
      else receiver.update(responseText);
    }
  }
});
Ajax.PeriodicalUpdater = Class.create(Ajax.Base, {
  initialize: function($super, container, url, options) {
    $super(options);
    this.onComplete = this.options.onComplete;
    this.frequency = (this.options.frequency || 2);
    this.decay = (this.options.decay || 1);
    this.updater = { };
    this.container = container;
    this.url = url;
    this.start();
  },
  start: function() {
    this.options.onComplete = this.updateComplete.bind(this);
    this.onTimerEvent();
  },
  stop: function() {
    this.updater.options.onComplete = undefined;
    clearTimeout(this.timer);
    (this.onComplete || Prototype.emptyFunction).apply(this, arguments);
  },
  updateComplete: function(response) {
    if (this.options.decay) {
      this.decay = (response.responseText == this.lastText ?
        this.decay * this.options.decay : 1);
      this.lastText = response.responseText;
    }
    this.timer = this.onTimerEvent.bind(this).delay(this.decay * this.frequency);
  },
  onTimerEvent: function() {
    this.updater = new Ajax.Updater(this.container, this.url, this.options);
  }
});
(function(GLOBAL) {
  
  var UNDEFINED;
  var SLICE = Array.prototype.slice;
  
  // Try to reuse the same created element as much as possible. We'll use
  // this DIV for capability checks (where possible) and for normalizing
  // HTML content.
  var DIV = document.createElement('div');
  
  function $(element) {
    if (arguments.length > 1) {
      for (var i = 0, elements = [], length = arguments.length; i < length; i++)
        elements.push($(arguments[i]));
      return elements;
    }
    
    if (Object.isString(element))
      element = document.getElementById(element);
    return Element.extend(element);
  }
  
  GLOBAL.$ = $;
  
  
  // Define the DOM Level 2 node type constants if they're missing.
  if (!GLOBAL.Node) GLOBAL.Node = {};
  
  if (!GLOBAL.Node.ELEMENT_NODE) {
    Object.extend(GLOBAL.Node, {
      ELEMENT_NODE:                1,
      ATTRIBUTE_NODE:              2,
      TEXT_NODE:                   3,
      CDATA_SECTION_NODE:          4,
      ENTITY_REFERENCE_NODE:       5,
      ENTITY_NODE:                 6,
      PROCESSING_INSTRUCTION_NODE: 7,
      COMMENT_NODE:                8,
      DOCUMENT_NODE:               9,
      DOCUMENT_TYPE_NODE:         10,
      DOCUMENT_FRAGMENT_NODE:     11,
      NOTATION_NODE:              12
    });
  }
  
  // The cache for all our created elements.
  var ELEMENT_CACHE = {};
  
  // For performance reasons, we create new elements by cloning a "blank"
  // version of a given element. But sometimes this causes problems. Skip
  // the cache if:
  //   (a) We're creating a SELECT element (troublesome in IE6);
  //   (b) We're setting the `type` attribute on an INPUT element
  //       (troublesome in IE9).
  function shouldUseCreationCache(tagName, attributes) {
    if (tagName === 'select') return false;
    if ('type' in attributes) return false;
    return true;
  }
  
  // IE requires that `name` and `type` attributes be set this way.
  var HAS_EXTENDED_CREATE_ELEMENT_SYNTAX = (function(){
    try {
      var el = document.createElement('<input name="x">');
      return el.tagName.toLowerCase() === 'input' && el.name === 'x';
    } 
    catch(err) {
      return false;
    }
  })();
  
  
  var oldElement = GLOBAL.Element;
  function Element(tagName, attributes) {
    attributes = attributes || {};
    tagName = tagName.toLowerCase();
    
    if (HAS_EXTENDED_CREATE_ELEMENT_SYNTAX && attributes.name) {
      tagName = '<' + tagName + ' name="' + attributes.name + '">';
      delete attributes.name;
      return Element.writeAttribute(document.createElement(tagName), attributes);
    }
    
    if (!ELEMENT_CACHE[tagName])
      ELEMENT_CACHE[tagName] = Element.extend(document.createElement(tagName));
    
    var node = shouldUseCreationCache(tagName, attributes) ?
     ELEMENT_CACHE[tagName].cloneNode(false) : document.createElement(tagName);
     
    return Element.writeAttribute(node, attributes);
  }
  
  GLOBAL.Element = Element;
  
  Object.extend(GLOBAL.Element, oldElement || {});
  if (oldElement) GLOBAL.Element.prototype = oldElement.prototype;
  
  Element.Methods = { ByTag: {}, Simulated: {} };
  // Temporary object for holding all our initial element methods. We'll add
  // them all at once at the bottom of this file.
  var methods = {};
  
  var INSPECT_ATTRIBUTES = { id: 'id', className: 'class' };
  function inspect(element) {
    element = $(element);
    var result = '<' + element.tagName.toLowerCase();
    
    var attribute, value;
    for (var property in INSPECT_ATTRIBUTES) {
      attribute = INSPECT_ATTRIBUTES[property];
      value = (element[property] || '').toString();
      if (value) result += ' ' + attribute + '=' + value.inspect(true);
    }
    
    return result + '>';
  }
  
  methods.inspect = inspect;
  
  // VISIBILITY
  
  function visible(element) {
    return $(element).style.display !== 'none';
  }
  
  function toggle(element, bool) {
    element = $(element);
    if (Object.isUndefined(bool))
      bool = !Element.visible(element);
    Element[bool ? 'show' : 'hide'](element);
    
    return element;
  }
  function hide(element) {
    element = $(element);
    element.style.display = 'none';
    return element;
  }
  
  function show(element) {
    element = $(element);
    element.style.display = '';
    return element;
  }
  
  
  Object.extend(methods, {
    visible: visible,
    toggle:  toggle,
    hide:    hide,
    show:    show
  });
  
  // MANIPULATION
  
  function remove(element) {
    element = $(element);
    element.parentNode.removeChild(element);
    return element;
  }
  
  // see: http://support.microsoft.com/kb/276228
  var SELECT_ELEMENT_INNERHTML_BUGGY = (function(){
    var el = document.createElement("select"),
        isBuggy = true;
    el.innerHTML = "<option value=\"test\">test</option>";
    if (el.options && el.options[0]) {
      isBuggy = el.options[0].nodeName.toUpperCase() !== "OPTION";
    }
    el = null;
    return isBuggy;
  })();
  // see: http://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx
  var TABLE_ELEMENT_INNERHTML_BUGGY = (function(){
    try {
      var el = document.createElement("table");
      if (el && el.tBodies) {
        el.innerHTML = "<tbody><tr><td>test</td></tr></tbody>";
        var isBuggy = typeof el.tBodies[0] == "undefined";
        el = null;
        return isBuggy;
      }
    } catch (e) {
      return true;
    }
  })();
  
  var LINK_ELEMENT_INNERHTML_BUGGY = (function() {
    try {
      var el = document.createElement('div');
      el.innerHTML = "<link />";
      var isBuggy = (el.childNodes.length === 0);
      el = null;
      return isBuggy;
    } catch(e) {
      return true;
    }
  })();
  
  var ANY_INNERHTML_BUGGY = SELECT_ELEMENT_INNERHTML_BUGGY ||
   TABLE_ELEMENT_INNERHTML_BUGGY || LINK_ELEMENT_INNERHTML_BUGGY;    
  var SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING = (function () {
    var s = document.createElement("script"),
        isBuggy = false;
    try {
      s.appendChild(document.createTextNode(""));
      isBuggy = !s.firstChild ||
        s.firstChild && s.firstChild.nodeType !== 3;
    } catch (e) {
      isBuggy = true;
    }
    s = null;
    return isBuggy;
  })();
  
  function update(element, content) {
    element = $(element);
    
    // Purge the element's existing contents of all storage keys and
    // event listeners, since said content will be replaced no matter
    // what.
    var descendants = element.getElementsByTagName('*'),
     i = descendants.length;
    while (i--) purgeElement(descendants[i]);
    
    if (content && content.toElement)
      content = content.toElement();
      
    if (Object.isElement(content))
      return element.update().insert(content);
      
    
    content = Object.toHTML(content);
    var tagName = element.tagName.toUpperCase();
    
    if (tagName === 'SCRIPT' && SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING) {
      // Scripts are not evaluated when updating a SCRIPT element.
      element.text = content;
      return element;
    }
    
    if (ANY_INNERHTML_BUGGY) {
      if (tagName in INSERTION_TRANSLATIONS.tags) {
        while (element.firstChild)
          element.removeChild(element.firstChild);
        
        var nodes = getContentFromAnonymousElement(tagName, content.stripScripts());        
        for (var i = 0, node; node = nodes[i]; i++)
          element.appendChild(node);
        
      } else if (LINK_ELEMENT_INNERHTML_BUGGY && Object.isString(content) && content.indexOf('<link') > -1) {
        // IE barfs when inserting a string that beings with a LINK
        // element. The workaround is to add any content to the beginning
        // of the string; we'll be inserting a text node (see
        // getContentFromAnonymousElement below).
        while (element.firstChild)
          element.removeChild(element.firstChild);
          
        var nodes = getContentFromAnonymousElement(tagName,
         content.stripScripts(), true);
        
        for (var i = 0, node; node = nodes[i]; i++)
          element.appendChild(node);
      } else {
        element.innerHTML = content.stripScripts();
      }
    } else {
      element.innerHTML = content.stripScripts();
    }
    
    content.evalScripts.bind(content).defer();
    return element;
  }
  
  function replace(element, content) {
    element = $(element);
    
    if (content && content.toElement) {
      content = content.toElement();      
    } else if (!Object.isElement(content)) {
      content = Object.toHTML(content);
      var range = element.ownerDocument.createRange();
      range.selectNode(element);
      content.evalScripts.bind(content).defer();
      content = range.createContextualFragment(content.stripScripts());
    }
      
    element.parentNode.replaceChild(content, element);
    return element;
  }
  
  var INSERTION_TRANSLATIONS = {
    before: function(element, node) {
      element.parentNode.insertBefore(node, element);
    },
    top: function(element, node) {
      element.insertBefore(node, element.firstChild);
    },
    bottom: function(element, node) {
      element.appendChild(node);
    },
    after: function(element, node) {
      element.parentNode.insertBefore(node, element.nextSibling);
    },
    
    tags: {
      TABLE:  ['<table>',                '</table>',                   1],
      TBODY:  ['<table><tbody>',         '</tbody></table>',           2],
      TR:     ['<table><tbody><tr>',     '</tr></tbody></table>',      3],
      TD:     ['<table><tbody><tr><td>', '</td></tr></tbody></table>', 4],
      SELECT: ['<select>',               '</select>',                  1]
    }
  };
  
  var tags = INSERTION_TRANSLATIONS.tags;
  
  Object.extend(tags, {
    THEAD: tags.TBODY,
    TFOOT: tags.TBODY,
    TH:    tags.TD
  });
  
  function replace_IE(element, content) {
    element = $(element);
    if (content && content.toElement)
      content = content.toElement();
    if (Object.isElement(content)) {
      element.parentNode.replaceChild(content, element);
      return element;
    }
    
    content = Object.toHTML(content);
    var parent = element.parentNode, tagName = parent.tagName.toUpperCase();
    
    if (tagName in INSERTION_TRANSLATIONS.tags) {
      var nextSibling = Element.next(element);
      var fragments = getContentFromAnonymousElement(
       tagName, content.stripScripts());
      
      parent.removeChild(element);
      
      var iterator;
      if (nextSibling)
        iterator = function(node) { parent.insertBefore(node, nextSibling) };
      else
        iterator = function(node) { parent.appendChild(node); }
        
      fragments.each(iterator);
    } else {
      // We don't need to special-case this one.
      element.outerHTML = content.stripScripts();
    }
    
    content.evalScripts.bind(content).defer();
    return element;
  }
  
  if ('outerHTML' in document.documentElement)
    replace = replace_IE;
  
  function isContent(content) {
    if (Object.isUndefined(content) || content === null) return false;
    
    if (Object.isString(content) || Object.isNumber(content)) return true;
    if (Object.isElement(content)) return true;    
    if (content.toElement || content.toHTML) return true;
    
    return false;
  }
  
  // This private method does the bulk of the work for Element#insert. The
  // actual insert method handles argument normalization and multiple
  // content insertions.
  function insertContentAt(element, content, position) {
    position   = position.toLowerCase();
    var method = INSERTION_TRANSLATIONS[position];
    
    if (content && content.toElement) content = content.toElement();
    if (Object.isElement(content)) {
      method(element, content);
      return element;
    }
    
    content = Object.toHTML(content);      
    var tagName = ((position === 'before' || position === 'after') ?
     element.parentNode : element).tagName.toUpperCase();
    
    var childNodes = getContentFromAnonymousElement(tagName, content.stripScripts());
    
    if (position === 'top' || position === 'after') childNodes.reverse();
    
    for (var i = 0, node; node = childNodes[i]; i++)
      method(element, node);
      
    content.evalScripts.bind(content).defer();    
  }
  function insert(element, insertions) {
    element = $(element);
    
    if (isContent(insertions))
      insertions = { bottom: insertions };
      
    for (var position in insertions)
      insertContentAt(element, insertions[position], position);
    
    return element;    
  }
  
  function wrap(element, wrapper, attributes) {
    element = $(element);
    
    if (Object.isElement(wrapper)) {
      // The wrapper argument is a DOM node.
      $(wrapper).writeAttribute(attributes || {});      
    } else if (Object.isString(wrapper)) {
      // The wrapper argument is a string representing a tag name.
      wrapper = new Element(wrapper, attributes);
    } else {
      // No wrapper was specified, which means the second argument is a set
      // of attributes.
      wrapper = new Element('div', wrapper);
    }
    
    if (element.parentNode)
      element.parentNode.replaceChild(wrapper, element);
    
    wrapper.appendChild(element);
    
    return wrapper;
  }
  
  function cleanWhitespace(element) {
    element = $(element);
    var node = element.firstChild;
    
    while (node) {
      var nextNode = node.nextSibling;
      if (node.nodeType === Node.TEXT_NODE && !/\S/.test(node.nodeValue))
        element.removeChild(node);
      node = nextNode;
    }
    return element;
  }
  
  function empty(element) {
    return $(element).innerHTML.blank();
  }
  
  // In older versions of Internet Explorer, certain elements don't like
  // having innerHTML set on them — including SELECT and most table-related
  // tags. So we wrap the string with enclosing HTML (if necessary), stick it
  // in a DIV, then grab the DOM nodes.
  function getContentFromAnonymousElement(tagName, html, force) {
    var t = INSERTION_TRANSLATIONS.tags[tagName], div = DIV;
    
    var workaround = !!t;
    if (!workaround && force) {
      workaround = true;
      t = ['', '', 0];
    }
    
    if (workaround) {
      div.innerHTML = '&#160;' + t[0] + html + t[1];
      div.removeChild(div.firstChild);
      for (var i = t[2]; i--; )
        div = div.firstChild;
    } else {
      div.innerHTML = html;
    }
    
    return $A(div.childNodes);
    //return SLICE.call(div.childNodes, 0);
  }
  
  function clone(element, deep) {
    if (!(element = $(element))) return;
    var clone = element.cloneNode(deep);
    if (!HAS_UNIQUE_ID_PROPERTY) {
      clone._prototypeUID = UNDEFINED;
      if (deep) {
        var descendants = Element.select(clone, '*'),
         i = descendants.length;
        while (i--)
          descendants[i]._prototypeUID = UNDEFINED;
      }
    }
    return Element.extend(clone);
  }
  
  // Performs cleanup on a single element before it is removed from the page.
  function purgeElement(element) {
    var uid = getUniqueElementID(element);
    if (uid) {
      Element.stopObserving(element);
      if (!HAS_UNIQUE_ID_PROPERTY)
        element._prototypeUID = UNDEFINED;
      delete Element.Storage[uid];
    }
  }
  
  function purgeCollection(elements) {
    var i = elements.length;
    while (i--)
      purgeElement(elements[i]);
  }
  
  function purgeCollection_IE(elements) {
    var i = elements.length, element, uid;
    while (i--) {
      element = elements[i];
      uid = getUniqueElementID(element);
      delete Element.Storage[uid];
      delete Event.cache[uid];
    }
  }
  
  if (HAS_UNIQUE_ID_PROPERTY) {
    purgeCollection = purgeCollection_IE;
  }
  
  
  function purge(element) {
    if (!(element = $(element))) return;
    purgeElement(element);
    
    var descendants = element.getElementsByTagName('*'),
     i = descendants.length;
     
    while (i--) purgeElement(descendants[i]);
    
    return null;
  }
  
  Object.extend(methods, {
    remove:  remove,
    update:  update,
    replace: replace,
    insert:  insert,
    wrap:    wrap,
    cleanWhitespace: cleanWhitespace,
    empty:   empty,
    clone:   clone,
    purge:   purge
  });
  
  // TRAVERSAL
  
  function recursivelyCollect(element, property, maximumLength) {
    element = $(element);
    maximumLength = maximumLength || -1;
    var elements = [];
    
    while (element = element[property]) {
      if (element.nodeType === Node.ELEMENT_NODE)
        elements.push(Element.extend(element));
        
      if (elements.length === maximumLength) break;
    }
    
    return elements;    
  }
  
  function ancestors(element) {
    return recursivelyCollect(element, 'parentNode');
  }
  
  function descendants(element) {
    return Element.select(element, '*');
  }
  
  function firstDescendant(element) {
    element = $(element).firstChild;
    while (element && element.nodeType !== Node.ELEMENT_NODE)
      element = element.nextSibling;
    return $(element);
  }
  
  function immediateDescendants(element) {
    var results = [], child = $(element).firstChild;
    
    while (child) {
      if (child.nodeType === Node.ELEMENT_NODE)
        results.push(Element.extend(child));
      
      child = child.nextSibling;
    }
    
    return results;
  }
  
  function previousSiblings(element) {
    return recursivelyCollect(element, 'previousSibling');
  }
  
  function nextSiblings(element) {
    return recursivelyCollect(element, 'nextSibling');
  }
  
  function siblings(element) {
    element = $(element);    
    var previous = previousSiblings(element),
     next = nextSiblings(element);
    return previous.reverse().concat(next);
  }
  
  function match(element, selector) {
    element = $(element);
    
    // If selector is a string, we assume it's a CSS selector.
    if (Object.isString(selector))
      return Prototype.Selector.match(element, selector);
      
    // Otherwise, we assume it's an object with its own `match` method.
    return selector.match(element);
  }
  
  
  // Internal method for optimizing traversal. Works like 
  // `recursivelyCollect`, except it stops at the first match and doesn't
  // extend any elements except for the returned element.
  function _recursivelyFind(element, property, expression, index) {
    element = $(element), expression = expression || 0, index = index || 0;
    if (Object.isNumber(expression)) {
      index = expression, expression = null;
    }
    
    while (element = element[property]) {
      // Skip any non-element nodes.
      if (element.nodeType !== 1) continue;
      // Skip any nodes that don't match the expression, if there is one.
      if (expression && !Prototype.Selector.match(element, expression))
        continue;
      // Skip the first `index` matches we find.
      if (--index >= 0) continue;
      
      return Element.extend(element);
    }
  }
  
  
  function up(element, expression, index) {
    element = $(element);
    if (arguments.length === 1) return $(element.parentNode);
    return _recursivelyFind(element, 'parentNode', expression, index);
  }
  function down(element, expression, index) {
    if (arguments.length === 1) return firstDescendant(element);
    element = $(element), expression = expression || 0, index = index || 0;
    
    if (Object.isNumber(expression))
      index = expression, expression = '*';
    
    var node = Prototype.Selector.select(expression, element)[index];
    return Element.extend(node);
  }
  function previous(element, expression, index) {
    return _recursivelyFind(element, 'previousSibling', expression, index);
  }
  
  function next(element, expression, index) {
    return _recursivelyFind(element, 'nextSibling', expression, index);
  }
    
  function select(element) {
    element = $(element);
    var expressions = SLICE.call(arguments, 1).join(', ');
    return Prototype.Selector.select(expressions, element);
  }
  function adjacent(element) {
    element = $(element);
    var expressions = SLICE.call(arguments, 1).join(', ');
    var siblings = Element.siblings(element), results = [];
    for (var i = 0, sibling; sibling = siblings[i]; i++) {
      if (Prototype.Selector.match(sibling, expressions))
        results.push(sibling);
    }
    
    return results;
  }
  
  function descendantOf_DOM(element, ancestor) {
    element = $(element), ancestor = $(ancestor);
    while (element = element.parentNode)
      if (element === ancestor) return true;
    return false;
  }
  
  function descendantOf_contains(element, ancestor) {
    element = $(element), ancestor = $(ancestor);
    // Some nodes, like `document`, don't have the "contains" method.
    if (!ancestor.contains) return descendantOf_DOM(element, ancestor);
    return ancestor.contains(element) && ancestor !== element;
  }
  
  function descendantOf_compareDocumentPosition(element, ancestor) {
    element = $(element), ancestor = $(ancestor);
    return (element.compareDocumentPosition(ancestor) & 8) === 8;
  }
  
  var descendantOf;
  if (DIV.compareDocumentPosition) {
    descendantOf = descendantOf_compareDocumentPosition;
  } else if (DIV.contains) {
    descendantOf = descendantOf_contains;
  } else {
    descendantOf = descendantOf_DOM;
  }
  
  
  Object.extend(methods, {
    recursivelyCollect:   recursivelyCollect,
    ancestors:            ancestors,
    descendants:          descendants,
    firstDescendant:      firstDescendant,
    immediateDescendants: immediateDescendants,
    previousSiblings:     previousSiblings,
    nextSiblings:         nextSiblings,
    siblings:             siblings,
    match:                match,
    up:                   up,
    down:                 down,
    previous:             previous,
    next:                 next,
    select:               select,
    adjacent:             adjacent,
    descendantOf:         descendantOf,
    
    // ALIASES
    getElementsBySelector: select,
    
    childElements:         immediateDescendants
  });
  
  
  // ATTRIBUTES
  var idCounter = 1;
  function identify(element) {
    element = $(element);
    var id = Element.readAttribute(element, 'id');
    if (id) return id;
    
    // The element doesn't have an ID of its own. Give it one, first ensuring
    // that it's unique.
    do { id = 'anonymous_element_' + idCounter++ } while ($(id));
    
    Element.writeAttribute(element, 'id', id);
    return id;
  }
  
  function readAttribute(element, name) {
    return $(element).getAttribute(name);
  }
  
  function readAttribute_IE(element, name) {
    element = $(element);
    
    // If the attribute name exists in the value translation table, it means
    // we should use a custom method for retrieving that attribute's value.
    var table = ATTRIBUTE_TRANSLATIONS.read;
    if (table.values[name])
      return table.values[name](element, name);
      
    // If it exists in the name translation table, it means the attribute has
    // an alias.
    if (table.names[name]) name = table.names[name];
    
    // Special-case namespaced attributes.
    if (name.include(':')) {
      if (!element.attributes || !element.attributes[name]) return null;
      return element.attributes[name].value;
    }
    
    return element.getAttribute(name);
  }
  
  function readAttribute_Opera(element, name) {
    if (name === 'title') return element.title;
    return element.getAttribute(name);
  }
  
  var PROBLEMATIC_ATTRIBUTE_READING = (function() {
    // This test used to set 'onclick' to `Prototype.emptyFunction`, but that
    // caused an (uncatchable) error in IE 10. For some reason, switching to
    // an empty array prevents this issue.
    DIV.setAttribute('onclick', []);
    var value = DIV.getAttribute('onclick');
    var isFunction = Object.isArray(value);
    DIV.removeAttribute('onclick');
    return isFunction;
  })();
  
  if (PROBLEMATIC_ATTRIBUTE_READING) {
    readAttribute = readAttribute_IE;
  } else if (Prototype.Browser.Opera) {
    readAttribute = readAttribute_Opera;
  }
  
  
  function writeAttribute(element, name, value) {
    element = $(element);
    var attributes = {}, table = ATTRIBUTE_TRANSLATIONS.write;
    
    if (typeof name === 'object') {
      attributes = name;
    } else {
      attributes[name] = Object.isUndefined(value) ? true : value;
    }
    
    for (var attr in attributes) {
      name = table.names[attr] || attr;
      value = attributes[attr];
      if (table.values[attr])
        name = table.values[attr](element, value) || name;
      if (value === false || value === null)
        element.removeAttribute(name);
      else if (value === true)
        element.setAttribute(name, name);
      else element.setAttribute(name, value);
    }
    return element;
  }
  
  function hasAttribute(element, attribute) {
    attribute = ATTRIBUTE_TRANSLATIONS.has[attribute] || attribute;
    var node = $(element).getAttributeNode(attribute);
    return !!(node && node.specified);
  }
  
  GLOBAL.Element.Methods.Simulated.hasAttribute = hasAttribute;
  
  function classNames(element) {
    return new Element.ClassNames(element);
  }
  
  var regExpCache = {};
  function getRegExpForClassName(className) {
    if (regExpCache[className]) return regExpCache[className];
    
    var re = new RegExp("(^|\\s+)" + className + "(\\s+|$)");
    regExpCache[className] = re;
    return re;
  }
  
  function hasClassName(element, className) {
    if (!(element = $(element))) return;
    
    var elementClassName = element.className;
    // We test these common cases first because we'd like to avoid creating
    // the regular expression, if possible.
    if (elementClassName.length === 0) return false;
    if (elementClassName === className) return true;
    
    return getRegExpForClassName(className).test(elementClassName);
  }
  
  function addClassName(element, className) {
    if (!(element = $(element))) return;
    
    if (!hasClassName(element, className))
      element.className += (element.className ? ' ' : '') + className;
      
    return element;
  }
  
  function removeClassName(element, className) {
    if (!(element = $(element))) return;
    
    element.className = element.className.replace(
     getRegExpForClassName(className), ' ').strip();
     
    return element;
  }
  
  function toggleClassName(element, className, bool) {
    if (!(element = $(element))) return;
    
    if (Object.isUndefined(bool))
      bool = !hasClassName(element, className);
      
    var method = Element[bool ? 'addClassName' : 'removeClassName'];
    return method(element, className);
  }
  
  var ATTRIBUTE_TRANSLATIONS = {};
  
  // Test attributes.
  var classProp = 'className', forProp = 'for';
  
  // Try "className" first (IE <8)
  DIV.setAttribute(classProp, 'x');
  if (DIV.className !== 'x') {
    // Try "class" (IE >=8)
    DIV.setAttribute('class', 'x');
    if (DIV.className === 'x')
      classProp = 'class';
  }
  
  var LABEL = document.createElement('label');
  LABEL.setAttribute(forProp, 'x');
  if (LABEL.htmlFor !== 'x') {
    LABEL.setAttribute('htmlFor', 'x');
    if (LABEL.htmlFor === 'x')
      forProp = 'htmlFor';
  }
  LABEL = null;
  
  function _getAttr(element, attribute) {
    return element.getAttribute(attribute);
  }
  
  function _getAttr2(element, attribute) {
    return element.getAttribute(attribute, 2);
  }
  
  function _getAttrNode(element, attribute) {
    var node = element.getAttributeNode(attribute);
    return node ? node.value : '';
  }
  
  function _getFlag(element, attribute) {
    return $(element).hasAttribute(attribute) ? attribute : null;
  }
  
  // Test whether attributes like `onclick` have their values serialized.
  DIV.onclick = Prototype.emptyFunction;
  var onclickValue = DIV.getAttribute('onclick');
  
  var _getEv;
  
  // IE <8
  if (String(onclickValue).indexOf('{') > -1) {
    // intrinsic event attributes are serialized as `function { ... }`
    _getEv = function(element, attribute) {
      var value = element.getAttribute(attribute);
      if (!value) return null;
      value = value.toString();
      value = value.split('{')[1];
      value = value.split('}')[0];
      return value.strip();
    };
  } 
  // IE >=8
  else if (onclickValue === '') {
    // only function body is serialized
    _getEv = function(element, attribute) {
      var value = element.getAttribute(attribute);
      if (!value) return null;
      return value.strip();
    };
  }
  
  ATTRIBUTE_TRANSLATIONS.read = {
    names: {
      'class':     classProp,
      'className': classProp,
      'for':       forProp,
      'htmlFor':   forProp
    },
        
    values: {
      style: function(element) {
        return element.style.cssText.toLowerCase();
      },
      title: function(element) {
        return element.title;
      }
    }
  };
  
  ATTRIBUTE_TRANSLATIONS.write = {
    names: {
      className:   'class',
      htmlFor:     'for',
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing'
    },
    
    values: {
      checked: function(element, value) {
        element.checked = !!value;
      },
      
      style: function(element, value) {
        element.style.cssText = value ? value : '';
      }
    }
  };
  
  ATTRIBUTE_TRANSLATIONS.has = { names: {} };
  
  Object.extend(ATTRIBUTE_TRANSLATIONS.write.names,
   ATTRIBUTE_TRANSLATIONS.read.names);
   
  var CAMEL_CASED_ATTRIBUTE_NAMES = $w('colSpan rowSpan vAlign dateTime ' +
   'accessKey tabIndex encType maxLength readOnly longDesc frameBorder');
   
  for (var i = 0, attr; attr = CAMEL_CASED_ATTRIBUTE_NAMES[i]; i++) {
    ATTRIBUTE_TRANSLATIONS.write.names[attr.toLowerCase()] = attr;
    ATTRIBUTE_TRANSLATIONS.has.names[attr.toLowerCase()]   = attr;
  }
  
  // The rest of the oddballs.
  Object.extend(ATTRIBUTE_TRANSLATIONS.read.values, {
    href:        _getAttr2,
    src:         _getAttr2,
    type:        _getAttr,
    action:      _getAttrNode,
    disabled:    _getFlag,
    checked:     _getFlag,
    readonly:    _getFlag,
    multiple:    _getFlag,
    onload:      _getEv,
    onunload:    _getEv,
    onclick:     _getEv,
    ondblclick:  _getEv,
    onmousedown: _getEv,
    onmouseup:   _getEv,
    onmouseover: _getEv,
    onmousemove: _getEv,
    onmouseout:  _getEv,
    onfocus:     _getEv,
    onblur:      _getEv,
    onkeypress:  _getEv,
    onkeydown:   _getEv,
    onkeyup:     _getEv,
    onsubmit:    _getEv,
    onreset:     _getEv,
    onselect:    _getEv,
    onchange:    _getEv    
  });
  
  
  Object.extend(methods, {
    identify:        identify,
    readAttribute:   readAttribute,
    writeAttribute:  writeAttribute,
    classNames:      classNames,
    hasClassName:    hasClassName,
    addClassName:    addClassName,
    removeClassName: removeClassName,
    toggleClassName: toggleClassName
  });
  
  
  // STYLES
  function normalizeStyleName(style) {
    if (style === 'float' || style === 'styleFloat')
      return 'cssFloat';
    return style.camelize();
  }
  
  function normalizeStyleName_IE(style) {
    if (style === 'float' || style === 'cssFloat')
      return 'styleFloat';
    return style.camelize();
  }
  function setStyle(element, styles) {
    element = $(element);
    var elementStyle = element.style, match;
    
    if (Object.isString(styles)) {
      // Set the element's CSS text directly.
      elementStyle.cssText += ';' + styles;
      if (styles.include('opacity')) {
        var opacity = styles.match(/opacity:\s*(\d?\.?\d*)/)[1];
        Element.setOpacity(element, opacity);
      }
      return element;
    }
    
    for (var property in styles) {
      if (property === 'opacity') {
        Element.setOpacity(element, styles[property]);
      } else {
        var value = styles[property];
        if (property === 'float' || property === 'cssFloat') {
          // Browsers disagree on whether this should be called `cssFloat`
          // or `styleFloat`. Check both.
          property = Object.isUndefined(elementStyle.styleFloat) ?
           'cssFloat' : 'styleFloat';
        }
        elementStyle[property] = value;
      }
    }
    
    return element;    
  }
  
  function getStyle(element, style) {
    if (style === 'opacity') return getOpacity(element);
    element = $(element);
    style = normalizeStyleName(style);
    // Try inline styles first.
    var value = element.style[style];
    if (!value || value === 'auto') {
      // Reluctantly retrieve the computed style.
      var css = document.defaultView.getComputedStyle(element, null);
      value = css ? css[style] : null;
    }
    
    return value === 'auto' ? null : value;
  }
  
  function getStyle_Opera(element, style) {
    switch (style) {
      case 'height': case 'width':
        // returns '0px' for hidden elements; we want it to return null
        if (!Element.visible(element)) return null;
        
        // Certain versions of Opera return border-box dimensions instead of
        // content-box dimensions, so we need to determine if we should
        // subtract padding and borders from the value.
        var dim = parseInt(getStyle(element, style), 10);
        
        if (dim !== element['offset' + style.capitalize()])
          return dim + 'px';
       
        return Element.measure(element, style);
        
      default: return getStyle(element, style);
    }
  }
  
  function getStyle_IE(element, style) {
    if (style === 'opacity') return getOpacity_IE(element);
    element = $(element);
    style = normalizeStyleName_IE(style);
    // Try inline styles first.
    var value = element.style[style];    
    if (!value && element.currentStyle) {
      // Reluctantly retrieve the current style.
      value = element.currentStyle[style];
    }
    
    if (value === 'auto') {
      // If we need a dimension, return null for hidden elements, but return
      // pixel values for visible elements.
      if ((style === 'width' || style === 'height') && Element.visible(element))
        return Element.measure(element, style) + 'px';
      return null;
    }
    
    return value;    
  }
  
  function stripAlphaFromFilter_IE(filter) {
    return (filter || '').replace(/alpha\([^\)]*\)/gi, '');
  }
  
  function hasLayout_IE(element) {
    if (!element.currentStyle || !element.currentStyle.hasLayout)
      element.style.zoom = 1;
    return element;
  }
  // Opacity feature test borrowed from Modernizr.
  var STANDARD_CSS_OPACITY_SUPPORTED = (function() {
    DIV.style.cssText = "opacity:.55";
    return /^0.55/.test(DIV.style.opacity);
  })();
  function setOpacity(element, value) {
    element = $(element);
    if (value == 1 || value === '') value = '';
    else if (value < 0.00001) value = 0;    
    element.style.opacity = value;    
    return element;
  }
  
  // The IE versions of `setOpacity` and `getOpacity` are aware of both
  // the standard approach (an `opacity` property in CSS) and the old-style
  // IE approach (a proprietary `filter` property). They are written to
  // prefer the standard approach unless it isn't supported.
  var setOpacity_IE = STANDARD_CSS_OPACITY_SUPPORTED ? setOpacity : function(element, value) {
    element = $(element);
    var style = element.style;
    if (!element.currentStyle || !element.currentStyle.hasLayout)
      style.zoom = 1;
    var filter = Element.getStyle(element, 'filter');
     
    if (value == 1 || value === '') {
      // Remove the `alpha` filter from IE's `filter` CSS property. If there
      // is anything left after removal, put it back where it was; otherwise
      // remove the property.
      filter = stripAlphaFromFilter_IE(filter);
      if (filter) style.filter = filter;
      else style.removeAttribute('filter');      
      return element;
    }
    
    if (value < 0.00001) value = 0;
        
    style.filter = stripAlphaFromFilter_IE(filter) + 
     ' alpha(opacity=' + (value * 100) + ')';
     
    return element;
  };
  
  
  function getOpacity(element) {
    element = $(element);
    // Try inline styles first.
    var value = element.style.opacity;
    if (!value || value === 'auto') {
      // Reluctantly retrieve the computed style.
      var css = document.defaultView.getComputedStyle(element, null);
      value = css ? css.opacity : null;
    }
    return value ? parseFloat(value) : 1.0;
  }
  
  // Prefer the standard CSS approach unless it's not supported.
  var getOpacity_IE = STANDARD_CSS_OPACITY_SUPPORTED ? getOpacity : function(element) {
    var filter = Element.getStyle(element, 'filter');
    if (filter.length === 0) return 1.0;
    var match = (filter || '').match(/alpha\(opacity=(.*)\)/i);
    if (match && match[1]) return parseFloat(match[1]) / 100;
    return 1.0;
  };
  
  
  Object.extend(methods, {
    setStyle:   setStyle,
    getStyle:   getStyle,
    setOpacity: setOpacity,
    getOpacity: getOpacity
  });
  if (Prototype.Browser.Opera) {
    // Opera also has 'styleFloat' in DIV.style
    methods.getStyle = getStyle_Opera;
  } else if ('styleFloat' in DIV.style) {
    methods.getStyle = getStyle_IE;
    methods.setOpacity = setOpacity_IE;
    methods.getOpacity = getOpacity_IE;
  }
  
  // STORAGE
  var UID = 0;
  
  GLOBAL.Element.Storage = { UID: 1 };
  
  function getUniqueElementID(element) {
    if (element === window) return 0;
    // Need to use actual `typeof` operator to prevent errors in some
    // environments when accessing node expandos.
    if (typeof element._prototypeUID === 'undefined')
      element._prototypeUID = Element.Storage.UID++;
    return element._prototypeUID;
  }
  
  // In Internet Explorer, DOM nodes have a `uniqueID` property. Saves us
  // from inventing our own.
  function getUniqueElementID_IE(element) {
    if (element === window) return 0;
    // The document object's `uniqueID` property changes each time you read it.
    if (element == document) return 1;
    return element.uniqueID;
  }
  
  var HAS_UNIQUE_ID_PROPERTY = ('uniqueID' in DIV);
  if (HAS_UNIQUE_ID_PROPERTY)
    getUniqueElementID = getUniqueElementID_IE;
  
  function getStorage(element) {
    if (!(element = $(element))) return;
    
    var uid = getUniqueElementID(element);
    
    if (!Element.Storage[uid])
      Element.Storage[uid] = $H();
      
    return Element.Storage[uid];
  }
  
  function store(element, key, value) {
    if (!(element = $(element))) return;
    var storage = getStorage(element);
    if (arguments.length === 2) {
      // Assume we've been passed an object full of key/value pairs.
      storage.update(key);
    } else {
      storage.set(key, value);
    }
    return element;
  }
  
  function retrieve(element, key, defaultValue) {
    if (!(element = $(element))) return;
    var storage = getStorage(element), value = storage.get(key);
    
    if (Object.isUndefined(value)) {
      storage.set(key, defaultValue);
      value = defaultValue;
    }
    
    return value;
  }
  
  
  Object.extend(methods, {
    getStorage: getStorage,
    store:      store,
    retrieve:   retrieve
  });
  
  
  // ELEMENT EXTENSION
  var Methods = {}, ByTag = Element.Methods.ByTag,
   F = Prototype.BrowserFeatures;
  
  // Handle environments which support extending element prototypes
  // but don't expose the standard class name.
  if (!F.ElementExtensions && ('__proto__' in DIV)) {
    GLOBAL.HTMLElement = {};
    GLOBAL.HTMLElement.prototype = DIV['__proto__'];
    F.ElementExtensions = true;
  }
  
  // Certain oddball element types can't be extended in IE8.
  function checkElementPrototypeDeficiency(tagName) {
    if (typeof window.Element === 'undefined') return false;
    var proto = window.Element.prototype;
    if (proto) {
      var id = '_' + (Math.random() + '').slice(2),
       el = document.createElement(tagName);
      proto[id] = 'x';
      var isBuggy = (el[id] !== 'x');
      delete proto[id];
      el = null;
      return isBuggy;
    }
    
    return false;    
  }
  
  var HTMLOBJECTELEMENT_PROTOTYPE_BUGGY = 
   checkElementPrototypeDeficiency('object');
  
  function extendElementWith(element, methods) {
    for (var property in methods) {
      var value = methods[property];
      if (Object.isFunction(value) && !(property in element))
        element[property] = value.methodize();
    }
  }
  
  // Keeps track of the UIDs of extended elements.
  var EXTENDED = {};
  function elementIsExtended(element) {
    var uid = getUniqueElementID(element);
    return (uid in EXTENDED);
  }
  
  function extend(element) {
    if (!element || elementIsExtended(element)) return element;
    if (element.nodeType !== Node.ELEMENT_NODE || element == window)
      return element;
      
    var methods = Object.clone(Methods),
     tagName = element.tagName.toUpperCase();
     
    // Add methods for specific tags.
    if (ByTag[tagName]) Object.extend(methods, ByTag[tagName]);
    
    extendElementWith(element, methods);
    EXTENDED[getUniqueElementID(element)] = true;
    return element;
  }
  
  // Because of the deficiency mentioned above, IE8 needs a very thin version
  // of Element.extend that acts like Prototype.K _except_ when the element
  // is one of the problematic types.
  function extend_IE8(element) {
    if (!element || elementIsExtended(element)) return element;
    
    var t = element.tagName;
    if (t && (/^(?:object|applet|embed)$/i.test(t))) {
      extendElementWith(element, Element.Methods);
      extendElementWith(element, Element.Methods.Simulated);
      extendElementWith(element, Element.Methods.ByTag[t.toUpperCase()]);
    }
    
    return element;
  }
  // If the browser lets us extend specific elements, we can replace `extend`
  // with a thinner version (or, ideally, an empty version).
  if (F.SpecificElementExtensions) {
    extend = HTMLOBJECTELEMENT_PROTOTYPE_BUGGY ? extend_IE8 : Prototype.K;
  }
  
  function addMethodsToTagName(tagName, methods) {
    tagName = tagName.toUpperCase();
    if (!ByTag[tagName]) ByTag[tagName] = {};
    Object.extend(ByTag[tagName], methods);
  }
  
  function mergeMethods(destination, methods, onlyIfAbsent) {
    if (Object.isUndefined(onlyIfAbsent)) onlyIfAbsent = false;
    for (var property in methods) {
      var value = methods[property];
      if (!Object.isFunction(value)) continue;
      if (!onlyIfAbsent || !(property in destination))
        destination[property] = value.methodize();
    }
  }
  
  function findDOMClass(tagName) {
    var klass;
    var trans = {
      "OPTGROUP": "OptGroup", "TEXTAREA": "TextArea", "P": "Paragraph",
      "FIELDSET": "FieldSet", "UL": "UList", "OL": "OList", "DL": "DList",
      "DIR": "Directory", "H1": "Heading", "H2": "Heading", "H3": "Heading",
      "H4": "Heading", "H5": "Heading", "H6": "Heading", "Q": "Quote",
      "INS": "Mod", "DEL": "Mod", "A": "Anchor", "IMG": "Image", "CAPTION":
      "TableCaption", "COL": "TableCol", "COLGROUP": "TableCol", "THEAD":
      "TableSection", "TFOOT": "TableSection", "TBODY": "TableSection", "TR":
      "TableRow", "TH": "TableCell", "TD": "TableCell", "FRAMESET":
      "FrameSet", "IFRAME": "IFrame"
    };
    if (trans[tagName]) klass = 'HTML' + trans[tagName] + 'Element';
    if (window[klass]) return window[klass];
    klass = 'HTML' + tagName + 'Element';
    if (window[klass]) return window[klass];
    klass = 'HTML' + tagName.capitalize() + 'Element';
    if (window[klass]) return window[klass];
    var element = document.createElement(tagName),
     proto = element['__proto__'] || element.constructor.prototype;
        
    element = null;
    return proto;
  }
  
  function addMethods(methods) {
    if (arguments.length === 0) addFormMethods();
    
    if (arguments.length === 2) {
      // Tag names have been specified.
      var tagName = methods;
      methods = arguments[1];
    }
    
    if (!tagName) {
      Object.extend(Element.Methods, methods || {});
    } else {
      if (Object.isArray(tagName)) {
        for (var i = 0, tag; tag = tagName[i]; i++)
          addMethodsToTagName(tag, methods);
      } else {
        addMethodsToTagName(tagName, methods);
      }
    }
    
    var ELEMENT_PROTOTYPE = window.HTMLElement ? HTMLElement.prototype :
     Element.prototype;
     
    if (F.ElementExtensions) {
      mergeMethods(ELEMENT_PROTOTYPE, Element.Methods);
      mergeMethods(ELEMENT_PROTOTYPE, Element.Methods.Simulated, true);
    }
    
    if (F.SpecificElementExtensions) {
      for (var tag in Element.Methods.ByTag) {
        var klass = findDOMClass(tag);
        if (Object.isUndefined(klass)) continue;
        mergeMethods(klass.prototype, ByTag[tag]);
      }
    }
    
    Object.extend(Element, Element.Methods);
    Object.extend(Element, Element.Methods.Simulated);
    delete Element.ByTag;
    delete Element.Simulated;
    
    Element.extend.refresh();
    
    // We need to replace the element creation cache because the nodes in the
    // cache now have stale versions of the element methods.
    ELEMENT_CACHE = {};
  }
  
  Object.extend(GLOBAL.Element, {
    extend:     extend,
    addMethods: addMethods
  });
  
  if (extend === Prototype.K) {
    GLOBAL.Element.extend.refresh = Prototype.emptyFunction;
  } else {
    GLOBAL.Element.extend.refresh = function() {
      if (Prototype.BrowserFeatures.ElementExtensions) return;
      Object.extend(Methods, Element.Methods);
      Object.extend(Methods, Element.Methods.Simulated);
      // All existing extended elements are stale and need to be refreshed.
      EXTENDED = {};
    };
  }
  
  function addFormMethods() {
    // Add relevant element methods from the forms API.
    Object.extend(Form, Form.Methods);
    Object.extend(Form.Element, Form.Element.Methods);
    Object.extend(Element.Methods.ByTag, {
      "FORM":     Object.clone(Form.Methods),
      "INPUT":    Object.clone(Form.Element.Methods),
      "SELECT":   Object.clone(Form.Element.Methods),
      "TEXTAREA": Object.clone(Form.Element.Methods),
      "BUTTON":   Object.clone(Form.Element.Methods)
    });
  }
  Element.addMethods(methods);
  // Prevent IE leaks on DIV and ELEMENT_CACHE
  function destroyCache_IE() {
    DIV = null;
    ELEMENT_CACHE = null;
  }
  if (window.attachEvent)
    window.attachEvent('onunload', destroyCache_IE);
})(this);
(function() {
  
  // Converts a CSS percentage value to a decimal.
  // Ex: toDecimal("30%"); // -> 0.3
  function toDecimal(pctString) {
    var match = pctString.match(/^(\d+)%?$/i);
    if (!match) return null;
    return (Number(match[1]) / 100);
  }
  
  // A bare-bones version of Element.getStyle. Needed because getStyle is
  // public-facing and too user-friendly for our tastes. We need raw,
  // non-normalized values.
  //
  // Camel-cased property names only.
  function getRawStyle(element, style) {
    element = $(element);
    // Try inline styles first.
    var value = element.style[style];
    if (!value || value === 'auto') {
      // Reluctantly retrieve the computed style.
      var css = document.defaultView.getComputedStyle(element, null);
      value = css ? css[style] : null;
    }
    
    if (style === 'opacity') return value ? parseFloat(value) : 1.0;
    return value === 'auto' ? null : value;
  }
  
  function getRawStyle_IE(element, style) {
    // Try inline styles first.
    var value = element.style[style];    
    if (!value && element.currentStyle) {
      // Reluctantly retrieve the current style.
      value = element.currentStyle[style];
    }
    return value;
  }
  
  // Quickly figures out the content width of an element. Used instead of
  // `element.measure('width')` in several places below; we don't want to 
  // call back into layout code recursively if we don't have to.
  //
  // But this means it doesn't handle edge cases. Use it when you know the
  // element in question is visible and will give accurate measurements.
  function getContentWidth(element, context) {
    var boxWidth = element.offsetWidth;
    
    var bl = getPixelValue(element, 'borderLeftWidth',  context) || 0;
    var br = getPixelValue(element, 'borderRightWidth', context) || 0;
    var pl = getPixelValue(element, 'paddingLeft',      context) || 0;
    var pr = getPixelValue(element, 'paddingRight',     context) || 0;
    
    return boxWidth - bl - br - pl - pr;
  }
  
  if ('currentStyle' in document.documentElement) {
    getRawStyle = getRawStyle_IE;
  }
  
  
  // Can be called like this:
  //   getPixelValue("11px");
  // Or like this:
  //   getPixelValue(someElement, 'paddingTop');  
  function getPixelValue(value, property, context) {
    var element = null;
    if (Object.isElement(value)) {
      element = value;
      value = getRawStyle(element, property);
    }
    if (value === null || Object.isUndefined(value)) {
      return null;
    }
    
    // Non-IE browsers will always return pixels if possible.
    // (We use parseFloat instead of parseInt because Firefox can return
    // non-integer pixel values.)
    if ((/^(?:-)?\d+(\.\d+)?(px)?$/i).test(value)) {
      return window.parseFloat(value);
    }
    var isPercentage = value.include('%'), isViewport = (context === document.viewport);
    
    // When IE gives us something other than a pixel value, this technique
    // (invented by Dean Edwards) will convert it to pixels.
    //
    // (This doesn't work for percentage values on elements with `position: fixed`
    // because those percentages are relative to the viewport.)
    if (/\d/.test(value) && element && element.runtimeStyle && !(isPercentage && isViewport)) {
      var style = element.style.left, rStyle = element.runtimeStyle.left; 
      element.runtimeStyle.left = element.currentStyle.left;
      element.style.left = value || 0;  
      value = element.style.pixelLeft;
      element.style.left = style;
      element.runtimeStyle.left = rStyle;
      
      return value;
    }
    // For other browsers, we have to do a bit of work.
    // (At this point, only percentages should be left; all other CSS units
    // are converted to pixels by getComputedStyle.)
    if (element && isPercentage) {
      // The `context` argument comes into play for percentage units; it's
      // the thing that the unit represents a percentage of. When an
      // absolutely-positioned element has a width of 50%, we know that's
      // 50% of its offset parent. If it's `position: fixed` instead, we know
      // it's 50% of the viewport. And so on.
      context = context || element.parentNode;
      var decimal = toDecimal(value), whole = null;
      
      var isHorizontal = property.include('left') || property.include('right') ||
       property.include('width');
       
      var isVertical   = property.include('top') || property.include('bottom') ||
        property.include('height');
        
      if (context === document.viewport) {
        if (isHorizontal) {
          whole = document.viewport.getWidth();
        } else if (isVertical) {
          whole = document.viewport.getHeight();
        }
      } else {
        if (isHorizontal) {
          whole = $(context).measure('width');
        } else if (isVertical) {
          whole = $(context).measure('height');
        }
      }
      
      return (whole === null) ? 0 : whole * decimal;
    }
    
    // If we get this far, we should probably give up.
    return 0;
  }
  
  // Turns plain numbers into pixel measurements.
  function toCSSPixels(number) {
    if (Object.isString(number) && number.endsWith('px'))
      return number;
    return number + 'px';    
  }
  
  // Shortcut for figuring out if an element is `display: none` or not.
  function isDisplayed(element) {
    while (element && element.parentNode) {
      var display = element.getStyle('display');
      if (display === 'none') {
        return false;
      }
      element = $(element.parentNode);
    }
    return true;
  }
  
  // In IE6-7, positioned elements often need hasLayout triggered before they
  // report accurate measurements.
  var hasLayout = Prototype.K;  
  if ('currentStyle' in document.documentElement) {
    hasLayout = function(element) {
      if (!element.currentStyle.hasLayout) {
        element.style.zoom = 1;
      }
      return element;
    };
  }
  // Converts the layout hash property names back to the CSS equivalents.
  // For now, only the border properties differ.
  function cssNameFor(key) {
    if (key.include('border')) key = key + '-width';
    return key.camelize();
  }
  
  Element.Layout = Class.create(Hash, {
    initialize: function($super, element, preCompute) {
      $super();
      this.element = $(element);
      
      // nullify all properties keys
      Element.Layout.PROPERTIES.each( function(property) {
        this._set(property, null);
      }, this);
      
      // The 'preCompute' boolean tells us whether we should fetch all values
      // at once. If so, we should do setup/teardown only once. We set a flag
      // so that we can ignore calls to `_begin` and `_end` elsewhere.
      if (preCompute) {
        this._preComputing = true;
        this._begin();
        Element.Layout.PROPERTIES.each( this._compute, this );
        this._end();
        this._preComputing = false;
      }
    },
    
    _set: function(property, value) {
      return Hash.prototype.set.call(this, property, value);
    },    
    
    // TODO: Investigate.
    set: function(property, value) {
      throw "Properties of Element.Layout are read-only.";
    },
    
    get: function($super, property) {
      // Try to fetch from the cache.
      var value = $super(property);
      return value === null ? this._compute(property) : value;
    },
    
    // `_begin` and `_end` are two functions that are called internally 
    // before and after any measurement is done. In certain conditions (e.g.,
    // when hidden), elements need a "preparation" phase that ensures
    // accuracy of measurements.
    _begin: function() {
      if (this._isPrepared()) return;
      
      var element = this.element;
      if (isDisplayed(element)) {
        this._setPrepared(true);
        return;
      }
      
      // If we get this far, it means this element is hidden. To get usable
      // measurements, we must remove `display: none`, but in a manner that 
      // isn't noticeable to the user. That means we also set
      // `visibility: hidden` to make it invisible, and `position: absolute`
      // so that it won't alter the document flow when displayed.
      //
      // Once we do this, the element is "prepared," and we can make our
      // measurements. When we're done, the `_end` method cleans up our
      // changes.
      
      // Remember the original values for some styles we're going to alter.
      var originalStyles = {
        position:   element.style.position   || '',
        width:      element.style.width      || '',
        visibility: element.style.visibility || '',
        display:    element.style.display    || ''
      };
      
      // We store them so that the `_end` method can retrieve them later.
      element.store('prototype_original_styles', originalStyles);
      
      var position = getRawStyle(element, 'position'), width = element.offsetWidth;
      if (width === 0 || width === null) {
        // Opera/IE won't report the true width of the element through
        // `getComputedStyle` if it's hidden. If we got a nonsensical value,
        // we need to show the element and try again.
        element.style.display = 'block';
        width = element.offsetWidth;
      }
      
      // Preserve the context in case we get a percentage value.  
      var context = (position === 'fixed') ? document.viewport :
       element.parentNode;
       
      var tempStyles = {
        visibility: 'hidden',
        display:    'block'
      };
      
      // If the element's `position: fixed`, it's already out of the document
      // flow, so it's both unnecessary and inaccurate to set
      // `position: absolute`.
      if (position !== 'fixed') tempStyles.position = 'absolute';
       
      element.setStyle(tempStyles);
      
      var positionedWidth = element.offsetWidth, newWidth;
      if (width && (positionedWidth === width)) {
        // If the element's width is the same both before and after
        // we set absolute positioning, that means:
        //  (a) it was already absolutely-positioned; or
        //  (b) it has an explicitly-set width, instead of width: auto.
        // Either way, it means the element is the width it needs to be
        // in order to report an accurate height.
        newWidth = getContentWidth(element, context);
      } else if (position === 'absolute' || position === 'fixed') {
        // Absolute- and fixed-position elements' dimensions don't depend
        // upon those of their parents.
        newWidth = getContentWidth(element, context);
      } else {
        // Otherwise, the element's width depends upon the width of its
        // parent.
        var parent = element.parentNode, pLayout = $(parent).getLayout();
        newWidth = pLayout.get('width') -
         this.get('margin-left') -
         this.get('border-left') -
         this.get('padding-left') -
         this.get('padding-right') -
         this.get('border-right') -
         this.get('margin-right');
      }
      
      // Whatever the case, we've now figured out the correct `width` value
      // for the element.
      element.setStyle({ width: newWidth + 'px' });
      
      // The element is now ready for measuring.
      this._setPrepared(true);
    },
    
    _end: function() {
      var element = this.element;
      var originalStyles = element.retrieve('prototype_original_styles');
      element.store('prototype_original_styles', null);
      element.setStyle(originalStyles);
      this._setPrepared(false);
    },
    
    _compute: function(property) {
      var COMPUTATIONS = Element.Layout.COMPUTATIONS;
      if (!(property in COMPUTATIONS)) {
        throw "Property not found.";
      }
      
      return this._set(property, COMPUTATIONS[property].call(this, this.element));
    },
    
    _isPrepared: function() {
      return this.element.retrieve('prototype_element_layout_prepared', false);
    },
    
    _setPrepared: function(bool) {
      return this.element.store('prototype_element_layout_prepared', bool);
    },
    
    toObject: function() {
      var args = $A(arguments);
      var keys = (args.length === 0) ? Element.Layout.PROPERTIES :
       args.join(' ').split(' ');
      var obj = {};
      keys.each( function(key) {
        // Key needs to be a valid Element.Layout property.
        if (!Element.Layout.PROPERTIES.include(key)) return;
        var value = this.get(key);
        if (value != null) obj[key] = value;
      }, this);
      return obj;
    },
    
    toHash: function() {
      var obj = this.toObject.apply(this, arguments);
      return new Hash(obj);
    },
    
    toCSS: function() {
      var args = $A(arguments);
      var keys = (args.length === 0) ? Element.Layout.PROPERTIES :
       args.join(' ').split(' ');
      var css = {};
      keys.each( function(key) {
        // Key needs to be a valid Element.Layout property...
        if (!Element.Layout.PROPERTIES.include(key)) return;        
        // ...but not a composite property.
        if (Element.Layout.COMPOSITE_PROPERTIES.include(key)) return;
        var value = this.get(key);
        if (value != null) css[cssNameFor(key)] = value + 'px';
      }, this);
      return css;
    },
    
    inspect: function() {
      return "#<Element.Layout>";
    }
  });
  
  Object.extend(Element.Layout, {
    PROPERTIES: $w('height width top left right bottom border-left border-right border-top border-bottom padding-left padding-right padding-top padding-bottom margin-top margin-bottom margin-left margin-right padding-box-width padding-box-height border-box-width border-box-height margin-box-width margin-box-height'),
    
    COMPOSITE_PROPERTIES: $w('padding-box-width padding-box-height margin-box-width margin-box-height border-box-width border-box-height'),
    
    COMPUTATIONS: {
      'height': function(element) {
        if (!this._preComputing) this._begin();
        
        var bHeight = this.get('border-box-height');
        if (bHeight <= 0) {
          if (!this._preComputing) this._end();
          return 0;
        }
        
        var bTop = this.get('border-top'),
         bBottom = this.get('border-bottom');
        var pTop = this.get('padding-top'),
         pBottom = this.get('padding-bottom');
        if (!this._preComputing) this._end();
        return bHeight - bTop - bBottom - pTop - pBottom;
      },
      
      'width': function(element) {
        if (!this._preComputing) this._begin();
        
        var bWidth = this.get('border-box-width');
        if (bWidth <= 0) {
          if (!this._preComputing) this._end();
          return 0;
        }
        var bLeft = this.get('border-left'),
         bRight = this.get('border-right');
        var pLeft = this.get('padding-left'),
         pRight = this.get('padding-right');
         
        if (!this._preComputing) this._end();
        return bWidth - bLeft - bRight - pLeft - pRight;
      },
      
      'padding-box-height': function(element) {
        var height = this.get('height'),
         pTop = this.get('padding-top'),
         pBottom = this.get('padding-bottom');
         
        return height + pTop + pBottom;
      },
      'padding-box-width': function(element) {
        var width = this.get('width'),
         pLeft = this.get('padding-left'),
         pRight = this.get('padding-right');
         
        return width + pLeft + pRight;
      },
      
      'border-box-height': function(element) {
        if (!this._preComputing) this._begin();
        var height = element.offsetHeight;
        if (!this._preComputing) this._end();
        return height;
      },
            
      'border-box-width': function(element) {
        if (!this._preComputing) this._begin();
        var width = element.offsetWidth;
        if (!this._preComputing) this._end();
        return width;
      },
      
      'margin-box-height': function(element) {
        var bHeight = this.get('border-box-height'),
         mTop = this.get('margin-top'),
         mBottom = this.get('margin-bottom');
         
        if (bHeight <= 0) return 0;
         
        return bHeight + mTop + mBottom;        
      },
      'margin-box-width': function(element) {
        var bWidth = this.get('border-box-width'),
         mLeft = this.get('margin-left'),
         mRight = this.get('margin-right');
        if (bWidth <= 0) return 0;
         
        return bWidth + mLeft + mRight;
      },
      
      'top': function(element) {
        var offset = element.positionedOffset();
        return offset.top;
      },
      
      'bottom': function(element) {
        var offset = element.positionedOffset(),
         parent = element.getOffsetParent(),
         pHeight = parent.measure('height');
        
        var mHeight = this.get('border-box-height');
        
        return pHeight - mHeight - offset.top;
        // 
        // return getPixelValue(element, 'bottom');
      },
      
      'left': function(element) {
        var offset = element.positionedOffset();
        return offset.left;
      },
      
      'right': function(element) {
        var offset = element.positionedOffset(),
         parent = element.getOffsetParent(),
         pWidth = parent.measure('width');
        
        var mWidth = this.get('border-box-width');
        
        return pWidth - mWidth - offset.left;
        //  
        // return getPixelValue(element, 'right');
      },
      
      'padding-top': function(element) {
        return getPixelValue(element, 'paddingTop');
      },
      
      'padding-bottom': function(element) {
        return getPixelValue(element, 'paddingBottom');
      },
      
      'padding-left': function(element) {
        return getPixelValue(element, 'paddingLeft');
      },
      
      'padding-right': function(element) {
        return getPixelValue(element, 'paddingRight');
      },
      
      'border-top': function(element) {
        return getPixelValue(element, 'borderTopWidth');
      },
      
      'border-bottom': function(element) {
        return getPixelValue(element, 'borderBottomWidth');
      },
      
      'border-left': function(element) {
        return getPixelValue(element, 'borderLeftWidth');
      },
      
      'border-right': function(element) {
        return getPixelValue(element, 'borderRightWidth');
      },
      
      'margin-top': function(element) {
        return getPixelValue(element, 'marginTop');
      },
      
      'margin-bottom': function(element) {
        return getPixelValue(element, 'marginBottom');
      },
      
      'margin-left': function(element) {
        return getPixelValue(element, 'marginLeft');
      },
      
      'margin-right': function(element) {
        return getPixelValue(element, 'marginRight');
      }
    }
  });
  
  // An easier way to compute right and bottom offsets.
  if ('getBoundingClientRect' in document.documentElement) {
    Object.extend(Element.Layout.COMPUTATIONS, {
      'right': function(element) {
        var parent = hasLayout(element.getOffsetParent());
        var rect = element.getBoundingClientRect(),
         pRect = parent.getBoundingClientRect();
         
        return (pRect.right - rect.right).round();
      },
      
      'bottom': function(element) {
        var parent = hasLayout(element.getOffsetParent());
        var rect = element.getBoundingClientRect(),
         pRect = parent.getBoundingClientRect();
         
        return (pRect.bottom - rect.bottom).round();
      }
    });
  }
  
  Element.Offset = Class.create({
    initialize: function(left, top) {
      this.left = left.round();
      this.top  = top.round();
      
      // Act like an array.
      this[0] = this.left;
      this[1] = this.top;
    },
    
    relativeTo: function(offset) {
      return new Element.Offset(
        this.left - offset.left, 
        this.top  - offset.top
      );
    },
    
    inspect: function() {
      return "#<Element.Offset left: #{left} top: #{top}>".interpolate(this);
    },
    
    toString: function() {
      return "[#{left}, #{top}]".interpolate(this);
    },
    
    toArray: function() {
      return [this.left, this.top];
    }
  });
  
  function getLayout(element, preCompute) {
    return new Element.Layout(element, preCompute);
  }
    
  function measure(element, property) {
    return $(element).getLayout().get(property);  
  }
  function getHeight(element) {
    return Element.getDimensions(element).height;
  }
  
  function getWidth(element) {
    return Element.getDimensions(element).width;
  }
  function getDimensions(element) {
    element = $(element);
    var display = Element.getStyle(element, 'display');
    
    if (display && display !== 'none') {
      return { width: element.offsetWidth, height: element.offsetHeight };
    }
    
    // All *Width and *Height properties give 0 on elements with
    // `display: none`, so show the element temporarily.
    var style = element.style;
    var originalStyles = {
      visibility: style.visibility,
      position:   style.position,
      display:    style.display
    };
    
    var newStyles = {
      visibility: 'hidden',
      display:    'block'
    };
    // Switching `fixed` to `absolute` causes issues in Safari.
    if (originalStyles.position !== 'fixed')
      newStyles.position = 'absolute';
    
    Element.setStyle(element, newStyles);
    
    var dimensions = {
      width:  element.offsetWidth,
      height: element.offsetHeight
    };
    
    Element.setStyle(element, originalStyles);
    return dimensions;
  }
  
  function getOffsetParent(element) {
    element = $(element);
    
    // For unusual cases like these, we standardize on returning the BODY
    // element as the offset parent.
    if (isDocument(element) || isDetached(element) || isBody(element) || isHtml(element))
      return $(document.body);
    // IE reports offset parent incorrectly for inline elements.
    var isInline = (Element.getStyle(element, 'display') === 'inline');
    if (!isInline && element.offsetParent) return isHtml(element.offsetParent) ? $(document.body) : $(element.offsetParent);
    
    while ((element = element.parentNode) && element !== document.body) {
      if (Element.getStyle(element, 'position') !== 'static') {
        return isHtml(element) ? $(document.body) : $(element);
      }
    }
    
    return $(document.body);
  }
  
  
  function cumulativeOffset(element) {
    element = $(element);
    var valueT = 0, valueL = 0;
    if (element.parentNode) {
      do {
        valueT += element.offsetTop  || 0;
        valueL += element.offsetLeft || 0;
        element = element.offsetParent;
      } while (element);
    }
    return new Element.Offset(valueL, valueT);
  }
  
  function positionedOffset(element) {    
    element = $(element);
    // Account for the margin of the element.
    var layout = element.getLayout();
    
    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      element = element.offsetParent;
      if (element) {
        if (isBody(element)) break;
        var p = Element.getStyle(element, 'position');
        if (p !== 'static') break;
      }
    } while (element);
    
    valueT -= layout.get('margin-top');
    valueL -= layout.get('margin-left');
    
    return new Element.Offset(valueL, valueT);
  }
  function cumulativeScrollOffset(element) {
    var valueT = 0, valueL = 0;
    do {
      if(element == document.body){
        valueT += (window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop || 0;
        valueL += (window.pageXOffset !== undefined) ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft || 0;
        break;
      } else {
        valueT += element.scrollTop  || 0;
        valueL += element.scrollLeft || 0;
        element = element.parentNode;
      }
    } while (element);
    return new Element.Offset(valueL, valueT);
  }
  function viewportOffset(forElement) {
    var valueT = 0, valueL = 0, docBody = document.body;
    forElement = $(forElement);
    var element = forElement;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      // Safari fix
      if (element.offsetParent == docBody &&
        Element.getStyle(element, 'position') == 'absolute') break;
    } while (element = element.offsetParent);
    element = forElement;
    do {
      // Opera < 9.5 sets scrollTop/Left on both HTML and BODY elements.
      // Other browsers set it only on the HTML element. The BODY element
      // can be skipped since its scrollTop/Left should always be 0.
      if (element != docBody) {
        valueT -= element.scrollTop  || 0;
        valueL -= element.scrollLeft || 0;
      }
    } while (element = element.parentNode);    
    return new Element.Offset(valueL, valueT);
  }
  
  function absolutize(element) {
    element = $(element);
    
    if (Element.getStyle(element, 'position') === 'absolute') {
      return element;
    }
    
    var offsetParent = getOffsetParent(element);    
    var eOffset = element.viewportOffset(),
     pOffset = offsetParent.viewportOffset();
     
    var offset = eOffset.relativeTo(pOffset);
    var layout = element.getLayout();    
    
    element.store('prototype_absolutize_original_styles', {
      position: element.getStyle('position'),
      left:     element.getStyle('left'),
      top:      element.getStyle('top'),
      width:    element.getStyle('width'),
      height:   element.getStyle('height')
    });
    
    element.setStyle({
      position: 'absolute',
      top:    offset.top + 'px',
      left:   offset.left + 'px',
      width:  layout.get('width') + 'px',
      height: layout.get('height') + 'px'
    });
    
    return element;
  }
  
  function relativize(element) {
    element = $(element);
    if (Element.getStyle(element, 'position') === 'relative') {
      return element;
    }
    
    // Restore the original styles as captured by Element#absolutize.
    var originalStyles = 
     element.retrieve('prototype_absolutize_original_styles');
    
    if (originalStyles) element.setStyle(originalStyles);
    return element;
  }
  
  
  function scrollTo(element) {
    element = $(element);
    var pos = Element.cumulativeOffset(element);
    window.scrollTo(pos.left, pos.top);
    return element;
  }
  
  function makePositioned(element) {
    element = $(element);
    var position = Element.getStyle(element, 'position'), styles = {};
    if (position === 'static' || !position) {
      styles.position = 'relative';
      // When an element is `position: relative` with an undefined `top` and
      // `left`, Opera returns the offset relative to positioning context.
      if (Prototype.Browser.Opera) {
        styles.top  = 0;
        styles.left = 0;
      }
      Element.setStyle(element, styles);
      Element.store(element, 'prototype_made_positioned', true);
    }
    return element;
  }
  
  function undoPositioned(element) {
    element = $(element);
    var storage = Element.getStorage(element),
     madePositioned = storage.get('prototype_made_positioned');
    
    if (madePositioned) {
      storage.unset('prototype_made_positioned');
      Element.setStyle(element, {
        position: '',
        top:      '',
        bottom:   '',
        left:     '',
        right:    ''
      });
    }  
    return element;
  }
  
  function makeClipping(element) {
    element = $(element);
    
    var storage = Element.getStorage(element),
     madeClipping = storage.get('prototype_made_clipping');
    
    // The "prototype_made_clipping" storage key is meant to hold the
    // original CSS overflow value. A string value or `null` means that we've
    // called `makeClipping` already. An `undefined` value means we haven't.
    if (Object.isUndefined(madeClipping)) {
      var overflow = Element.getStyle(element, 'overflow');
      storage.set('prototype_made_clipping', overflow);
      if (overflow !== 'hidden')
        element.style.overflow = 'hidden';
    }
    
    return element;
  }
  
  function undoClipping(element) {
    element = $(element);
    var storage = Element.getStorage(element),
     overflow = storage.get('prototype_made_clipping');
    
    if (!Object.isUndefined(overflow)) {
      storage.unset('prototype_made_clipping');
      element.style.overflow = overflow || '';
    }
    
    return element;
  }
  
  function clonePosition(element, source, options) {
    options = Object.extend({
      setLeft:    true,
      setTop:     true,
      setWidth:   true,
      setHeight:  true,
      offsetTop:  0,
      offsetLeft: 0
    }, options || {});
    
    // Find page position of source.    
    source  = $(source);
    element = $(element);    
    var p, delta, layout, styles = {};
    if (options.setLeft || options.setTop) {
      p = Element.viewportOffset(source);
      delta = [0, 0];
      // A delta of 0/0 will work for `positioned: fixed` elements, but
      // for `position: absolute` we need to get the parent's offset.
      if (Element.getStyle(element, 'position') === 'absolute') {
        var parent = Element.getOffsetParent(element);
        if (parent !== document.body) delta = Element.viewportOffset(parent);
      }
    }
    if (options.setWidth || options.setHeight) {
      layout = Element.getLayout(source);
    }
    // Set position.
    if (options.setLeft)
      styles.left = (p[0] - delta[0] + options.offsetLeft) + 'px';
    if (options.setTop)
      styles.top  = (p[1] - delta[1] + options.offsetTop)  + 'px';
    
    if (options.setWidth)
      styles.width  = layout.get('border-box-width')  + 'px';
    if (options.setHeight)
      styles.height = layout.get('border-box-height') + 'px';
    
    return Element.setStyle(element, styles);
  }
  
    
  if (Prototype.Browser.IE) {
    // IE doesn't report offsets correctly for static elements, so we change them
    // to "relative" to get the values, then change them back.
    getOffsetParent = getOffsetParent.wrap(
      function(proceed, element) {
        element = $(element);
        
        // For unusual cases like these, we standardize on returning the BODY
        // element as the offset parent.
        if (isDocument(element) || isDetached(element) || isBody(element) || isHtml(element))
          return $(document.body);
        var position = element.getStyle('position');
        if (position !== 'static') return proceed(element);
        element.setStyle({ position: 'relative' });
        var value = proceed(element);
        element.setStyle({ position: position });
        return value;
      }
    );
    
    positionedOffset = positionedOffset.wrap(function(proceed, element) {
      element = $(element);
      if (!element.parentNode) return new Element.Offset(0, 0);
      var position = element.getStyle('position');
      if (position !== 'static') return proceed(element);
      // Trigger hasLayout on the offset parent so that IE6 reports
      // accurate offsetTop and offsetLeft values for position: fixed.
      var offsetParent = element.getOffsetParent();
      if (offsetParent && offsetParent.getStyle('position') === 'fixed')
        hasLayout(offsetParent);
      element.setStyle({ position: 'relative' });
      var value = proceed(element);
      element.setStyle({ position: position });
      return value;
    });
  } else if (Prototype.Browser.Webkit) {    
    // Safari returns margins on body which is incorrect if the child is absolutely
    // positioned.  For performance reasons, redefine Element#cumulativeOffset for
    // KHTML/WebKit only.
    cumulativeOffset = function(element) {
      element = $(element);
      var valueT = 0, valueL = 0;
      do {
        valueT += element.offsetTop  || 0;
        valueL += element.offsetLeft || 0;
        if (element.offsetParent == document.body) {
          if (Element.getStyle(element, 'position') == 'absolute') break;
        }
        element = element.offsetParent;
      } while (element);
      return new Element.Offset(valueL, valueT);
    };
  }
  
  
  Element.addMethods({
    getLayout:              getLayout,
    measure:                measure,
    getWidth:               getWidth,
    getHeight:              getHeight,
    getDimensions:          getDimensions,
    getOffsetParent:        getOffsetParent,
    cumulativeOffset:       cumulativeOffset,
    positionedOffset:       positionedOffset,
    cumulativeScrollOffset: cumulativeScrollOffset,
    viewportOffset:         viewportOffset,    
    absolutize:             absolutize,
    relativize:             relativize,
    scrollTo:               scrollTo,
    makePositioned:         makePositioned,
    undoPositioned:         undoPositioned,
    makeClipping:           makeClipping,
    undoClipping:           undoClipping,
    clonePosition:          clonePosition
  });
  
  function isBody(element) {
    return element.nodeName.toUpperCase() === 'BODY';
  }
  
  function isHtml(element) {
    return element.nodeName.toUpperCase() === 'HTML';
  }
  
  function isDocument(element) {
    return element.nodeType === Node.DOCUMENT_NODE;
  }
  
  function isDetached(element) {
    return element !== document.body &&
     !Element.descendantOf(element, document.body);
  }
  
  // If the browser supports the nonstandard `getBoundingClientRect`
  // (currently only IE and Firefox), it becomes far easier to obtain
  // true offsets.
  if ('getBoundingClientRect' in document.documentElement) {
    Element.addMethods({
      viewportOffset: function(element) {
        element = $(element);        
        if (isDetached(element)) return new Element.Offset(0, 0);
        var rect = element.getBoundingClientRect(),
         docEl = document.documentElement;
        // The HTML element on IE < 8 has a 2px border by default, giving
        // an incorrect offset. We correct this by subtracting clientTop
        // and clientLeft.
        return new Element.Offset(rect.left - docEl.clientLeft,
         rect.top - docEl.clientTop);
      }
    }); 
  }
  
  
})();
(function() {
  
  var IS_OLD_OPERA = Prototype.Browser.Opera &&
   (window.parseFloat(window.opera.version()) < 9.5);
  var ROOT = null;
  function getRootElement() {
    if (ROOT) return ROOT;    
    ROOT = IS_OLD_OPERA ? document.body : document.documentElement;
    return ROOT;
  }
  function getDimensions() {
    return { width: this.getWidth(), height: this.getHeight() };
  }
  
  function getWidth() {
    return getRootElement().clientWidth;
  }
  
  function getHeight() {
    return getRootElement().clientHeight;
  }
  
  function getScrollOffsets() {
    var x = window.pageXOffset || document.documentElement.scrollLeft ||
     document.body.scrollLeft;
    var y = window.pageYOffset || document.documentElement.scrollTop ||
     document.body.scrollTop;
     
    return new Element.Offset(x, y);
  }
  
  document.viewport = {
    getDimensions:    getDimensions,
    getWidth:         getWidth,
    getHeight:        getHeight,
    getScrollOffsets: getScrollOffsets
  };
  
})();
window.$$ = function() {
  var expression = $A(arguments).join(', ');
  return Prototype.Selector.select(expression, document);
};
Prototype.Selector = (function() {
  
  function select() {
    throw new Error('Method "Prototype.Selector.select" must be defined.');
  }
  function match() {
    throw new Error('Method "Prototype.Selector.match" must be defined.');
  }
  function find(elements, expression, index) {
    index = index || 0;
    var match = Prototype.Selector.match, length = elements.length, matchIndex = 0, i;
    for (i = 0; i < length; i++) {
      if (match(elements[i], expression) && index == matchIndex++) {
        return Element.extend(elements[i]);
      }
    }
  }
  
  function extendElements(elements) {
    for (var i = 0, length = elements.length; i < length; i++) {
      Element.extend(elements[i]);
    }
    return elements;
  }
  
  
  var K = Prototype.K;
  
  return {
    select: select,
    match: match,
    find: find,
    extendElements: (Element.extend === K) ? K : extendElements,
    extendElement: Element.extend
  };
})();
/*!
 * Sizzle CSS Selector Engine v1.9.4-pre
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-06-03
 */
(function( window, undefined ) {
var i,
	support,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,
	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,
	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	hasDuplicate = false,
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}
		return 0;
	},
	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,
	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},
	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	// Regular expressions
	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),
	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",
	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",
	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	rsibling = new RegExp( whitespace + "*[+~]" ),
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),
	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),
	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},
	rnative = /^[^{]+\{\s*\[native \w/,
	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,
	rescape = /'|\\/g,
	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?
		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :
		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}
function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;
	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}
	context = context || document;
	results = results || [];
	if ( !selector || typeof selector !== "string" ) {
		return results;
	}
	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}
	if ( documentIsHTML && !seed ) {
		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}
			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;
			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}
		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;
			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );
				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";
				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}
			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}
	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}
function createCache() {
	var keys = [];
	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	}
	return cache;
}
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}
function assert( fn ) {
	var div = document.createElement("div");
	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;
	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );
	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}
	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}
	return a ? 1 : -1;
}
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;
			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};
support = Sizzle.support = {};
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;
	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}
	// Set our document
	document = doc;
	docElem = doc.documentElement;
	// Support tests
	documentIsHTML = !isXML( doc );
	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent.attachEvent && parent !== parent.top ) {
		parent.attachEvent( "onbeforeunload", function() {
			setDocument();
		});
	}
	/* Attributes
	---------------------------------------------------------------------- */
	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});
	/* getElement(s)By*
	---------------------------------------------------------------------- */
	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});
	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";
		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});
	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});
	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}
	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );
			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}
				return tmp;
			}
			return results;
		};
	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};
	/* QSA/matchesSelector
	---------------------------------------------------------------------- */
	// QSA and matchesSelector support
	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];
	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];
	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";
			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}
			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});
		assert(function( div ) {
			// Support: Opera 10-12/IE8
			// ^= $= *= and empty values
			// Should not select anything
			// Support: Windows 8 Native Apps
			// The type attribute is restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "t", "" );
			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}
			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}
			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}
	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {
		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );
			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}
	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	/* Contains
	---------------------------------------------------------------------- */
	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = rnative.test( docElem.contains ) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};
	/* Sorting
	---------------------------------------------------------------------- */
	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}
		var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );
		if ( compare ) {
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
				// Choose the first element that is related to our preferred document
				if ( a === doc || contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || contains(preferredDoc, b) ) {
					return 1;
				}
				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}
			return compare & 4 ? -1 : 1;
		}
		// Not directly comparable, sort on existence of method
		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}
		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}
		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}
		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :
			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};
	return doc;
};
Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};
Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}
	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );
	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
		try {
			var ret = matches.call( elem, expr );
			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}
	return Sizzle( expr, document, null, [elem] ).length > 0;
};
Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};
Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}
	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;
	return val === undefined ?
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null :
		val;
};
Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;
	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );
	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}
	return results;
};
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;
	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes
	return ret;
};
Expr = Sizzle.selectors = {
	// Can be adjusted by the user
	cacheLength: 50,
	createPseudo: markFunction,
	match: matchExpr,
	attrHandle: {},
	find: {},
	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},
	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );
			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );
			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}
			return match.slice( 0, 4 );
		},
		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();
			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}
				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}
			return match;
		},
		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];
			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}
			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];
			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}
			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},
	filter: {
		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},
		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];
			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},
		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );
				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}
				result += "";
				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},
		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";
			return first === 1 && last === 0 ?
				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :
				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;
					if ( parent ) {
						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}
						start = [ forward ? parent.firstChild : parent.lastChild ];
						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {
								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}
						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];
						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {
								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}
									if ( node === elem ) {
										break;
									}
								}
							}
						}
						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},
		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );
			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}
			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}
			return fn;
		}
	},
	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );
			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;
					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),
		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),
		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),
		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),
		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},
		"root": function( elem ) {
			return elem === docElem;
		},
		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},
		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},
		"disabled": function( elem ) {
			return elem.disabled === true;
		},
		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},
		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}
			return elem.selected === true;
		},
		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},
		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},
		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},
		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},
		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},
		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},
		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),
		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),
		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),
		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),
		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),
		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),
		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};
Expr.pseudos["nth"] = Expr.pseudos["eq"];
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();
function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];
	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}
	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;
	while ( soFar ) {
		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}
		matched = false;
		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}
		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}
		if ( !matched ) {
			break;
		}
	}
	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}
function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}
function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;
	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :
		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;
			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}
function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}
function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;
	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}
	return newUnmatched;
}
function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,
			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,
			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
					// ...intermediate processing is necessary
					[] :
					// ...otherwise use results directly
					results :
				matcherIn;
		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}
		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );
			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}
		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}
				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {
						seed[temp] = !(results[temp] = elem);
					}
				}
			}
		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}
function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,
		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];
	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}
	return elementMatcher( matchers );
}
function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);
			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}
			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}
				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}
					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}
			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}
				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}
					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}
				// Add matches to results
				push.apply( results, setMatched );
				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {
					Sizzle.uniqueSort( results );
				}
			}
			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}
			return unmatched;
		};
	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}
compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];
	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}
		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};
function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}
function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );
	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {
			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector.slice( tokens.shift().value.length );
			}
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
						break;
					}
				}
			}
		}
	}
	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector )
	);
	return results;
}
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
support.detectDuplicates = hasDuplicate;
setDocument();
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return (val = elem.getAttributeNode( name )) && val.specified ?
				val.value :
				elem[ name ] === true ? name.toLowerCase() : null;
		}
	});
}
if ( true ) {
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return Sizzle; }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
	window.Sizzle = Sizzle;
}
})( window );
Prototype._original_property = window.Sizzle;
;(function(engine) {
  var extendElements = Prototype.Selector.extendElements;
  function select(selector, scope) {
    return extendElements(engine(selector, scope || document));
  }
  function match(element, selector) {
    return engine.matches(selector, [element]).length == 1;
  }
  Prototype.Selector.engine = engine;
  Prototype.Selector.select = select;
  Prototype.Selector.match = match;
})(Sizzle);
window.Sizzle = Prototype._original_property;
delete Prototype._original_property;
var Form = {
  reset: function(form) {
    form = $(form);
    form.reset();
    return form;
  },
  serializeElements: function(elements, options) {
    // An earlier version accepted a boolean second parameter (hash) where
    // the default if omitted was false; respect that, but if they pass in an
    // options object (e.g., the new signature) but don't specify the hash option,
    // default true, as that's the new preferred approach.
    if (typeof options != 'object') options = { hash: !!options };
    else if (Object.isUndefined(options.hash)) options.hash = true;
    var key, value, submitted = false, submit = options.submit, accumulator, initial;
    
    if (options.hash) {
      initial = {};
      accumulator = function(result, key, value) {
        if (key in result) {
          if (!Object.isArray(result[key])) result[key] = [result[key]];
          result[key] = result[key].concat(value);
        } else result[key] = value;
        return result;
      };
    } else {
      initial = '';
      accumulator = function(result, key, values) {
        if (!Object.isArray(values)) {values = [values];}
        if (!values.length) {return result;}
        // According to the spec, spaces should be '+' rather than '%20'.
        var encodedKey = encodeURIComponent(key).gsub(/%20/, '+');
        return result + (result ? "&" : "") + values.map(function (value) {
          // Normalize newlines as \r\n because the HTML spec says newlines should
          // be encoded as CRLFs.
          value = value.gsub(/(\r)?\n/, '\r\n');
          value = encodeURIComponent(value);
          // According to the spec, spaces should be '+' rather than '%20'.
          value = value.gsub(/%20/, '+');
          return encodedKey + "=" + value;
        }).join("&");
      };
    }
    
    return elements.inject(initial, function(result, element) {
      if (!element.disabled && element.name) {
        key = element.name; value = $(element).getValue();
        if (value != null && element.type != 'file' && (element.type != 'submit' || (!submitted &&
            submit !== false && (!submit || key == submit) && (submitted = true)))) {
          result = accumulator(result, key, value);
        }
      }
      return result;
    });
  }
};
Form.Methods = {
  serialize: function(form, options) {
    return Form.serializeElements(Form.getElements(form), options);
  },
  
  getElements: function(form) {
    var elements = $(form).getElementsByTagName('*');
    var element, results = [], serializers = Form.Element.Serializers;
    
    for (var i = 0; element = elements[i]; i++) {
      if (serializers[element.tagName.toLowerCase()])
        results.push(Element.extend(element));
    }
    return results;
  },
  getInputs: function(form, typeName, name) {
    form = $(form);
    var inputs = form.getElementsByTagName('input');
    if (!typeName && !name) return $A(inputs).map(Element.extend);
    for (var i = 0, matchingInputs = [], length = inputs.length; i < length; i++) {
      var input = inputs[i];
      if ((typeName && input.type != typeName) || (name && input.name != name))
        continue;
      matchingInputs.push(Element.extend(input));
    }
    return matchingInputs;
  },
  disable: function(form) {
    form = $(form);
    Form.getElements(form).invoke('disable');
    return form;
  },
  enable: function(form) {
    form = $(form);
    Form.getElements(form).invoke('enable');
    return form;
  },
  findFirstElement: function(form) {
    var elements = $(form).getElements().findAll(function(element) {
      return 'hidden' != element.type && !element.disabled;
    });
    var firstByIndex = elements.findAll(function(element) {
      return element.hasAttribute('tabIndex') && element.tabIndex >= 0;
    }).sortBy(function(element) { return element.tabIndex }).first();
    return firstByIndex ? firstByIndex : elements.find(function(element) {
      return /^(?:input|select|textarea)$/i.test(element.tagName);
    });
  },
  focusFirstElement: function(form) {
    form = $(form);
    var element = form.findFirstElement();
    if (element) element.activate();
    return form;
  },
  request: function(form, options) {
    form = $(form), options = Object.clone(options || { });
    var params = options.parameters, action = form.readAttribute('action') || '';
    if (action.blank()) action = window.location.href;
    options.parameters = form.serialize(true);
    if (params) {
      if (Object.isString(params)) params = params.toQueryParams();
      Object.extend(options.parameters, params);
    }
    if (form.hasAttribute('method') && !options.method)
      options.method = form.method;
    return new Ajax.Request(action, options);
  }
};
/*--------------------------------------------------------------------------*/
Form.Element = {
  focus: function(element) {
    $(element).focus();
    return element;
  },
  select: function(element) {
    $(element).select();
    return element;
  }
};
Form.Element.Methods = {
  serialize: function(element) {
    element = $(element);
    if (!element.disabled && element.name) {
      var value = element.getValue();
      if (value != undefined) {
        var pair = { };
        pair[element.name] = value;
        return Object.toQueryString(pair);
      }
    }
    return '';
  },
  getValue: function(element) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    return Form.Element.Serializers[method](element);
  },
  setValue: function(element, value) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    Form.Element.Serializers[method](element, value);
    return element;
  },
  clear: function(element) {
    $(element).value = '';
    return element;
  },
  present: function(element) {
    return $(element).value != '';
  },
  activate: function(element) {
    element = $(element);
    try {
      element.focus();
      if (element.select && (element.tagName.toLowerCase() != 'input' ||
          !(/^(?:button|reset|submit)$/i.test(element.type))))
        element.select();
    } catch (e) { }
    return element;
  },
  disable: function(element) {
    element = $(element);
    element.disabled = true;
    return element;
  },
  enable: function(element) {
    element = $(element);
    element.disabled = false;
    return element;
  }
};
/*--------------------------------------------------------------------------*/
var Field = Form.Element;
var $F = Form.Element.Methods.getValue;
/*--------------------------------------------------------------------------*/
Form.Element.Serializers = (function() {
  function input(element, value) {
    switch (element.type.toLowerCase()) {
      case 'checkbox':
      case 'radio':
        return inputSelector(element, value);
      default:
        return valueSelector(element, value);
    }
  }
  
  function inputSelector(element, value) {
    if (Object.isUndefined(value))
      return element.checked ? element.value : null;
    else element.checked = !!value;    
  }
  
  function valueSelector(element, value) {
    if (Object.isUndefined(value)) return element.value;
    else element.value = value;
  }
  
  function select(element, value) {
    if (Object.isUndefined(value))
      return (element.type === 'select-one' ? selectOne : selectMany)(element);
       
    var opt, currentValue, single = !Object.isArray(value);
    for (var i = 0, length = element.length; i < length; i++) {
      opt = element.options[i];
      currentValue = this.optionValue(opt);
      if (single) {
        if (currentValue == value) {
          opt.selected = true;
          return;
        }
      }
      else opt.selected = value.include(currentValue);
    }
  }
  
  function selectOne(element) {
    var index = element.selectedIndex;
    return index >= 0 ? optionValue(element.options[index]) : null;
  }
  
  function selectMany(element) {
    var values, length = element.length;
    if (!length) return null;
    for (var i = 0, values = []; i < length; i++) {
      var opt = element.options[i];
      if (opt.selected) values.push(optionValue(opt));
    }
    return values;
  }
  
  function optionValue(opt) {
    return Element.hasAttribute(opt, 'value') ? opt.value : opt.text;
  }
  
  return {
    input:         input,
    inputSelector: inputSelector,
    textarea:      valueSelector,
    select:        select,
    selectOne:     selectOne,
    selectMany:    selectMany,
    optionValue:   optionValue,
    button:        valueSelector
  };
})();
/*--------------------------------------------------------------------------*/
Abstract.TimedObserver = Class.create(PeriodicalExecuter, {
  initialize: function($super, element, frequency, callback) {
    $super(callback, frequency);
    this.element   = $(element);
    this.lastValue = this.getValue();
  },
  execute: function() {
    var value = this.getValue();
    if (Object.isString(this.lastValue) && Object.isString(value) ?
        this.lastValue != value : String(this.lastValue) != String(value)) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  }
});
Form.Element.Observer = Class.create(Abstract.TimedObserver, {
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});
Form.Observer = Class.create(Abstract.TimedObserver, {
  getValue: function() {
    return Form.serialize(this.element);
  }
});
/*--------------------------------------------------------------------------*/
Abstract.EventObserver = Class.create({
  initialize: function(element, callback) {
    this.element  = $(element);
    this.callback = callback;
    this.lastValue = this.getValue();
    if (this.element.tagName.toLowerCase() == 'form')
      this.registerFormCallbacks();
    else
      this.registerCallback(this.element);
  },
  onElementEvent: function() {
    var value = this.getValue();
    if (this.lastValue != value) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  },
  registerFormCallbacks: function() {
    Form.getElements(this.element).each(this.registerCallback, this);
  },
  registerCallback: function(element) {
    if (element.type) {
      switch (element.type.toLowerCase()) {
        case 'checkbox':
        case 'radio':
          Event.observe(element, 'click', this.onElementEvent.bind(this));
          break;
        default:
          Event.observe(element, 'change', this.onElementEvent.bind(this));
          break;
      }
    }
  }
});
Form.Element.EventObserver = Class.create(Abstract.EventObserver, {
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});
Form.EventObserver = Class.create(Abstract.EventObserver, {
  getValue: function() {
    return Form.serialize(this.element);
  }
});
(function(GLOBAL) {
  var DIV = document.createElement('div');
  var docEl = document.documentElement;
  var MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED = 'onmouseenter' in docEl
   && 'onmouseleave' in docEl;
  
  var Event = {
    KEY_BACKSPACE: 8,
    KEY_TAB:       9,
    KEY_RETURN:   13,
    KEY_ESC:      27,
    KEY_LEFT:     37,
    KEY_UP:       38,
    KEY_RIGHT:    39,
    KEY_DOWN:     40,
    KEY_DELETE:   46,
    KEY_HOME:     36,
    KEY_END:      35,
    KEY_PAGEUP:   33,
    KEY_PAGEDOWN: 34,
    KEY_INSERT:   45
  };
  
  // We need to support three different event "modes":
  //  1. browsers with only DOM L2 Events (WebKit, FireFox);
  //  2. browsers with only IE's legacy events system (IE 6-8);
  //  3. browsers with _both_ systems (IE 9 and arguably Opera).
  //
  // Groups 1 and 2 are easy; group three is trickier.
  var isIELegacyEvent = function(event) { return false; };
  if (window.attachEvent) {
    if (window.addEventListener) {
      // Both systems are supported. We need to decide at runtime.
      // (Though Opera supports both systems, the event object appears to be
      // the same no matter which system is used. That means that this function
      // will always return `true` in Opera, but that's OK; it keeps us from
      // having to do a browser sniff.)
      isIELegacyEvent = function(event) {
        return !(event instanceof window.Event);
      };
    } else {
      // No support for DOM L2 events. All events will be legacy.
      isIELegacyEvent = function(event) { return true; };
    }
  }
  
  // The two systems have different ways of indicating which button was used
  // for a mouse event.
  var _isButton;
  function _isButtonForDOMEvents(event, code) {
    return event.which ? (event.which === code + 1) : (event.button === code);
  }
  var legacyButtonMap = { 0: 1, 1: 4, 2: 2 };
  function _isButtonForLegacyEvents(event, code) {
    return event.button === legacyButtonMap[code];
  }
  // In WebKit we have to account for when the user holds down the "meta" key.
  function _isButtonForWebKit(event, code) {
    switch (code) {
      case 0: return event.which == 1 && !event.metaKey;
      case 1: return event.which == 2 || (event.which == 1 && event.metaKey);
      case 2: return event.which == 3;
      default: return false;
    }
  }
  if (window.attachEvent) {
    if (!window.addEventListener) {
      // Legacy IE events only.
      _isButton = _isButtonForLegacyEvents;      
    } else {
      // Both systems are supported; decide at runtime.
      _isButton = function(event, code) {
        return isIELegacyEvent(event) ? _isButtonForLegacyEvents(event, code) :
         _isButtonForDOMEvents(event, code);
      }
    }
  } else if (Prototype.Browser.WebKit) {
    _isButton = _isButtonForWebKit;
  } else {
    _isButton = _isButtonForDOMEvents;
  }
  
  function isLeftClick(event)   { return _isButton(event, 0) }
  function isMiddleClick(event) { return _isButton(event, 1) }
  function isRightClick(event)  { return _isButton(event, 2) }
  
  function element(event) {
    // The public version of `Event.element` is a thin wrapper around the
    // private `_element` method below. We do this so that we can use it
    // internally as `_element` without having to extend the node.
    return Element.extend(_element(event));
  }
  
  function _element(event) {
    event = Event.extend(event);
    var node = event.target, type = event.type,
     currentTarget = event.currentTarget;
    if (currentTarget && currentTarget.tagName) {
      // Firefox screws up the "click" event when moving between radio buttons
      // via arrow keys. It also screws up the "load" and "error" events on images,
      // reporting the document as the target instead of the original image.
      if (type === 'load' || type === 'error' ||
        (type === 'click' && currentTarget.tagName.toLowerCase() === 'input'
          && currentTarget.type === 'radio'))
            node = currentTarget;
    }
    // Fix a Safari bug where a text node gets passed as the target of an
    // anchor click rather than the anchor itself.
    return node.nodeType == Node.TEXT_NODE ? node.parentNode : node;
  }
  function findElement(event, expression) {
    var element = _element(event), selector = Prototype.Selector;
    if (!expression) return Element.extend(element);
    while (element) {
      if (Object.isElement(element) && selector.match(element, expression))
        return Element.extend(element);
      element = element.parentNode;
    }
  }
  
  function pointer(event) {
    return { x: pointerX(event), y: pointerY(event) };
  }
  function pointerX(event) {
    var docElement = document.documentElement,
     body = document.body || { scrollLeft: 0 };
    return event.pageX || (event.clientX +
      (docElement.scrollLeft || body.scrollLeft) -
      (docElement.clientLeft || 0));
  }
  function pointerY(event) {
    var docElement = document.documentElement,
     body = document.body || { scrollTop: 0 };
    return  event.pageY || (event.clientY +
       (docElement.scrollTop || body.scrollTop) -
       (docElement.clientTop || 0));
  }
  function stop(event) {
    Event.extend(event);
    event.preventDefault();
    event.stopPropagation();
    // Set a "stopped" property so that a custom event can be inspected
    // after the fact to determine whether or not it was stopped.
    event.stopped = true;
  }
  Event.Methods = {
    isLeftClick:   isLeftClick,
    isMiddleClick: isMiddleClick,
    isRightClick:  isRightClick,
    element:     element,
    findElement: findElement,
    pointer:  pointer,
    pointerX: pointerX,
    pointerY: pointerY,
    stop: stop
  };
  // Compile the list of methods that get extended onto Events.
  var methods = Object.keys(Event.Methods).inject({ }, function(m, name) {
    m[name] = Event.Methods[name].methodize();
    return m;
  });
  if (window.attachEvent) {
    // For IE's event system, we need to do some work to make the event
    // object behave like a standard event object.
    function _relatedTarget(event) {
      var element;
      switch (event.type) {
        case 'mouseover':
        case 'mouseenter':
          element = event.fromElement;
          break;
        case 'mouseout':
        case 'mouseleave':
          element = event.toElement;
          break;
        default:
          return null;
      }
      return Element.extend(element);
    }
    // These methods should be added _only_ to legacy IE event objects.
    var additionalMethods = {
      stopPropagation: function() { this.cancelBubble = true },
      preventDefault:  function() { this.returnValue = false },
      inspect: function() { return '[object Event]' }
    };
    // IE's method for extending events.
    Event.extend = function(event, element) {
      if (!event) return false;
      
      // If it's not a legacy event, it doesn't need extending.
      if (!isIELegacyEvent(event)) return event;
      // Mark this event so we know not to extend a second time.
      if (event._extendedByPrototype) return event;
      event._extendedByPrototype = Prototype.emptyFunction;
      
      var pointer = Event.pointer(event);
      // The optional `element` argument gives us a fallback value for the
      // `target` property in case IE doesn't give us through `srcElement`.
      Object.extend(event, {
        target: event.srcElement || element,
        relatedTarget: _relatedTarget(event),
        pageX:  pointer.x,
        pageY:  pointer.y
      });
      
      Object.extend(event, methods);
      Object.extend(event, additionalMethods);
      
      return event;
    };
  } else {
    // Only DOM events, so no manual extending necessary.
    Event.extend = Prototype.K;
  }
  
  if (window.addEventListener) {
    // In all browsers that support DOM L2 Events, we can augment
    // `Event.prototype` directly.
    Event.prototype = window.Event.prototype || document.createEvent('HTMLEvents').__proto__;
    Object.extend(Event.prototype, methods);
  }
  
  //
  // EVENT REGISTRY
  //
  var EVENT_TRANSLATIONS = {
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  };
  
  function getDOMEventName(eventName) {
    return EVENT_TRANSLATIONS[eventName] || eventName;
  }
  
  if (MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED)
    getDOMEventName = Prototype.K;
  
  function getUniqueElementID(element) {
    if (element === window) return 0;
    // Need to use actual `typeof` operator to prevent errors in some
    // environments when accessing node expandos.
    if (typeof element._prototypeUID === 'undefined')
      element._prototypeUID = Element.Storage.UID++;
    return element._prototypeUID;
  }
  
  // In Internet Explorer, DOM nodes have a `uniqueID` property. Saves us
  // from inventing our own.
  function getUniqueElementID_IE(element) {
    if (element === window) return 0;
    // The document object's `uniqueID` property changes each time you read it.
    if (element == document) return 1;
    return element.uniqueID;
  }
  
  if ('uniqueID' in DIV)
    getUniqueElementID = getUniqueElementID_IE;
  function isCustomEvent(eventName) {
    return eventName.include(':');
  }
  Event._isCustomEvent = isCustomEvent;
  // These two functions take an optional UID as a second argument so that we
  // can skip lookup if we've already got the element's UID.
  function getRegistryForElement(element, uid) {
    var CACHE = GLOBAL.Event.cache;
    if (Object.isUndefined(uid))
      uid = getUniqueElementID(element);
    if (!CACHE[uid]) CACHE[uid] = { element: element };
    return CACHE[uid];
  }
  
  function destroyRegistryForElement(element, uid) {
    if (Object.isUndefined(uid))
      uid = getUniqueElementID(element);
    delete GLOBAL.Event.cache[uid];
  }
  
  // The `register` and `unregister` functions handle creating the responder
  // and managing an event registry. They _don't_ attach and detach the
  // listeners themselves.
  
  // Add an event to the element's event registry.
  function register(element, eventName, handler) {
    var registry = getRegistryForElement(element);
    if (!registry[eventName]) registry[eventName] = [];
    var entries = registry[eventName];
    // Make sure this handler isn't already attached.
    var i = entries.length;
    while (i--)
      if (entries[i].handler === handler) return null;
      
    var uid = getUniqueElementID(element);
    var responder = GLOBAL.Event._createResponder(uid, eventName, handler);
    var entry = {
      responder: responder,
      handler:   handler
    };
    entries.push(entry);    
    return entry;
  }
  
  // Remove an event from the element's event registry.
  function unregister(element, eventName, handler) {
    var registry = getRegistryForElement(element);
    var entries = registry[eventName];
    if (!entries) return;
    
    var i = entries.length, entry;
    while (i--) {
      if (entries[i].handler === handler) {
        entry = entries[i];
        break;
      }
    }
    
    // This handler wasn't in the collection, so it doesn't need to be
    // unregistered.
    if (!entry) return;
    // Remove the entry from the collection;
    var index = entries.indexOf(entry);
    entries.splice(index, 1);
    if (entries.length == 0) {
      stopObservingEventName(element, eventName);
    }
    return entry;
  }  
  
  
  //
  // EVENT OBSERVING
  //
  function observe(element, eventName, handler) {
    element = $(element);
    var entry = register(element, eventName, handler);
    
    if (entry === null) return element;
    var responder = entry.responder;    
    if (isCustomEvent(eventName))
      observeCustomEvent(element, eventName, responder);
    else
      observeStandardEvent(element, eventName, responder);
      
    return element;
  }
  
  function observeStandardEvent(element, eventName, responder) {
    var actualEventName = getDOMEventName(eventName);
    if (element.addEventListener) {
      element.addEventListener(actualEventName, responder, false);
    } else {
      element.attachEvent('on' + actualEventName, responder);
    }
  }
  
  function observeCustomEvent(element, eventName, responder) {
    if (element.addEventListener) {
      element.addEventListener('dataavailable', responder, false);
    } else {
      // We observe two IE-proprietarty events: one for custom events that
      // bubble and one for custom events that do not bubble.
      element.attachEvent('ondataavailable', responder);
      element.attachEvent('onlosecapture',   responder);
    }
  }
  
  function stopObserving(element, eventName, handler) {
    element = $(element);
    var handlerGiven = !Object.isUndefined(handler),
     eventNameGiven = !Object.isUndefined(eventName);
     
    if (!eventNameGiven && !handlerGiven) {
      stopObservingElement(element);
      return element;
    }
    
    if (!handlerGiven) {
      stopObservingEventName(element, eventName);
      return element;
    }
    
    var entry = unregister(element, eventName, handler);
    
    if (!entry) return element; 
    removeEvent(element, eventName, entry.responder);
    return element;
  }
  
  function stopObservingStandardEvent(element, eventName, responder) {
    var actualEventName = getDOMEventName(eventName);
    if (element.removeEventListener) {
      element.removeEventListener(actualEventName, responder, false);      
    } else {
      element.detachEvent('on' + actualEventName, responder);
    }
  }
  
  function stopObservingCustomEvent(element, eventName, responder) {
    if (element.removeEventListener) {
      element.removeEventListener('dataavailable', responder, false);
    } else {
      element.detachEvent('ondataavailable', responder);
      element.detachEvent('onlosecapture',   responder);
    }
  }
  
  // The `stopObservingElement` and `stopObservingEventName` functions are
  // for bulk removal of event listeners. We use them rather than recurse
  // back into `stopObserving` to avoid touching the registry more often than
  // necessary.
  // Stop observing _all_ listeners on an element.
  function stopObservingElement(element) {
    // Do a manual registry lookup because we don't want to create a registry
    // if one doesn't exist.
    var uid = getUniqueElementID(element), registry = GLOBAL.Event.cache[uid];
    // This way we can return early if there is no registry.
    if (!registry) return;
    destroyRegistryForElement(element, uid);
    var entries, i;
    for (var eventName in registry) {
      // Explicitly skip elements so we don't accidentally find one with a
      // `length` property.
      if (eventName === 'element') continue;
      entries = registry[eventName];
      i = entries.length;
      while (i--)
        removeEvent(element, eventName, entries[i].responder);
    }
  }
  
  // Stop observing all listeners of a certain event name on an element.
  function stopObservingEventName(element, eventName) {
    var registry = getRegistryForElement(element);
    var entries = registry[eventName];
    if (!entries) return;
    delete registry[eventName];
    
    var i = entries.length;
    while (i--)
      removeEvent(element, eventName, entries[i].responder);
    for (var name in registry) {
      if (name === 'element') continue;
      return; // There is another registered event
    }
    // No other events for the element, destroy the registry:
    destroyRegistryForElement(element);
  }
  
  function removeEvent(element, eventName, handler) {
    if (isCustomEvent(eventName))
      stopObservingCustomEvent(element, eventName, handler);
    else
      stopObservingStandardEvent(element, eventName, handler);
  }
  
  
  
  // FIRING CUSTOM EVENTS
  function getFireTarget(element) {
    if (element !== document) return element;
    if (document.createEvent && !element.dispatchEvent)
      return document.documentElement;
    return element;
  }
  
  function fire(element, eventName, memo, bubble) {
    element = getFireTarget($(element));
    if (Object.isUndefined(bubble)) bubble = true;      
    memo = memo || {};
      
    var event = fireEvent(element, eventName, memo, bubble);
    return Event.extend(event);
  }
  
  function fireEvent_DOM(element, eventName, memo, bubble) {
    var event = document.createEvent('HTMLEvents');
    event.initEvent('dataavailable', bubble, true);
    
    event.eventName = eventName;
    event.memo = memo;
    
    element.dispatchEvent(event);
    return event;
  }
  
  function fireEvent_IE(element, eventName, memo, bubble) {
    var event = document.createEventObject();
    event.eventType = bubble ? 'ondataavailable' : 'onlosecapture';
    
    event.eventName = eventName;
    event.memo = memo;
    
    element.fireEvent(event.eventType, event);    
    return event;
  }
  
  var fireEvent = document.createEvent ? fireEvent_DOM : fireEvent_IE;
  
  
  // EVENT DELEGATION
  
  Event.Handler = Class.create({
    initialize: function(element, eventName, selector, callback) {
      this.element   = $(element);
      this.eventName = eventName;
      this.selector  = selector;
      this.callback  = callback;
      this.handler   = this.handleEvent.bind(this);
    },
    
    start: function() {
      Event.observe(this.element, this.eventName, this.handler);
      return this;
    },
    
    stop: function() {
      Event.stopObserving(this.element, this.eventName, this.handler);
      return this;
    },
    
    handleEvent: function(event) {
      var element = Event.findElement(event, this.selector);
      if (element) this.callback.call(this.element, event, element);
    }
  });
  
  function on(element, eventName, selector, callback) {
    element = $(element);
    if (Object.isFunction(selector) && Object.isUndefined(callback)) {
      callback = selector, selector = null;
    }
    
    return new Event.Handler(element, eventName, selector, callback).start();
  }
  
  Object.extend(Event, Event.Methods);
  Object.extend(Event, {
    fire:          fire,
    observe:       observe,
    stopObserving: stopObserving,
    on:            on
  });
  Element.addMethods({
    fire:          fire,
    observe:       observe,
    stopObserving: stopObserving,
    
    on:            on
  });
  Object.extend(document, {
    fire:          fire.methodize(),
    observe:       observe.methodize(),
    stopObserving: stopObserving.methodize(),
    
    on:            on.methodize(),
    loaded:        false
  });
  // Export to the global scope.
  if (GLOBAL.Event) Object.extend(window.Event, Event);
  else GLOBAL.Event = Event;
  
  GLOBAL.Event.cache = {};
    
  function destroyCache_IE() {
    GLOBAL.Event.cache = null;
  }
  
  if (window.attachEvent)
    window.attachEvent('onunload', destroyCache_IE);
    
  DIV = null;
  docEl = null;
})(this);
(function(GLOBAL) {  
  /* Code for creating leak-free event responders is based on work by
   John-David Dalton. */
  
  var docEl = document.documentElement;
  var MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED = 'onmouseenter' in docEl
    && 'onmouseleave' in docEl;
    
  function isSimulatedMouseEnterLeaveEvent(eventName) {
    return !MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED &&
     (eventName === 'mouseenter' || eventName === 'mouseleave');
  }
  
  // The functions for creating responders accept the element's UID rather
  // than the element itself. This way, there are _no_ DOM objects inside the
  // closure we create, meaning there's no need to unregister event listeners
  // on unload.
  function createResponder(uid, eventName, handler) {    
    if (Event._isCustomEvent(eventName))
      return createResponderForCustomEvent(uid, eventName, handler);      
    if (isSimulatedMouseEnterLeaveEvent(eventName))
      return createMouseEnterLeaveResponder(uid, eventName, handler);
    
    return function(event) {
      if (!Event.cache) return;
      
      var element = Event.cache[uid].element;
      Event.extend(event, element);
      handler.call(element, event);
    };
  }
  
  function createResponderForCustomEvent(uid, eventName, handler) {
    return function(event) {
      var element = Event.cache[uid] !== undefined ? Event.cache[uid].element : event.target;
      if (Object.isUndefined(event.eventName))
        return false;
        
      if (event.eventName !== eventName)
        return false;
        
      Event.extend(event, element);
      handler.call(element, event);
    };
  }
  
  function createMouseEnterLeaveResponder(uid, eventName, handler) {
    return function(event) {
      var element = Event.cache[uid].element;
      
      Event.extend(event, element);
      var parent = event.relatedTarget;
      
      // Walk up the DOM tree to see if the related target is a descendant of
      // the original element. If it is, we ignore the event to match the
      // behavior of mouseenter/mouseleave.
      while (parent && parent !== element) {
        try { parent = parent.parentNode; }
        catch(e) { parent = element; }
      }
      
      if (parent === element) return;      
      handler.call(element, event);
    }
  }
  
  GLOBAL.Event._createResponder = createResponder;
  docEl = null;
})(this);
(function(GLOBAL) {
  /* Support for the DOMContentLoaded event is based on work by Dan Webb,
     Matthias Miller, Dean Edwards, John Resig, and Diego Perini. */
  
  var TIMER;
  
  function fireContentLoadedEvent() {
    if (document.loaded) return;
    if (TIMER) window.clearTimeout(TIMER);
    document.loaded = true;
    document.fire('dom:loaded');
  }
  
  function checkReadyState() {
    if (document.readyState === 'complete') {
      document.detachEvent('onreadystatechange', checkReadyState);
      fireContentLoadedEvent();
    }
  }
  
  function pollDoScroll() {
    try {
      document.documentElement.doScroll('left');
    } catch (e) {
      TIMER = pollDoScroll.defer();
      return;
    }
    
    fireContentLoadedEvent();
  }
  if (document.readyState === 'complete') {
    // We must have been loaded asynchronously, because the DOMContentLoaded
    // event has already fired. We can just fire `dom:loaded` and be done
    // with it.
    fireContentLoadedEvent();
    return;
  }
  
  if (document.addEventListener) {
    // All browsers that support DOM L2 Events support DOMContentLoaded,
    // including IE 9.
    document.addEventListener('DOMContentLoaded', fireContentLoadedEvent, false);
  } else {
    document.attachEvent('onreadystatechange', checkReadyState);
    if (window == top) TIMER = pollDoScroll.defer();
  }
  
  // Worst-case fallback.
  Event.observe(window, 'load', fireContentLoadedEvent);
})(this);
Element.addMethods();
/*------------------------------- DEPRECATED -------------------------------*/
Hash.toQueryString = Object.toQueryString;
var Toggle = { display: Element.toggle };
Element.Methods.childOf = Element.Methods.descendantOf;
var Insertion = {
  Before: function(element, content) {
    return Element.insert(element, {before:content});
  },
  Top: function(element, content) {
    return Element.insert(element, {top:content});
  },
  Bottom: function(element, content) {
    return Element.insert(element, {bottom:content});
  },
  After: function(element, content) {
    return Element.insert(element, {after:content});
  }
};
var $continue = new Error('"throw $continue" is deprecated, use "return" instead');
var Position = {
  // set to true if needed, warning: firefox performance problems
  // NOT neeeded for page scrolling, only if draggable contained in
  // scrollable elements
  includeScrollOffsets: false,
  // must be called before calling withinIncludingScrolloffset, every time the
  // page is scrolled
  prepare: function() {
    this.deltaX =  window.pageXOffset
                || document.documentElement.scrollLeft
                || document.body.scrollLeft
                || 0;
    this.deltaY =  window.pageYOffset
                || document.documentElement.scrollTop
                || document.body.scrollTop
                || 0;
  },
  // caches x/y coordinate pair to use with overlap
  within: function(element, x, y) {
    if (this.includeScrollOffsets)
      return this.withinIncludingScrolloffsets(element, x, y);
    this.xcomp = x;
    this.ycomp = y;
    this.offset = Element.cumulativeOffset(element);
    return (y >= this.offset[1] &&
            y <  this.offset[1] + element.offsetHeight &&
            x >= this.offset[0] &&
            x <  this.offset[0] + element.offsetWidth);
  },
  withinIncludingScrolloffsets: function(element, x, y) {
    var offsetcache = Element.cumulativeScrollOffset(element);
    this.xcomp = x + offsetcache[0] - this.deltaX;
    this.ycomp = y + offsetcache[1] - this.deltaY;
    this.offset = Element.cumulativeOffset(element);
    return (this.ycomp >= this.offset[1] &&
            this.ycomp <  this.offset[1] + element.offsetHeight &&
            this.xcomp >= this.offset[0] &&
            this.xcomp <  this.offset[0] + element.offsetWidth);
  },
  // within must be called directly before
  overlap: function(mode, element) {
    if (!mode) return 0;
    if (mode == 'vertical')
      return ((this.offset[1] + element.offsetHeight) - this.ycomp) /
        element.offsetHeight;
    if (mode == 'horizontal')
      return ((this.offset[0] + element.offsetWidth) - this.xcomp) /
        element.offsetWidth;
  },
  // Deprecation layer -- use newer Element methods now (1.5.2).
  cumulativeOffset: Element.Methods.cumulativeOffset,
  positionedOffset: Element.Methods.positionedOffset,
  absolutize: function(element) {
    Position.prepare();
    return Element.absolutize(element);
  },
  relativize: function(element) {
    Position.prepare();
    return Element.relativize(element);
  },
  realOffset: Element.Methods.cumulativeScrollOffset,
  offsetParent: Element.Methods.getOffsetParent,
  page: Element.Methods.viewportOffset,
  clone: function(source, target, options) {
    options = options || { };
    return Element.clonePosition(target, source, options);
  }
};
/*--------------------------------------------------------------------------*/
if (!document.getElementsByClassName) document.getElementsByClassName = function(instanceMethods){
  function iter(name) {
    return name.blank() ? null : "[contains(concat(' ', @class, ' '), ' " + name + " ')]";
  }
  instanceMethods.getElementsByClassName = Prototype.BrowserFeatures.XPath ?
  function(element, className) {
    className = className.toString().strip();
    var cond = /\s/.test(className) ? $w(className).map(iter).join('') : iter(className);
    return cond ? document._getElementsByXPath('.//*' + cond, element) : [];
  } : function(element, className) {
    className = className.toString().strip();
    var elements = [], classNames = (/\s/.test(className) ? $w(className) : null);
    if (!classNames && !className) return elements;
    var nodes = $(element).getElementsByTagName('*');
    className = ' ' + className + ' ';
    for (var i = 0, child, cn; child = nodes[i]; i++) {
      if (child.className && (cn = ' ' + child.className + ' ') && (cn.include(className) ||
          (classNames && classNames.all(function(name) {
            return !name.toString().blank() && cn.include(' ' + name + ' ');
          }))))
        elements.push(Element.extend(child));
    }
    return elements;
  };
  return function(className, parentElement) {
    return $(parentElement || document.body).getElementsByClassName(className);
  };
}(Element.Methods);
/*--------------------------------------------------------------------------*/
Element.ClassNames = Class.create();
Element.ClassNames.prototype = {
  initialize: function(element) {
    this.element = $(element);
  },
  _each: function(iterator, context) {
    this.element.className.split(/\s+/).select(function(name) {
      return name.length > 0;
    })._each(iterator, context);
  },
  set: function(className) {
    this.element.className = className;
  },
  add: function(classNameToAdd) {
    if (this.include(classNameToAdd)) return;
    this.set($A(this).concat(classNameToAdd).join(' '));
  },
  remove: function(classNameToRemove) {
    if (!this.include(classNameToRemove)) return;
    this.set($A(this).without(classNameToRemove).join(' '));
  },
  toString: function() {
    return $A(this).join(' ');
  }
};
Object.extend(Element.ClassNames.prototype, Enumerable);
/*--------------------------------------------------------------------------*/
(function() {
  window.Selector = Class.create({
    initialize: function(expression) {
      this.expression = expression.strip();
    },
  
    findElements: function(rootElement) {
      return Prototype.Selector.select(this.expression, rootElement);
    },
  
    match: function(element) {
      return Prototype.Selector.match(element, this.expression);
    },
  
    toString: function() {
      return this.expression;
    },
  
    inspect: function() {
      return "#<Selector: " + this.expression + ">";
    }
  });
  Object.extend(Selector, {
    matchElements: function(elements, expression) {
      var match = Prototype.Selector.match,
          results = [];
          
      for (var i = 0, length = elements.length; i < length; i++) {
        var element = elements[i];
        if (match(element, expression)) {
          results.push(Element.extend(element));
        }
      }
      return results;
    },
    findElement: function(elements, expression, index) {
      index = index || 0;
      var matchIndex = 0, element;
      // Match each element individually, since Sizzle.matches does not preserve order
      for (var i = 0, length = elements.length; i < length; i++) {
        element = elements[i];
        if (Prototype.Selector.match(element, expression) && index === matchIndex++) {
          return Element.extend(element);
        }
      }
    },
    findChildElements: function(element, expressions) {
      var selector = expressions.toArray().join(', ');
      return Prototype.Selector.select(selector, element || document);
    }
  });
})();

/*** EXPORTS FROM exports-loader ***/
module.exports = $H;
}.call(window));
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(45), __webpack_require__(46), __webpack_require__(84)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($H, $R, Sizzle) {var __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/
(function() {

/**
 * @preserve
 * Prototype JavaScript framework, version 1.7.1
 *  (c) 2005-2010 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/
/*
 * Prototype JavaScript framework, version 1.7.1
 *  (c) 2005-2010 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/
var Prototype = {
  Version: '1.7.1',
  Browser: (function(){
    var ua = navigator.userAgent;
    // Opera (at least) 8.x+ has "Opera" as a [[Class]] of `window.opera`
    // This is a safer inference than plain boolean type conversion of `window.opera`
    var isOpera = Object.prototype.toString.call(window.opera) == '[object Opera]';
    return {
      IE:             !!window.attachEvent && !isOpera,
      Opera:          isOpera,
      WebKit:         ua.indexOf('AppleWebKit/') > -1,
      Gecko:          ua.indexOf('Gecko') > -1 && ua.indexOf('KHTML') === -1,
      MobileSafari:   /Apple.*Mobile/.test(ua)
    }
  })(),
  BrowserFeatures: {
    XPath: !!document.evaluate,
    SelectorsAPI: !!document.querySelector,
    ElementExtensions: (function() {
      var constructor = window.Element || window.HTMLElement;
      return !!(constructor && constructor.prototype);
    })(),
    SpecificElementExtensions: (function() {
      // First, try the named class
      if (typeof window.HTMLDivElement !== 'undefined')
        return true;
      var div = document.createElement('div'),
          form = document.createElement('form'),
          isSupported = false;
      if (div['__proto__'] && (div['__proto__'] !== form['__proto__'])) {
        isSupported = true;
      }
      div = form = null;
      return isSupported;
    })()
  },
  ScriptFragment: '<script[^>]*>([\\S\\s]*?)<\/script\\s*>',
  JSONFilter: /^\/\*-secure-([\s\S]*)\*\/\s*$/,
  emptyFunction: function() { },
  K: function(x) { return x }
};
if (Prototype.Browser.MobileSafari)
  Prototype.BrowserFeatures.SpecificElementExtensions = false;
/* Based on Alex Arnell's inheritance implementation. */
var Class = (function() {
  
  // Some versions of JScript fail to enumerate over properties, names of which 
  // correspond to non-enumerable properties in the prototype chain
  var IS_DONTENUM_BUGGY = (function(){
    for (var p in { toString: 1 }) {
      // check actual property name, so that it works with augmented Object.prototype
      if (p === 'toString') return false;
    }
    return true;
  })();
  
  function subclass() {};
  function create() {
    var parent = null, properties = $A(arguments);
    if (Object.isFunction(properties[0]))
      parent = properties.shift();
    function klass() {
      this.initialize.apply(this, arguments);
    }
    Object.extend(klass, Class.Methods);
    klass.superclass = parent;
    klass.subclasses = [];
    if (parent) {
      subclass.prototype = parent.prototype;
      klass.prototype = new subclass;
      parent.subclasses.push(klass);
    }
    for (var i = 0, length = properties.length; i < length; i++)
      klass.addMethods(properties[i]);
    if (!klass.prototype.initialize)
      klass.prototype.initialize = Prototype.emptyFunction;
    klass.prototype.constructor = klass;
    return klass;
  }
  function addMethods(source) {
    var ancestor   = this.superclass && this.superclass.prototype,
        properties = Object.keys(source);
    // IE6 doesn't enumerate `toString` and `valueOf` (among other built-in `Object.prototype`) properties,
    // Force copy if they're not Object.prototype ones.
    // Do not copy other Object.prototype.* for performance reasons
    if (IS_DONTENUM_BUGGY) {
      if (source.toString != Object.prototype.toString)
        properties.push("toString");
      if (source.valueOf != Object.prototype.valueOf)
        properties.push("valueOf");
    }
    for (var i = 0, length = properties.length; i < length; i++) {
      var property = properties[i], value = source[property];
      if (ancestor && Object.isFunction(value) &&
          value.argumentNames()[0] == "$super") {
        var method = value;
        value = (function(m) {
          return function() { return ancestor[m].apply(this, arguments); };
        })(property).wrap(method);
        
        // We used to use `bind` to ensure that `toString` and `valueOf`
        // methods were called in the proper context, but now that we're 
        // relying on native bind and/or an existing polyfill, we can't rely
        // on the nuanced behavior of whatever `bind` implementation is on
        // the page.
        //
        // MDC's polyfill, for instance, doesn't like binding functions that
        // haven't got a `prototype` property defined.
        value.valueOf = (function(method) {
          return function() { return method.valueOf.call(method); };
        })(method);
        
        value.toString = (function(method) {
          return function() { return method.toString.call(method); };
        })(method);
      }
      this.prototype[property] = value;
    }
    return this;
  }
  return {
    create: create,
    Methods: {
      addMethods: addMethods
    }
  };
})();
(function() {
  var _toString = Object.prototype.toString,
      _hasOwnProperty = Object.prototype.hasOwnProperty,
      NULL_TYPE = 'Null',
      UNDEFINED_TYPE = 'Undefined',
      BOOLEAN_TYPE = 'Boolean',
      NUMBER_TYPE = 'Number',
      STRING_TYPE = 'String',
      OBJECT_TYPE = 'Object',
      FUNCTION_CLASS = '[object Function]',
      BOOLEAN_CLASS = '[object Boolean]',
      NUMBER_CLASS = '[object Number]',
      STRING_CLASS = '[object String]',
      ARRAY_CLASS = '[object Array]',
      DATE_CLASS = '[object Date]',
      NATIVE_JSON_STRINGIFY_SUPPORT = window.JSON &&
        typeof JSON.stringify === 'function' &&
        JSON.stringify(0) === '0' &&
        typeof JSON.stringify(Prototype.K) === 'undefined';
        
  
  
  var DONT_ENUMS = ['toString', 'toLocaleString', 'valueOf',
   'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];
  
  // Some versions of JScript fail to enumerate over properties, names of which 
  // correspond to non-enumerable properties in the prototype chain
  var IS_DONTENUM_BUGGY = (function(){
    for (var p in { toString: 1 }) {
      // check actual property name, so that it works with augmented Object.prototype
      if (p === 'toString') return false;
    }
    return true;
  })();
        
  function Type(o) {
    switch(o) {
      case null: return NULL_TYPE;
      case (void 0): return UNDEFINED_TYPE;
    }
    var type = typeof o;
    switch(type) {
      case 'boolean': return BOOLEAN_TYPE;
      case 'number':  return NUMBER_TYPE;
      case 'string':  return STRING_TYPE;
    }
    return OBJECT_TYPE;
  }
  
  function extend(destination, source) {
    for (var property in source)
      destination[property] = source[property];
    return destination;
  }
  function inspect(object) {
    try {
      if (isUndefined(object)) return 'undefined';
      if (object === null) return 'null';
      return object.inspect ? object.inspect() : String(object);
    } catch (e) {
      if (e instanceof RangeError) return '...';
      throw e;
    }
  }
  function toJSON(value) {
    return Str('', { '': value }, []);
  }
  function Str(key, holder, stack) {
    var value = holder[key];
    if (Type(value) === OBJECT_TYPE && typeof value.toJSON === 'function') {
      value = value.toJSON(key);
    }
    var _class = _toString.call(value);
    switch (_class) {
      case NUMBER_CLASS:
      case BOOLEAN_CLASS:
      case STRING_CLASS:
        value = value.valueOf();
    }
    switch (value) {
      case null: return 'null';
      case true: return 'true';
      case false: return 'false';
    }
    var type = typeof value;
    switch (type) {
      case 'string':
        return value.inspect(true);
      case 'number':
        return isFinite(value) ? String(value) : 'null';
      case 'object':
        for (var i = 0, length = stack.length; i < length; i++) {
          if (stack[i] === value) {
            throw new TypeError("Cyclic reference to '" + value + "' in object");
          }
        }
        stack.push(value);
        var partial = [];
        if (_class === ARRAY_CLASS) {
          for (var i = 0, length = value.length; i < length; i++) {
            var str = Str(i, value, stack);
            partial.push(typeof str === 'undefined' ? 'null' : str);
          }
          partial = '[' + partial.join(',') + ']';
        } else {
          var keys = Object.keys(value);
          for (var i = 0, length = keys.length; i < length; i++) {
            var key = keys[i], str = Str(key, value, stack);
            if (typeof str !== "undefined") {
               partial.push(key.inspect(true)+ ':' + str);
             }
          }
          partial = '{' + partial.join(',') + '}';
        }
        stack.pop();
        return partial;
    }
  }
  function stringify(object) {
    return JSON.stringify(object);
  }
  function toQueryString(object) {
    return $H(object).toQueryString();
  }
  function toHTML(object) {
    return object && object.toHTML ? object.toHTML() : String.interpret(object);
  }
  function keys(object) {
    if (Type(object) !== OBJECT_TYPE) { throw new TypeError(); }
    var results = [];
    for (var property in object) {
      if (_hasOwnProperty.call(object, property))
        results.push(property);
    }
    
    // Account for the DontEnum properties in affected browsers.
    if (IS_DONTENUM_BUGGY) {
      for (var i = 0; property = DONT_ENUMS[i]; i++) {
        if (_hasOwnProperty.call(object, property))
          results.push(property);
      }
    }
    
    return results;
  }
  function values(object) {
    var results = [];
    for (var property in object)
      results.push(object[property]);
    return results;
  }
  function clone(object) {
    return extend({ }, object);
  }
  function isElement(object) {
    return !!(object && object.nodeType == 1);
  }
  function isArray(object) {
    return _toString.call(object) === ARRAY_CLASS;
  }
  
  var hasNativeIsArray = (typeof Array.isArray == 'function') 
    && Array.isArray([]) && !Array.isArray({});
  
  if (hasNativeIsArray) {
    isArray = Array.isArray;
  }
  function isHash(object) {
    return object instanceof Hash;
  }
  function isFunction(object) {
    return _toString.call(object) === FUNCTION_CLASS;
  }
  function isString(object) {
    return _toString.call(object) === STRING_CLASS;
  }
  function isNumber(object) {
    return _toString.call(object) === NUMBER_CLASS;
  }
  
  function isDate(object) {
    return _toString.call(object) === DATE_CLASS;
  }
  function isUndefined(object) {
    return typeof object === "undefined";
  }
  extend(Object, {
    extend:        extend,
    inspect:       inspect,
    toJSON:        NATIVE_JSON_STRINGIFY_SUPPORT ? stringify : toJSON,
    toQueryString: toQueryString,
    toHTML:        toHTML,
    keys:          Object.keys || keys,
    values:        values,
    clone:         clone,
    isElement:     isElement,
    isArray:       isArray,
    isHash:        isHash,
    isFunction:    isFunction,
    isString:      isString,
    isNumber:      isNumber,
    isDate:        isDate,
    isUndefined:   isUndefined
  });
})();
Object.extend(Function.prototype, (function() {
  var slice = Array.prototype.slice;
  function update(array, args) {
    var arrayLength = array.length, length = args.length;
    while (length--) array[arrayLength + length] = args[length];
    return array;
  }
  function merge(array, args) {
    array = slice.call(array, 0);
    return update(array, args);
  }
  function argumentNames() {
    var names = this.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1]
      .replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, '')
      .replace(/\s+/g, '').split(',');
    return names.length == 1 && !names[0] ? [] : names;
  }
  function bind(context) {
    if (arguments.length < 2 && Object.isUndefined(arguments[0]))
      return this;
    if (!Object.isFunction(this))
      throw new TypeError("The object is not callable.");
      
    var nop = function() {};
    var __method = this, args = slice.call(arguments, 1);
    
    var bound = function() {
      var a = merge(args, arguments);
      // Ignore the supplied context when the bound function is called with
      // the "new" keyword.
      var c = this instanceof bound ? this : context;
      return __method.apply(c, a);
    };
        
    nop.prototype   = this.prototype;
    bound.prototype = new nop();
    return bound;
  }
  function bindAsEventListener(context) {
    var __method = this, args = slice.call(arguments, 1);
    return function(event) {
      var a = update([event || window.event], args);
      return __method.apply(context, a);
    }
  }
  function curry() {
    if (!arguments.length) return this;
    var __method = this, args = slice.call(arguments, 0);
    return function() {
      var a = merge(args, arguments);
      return __method.apply(this, a);
    }
  }
  function delay(timeout) {
    var __method = this, args = slice.call(arguments, 1);
    timeout = timeout * 1000;
    return window.setTimeout(function() {
      return __method.apply(__method, args);
    }, timeout);
  }
  function defer() {
    var args = update([0.01], arguments);
    return this.delay.apply(this, args);
  }
  function wrap(wrapper) {
    var __method = this;
    return function() {
      var a = update([__method.bind(this)], arguments);
      return wrapper.apply(this, a);
    }
  }
  function methodize() {
    if (this._methodized) return this._methodized;
    var __method = this;
    return this._methodized = function() {
      var a = update([this], arguments);
      return __method.apply(null, a);
    };
  }
  
  var extensions = {
    argumentNames:       argumentNames,
    bindAsEventListener: bindAsEventListener,
    curry:               curry,
    delay:               delay,
    defer:               defer,
    wrap:                wrap,
    methodize:           methodize
  };
  
  if (!Function.prototype.bind)
    extensions.bind = bind;
  return extensions;
})());
(function(proto) {
  
  
  function toISOString() {
    return this.getUTCFullYear() + '-' +
      (this.getUTCMonth() + 1).toPaddedString(2) + '-' +
      this.getUTCDate().toPaddedString(2) + 'T' +
      this.getUTCHours().toPaddedString(2) + ':' +
      this.getUTCMinutes().toPaddedString(2) + ':' +
      this.getUTCSeconds().toPaddedString(2) + 'Z';
  }
  
  function toJSON() {
    return this.toISOString();
  }
  
  if (!proto.toISOString) proto.toISOString = toISOString;
  if (!proto.toJSON) proto.toJSON = toJSON;
  
})(Date.prototype);
RegExp.prototype.match = RegExp.prototype.test;
RegExp.escape = function(str) {
  return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
};
var PeriodicalExecuter = Class.create({
  initialize: function(callback, frequency) {
    this.callback = callback;
    this.frequency = frequency;
    this.currentlyExecuting = false;
    this.registerCallback();
  },
  registerCallback: function() {
    this.timer = setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
  },
  execute: function() {
    this.callback(this);
  },
  stop: function() {
    if (!this.timer) return;
    clearInterval(this.timer);
    this.timer = null;
  },
  onTimerEvent: function() {
    if (!this.currentlyExecuting) {
      // IE doesn't support `finally` statements unless all errors are caught.
      // We mimic the behaviour of `finally` statements by duplicating code
      // that would belong in it. First at the bottom of the `try` statement
      // (for errorless cases). Secondly, inside a `catch` statement which
      // rethrows any caught errors.
      try {
        this.currentlyExecuting = true;
        this.execute();
        this.currentlyExecuting = false;
      } catch(e) {
        this.currentlyExecuting = false;
        throw e;
      }
    }
  }
});
Object.extend(String, {
  interpret: function(value) {
    return value == null ? '' : String(value);
  },
  specialChar: {
    '\b': '\\b',
    '\t': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '\\': '\\\\'
  }
});
Object.extend(String.prototype, (function() {
  var NATIVE_JSON_PARSE_SUPPORT = window.JSON &&
    typeof JSON.parse === 'function' &&
    JSON.parse('{"test": true}').test;
  function prepareReplacement(replacement) {
    if (Object.isFunction(replacement)) return replacement;
    var template = new Template(replacement);
    return function(match) { return template.evaluate(match) };
  }
  function gsub(pattern, replacement) {
    var result = '', source = this, match;
    replacement = prepareReplacement(replacement);
    if (Object.isString(pattern))
      pattern = RegExp.escape(pattern);
    if (!(pattern.length || pattern.source)) {
      replacement = replacement('');
      return replacement + source.split('').join(replacement) + replacement;
    }
    while (source.length > 0) {
      match = source.match(pattern);
      if (match && match[0].length > 0) {
        result += source.slice(0, match.index);
        result += String.interpret(replacement(match));
        source  = source.slice(match.index + match[0].length);
      } else {
        result += source, source = '';
      }
    }
    return result;
  }
  function sub(pattern, replacement, count) {
    replacement = prepareReplacement(replacement);
    count = Object.isUndefined(count) ? 1 : count;
    return this.gsub(pattern, function(match) {
      if (--count < 0) return match[0];
      return replacement(match);
    });
  }
  function scan(pattern, iterator) {
    this.gsub(pattern, iterator);
    return String(this);
  }
  function truncate(length, truncation) {
    length = length || 30;
    truncation = Object.isUndefined(truncation) ? '...' : truncation;
    return this.length > length ?
      this.slice(0, length - truncation.length) + truncation : String(this);
  }
  function strip() {
    return this.replace(/^\s+/, '').replace(/\s+$/, '');
  }
  function stripTags() {
    return this.replace(/<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?>|<\/\w+>/gi, '');
  }
  function stripScripts() {
    return this.replace(new RegExp(Prototype.ScriptFragment, 'img'), '');
  }
  function extractScripts() {
    var matchAll = new RegExp(Prototype.ScriptFragment, 'img'),
        matchOne = new RegExp(Prototype.ScriptFragment, 'im');
    return (this.match(matchAll) || []).map(function(scriptTag) {
      return (scriptTag.match(matchOne) || ['', ''])[1];
    });
  }
  function evalScripts() {
    return this.extractScripts().map(function(script) { return eval(script); });
  }
  function escapeHTML() {
    return this.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
  }
  function unescapeHTML() {
    // Warning: In 1.7 String#unescapeHTML will no longer call String#stripTags.
    return this.stripTags().replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&');
  }
  function toQueryParams(separator) {
    var match = this.strip().match(/([^?#]*)(#.*)?$/);
    if (!match) return { };
    return match[1].split(separator || '&').inject({ }, function(hash, pair) {
      if ((pair = pair.split('='))[0]) {
        var key = decodeURIComponent(pair.shift()),
            value = pair.length > 1 ? pair.join('=') : pair[0];
        if (value != undefined) {
          value = value.gsub('+', ' ');
          value = decodeURIComponent(value);
        }
        if (key in hash) {
          if (!Object.isArray(hash[key])) hash[key] = [hash[key]];
          hash[key].push(value);
        }
        else hash[key] = value;
      }
      return hash;
    });
  }
  function toArray() {
    return this.split('');
  }
  function succ() {
    return this.slice(0, this.length - 1) +
      String.fromCharCode(this.charCodeAt(this.length - 1) + 1);
  }
  function times(count) {
    return count < 1 ? '' : new Array(count + 1).join(this);
  }
  function camelize() {
    return this.replace(/-+(.)?/g, function(match, chr) {
      return chr ? chr.toUpperCase() : '';
    });
  }
  function capitalize() {
    return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();
  }
  function underscore() {
    return this.replace(/::/g, '/')
               .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
               .replace(/([a-z\d])([A-Z])/g, '$1_$2')
               .replace(/-/g, '_')
               .toLowerCase();
  }
  function dasherize() {
    return this.replace(/_/g, '-');
  }
  function inspect(useDoubleQuotes) {
    var escapedString = this.replace(/[\x00-\x1f\\]/g, function(character) {
      if (character in String.specialChar) {
        return String.specialChar[character];
      }
      return '\\u00' + character.charCodeAt().toPaddedString(2, 16);
    });
    if (useDoubleQuotes) return '"' + escapedString.replace(/"/g, '\\"') + '"';
    return "'" + escapedString.replace(/'/g, '\\\'') + "'";
  }
  function unfilterJSON(filter) {
    return this.replace(filter || Prototype.JSONFilter, '$1');
  }
  function isJSON() {
    var str = this;
    if (str.blank()) return false;
    str = str.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@');
    str = str.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']');
    str = str.replace(/(?:^|:|,)(?:\s*\[)+/g, '');
    return (/^[\],:{}\s]*$/).test(str);
  }
  function evalJSON(sanitize) {
    var json = this.unfilterJSON(),
        cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    if (cx.test(json)) {
      json = json.replace(cx, function (a) {
        return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      });
    }
    try {
      if (!sanitize || json.isJSON()) return eval('(' + json + ')');
    } catch (e) { }
    throw new SyntaxError('Badly formed JSON string: ' + this.inspect());
  }
  
  function parseJSON() {
    var json = this.unfilterJSON();
    return JSON.parse(json);
  }
  function include(pattern) {
    return this.indexOf(pattern) !== -1;
  }
  function startsWith(pattern, position) {
    position = Object.isNumber(position) ? position : 0;
    // We use `lastIndexOf` instead of `indexOf` to avoid tying execution
    // time to string length when string doesn't start with pattern.
    return this.lastIndexOf(pattern, position) === position;
  }
  function endsWith(pattern, position) {
    pattern = String(pattern);
    position = Object.isNumber(position) ? position : this.length;
    if (position < 0) position = 0;
    if (position > this.length) position = this.length;
    var d = position - pattern.length;
    // We use `indexOf` instead of `lastIndexOf` to avoid tying execution
    // time to string length when string doesn't end with pattern.
    return d >= 0 && this.indexOf(pattern, d) === d;
  }
  function empty() {
    return this == '';
  }
  function blank() {
    return /^\s*$/.test(this);
  }
  function interpolate(object, pattern) {
    return new Template(this, pattern).evaluate(object);
  }
  return {
    gsub:           gsub,
    sub:            sub,
    scan:           scan,
    truncate:       truncate,
    // Firefox 3.5+ supports String.prototype.trim
    // (`trim` is ~ 5x faster than `strip` in FF3.5)
    strip:          String.prototype.trim || strip,
    stripTags:      stripTags,
    stripScripts:   stripScripts,
    extractScripts: extractScripts,
    evalScripts:    evalScripts,
    escapeHTML:     escapeHTML,
    unescapeHTML:   unescapeHTML,
    toQueryParams:  toQueryParams,
    parseQuery:     toQueryParams,
    toArray:        toArray,
    succ:           succ,
    times:          times,
    camelize:       camelize,
    capitalize:     capitalize,
    underscore:     underscore,
    dasherize:      dasherize,
    inspect:        inspect,
    unfilterJSON:   unfilterJSON,
    isJSON:         isJSON,
    evalJSON:       NATIVE_JSON_PARSE_SUPPORT ? parseJSON : evalJSON,
    //ECMA 6 supports contains(), if it exists map include() to contains()
    include:        String.prototype.contains || include,
    // Firefox 18+ supports String.prototype.startsWith, String.prototype.endsWith
    startsWith:     String.prototype.startsWith || startsWith,
    endsWith:       String.prototype.endsWith || endsWith,
    empty:          empty,
    blank:          blank,
    interpolate:    interpolate
  };
})());
var Template = Class.create({
  initialize: function(template, pattern) {
    this.template = template.toString();
    this.pattern = pattern || Template.Pattern;
  },
  evaluate: function(object) {
    if (object && Object.isFunction(object.toTemplateReplacements))
      object = object.toTemplateReplacements();
    return this.template.gsub(this.pattern, function(match) {
      if (object == null) return (match[1] + '');
      var before = match[1] || '';
      if (before == '\\') return match[2];
      var ctx = object, expr = match[3],
          pattern = /^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;
          
      match = pattern.exec(expr);
      if (match == null) return before;
      while (match != null) {
        var comp = match[1].startsWith('[') ? match[2].replace(/\\\\]/g, ']') : match[1];
        ctx = ctx[comp];
        if (null == ctx || '' == match[3]) break;
        expr = expr.substring('[' == match[3] ? match[1].length : match[0].length);
        match = pattern.exec(expr);
      }
      return before + String.interpret(ctx);
    });
  }
});
Template.Pattern = /(^|.|\r|\n)(#\{(.*?)\})/;
var $break = { };
var Enumerable = (function() {
  function each(iterator, context) {
    try {
      this._each(iterator, context);
    } catch (e) {
      if (e != $break) throw e;
    }
    return this;
  }
  function eachSlice(number, iterator, context) {
    var index = -number, slices = [], array = this.toArray();
    if (number < 1) return array;
    while ((index += number) < array.length)
      slices.push(array.slice(index, index+number));
    return slices.collect(iterator, context);
  }
  function all(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = true;
    this.each(function(value, index) {
      if (!iterator.call(context, value, index, this)) {
          result = false;
          throw $break;
      }
    }, this);
    return result;
  }
  function any(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = false;
    this.each(function(value, index) {
      if (result = !!iterator.call(context, value, index, this))
        throw $break;
    }, this);
    return result;
  }
  function collect(iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];
    this.each(function(value, index) {
      results.push(iterator.call(context, value, index, this));
    }, this);
    return results;
  }
  function detect(iterator, context) {
    var result;
    this.each(function(value, index) {
      if (iterator.call(context, value, index, this)) {
        result = value;
        throw $break;
      }
    }, this);
    return result;
  }
  function findAll(iterator, context) {
    var results = [];
    this.each(function(value, index) {
      if (iterator.call(context, value, index, this))
        results.push(value);
    }, this);
    return results;
  }
  function grep(filter, iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];
    if (Object.isString(filter))
      filter = new RegExp(RegExp.escape(filter));
    this.each(function(value, index) {
      if (filter.match(value))
        results.push(iterator.call(context, value, index, this));
    }, this);
    return results;
  }
  function include(object) {
    if (Object.isFunction(this.indexOf) && this.indexOf(object) != -1)
      return true;
    var found = false;
    this.each(function(value) {
      if (value == object) {
        found = true;
        throw $break;
      }
    });
    return found;
  }
  function inGroupsOf(number, fillWith) {
    fillWith = Object.isUndefined(fillWith) ? null : fillWith;
    return this.eachSlice(number, function(slice) {
      while(slice.length < number) slice.push(fillWith);
      return slice;
    });
  }
  function inject(memo, iterator, context) {
    this.each(function(value, index) {
      memo = iterator.call(context, memo, value, index, this);
    }, this);
    return memo;
  }
  function invoke(method) {
    var args = $A(arguments).slice(1);
    return this.map(function(value) {
      return value[method].apply(value, args);
    });
  }
  function max(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function(value, index) {
      value = iterator.call(context, value, index, this);
      if (result == null || value >= result)
        result = value;
    }, this);
    return result;
  }
  function min(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function(value, index) {
      value = iterator.call(context, value, index, this);
      if (result == null || value < result)
        result = value;
    }, this);
    return result;
  }
  function partition(iterator, context) {
    iterator = iterator || Prototype.K;
    var trues = [], falses = [];
    this.each(function(value, index) {
      (iterator.call(context, value, index, this) ?
        trues : falses).push(value);
    }, this);
    return [trues, falses];
  }
  function pluck(property) {
    var results = [];
    this.each(function(value) {
      results.push(value[property]);
    });
    return results;
  }
  function reject(iterator, context) {
    var results = [];
    this.each(function(value, index) {
      if (!iterator.call(context, value, index, this))
        results.push(value);
    }, this);
    return results;
  }
  function sortBy(iterator, context) {
    return this.map(function(value, index) {
      return {
        value: value,
        criteria: iterator.call(context, value, index, this)
      };
    }, this).sort(function(left, right) {
      var a = left.criteria, b = right.criteria;
      return a < b ? -1 : a > b ? 1 : 0;
    }).pluck('value');
  }
  function toArray() {
    return this.map();
  }
  function zip() {
    var iterator = Prototype.K, args = $A(arguments);
    if (Object.isFunction(args.last()))
      iterator = args.pop();
    var collections = [this].concat(args).map($A);
    return this.map(function(value, index) {
      return iterator(collections.pluck(index));
    });
  }
  function size() {
    return this.toArray().length;
  }
  function inspect() {
    return '#<Enumerable:' + this.toArray().inspect() + '>';
  }
  return {
    each:       each,
    eachSlice:  eachSlice,
    all:        all,
    every:      all,
    any:        any,
    some:       any,
    collect:    collect,
    map:        collect,
    detect:     detect,
    findAll:    findAll,
    select:     findAll,
    filter:     findAll,
    grep:       grep,
    include:    include,
    member:     include,
    inGroupsOf: inGroupsOf,
    inject:     inject,
    invoke:     invoke,
    max:        max,
    min:        min,
    partition:  partition,
    pluck:      pluck,
    reject:     reject,
    sortBy:     sortBy,
    toArray:    toArray,
    entries:    toArray,
    zip:        zip,
    size:       size,
    inspect:    inspect,
    find:       detect
  };
})();
function $A(iterable) {
  if (!iterable) return [];
  // Safari <2.0.4 crashes when accessing property of a node list with property accessor.
  // It nevertheless works fine with `in` operator, which is why we use it here
  if ('toArray' in Object(iterable)) return iterable.toArray();
  var length = iterable.length || 0, results = new Array(length);
  while (length--) results[length] = iterable[length];
  return results;
}
function $w(string) {
  if (!Object.isString(string)) return [];
  string = string.strip();
  return string ? string.split(/\s+/) : [];
}
Array.from = $A;
(function() {
  var arrayProto = Array.prototype,
      slice = arrayProto.slice,
      _each = arrayProto.forEach,
      _entries = arrayProto.entries; // use native browser JS 1.6 implementation if available
  function each(iterator, context) {
    for (var i = 0, length = this.length >>> 0; i < length; i++) {
      if (i in this) iterator.call(context, this[i], i, this);
    }
  }
  if (!_each) _each = each;
  
  function clear() {
    this.length = 0;
    return this;
  }
  function first() {
    return this[0];
  }
  function last() {
    return this[this.length - 1];
  }
  function compact() {
    return this.select(function(value) {
      return value != null;
    });
  }
  function flatten() {
    return this.inject([], function(array, value) {
      if (Object.isArray(value))
        return array.concat(value.flatten());
      array.push(value);
      return array;
    });
  }
  function without() {
    var values = slice.call(arguments, 0);
    return this.select(function(value) {
      return !values.include(value);
    });
  }
  function reverse(inline) {
    return (inline === false ? this.toArray() : this)._reverse();
  }
  function uniq(sorted) {
    return this.inject([], function(array, value, index) {
      if (0 == index || (sorted ? array.last() != value : !array.include(value)))
        array.push(value);
      return array;
    });
  }
  function intersect(array) {
    return this.uniq().findAll(function(item) {
      return array.indexOf(item) !== -1;
    });
  }
  function clone() {
    return slice.call(this, 0);
  }
  function size() {
    return this.length;
  }
  function inspect() {
    return '[' + this.map(Object.inspect).join(', ') + ']';
  }
  function indexOf(item, i) {
    if (this == null) throw new TypeError();
    
    var array = Object(this), length = array.length >>> 0;
    if (length === 0) return -1;
    
    // The rules for the `fromIndex` argument are tricky. Let's follow the
    // spec line-by-line.
    i = Number(i);
    if (isNaN(i)) {
      i = 0;
    } else if (i !== 0 && isFinite(i)) {
      // Equivalent to ES5's `ToInteger` operation.
      i = (i > 0 ? 1 : -1) * Math.floor(Math.abs(i));
    }
    
    // If the search index is greater than the length of the array,
    // return -1.
    if (i > length) return -1;
    
    // If the search index is negative, take its absolute value, subtract it
    // from the length, and make that the new search index. If it's still
    // negative, make it 0.
    var k = i >= 0 ? i : Math.max(length - Math.abs(i), 0);
    for (; k < length; k++)
      if (k in array && array[k] === item) return k;
    return -1;
  }
  
  function lastIndexOf(item, i) {
    if (this == null) throw new TypeError();
    
    var array = Object(this), length = array.length >>> 0;
    if (length === 0) return -1;
    
    // The rules for the `fromIndex` argument are tricky. Let's follow the
    // spec line-by-line.
    if (!Object.isUndefined(i)) {
      i = Number(i);
      if (isNaN(i)) {
        i = 0;
      } else if (i !== 0 && isFinite(i)) {
        // Equivalent to ES5's `ToInteger` operation.
        i = (i > 0 ? 1 : -1) * Math.floor(Math.abs(i));
      }
    } else {
      i = length;
    }
    
    // If fromIndex is positive, clamp it to the last index in the array;
    // if it's negative, subtract its absolute value from the array's length.
    var k = i >= 0 ? Math.min(i, length - 1) :
     length - Math.abs(i);
    // (If fromIndex is still negative, it'll bypass this loop altogether and
    // return -1.)
    for (; k >= 0; k--)
      if (k in array && array[k] === item) return k;
    return -1;
  }
  // Replaces a built-in function. No PDoc needed.
  //
  // Used instead of the broken version of Array#concat in some versions of
  // Opera. Made to be ES5-compliant.
  function concat(_) {
    var array = [], items = slice.call(arguments, 0), item, n = 0;
    items.unshift(this);
    for (var i = 0, length = items.length; i < length; i++) {
      item = items[i];
      if (Object.isArray(item) && !('callee' in item)) {
        for (var j = 0, arrayLength = item.length; j < arrayLength; j++) {
          if (j in item) array[n] = item[j];
          n++;
        }
      } else {
        array[n++] = item;
      }
    }
    array.length = n;
    return array;
  }
  
  // Certain ES5 array methods have the same names as Prototype array methods
  // and perform the same functions.
  //
  // Prototype's implementations of these methods differ from the ES5 spec in
  // the way a missing iterator function is handled. Prototype uses 
  // `Prototype.K` as a default iterator, while ES5 specifies that a
  // `TypeError` must be thrown. Implementing the ES5 spec completely would 
  // break backward compatibility and would force users to pass `Prototype.K`
  // manually. 
  //
  // Instead, if native versions of these methods exist, we wrap the existing
  // methods with our own behavior. This has very little performance impact.
  // It violates the spec by suppressing `TypeError`s for certain methods,
  // but that's an acceptable trade-off.
  
  function wrapNative(method) {
    return function() {
      if (arguments.length === 0) {
        // No iterator was given. Instead of throwing a `TypeError`, use
        // `Prototype.K` as the default iterator.
        return method.call(this, Prototype.K);
      } else if (arguments[0] === undefined) {
        // Same as above.
        var args = slice.call(arguments, 1);
        args.unshift(Prototype.K);
        return method.apply(this, args);
      } else {
        // Pass straight through to the native method.
        return method.apply(this, arguments);
      }
    };
  }
  
  // Note that #map, #filter, #some, and #every take some extra steps for
  // ES5 compliance: the context in which they're called is coerced to an
  // object, and that object's `length` property is coerced to a finite
  // integer. This makes it easier to use the methods as generics.
  //
  // This means that they behave a little differently from other methods in
  // `Enumerable`/`Array` that don't collide with ES5, but that's OK.
  
  function map(iterator) {
    if (this == null) throw new TypeError();
    iterator = iterator || Prototype.K;
    var object = Object(this);
    var results = [], context = arguments[1], n = 0;
    for (var i = 0, length = object.length >>> 0; i < length; i++) {
      if (i in object) {
        results[n] = iterator.call(context, object[i], i, object);
      }
      n++;
    }
    results.length = n;
    return results;
  }
  
  if (arrayProto.map) {
    map = wrapNative(Array.prototype.map);
  }
  
  function filter(iterator) {
    if (this == null || !Object.isFunction(iterator))
      throw new TypeError();
    
    var object = Object(this);
    var results = [], context = arguments[1], value;
    for (var i = 0, length = object.length >>> 0; i < length; i++) {
      if (i in object) {
        value = object[i];
        if (iterator.call(context, value, i, object)) {
          results.push(value);
        }
      }
    }
    return results;
  }
  if (arrayProto.filter) {
    // `Array#filter` requires an iterator by nature, so we don't need to
    // wrap it.
    filter = Array.prototype.filter;
  }
  function some(iterator) {
    if (this == null) throw new TypeError();
    iterator = iterator || Prototype.K;
    var context = arguments[1];
    var object = Object(this);
    for (var i = 0, length = object.length >>> 0; i < length; i++) {
      if (i in object && iterator.call(context, object[i], i, object)) {
        return true;
      }
    }
      
    return false;
  }
  
  if (arrayProto.some) {
    var some = wrapNative(Array.prototype.some);
  }
  
  
  function every(iterator) {
    if (this == null) throw new TypeError();
    iterator = iterator || Prototype.K;
    var context = arguments[1];
    var object = Object(this);
    for (var i = 0, length = object.length >>> 0; i < length; i++) {
      if (i in object && !iterator.call(context, object[i], i, object)) {
        return false;
      }
    }
      
    return true;
  }
  
  if (arrayProto.every) {
    var every = wrapNative(Array.prototype.every);
  }
  
  function entries() {
    if (this == null) throw new TypeError();
    return this.map(function(i,index) {
        return [index,i];
    });
  }
  // Prototype's `Array#inject` behaves similarly to ES5's `Array#reduce`.
  var _reduce = arrayProto.reduce;
  function inject(memo, iterator) {
    iterator = iterator || Prototype.K;
    var context = arguments[2];
    // The iterator must be bound, as `Array#reduce` always binds to
    // `undefined`.
    return _reduce.call(this, iterator.bind(context), memo);
  }
  
  // Piggyback on `Array#reduce` if it exists; otherwise fall back to the
  // standard `Enumerable.inject`.
  if (!arrayProto.reduce) {
    var inject = Enumerable.inject;
  }
  Object.extend(arrayProto, Enumerable);
  if (!arrayProto._reverse)
    arrayProto._reverse = arrayProto.reverse;
  Object.extend(arrayProto, {
    _each:     _each,
    
    map:       map,
    collect:   map,
    select:    filter,
    filter:    filter,
    findAll:   filter,
    some:      some,
    any:       some,
    every:     every,
    all:       every,
    inject:    inject,
    
    clear:     clear,
    first:     first,
    last:      last,
    compact:   compact,
    flatten:   flatten,
    without:   without,
    reverse:   reverse,
    uniq:      uniq,
    intersect: intersect,
    clone:     clone,
    toArray:   clone,
    size:      size,
    inspect:   inspect,
    entries:   _entries || entries
  });
  // fix for opera
  var CONCAT_ARGUMENTS_BUGGY = (function() {
    return [].concat(arguments)[0][0] !== 1;
  })(1,2);
  if (CONCAT_ARGUMENTS_BUGGY) arrayProto.concat = concat;
  // Use native browser JS 1.6 implementations if available.
  if (!arrayProto.indexOf) arrayProto.indexOf = indexOf;
  if (!arrayProto.lastIndexOf) arrayProto.lastIndexOf = lastIndexOf;
})();
function $H(object) {
  return new Hash(object);
};
var Hash = Class.create(Enumerable, (function() {
  function initialize(object) {
    this._object = Object.isHash(object) ? object.toObject() : Object.clone(object);
  }
  // Docs for #each even though technically it's implemented by Enumerable
  // Our _internal_ each
  function _each(iterator, context) {
    var i = 0;
    for (var key in this._object) {
      var value = this._object[key], pair = [key, value];
      pair.key = key;
      pair.value = value;
      iterator.call(context, pair, i);
      i++;
    }
  }
  function set(key, value) {
    return this._object[key] = value;
  }
  function get(key) {
    // simulating poorly supported hasOwnProperty
    if (this._object[key] !== Object.prototype[key])
      return this._object[key];
  }
  function unset(key) {
    var value = this._object[key];
    delete this._object[key];
    return value;
  }
  function toObject() {
    return Object.clone(this._object);
  }
  
  
  function keys() {
    return this.pluck('key');
  }
  function values() {
    return this.pluck('value');
  }
  function index(value) {
    var match = this.detect(function(pair) {
      return pair.value === value;
    });
    return match && match.key;
  }
  function merge(object) {
    return this.clone().update(object);
  }
  function update(object) {
    return new Hash(object).inject(this, function(result, pair) {
      result.set(pair.key, pair.value);
      return result;
    });
  }
  // Private. No PDoc necessary.
  function toQueryPair(key, value) {
    if (Object.isUndefined(value)) return key;
    
    value = String.interpret(value);
    // Normalize newlines as \r\n because the HTML spec says newlines should
    // be encoded as CRLFs.
    value = value.gsub(/(\r)?\n/, '\r\n');
    value = encodeURIComponent(value);
    // Likewise, according to the spec, spaces should be '+' rather than
    // '%20'.
    value = value.gsub(/%20/, '+');
    return key + '=' + value;
  }
  function toQueryString() {
    return this.inject([], function(results, pair) {
      var key = encodeURIComponent(pair.key), values = pair.value;
      
      if (values && typeof values == 'object') {
        if (Object.isArray(values)) {
          // We used to use `Array#map` here to get the query pair for each
          // item in the array, but that caused test regressions once we
          // added the sparse array behavior for array iterator methods.
          // Changed to an ordinary `for` loop so that we can handle
          // `undefined` values ourselves rather than have them skipped.
          var queryValues = [];
          for (var i = 0, len = values.length, value; i < len; i++) {
            value = values[i];
            queryValues.push(toQueryPair(key, value));            
          }
          return results.concat(queryValues);
        }
      } else results.push(toQueryPair(key, values));
      return results;
    }).join('&');
  }
  function inspect() {
    return '#<Hash:{' + this.map(function(pair) {
      return pair.map(Object.inspect).join(': ');
    }).join(', ') + '}>';
  }
  function clone() {
    return new Hash(this);
  }
  return {
    initialize:             initialize,
    _each:                  _each,
    set:                    set,
    get:                    get,
    unset:                  unset,
    toObject:               toObject,
    toTemplateReplacements: toObject,
    keys:                   keys,
    values:                 values,
    index:                  index,
    merge:                  merge,
    update:                 update,
    toQueryString:          toQueryString,
    inspect:                inspect,
    toJSON:                 toObject,
    clone:                  clone
  };
})());
Hash.from = $H;
Object.extend(Number.prototype, (function() {
  function toColorPart() {
    return this.toPaddedString(2, 16);
  }
  function succ() {
    return this + 1;
  }
  function times(iterator, context) {
    $R(0, this, true).each(iterator, context);
    return this;
  }
  function toPaddedString(length, radix) {
    var string = this.toString(radix || 10);
    return '0'.times(length - string.length) + string;
  }
  function abs() {
    return Math.abs(this);
  }
  function round() {
    return Math.round(this);
  }
  function ceil() {
    return Math.ceil(this);
  }
  function floor() {
    return Math.floor(this);
  }
  return {
    toColorPart:    toColorPart,
    succ:           succ,
    times:          times,
    toPaddedString: toPaddedString,
    abs:            abs,
    round:          round,
    ceil:           ceil,
    floor:          floor
  };
})());
function $R(start, end, exclusive) {
  return new ObjectRange(start, end, exclusive);
}
var ObjectRange = Class.create(Enumerable, (function() {
  function initialize(start, end, exclusive) {
    this.start = start;
    this.end = end;
    this.exclusive = exclusive;
  }
  function _each(iterator, context) {
    var value = this.start, i;
    for (i = 0; this.include(value); i++) {
      iterator.call(context, value, i);
      value = value.succ();
    }
  }
  function include(value) {
    if (value < this.start)
      return false;
    if (this.exclusive)
      return value < this.end;
    return value <= this.end;
  }
  return {
    initialize: initialize,
    _each:      _each,
    include:    include
  };
})());
var Abstract = { };
var Try = {
  these: function() {
    var returnValue;
    for (var i = 0, length = arguments.length; i < length; i++) {
      var lambda = arguments[i];
      try {
        returnValue = lambda();
        break;
      } catch (e) { }
    }
    return returnValue;
  }
};
var Ajax = {
  getTransport: function() {
    return Try.these(
      function() {return new XMLHttpRequest()},
      function() {return new ActiveXObject('Msxml2.XMLHTTP')},
      function() {return new ActiveXObject('Microsoft.XMLHTTP')}
    ) || false;
  },
  activeRequestCount: 0
};
Ajax.Responders = {
  responders: [],
  _each: function(iterator, context) {
    this.responders._each(iterator, context);
  },
  register: function(responder) {
    if (!this.include(responder))
      this.responders.push(responder);
  },
  unregister: function(responder) {
    this.responders = this.responders.without(responder);
  },
  dispatch: function(callback, request, transport, json) {
    this.each(function(responder) {
      if (Object.isFunction(responder[callback])) {
        try {
          responder[callback].apply(responder, [request, transport, json]);
        } catch (e) { }
      }
    });
  }
};
Object.extend(Ajax.Responders, Enumerable);
Ajax.Responders.register({
  onCreate:   function() { Ajax.activeRequestCount++ },
  onComplete: function() { Ajax.activeRequestCount-- }
});
Ajax.Base = Class.create({
  initialize: function(options) {
    this.options = {
      method:       'post',
      asynchronous: true,
      contentType:  'application/x-www-form-urlencoded',
      encoding:     'UTF-8',
      parameters:   '',
      evalJSON:     true,
      evalJS:       true
    };
    Object.extend(this.options, options || { });
    this.options.method = this.options.method.toLowerCase();
    if (Object.isHash(this.options.parameters))
      this.options.parameters = this.options.parameters.toObject();
  }
});
Ajax.Request = Class.create(Ajax.Base, {
  _complete: false,
  initialize: function($super, url, options) {
    $super(options);
    this.transport = Ajax.getTransport();
    this.request(url);
  },
  request: function(url) {
    this.url = url;
    this.method = this.options.method;
    var params = Object.isString(this.options.parameters) ?
          this.options.parameters :
          Object.toQueryString(this.options.parameters);
    if (!['get', 'post'].include(this.method)) {
      // simulate other verbs over post
      params += (params ? '&' : '') + "_method=" + this.method;
      this.method = 'post';
    }
    if (params && this.method === 'get') {
      // when GET, append parameters to URL
      this.url += (this.url.include('?') ? '&' : '?') + params;
    }
    this.parameters = params.toQueryParams();
    try {
      var response = new Ajax.Response(this);
      if (this.options.onCreate) this.options.onCreate(response);
      Ajax.Responders.dispatch('onCreate', this, response);
      this.transport.open(this.method.toUpperCase(), this.url,
        this.options.asynchronous);
      if (this.options.asynchronous) this.respondToReadyState.bind(this).defer(1);
      this.transport.onreadystatechange = this.onStateChange.bind(this);
      this.setRequestHeaders();
      this.body = this.method == 'post' ? (this.options.postBody || params) : null;
      this.transport.send(this.body);
      /* Force Firefox to handle ready state 4 for synchronous requests */
      if (!this.options.asynchronous && this.transport.overrideMimeType)
        this.onStateChange();
    }
    catch (e) {
      this.dispatchException(e);
    }
  },
  onStateChange: function() {
    var readyState = this.transport.readyState;
    if (readyState > 1 && !((readyState == 4) && this._complete))
      this.respondToReadyState(this.transport.readyState);
  },
  setRequestHeaders: function() {
    var headers = {
      'X-Requested-With': 'XMLHttpRequest',
      'X-Prototype-Version': Prototype.Version,
      'Accept': 'text/javascript, text/html, application/xml, text/xml, */*'
    };
    if (this.method == 'post') {
      headers['Content-type'] = this.options.contentType +
        (this.options.encoding ? '; charset=' + this.options.encoding : '');
      /* Force "Connection: close" for older Mozilla browsers to work
       * around a bug where XMLHttpRequest sends an incorrect
       * Content-length header. See Mozilla Bugzilla #246651.
       */
      if (this.transport.overrideMimeType &&
          (navigator.userAgent.match(/Gecko\/(\d{4})/) || [0,2005])[1] < 2005)
            headers['Connection'] = 'close';
    }
    // user-defined headers
    if (typeof this.options.requestHeaders == 'object') {
      var extras = this.options.requestHeaders;
      if (Object.isFunction(extras.push))
        for (var i = 0, length = extras.length; i < length; i += 2)
          headers[extras[i]] = extras[i+1];
      else
        $H(extras).each(function(pair) { headers[pair.key] = pair.value });
    }
    // skip null or undefined values
    for (var name in headers)
      if (headers[name] != null)
        this.transport.setRequestHeader(name, headers[name]);
  },
  success: function() {
    var status = this.getStatus();
    return !status || (status >= 200 && status < 300) || status == 304;
  },
  getStatus: function() {
    try {
      // IE sometimes returns 1223 for a 204 response.
      if (this.transport.status === 1223) return 204;
      return this.transport.status || 0;
    } catch (e) { return 0 }
  },
  respondToReadyState: function(readyState) {
    var state = Ajax.Request.Events[readyState], response = new Ajax.Response(this);
    if (state == 'Complete') {
      try {
        this._complete = true;
        (this.options['on' + response.status]
         || this.options['on' + (this.success() ? 'Success' : 'Failure')]
         || Prototype.emptyFunction)(response, response.headerJSON);
      } catch (e) {
        this.dispatchException(e);
      }
      var contentType = response.getHeader('Content-type');
      if (this.options.evalJS == 'force'
          || (this.options.evalJS && this.isSameOrigin() && contentType
          && contentType.match(/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s*$/i)))
        this.evalResponse();
    }
    try {
      (this.options['on' + state] || Prototype.emptyFunction)(response, response.headerJSON);
      Ajax.Responders.dispatch('on' + state, this, response, response.headerJSON);
    } catch (e) {
      this.dispatchException(e);
    }
    if (state == 'Complete') {
      // avoid memory leak in MSIE: clean up
      this.transport.onreadystatechange = Prototype.emptyFunction;
    }
  },
  isSameOrigin: function() {
    var m = this.url.match(/^\s*https?:\/\/[^\/]*/);
    return !m || (m[0] == '#{protocol}//#{domain}#{port}'.interpolate({
      protocol: location.protocol,
      domain: document.domain,
      port: location.port ? ':' + location.port : ''
    }));
  },
  getHeader: function(name) {
    try {
      return this.transport.getResponseHeader(name) || null;
    } catch (e) { return null; }
  },
  evalResponse: function() {
    try {
      return eval((this.transport.responseText || '').unfilterJSON());
    } catch (e) {
      this.dispatchException(e);
    }
  },
  dispatchException: function(exception) {
    (this.options.onException || Prototype.emptyFunction)(this, exception);
    Ajax.Responders.dispatch('onException', this, exception);
  }
});
Ajax.Request.Events =
  ['Uninitialized', 'Loading', 'Loaded', 'Interactive', 'Complete'];
Ajax.Response = Class.create({
  // Don't document the constructor; should never be manually instantiated.
  initialize: function(request){
    this.request = request;
    var transport  = this.transport  = request.transport,
        readyState = this.readyState = transport.readyState;
    if ((readyState > 2 && !Prototype.Browser.IE) || readyState == 4) {
      this.status       = this.getStatus();
      this.statusText   = this.getStatusText();
      this.responseText = String.interpret(transport.responseText);
      this.headerJSON   = this._getHeaderJSON();
    }
    if (readyState == 4) {
      var xml = transport.responseXML;
      this.responseXML  = Object.isUndefined(xml) ? null : xml;
      this.responseJSON = this._getResponseJSON();
    }
  },
  status:      0,
  statusText: '',
  getStatus: Ajax.Request.prototype.getStatus,
  getStatusText: function() {
    try {
      return this.transport.statusText || '';
    } catch (e) { return '' }
  },
  getHeader: Ajax.Request.prototype.getHeader,
  getAllHeaders: function() {
    try {
      return this.getAllResponseHeaders();
    } catch (e) { return null }
  },
  getResponseHeader: function(name) {
    return this.transport.getResponseHeader(name);
  },
  getAllResponseHeaders: function() {
    return this.transport.getAllResponseHeaders();
  },
  _getHeaderJSON: function() {
    var json = this.getHeader('X-JSON');
    if (!json) return null;
    try {
      // Browsers expect HTTP headers to be ASCII and nothing else. Running
      // them through `decodeURIComponent` processes them with the page's
      // specified encoding.
      json = decodeURIComponent(escape(json));
    } catch(e) {
      // Except Chrome doesn't seem to need this, and calling
      // `decodeURIComponent` on text that's already in the proper encoding
      // will throw a `URIError`. The ugly solution is to assume that a
      // `URIError` raised here signifies that the text is, in fact, already 
      // in the correct encoding, and treat the failure as a good sign.
      //
      // This is ugly, but so too is sending extended characters in an HTTP
      // header with no spec to back you up.
    }
    
    try {
      return json.evalJSON(this.request.options.sanitizeJSON ||
        !this.request.isSameOrigin());
    } catch (e) {
      this.request.dispatchException(e);
    }
  },
  _getResponseJSON: function() {
    var options = this.request.options;
    if (!options.evalJSON || (options.evalJSON != 'force' &&
      !(this.getHeader('Content-type') || '').include('application/json')) ||
        this.responseText.blank())
          return null;
    try {
      return this.responseText.evalJSON(options.sanitizeJSON ||
        !this.request.isSameOrigin());
    } catch (e) {
      this.request.dispatchException(e);
    }
  }
});
Ajax.Updater = Class.create(Ajax.Request, {
  initialize: function($super, container, url, options) {
    this.container = {
      success: (container.success || container),
      failure: (container.failure || (container.success ? null : container))
    };
    options = Object.clone(options);
    var onComplete = options.onComplete;
    options.onComplete = (function(response, json) {
      this.updateContent(response.responseText);
      if (Object.isFunction(onComplete)) onComplete(response, json);
    }).bind(this);
    $super(url, options);
  },
  updateContent: function(responseText) {
    var receiver = this.container[this.success() ? 'success' : 'failure'],
        options = this.options;
    if (!options.evalScripts) responseText = responseText.stripScripts();
    if (receiver = $(receiver)) {
      if (options.insertion) {
        if (Object.isString(options.insertion)) {
          var insertion = { }; insertion[options.insertion] = responseText;
          receiver.insert(insertion);
        }
        else options.insertion(receiver, responseText);
      }
      else receiver.update(responseText);
    }
  }
});
Ajax.PeriodicalUpdater = Class.create(Ajax.Base, {
  initialize: function($super, container, url, options) {
    $super(options);
    this.onComplete = this.options.onComplete;
    this.frequency = (this.options.frequency || 2);
    this.decay = (this.options.decay || 1);
    this.updater = { };
    this.container = container;
    this.url = url;
    this.start();
  },
  start: function() {
    this.options.onComplete = this.updateComplete.bind(this);
    this.onTimerEvent();
  },
  stop: function() {
    this.updater.options.onComplete = undefined;
    clearTimeout(this.timer);
    (this.onComplete || Prototype.emptyFunction).apply(this, arguments);
  },
  updateComplete: function(response) {
    if (this.options.decay) {
      this.decay = (response.responseText == this.lastText ?
        this.decay * this.options.decay : 1);
      this.lastText = response.responseText;
    }
    this.timer = this.onTimerEvent.bind(this).delay(this.decay * this.frequency);
  },
  onTimerEvent: function() {
    this.updater = new Ajax.Updater(this.container, this.url, this.options);
  }
});
(function(GLOBAL) {
  
  var UNDEFINED;
  var SLICE = Array.prototype.slice;
  
  // Try to reuse the same created element as much as possible. We'll use
  // this DIV for capability checks (where possible) and for normalizing
  // HTML content.
  var DIV = document.createElement('div');
  
  function $(element) {
    if (arguments.length > 1) {
      for (var i = 0, elements = [], length = arguments.length; i < length; i++)
        elements.push($(arguments[i]));
      return elements;
    }
    
    if (Object.isString(element))
      element = document.getElementById(element);
    return Element.extend(element);
  }
  
  GLOBAL.$ = $;
  
  
  // Define the DOM Level 2 node type constants if they're missing.
  if (!GLOBAL.Node) GLOBAL.Node = {};
  
  if (!GLOBAL.Node.ELEMENT_NODE) {
    Object.extend(GLOBAL.Node, {
      ELEMENT_NODE:                1,
      ATTRIBUTE_NODE:              2,
      TEXT_NODE:                   3,
      CDATA_SECTION_NODE:          4,
      ENTITY_REFERENCE_NODE:       5,
      ENTITY_NODE:                 6,
      PROCESSING_INSTRUCTION_NODE: 7,
      COMMENT_NODE:                8,
      DOCUMENT_NODE:               9,
      DOCUMENT_TYPE_NODE:         10,
      DOCUMENT_FRAGMENT_NODE:     11,
      NOTATION_NODE:              12
    });
  }
  
  // The cache for all our created elements.
  var ELEMENT_CACHE = {};
  
  // For performance reasons, we create new elements by cloning a "blank"
  // version of a given element. But sometimes this causes problems. Skip
  // the cache if:
  //   (a) We're creating a SELECT element (troublesome in IE6);
  //   (b) We're setting the `type` attribute on an INPUT element
  //       (troublesome in IE9).
  function shouldUseCreationCache(tagName, attributes) {
    if (tagName === 'select') return false;
    if ('type' in attributes) return false;
    return true;
  }
  
  // IE requires that `name` and `type` attributes be set this way.
  var HAS_EXTENDED_CREATE_ELEMENT_SYNTAX = (function(){
    try {
      var el = document.createElement('<input name="x">');
      return el.tagName.toLowerCase() === 'input' && el.name === 'x';
    } 
    catch(err) {
      return false;
    }
  })();
  
  
  var oldElement = GLOBAL.Element;
  function Element(tagName, attributes) {
    attributes = attributes || {};
    tagName = tagName.toLowerCase();
    
    if (HAS_EXTENDED_CREATE_ELEMENT_SYNTAX && attributes.name) {
      tagName = '<' + tagName + ' name="' + attributes.name + '">';
      delete attributes.name;
      return Element.writeAttribute(document.createElement(tagName), attributes);
    }
    
    if (!ELEMENT_CACHE[tagName])
      ELEMENT_CACHE[tagName] = Element.extend(document.createElement(tagName));
    
    var node = shouldUseCreationCache(tagName, attributes) ?
     ELEMENT_CACHE[tagName].cloneNode(false) : document.createElement(tagName);
     
    return Element.writeAttribute(node, attributes);
  }
  
  GLOBAL.Element = Element;
  
  Object.extend(GLOBAL.Element, oldElement || {});
  if (oldElement) GLOBAL.Element.prototype = oldElement.prototype;
  
  Element.Methods = { ByTag: {}, Simulated: {} };
  // Temporary object for holding all our initial element methods. We'll add
  // them all at once at the bottom of this file.
  var methods = {};
  
  var INSPECT_ATTRIBUTES = { id: 'id', className: 'class' };
  function inspect(element) {
    element = $(element);
    var result = '<' + element.tagName.toLowerCase();
    
    var attribute, value;
    for (var property in INSPECT_ATTRIBUTES) {
      attribute = INSPECT_ATTRIBUTES[property];
      value = (element[property] || '').toString();
      if (value) result += ' ' + attribute + '=' + value.inspect(true);
    }
    
    return result + '>';
  }
  
  methods.inspect = inspect;
  
  // VISIBILITY
  
  function visible(element) {
    return $(element).style.display !== 'none';
  }
  
  function toggle(element, bool) {
    element = $(element);
    if (Object.isUndefined(bool))
      bool = !Element.visible(element);
    Element[bool ? 'show' : 'hide'](element);
    
    return element;
  }
  function hide(element) {
    element = $(element);
    element.style.display = 'none';
    return element;
  }
  
  function show(element) {
    element = $(element);
    element.style.display = '';
    return element;
  }
  
  
  Object.extend(methods, {
    visible: visible,
    toggle:  toggle,
    hide:    hide,
    show:    show
  });
  
  // MANIPULATION
  
  function remove(element) {
    element = $(element);
    element.parentNode.removeChild(element);
    return element;
  }
  
  // see: http://support.microsoft.com/kb/276228
  var SELECT_ELEMENT_INNERHTML_BUGGY = (function(){
    var el = document.createElement("select"),
        isBuggy = true;
    el.innerHTML = "<option value=\"test\">test</option>";
    if (el.options && el.options[0]) {
      isBuggy = el.options[0].nodeName.toUpperCase() !== "OPTION";
    }
    el = null;
    return isBuggy;
  })();
  // see: http://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx
  var TABLE_ELEMENT_INNERHTML_BUGGY = (function(){
    try {
      var el = document.createElement("table");
      if (el && el.tBodies) {
        el.innerHTML = "<tbody><tr><td>test</td></tr></tbody>";
        var isBuggy = typeof el.tBodies[0] == "undefined";
        el = null;
        return isBuggy;
      }
    } catch (e) {
      return true;
    }
  })();
  
  var LINK_ELEMENT_INNERHTML_BUGGY = (function() {
    try {
      var el = document.createElement('div');
      el.innerHTML = "<link />";
      var isBuggy = (el.childNodes.length === 0);
      el = null;
      return isBuggy;
    } catch(e) {
      return true;
    }
  })();
  
  var ANY_INNERHTML_BUGGY = SELECT_ELEMENT_INNERHTML_BUGGY ||
   TABLE_ELEMENT_INNERHTML_BUGGY || LINK_ELEMENT_INNERHTML_BUGGY;    
  var SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING = (function () {
    var s = document.createElement("script"),
        isBuggy = false;
    try {
      s.appendChild(document.createTextNode(""));
      isBuggy = !s.firstChild ||
        s.firstChild && s.firstChild.nodeType !== 3;
    } catch (e) {
      isBuggy = true;
    }
    s = null;
    return isBuggy;
  })();
  
  function update(element, content) {
    element = $(element);
    
    // Purge the element's existing contents of all storage keys and
    // event listeners, since said content will be replaced no matter
    // what.
    var descendants = element.getElementsByTagName('*'),
     i = descendants.length;
    while (i--) purgeElement(descendants[i]);
    
    if (content && content.toElement)
      content = content.toElement();
      
    if (Object.isElement(content))
      return element.update().insert(content);
      
    
    content = Object.toHTML(content);
    var tagName = element.tagName.toUpperCase();
    
    if (tagName === 'SCRIPT' && SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING) {
      // Scripts are not evaluated when updating a SCRIPT element.
      element.text = content;
      return element;
    }
    
    if (ANY_INNERHTML_BUGGY) {
      if (tagName in INSERTION_TRANSLATIONS.tags) {
        while (element.firstChild)
          element.removeChild(element.firstChild);
        
        var nodes = getContentFromAnonymousElement(tagName, content.stripScripts());        
        for (var i = 0, node; node = nodes[i]; i++)
          element.appendChild(node);
        
      } else if (LINK_ELEMENT_INNERHTML_BUGGY && Object.isString(content) && content.indexOf('<link') > -1) {
        // IE barfs when inserting a string that beings with a LINK
        // element. The workaround is to add any content to the beginning
        // of the string; we'll be inserting a text node (see
        // getContentFromAnonymousElement below).
        while (element.firstChild)
          element.removeChild(element.firstChild);
          
        var nodes = getContentFromAnonymousElement(tagName,
         content.stripScripts(), true);
        
        for (var i = 0, node; node = nodes[i]; i++)
          element.appendChild(node);
      } else {
        element.innerHTML = content.stripScripts();
      }
    } else {
      element.innerHTML = content.stripScripts();
    }
    
    content.evalScripts.bind(content).defer();
    return element;
  }
  
  function replace(element, content) {
    element = $(element);
    
    if (content && content.toElement) {
      content = content.toElement();      
    } else if (!Object.isElement(content)) {
      content = Object.toHTML(content);
      var range = element.ownerDocument.createRange();
      range.selectNode(element);
      content.evalScripts.bind(content).defer();
      content = range.createContextualFragment(content.stripScripts());
    }
      
    element.parentNode.replaceChild(content, element);
    return element;
  }
  
  var INSERTION_TRANSLATIONS = {
    before: function(element, node) {
      element.parentNode.insertBefore(node, element);
    },
    top: function(element, node) {
      element.insertBefore(node, element.firstChild);
    },
    bottom: function(element, node) {
      element.appendChild(node);
    },
    after: function(element, node) {
      element.parentNode.insertBefore(node, element.nextSibling);
    },
    
    tags: {
      TABLE:  ['<table>',                '</table>',                   1],
      TBODY:  ['<table><tbody>',         '</tbody></table>',           2],
      TR:     ['<table><tbody><tr>',     '</tr></tbody></table>',      3],
      TD:     ['<table><tbody><tr><td>', '</td></tr></tbody></table>', 4],
      SELECT: ['<select>',               '</select>',                  1]
    }
  };
  
  var tags = INSERTION_TRANSLATIONS.tags;
  
  Object.extend(tags, {
    THEAD: tags.TBODY,
    TFOOT: tags.TBODY,
    TH:    tags.TD
  });
  
  function replace_IE(element, content) {
    element = $(element);
    if (content && content.toElement)
      content = content.toElement();
    if (Object.isElement(content)) {
      element.parentNode.replaceChild(content, element);
      return element;
    }
    
    content = Object.toHTML(content);
    var parent = element.parentNode, tagName = parent.tagName.toUpperCase();
    
    if (tagName in INSERTION_TRANSLATIONS.tags) {
      var nextSibling = Element.next(element);
      var fragments = getContentFromAnonymousElement(
       tagName, content.stripScripts());
      
      parent.removeChild(element);
      
      var iterator;
      if (nextSibling)
        iterator = function(node) { parent.insertBefore(node, nextSibling) };
      else
        iterator = function(node) { parent.appendChild(node); }
        
      fragments.each(iterator);
    } else {
      // We don't need to special-case this one.
      element.outerHTML = content.stripScripts();
    }
    
    content.evalScripts.bind(content).defer();
    return element;
  }
  
  if ('outerHTML' in document.documentElement)
    replace = replace_IE;
  
  function isContent(content) {
    if (Object.isUndefined(content) || content === null) return false;
    
    if (Object.isString(content) || Object.isNumber(content)) return true;
    if (Object.isElement(content)) return true;    
    if (content.toElement || content.toHTML) return true;
    
    return false;
  }
  
  // This private method does the bulk of the work for Element#insert. The
  // actual insert method handles argument normalization and multiple
  // content insertions.
  function insertContentAt(element, content, position) {
    position   = position.toLowerCase();
    var method = INSERTION_TRANSLATIONS[position];
    
    if (content && content.toElement) content = content.toElement();
    if (Object.isElement(content)) {
      method(element, content);
      return element;
    }
    
    content = Object.toHTML(content);      
    var tagName = ((position === 'before' || position === 'after') ?
     element.parentNode : element).tagName.toUpperCase();
    
    var childNodes = getContentFromAnonymousElement(tagName, content.stripScripts());
    
    if (position === 'top' || position === 'after') childNodes.reverse();
    
    for (var i = 0, node; node = childNodes[i]; i++)
      method(element, node);
      
    content.evalScripts.bind(content).defer();    
  }
  function insert(element, insertions) {
    element = $(element);
    
    if (isContent(insertions))
      insertions = { bottom: insertions };
      
    for (var position in insertions)
      insertContentAt(element, insertions[position], position);
    
    return element;    
  }
  
  function wrap(element, wrapper, attributes) {
    element = $(element);
    
    if (Object.isElement(wrapper)) {
      // The wrapper argument is a DOM node.
      $(wrapper).writeAttribute(attributes || {});      
    } else if (Object.isString(wrapper)) {
      // The wrapper argument is a string representing a tag name.
      wrapper = new Element(wrapper, attributes);
    } else {
      // No wrapper was specified, which means the second argument is a set
      // of attributes.
      wrapper = new Element('div', wrapper);
    }
    
    if (element.parentNode)
      element.parentNode.replaceChild(wrapper, element);
    
    wrapper.appendChild(element);
    
    return wrapper;
  }
  
  function cleanWhitespace(element) {
    element = $(element);
    var node = element.firstChild;
    
    while (node) {
      var nextNode = node.nextSibling;
      if (node.nodeType === Node.TEXT_NODE && !/\S/.test(node.nodeValue))
        element.removeChild(node);
      node = nextNode;
    }
    return element;
  }
  
  function empty(element) {
    return $(element).innerHTML.blank();
  }
  
  // In older versions of Internet Explorer, certain elements don't like
  // having innerHTML set on them — including SELECT and most table-related
  // tags. So we wrap the string with enclosing HTML (if necessary), stick it
  // in a DIV, then grab the DOM nodes.
  function getContentFromAnonymousElement(tagName, html, force) {
    var t = INSERTION_TRANSLATIONS.tags[tagName], div = DIV;
    
    var workaround = !!t;
    if (!workaround && force) {
      workaround = true;
      t = ['', '', 0];
    }
    
    if (workaround) {
      div.innerHTML = '&#160;' + t[0] + html + t[1];
      div.removeChild(div.firstChild);
      for (var i = t[2]; i--; )
        div = div.firstChild;
    } else {
      div.innerHTML = html;
    }
    
    return $A(div.childNodes);
    //return SLICE.call(div.childNodes, 0);
  }
  
  function clone(element, deep) {
    if (!(element = $(element))) return;
    var clone = element.cloneNode(deep);
    if (!HAS_UNIQUE_ID_PROPERTY) {
      clone._prototypeUID = UNDEFINED;
      if (deep) {
        var descendants = Element.select(clone, '*'),
         i = descendants.length;
        while (i--)
          descendants[i]._prototypeUID = UNDEFINED;
      }
    }
    return Element.extend(clone);
  }
  
  // Performs cleanup on a single element before it is removed from the page.
  function purgeElement(element) {
    var uid = getUniqueElementID(element);
    if (uid) {
      Element.stopObserving(element);
      if (!HAS_UNIQUE_ID_PROPERTY)
        element._prototypeUID = UNDEFINED;
      delete Element.Storage[uid];
    }
  }
  
  function purgeCollection(elements) {
    var i = elements.length;
    while (i--)
      purgeElement(elements[i]);
  }
  
  function purgeCollection_IE(elements) {
    var i = elements.length, element, uid;
    while (i--) {
      element = elements[i];
      uid = getUniqueElementID(element);
      delete Element.Storage[uid];
      delete Event.cache[uid];
    }
  }
  
  if (HAS_UNIQUE_ID_PROPERTY) {
    purgeCollection = purgeCollection_IE;
  }
  
  
  function purge(element) {
    if (!(element = $(element))) return;
    purgeElement(element);
    
    var descendants = element.getElementsByTagName('*'),
     i = descendants.length;
     
    while (i--) purgeElement(descendants[i]);
    
    return null;
  }
  
  Object.extend(methods, {
    remove:  remove,
    update:  update,
    replace: replace,
    insert:  insert,
    wrap:    wrap,
    cleanWhitespace: cleanWhitespace,
    empty:   empty,
    clone:   clone,
    purge:   purge
  });
  
  // TRAVERSAL
  
  function recursivelyCollect(element, property, maximumLength) {
    element = $(element);
    maximumLength = maximumLength || -1;
    var elements = [];
    
    while (element = element[property]) {
      if (element.nodeType === Node.ELEMENT_NODE)
        elements.push(Element.extend(element));
        
      if (elements.length === maximumLength) break;
    }
    
    return elements;    
  }
  
  function ancestors(element) {
    return recursivelyCollect(element, 'parentNode');
  }
  
  function descendants(element) {
    return Element.select(element, '*');
  }
  
  function firstDescendant(element) {
    element = $(element).firstChild;
    while (element && element.nodeType !== Node.ELEMENT_NODE)
      element = element.nextSibling;
    return $(element);
  }
  
  function immediateDescendants(element) {
    var results = [], child = $(element).firstChild;
    
    while (child) {
      if (child.nodeType === Node.ELEMENT_NODE)
        results.push(Element.extend(child));
      
      child = child.nextSibling;
    }
    
    return results;
  }
  
  function previousSiblings(element) {
    return recursivelyCollect(element, 'previousSibling');
  }
  
  function nextSiblings(element) {
    return recursivelyCollect(element, 'nextSibling');
  }
  
  function siblings(element) {
    element = $(element);    
    var previous = previousSiblings(element),
     next = nextSiblings(element);
    return previous.reverse().concat(next);
  }
  
  function match(element, selector) {
    element = $(element);
    
    // If selector is a string, we assume it's a CSS selector.
    if (Object.isString(selector))
      return Prototype.Selector.match(element, selector);
      
    // Otherwise, we assume it's an object with its own `match` method.
    return selector.match(element);
  }
  
  
  // Internal method for optimizing traversal. Works like 
  // `recursivelyCollect`, except it stops at the first match and doesn't
  // extend any elements except for the returned element.
  function _recursivelyFind(element, property, expression, index) {
    element = $(element), expression = expression || 0, index = index || 0;
    if (Object.isNumber(expression)) {
      index = expression, expression = null;
    }
    
    while (element = element[property]) {
      // Skip any non-element nodes.
      if (element.nodeType !== 1) continue;
      // Skip any nodes that don't match the expression, if there is one.
      if (expression && !Prototype.Selector.match(element, expression))
        continue;
      // Skip the first `index` matches we find.
      if (--index >= 0) continue;
      
      return Element.extend(element);
    }
  }
  
  
  function up(element, expression, index) {
    element = $(element);
    if (arguments.length === 1) return $(element.parentNode);
    return _recursivelyFind(element, 'parentNode', expression, index);
  }
  function down(element, expression, index) {
    if (arguments.length === 1) return firstDescendant(element);
    element = $(element), expression = expression || 0, index = index || 0;
    
    if (Object.isNumber(expression))
      index = expression, expression = '*';
    
    var node = Prototype.Selector.select(expression, element)[index];
    return Element.extend(node);
  }
  function previous(element, expression, index) {
    return _recursivelyFind(element, 'previousSibling', expression, index);
  }
  
  function next(element, expression, index) {
    return _recursivelyFind(element, 'nextSibling', expression, index);
  }
    
  function select(element) {
    element = $(element);
    var expressions = SLICE.call(arguments, 1).join(', ');
    return Prototype.Selector.select(expressions, element);
  }
  function adjacent(element) {
    element = $(element);
    var expressions = SLICE.call(arguments, 1).join(', ');
    var siblings = Element.siblings(element), results = [];
    for (var i = 0, sibling; sibling = siblings[i]; i++) {
      if (Prototype.Selector.match(sibling, expressions))
        results.push(sibling);
    }
    
    return results;
  }
  
  function descendantOf_DOM(element, ancestor) {
    element = $(element), ancestor = $(ancestor);
    while (element = element.parentNode)
      if (element === ancestor) return true;
    return false;
  }
  
  function descendantOf_contains(element, ancestor) {
    element = $(element), ancestor = $(ancestor);
    // Some nodes, like `document`, don't have the "contains" method.
    if (!ancestor.contains) return descendantOf_DOM(element, ancestor);
    return ancestor.contains(element) && ancestor !== element;
  }
  
  function descendantOf_compareDocumentPosition(element, ancestor) {
    element = $(element), ancestor = $(ancestor);
    return (element.compareDocumentPosition(ancestor) & 8) === 8;
  }
  
  var descendantOf;
  if (DIV.compareDocumentPosition) {
    descendantOf = descendantOf_compareDocumentPosition;
  } else if (DIV.contains) {
    descendantOf = descendantOf_contains;
  } else {
    descendantOf = descendantOf_DOM;
  }
  
  
  Object.extend(methods, {
    recursivelyCollect:   recursivelyCollect,
    ancestors:            ancestors,
    descendants:          descendants,
    firstDescendant:      firstDescendant,
    immediateDescendants: immediateDescendants,
    previousSiblings:     previousSiblings,
    nextSiblings:         nextSiblings,
    siblings:             siblings,
    match:                match,
    up:                   up,
    down:                 down,
    previous:             previous,
    next:                 next,
    select:               select,
    adjacent:             adjacent,
    descendantOf:         descendantOf,
    
    // ALIASES
    getElementsBySelector: select,
    
    childElements:         immediateDescendants
  });
  
  
  // ATTRIBUTES
  var idCounter = 1;
  function identify(element) {
    element = $(element);
    var id = Element.readAttribute(element, 'id');
    if (id) return id;
    
    // The element doesn't have an ID of its own. Give it one, first ensuring
    // that it's unique.
    do { id = 'anonymous_element_' + idCounter++ } while ($(id));
    
    Element.writeAttribute(element, 'id', id);
    return id;
  }
  
  function readAttribute(element, name) {
    return $(element).getAttribute(name);
  }
  
  function readAttribute_IE(element, name) {
    element = $(element);
    
    // If the attribute name exists in the value translation table, it means
    // we should use a custom method for retrieving that attribute's value.
    var table = ATTRIBUTE_TRANSLATIONS.read;
    if (table.values[name])
      return table.values[name](element, name);
      
    // If it exists in the name translation table, it means the attribute has
    // an alias.
    if (table.names[name]) name = table.names[name];
    
    // Special-case namespaced attributes.
    if (name.include(':')) {
      if (!element.attributes || !element.attributes[name]) return null;
      return element.attributes[name].value;
    }
    
    return element.getAttribute(name);
  }
  
  function readAttribute_Opera(element, name) {
    if (name === 'title') return element.title;
    return element.getAttribute(name);
  }
  
  var PROBLEMATIC_ATTRIBUTE_READING = (function() {
    // This test used to set 'onclick' to `Prototype.emptyFunction`, but that
    // caused an (uncatchable) error in IE 10. For some reason, switching to
    // an empty array prevents this issue.
    DIV.setAttribute('onclick', []);
    var value = DIV.getAttribute('onclick');
    var isFunction = Object.isArray(value);
    DIV.removeAttribute('onclick');
    return isFunction;
  })();
  
  if (PROBLEMATIC_ATTRIBUTE_READING) {
    readAttribute = readAttribute_IE;
  } else if (Prototype.Browser.Opera) {
    readAttribute = readAttribute_Opera;
  }
  
  
  function writeAttribute(element, name, value) {
    element = $(element);
    var attributes = {}, table = ATTRIBUTE_TRANSLATIONS.write;
    
    if (typeof name === 'object') {
      attributes = name;
    } else {
      attributes[name] = Object.isUndefined(value) ? true : value;
    }
    
    for (var attr in attributes) {
      name = table.names[attr] || attr;
      value = attributes[attr];
      if (table.values[attr])
        name = table.values[attr](element, value) || name;
      if (value === false || value === null)
        element.removeAttribute(name);
      else if (value === true)
        element.setAttribute(name, name);
      else element.setAttribute(name, value);
    }
    return element;
  }
  
  function hasAttribute(element, attribute) {
    attribute = ATTRIBUTE_TRANSLATIONS.has[attribute] || attribute;
    var node = $(element).getAttributeNode(attribute);
    return !!(node && node.specified);
  }
  
  GLOBAL.Element.Methods.Simulated.hasAttribute = hasAttribute;
  
  function classNames(element) {
    return new Element.ClassNames(element);
  }
  
  var regExpCache = {};
  function getRegExpForClassName(className) {
    if (regExpCache[className]) return regExpCache[className];
    
    var re = new RegExp("(^|\\s+)" + className + "(\\s+|$)");
    regExpCache[className] = re;
    return re;
  }
  
  function hasClassName(element, className) {
    if (!(element = $(element))) return;
    
    var elementClassName = element.className;
    // We test these common cases first because we'd like to avoid creating
    // the regular expression, if possible.
    if (elementClassName.length === 0) return false;
    if (elementClassName === className) return true;
    
    return getRegExpForClassName(className).test(elementClassName);
  }
  
  function addClassName(element, className) {
    if (!(element = $(element))) return;
    
    if (!hasClassName(element, className))
      element.className += (element.className ? ' ' : '') + className;
      
    return element;
  }
  
  function removeClassName(element, className) {
    if (!(element = $(element))) return;
    
    element.className = element.className.replace(
     getRegExpForClassName(className), ' ').strip();
     
    return element;
  }
  
  function toggleClassName(element, className, bool) {
    if (!(element = $(element))) return;
    
    if (Object.isUndefined(bool))
      bool = !hasClassName(element, className);
      
    var method = Element[bool ? 'addClassName' : 'removeClassName'];
    return method(element, className);
  }
  
  var ATTRIBUTE_TRANSLATIONS = {};
  
  // Test attributes.
  var classProp = 'className', forProp = 'for';
  
  // Try "className" first (IE <8)
  DIV.setAttribute(classProp, 'x');
  if (DIV.className !== 'x') {
    // Try "class" (IE >=8)
    DIV.setAttribute('class', 'x');
    if (DIV.className === 'x')
      classProp = 'class';
  }
  
  var LABEL = document.createElement('label');
  LABEL.setAttribute(forProp, 'x');
  if (LABEL.htmlFor !== 'x') {
    LABEL.setAttribute('htmlFor', 'x');
    if (LABEL.htmlFor === 'x')
      forProp = 'htmlFor';
  }
  LABEL = null;
  
  function _getAttr(element, attribute) {
    return element.getAttribute(attribute);
  }
  
  function _getAttr2(element, attribute) {
    return element.getAttribute(attribute, 2);
  }
  
  function _getAttrNode(element, attribute) {
    var node = element.getAttributeNode(attribute);
    return node ? node.value : '';
  }
  
  function _getFlag(element, attribute) {
    return $(element).hasAttribute(attribute) ? attribute : null;
  }
  
  // Test whether attributes like `onclick` have their values serialized.
  DIV.onclick = Prototype.emptyFunction;
  var onclickValue = DIV.getAttribute('onclick');
  
  var _getEv;
  
  // IE <8
  if (String(onclickValue).indexOf('{') > -1) {
    // intrinsic event attributes are serialized as `function { ... }`
    _getEv = function(element, attribute) {
      var value = element.getAttribute(attribute);
      if (!value) return null;
      value = value.toString();
      value = value.split('{')[1];
      value = value.split('}')[0];
      return value.strip();
    };
  } 
  // IE >=8
  else if (onclickValue === '') {
    // only function body is serialized
    _getEv = function(element, attribute) {
      var value = element.getAttribute(attribute);
      if (!value) return null;
      return value.strip();
    };
  }
  
  ATTRIBUTE_TRANSLATIONS.read = {
    names: {
      'class':     classProp,
      'className': classProp,
      'for':       forProp,
      'htmlFor':   forProp
    },
        
    values: {
      style: function(element) {
        return element.style.cssText.toLowerCase();
      },
      title: function(element) {
        return element.title;
      }
    }
  };
  
  ATTRIBUTE_TRANSLATIONS.write = {
    names: {
      className:   'class',
      htmlFor:     'for',
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing'
    },
    
    values: {
      checked: function(element, value) {
        element.checked = !!value;
      },
      
      style: function(element, value) {
        element.style.cssText = value ? value : '';
      }
    }
  };
  
  ATTRIBUTE_TRANSLATIONS.has = { names: {} };
  
  Object.extend(ATTRIBUTE_TRANSLATIONS.write.names,
   ATTRIBUTE_TRANSLATIONS.read.names);
   
  var CAMEL_CASED_ATTRIBUTE_NAMES = $w('colSpan rowSpan vAlign dateTime ' +
   'accessKey tabIndex encType maxLength readOnly longDesc frameBorder');
   
  for (var i = 0, attr; attr = CAMEL_CASED_ATTRIBUTE_NAMES[i]; i++) {
    ATTRIBUTE_TRANSLATIONS.write.names[attr.toLowerCase()] = attr;
    ATTRIBUTE_TRANSLATIONS.has.names[attr.toLowerCase()]   = attr;
  }
  
  // The rest of the oddballs.
  Object.extend(ATTRIBUTE_TRANSLATIONS.read.values, {
    href:        _getAttr2,
    src:         _getAttr2,
    type:        _getAttr,
    action:      _getAttrNode,
    disabled:    _getFlag,
    checked:     _getFlag,
    readonly:    _getFlag,
    multiple:    _getFlag,
    onload:      _getEv,
    onunload:    _getEv,
    onclick:     _getEv,
    ondblclick:  _getEv,
    onmousedown: _getEv,
    onmouseup:   _getEv,
    onmouseover: _getEv,
    onmousemove: _getEv,
    onmouseout:  _getEv,
    onfocus:     _getEv,
    onblur:      _getEv,
    onkeypress:  _getEv,
    onkeydown:   _getEv,
    onkeyup:     _getEv,
    onsubmit:    _getEv,
    onreset:     _getEv,
    onselect:    _getEv,
    onchange:    _getEv    
  });
  
  
  Object.extend(methods, {
    identify:        identify,
    readAttribute:   readAttribute,
    writeAttribute:  writeAttribute,
    classNames:      classNames,
    hasClassName:    hasClassName,
    addClassName:    addClassName,
    removeClassName: removeClassName,
    toggleClassName: toggleClassName
  });
  
  
  // STYLES
  function normalizeStyleName(style) {
    if (style === 'float' || style === 'styleFloat')
      return 'cssFloat';
    return style.camelize();
  }
  
  function normalizeStyleName_IE(style) {
    if (style === 'float' || style === 'cssFloat')
      return 'styleFloat';
    return style.camelize();
  }
  function setStyle(element, styles) {
    element = $(element);
    var elementStyle = element.style, match;
    
    if (Object.isString(styles)) {
      // Set the element's CSS text directly.
      elementStyle.cssText += ';' + styles;
      if (styles.include('opacity')) {
        var opacity = styles.match(/opacity:\s*(\d?\.?\d*)/)[1];
        Element.setOpacity(element, opacity);
      }
      return element;
    }
    
    for (var property in styles) {
      if (property === 'opacity') {
        Element.setOpacity(element, styles[property]);
      } else {
        var value = styles[property];
        if (property === 'float' || property === 'cssFloat') {
          // Browsers disagree on whether this should be called `cssFloat`
          // or `styleFloat`. Check both.
          property = Object.isUndefined(elementStyle.styleFloat) ?
           'cssFloat' : 'styleFloat';
        }
        elementStyle[property] = value;
      }
    }
    
    return element;    
  }
  
  function getStyle(element, style) {
    if (style === 'opacity') return getOpacity(element);
    element = $(element);
    style = normalizeStyleName(style);
    // Try inline styles first.
    var value = element.style[style];
    if (!value || value === 'auto') {
      // Reluctantly retrieve the computed style.
      var css = document.defaultView.getComputedStyle(element, null);
      value = css ? css[style] : null;
    }
    
    return value === 'auto' ? null : value;
  }
  
  function getStyle_Opera(element, style) {
    switch (style) {
      case 'height': case 'width':
        // returns '0px' for hidden elements; we want it to return null
        if (!Element.visible(element)) return null;
        
        // Certain versions of Opera return border-box dimensions instead of
        // content-box dimensions, so we need to determine if we should
        // subtract padding and borders from the value.
        var dim = parseInt(getStyle(element, style), 10);
        
        if (dim !== element['offset' + style.capitalize()])
          return dim + 'px';
       
        return Element.measure(element, style);
        
      default: return getStyle(element, style);
    }
  }
  
  function getStyle_IE(element, style) {
    if (style === 'opacity') return getOpacity_IE(element);
    element = $(element);
    style = normalizeStyleName_IE(style);
    // Try inline styles first.
    var value = element.style[style];    
    if (!value && element.currentStyle) {
      // Reluctantly retrieve the current style.
      value = element.currentStyle[style];
    }
    
    if (value === 'auto') {
      // If we need a dimension, return null for hidden elements, but return
      // pixel values for visible elements.
      if ((style === 'width' || style === 'height') && Element.visible(element))
        return Element.measure(element, style) + 'px';
      return null;
    }
    
    return value;    
  }
  
  function stripAlphaFromFilter_IE(filter) {
    return (filter || '').replace(/alpha\([^\)]*\)/gi, '');
  }
  
  function hasLayout_IE(element) {
    if (!element.currentStyle || !element.currentStyle.hasLayout)
      element.style.zoom = 1;
    return element;
  }
  // Opacity feature test borrowed from Modernizr.
  var STANDARD_CSS_OPACITY_SUPPORTED = (function() {
    DIV.style.cssText = "opacity:.55";
    return /^0.55/.test(DIV.style.opacity);
  })();
  function setOpacity(element, value) {
    element = $(element);
    if (value == 1 || value === '') value = '';
    else if (value < 0.00001) value = 0;    
    element.style.opacity = value;    
    return element;
  }
  
  // The IE versions of `setOpacity` and `getOpacity` are aware of both
  // the standard approach (an `opacity` property in CSS) and the old-style
  // IE approach (a proprietary `filter` property). They are written to
  // prefer the standard approach unless it isn't supported.
  var setOpacity_IE = STANDARD_CSS_OPACITY_SUPPORTED ? setOpacity : function(element, value) {
    element = $(element);
    var style = element.style;
    if (!element.currentStyle || !element.currentStyle.hasLayout)
      style.zoom = 1;
    var filter = Element.getStyle(element, 'filter');
     
    if (value == 1 || value === '') {
      // Remove the `alpha` filter from IE's `filter` CSS property. If there
      // is anything left after removal, put it back where it was; otherwise
      // remove the property.
      filter = stripAlphaFromFilter_IE(filter);
      if (filter) style.filter = filter;
      else style.removeAttribute('filter');      
      return element;
    }
    
    if (value < 0.00001) value = 0;
        
    style.filter = stripAlphaFromFilter_IE(filter) + 
     ' alpha(opacity=' + (value * 100) + ')';
     
    return element;
  };
  
  
  function getOpacity(element) {
    element = $(element);
    // Try inline styles first.
    var value = element.style.opacity;
    if (!value || value === 'auto') {
      // Reluctantly retrieve the computed style.
      var css = document.defaultView.getComputedStyle(element, null);
      value = css ? css.opacity : null;
    }
    return value ? parseFloat(value) : 1.0;
  }
  
  // Prefer the standard CSS approach unless it's not supported.
  var getOpacity_IE = STANDARD_CSS_OPACITY_SUPPORTED ? getOpacity : function(element) {
    var filter = Element.getStyle(element, 'filter');
    if (filter.length === 0) return 1.0;
    var match = (filter || '').match(/alpha\(opacity=(.*)\)/i);
    if (match && match[1]) return parseFloat(match[1]) / 100;
    return 1.0;
  };
  
  
  Object.extend(methods, {
    setStyle:   setStyle,
    getStyle:   getStyle,
    setOpacity: setOpacity,
    getOpacity: getOpacity
  });
  if (Prototype.Browser.Opera) {
    // Opera also has 'styleFloat' in DIV.style
    methods.getStyle = getStyle_Opera;
  } else if ('styleFloat' in DIV.style) {
    methods.getStyle = getStyle_IE;
    methods.setOpacity = setOpacity_IE;
    methods.getOpacity = getOpacity_IE;
  }
  
  // STORAGE
  var UID = 0;
  
  GLOBAL.Element.Storage = { UID: 1 };
  
  function getUniqueElementID(element) {
    if (element === window) return 0;
    // Need to use actual `typeof` operator to prevent errors in some
    // environments when accessing node expandos.
    if (typeof element._prototypeUID === 'undefined')
      element._prototypeUID = Element.Storage.UID++;
    return element._prototypeUID;
  }
  
  // In Internet Explorer, DOM nodes have a `uniqueID` property. Saves us
  // from inventing our own.
  function getUniqueElementID_IE(element) {
    if (element === window) return 0;
    // The document object's `uniqueID` property changes each time you read it.
    if (element == document) return 1;
    return element.uniqueID;
  }
  
  var HAS_UNIQUE_ID_PROPERTY = ('uniqueID' in DIV);
  if (HAS_UNIQUE_ID_PROPERTY)
    getUniqueElementID = getUniqueElementID_IE;
  
  function getStorage(element) {
    if (!(element = $(element))) return;
    
    var uid = getUniqueElementID(element);
    
    if (!Element.Storage[uid])
      Element.Storage[uid] = $H();
      
    return Element.Storage[uid];
  }
  
  function store(element, key, value) {
    if (!(element = $(element))) return;
    var storage = getStorage(element);
    if (arguments.length === 2) {
      // Assume we've been passed an object full of key/value pairs.
      storage.update(key);
    } else {
      storage.set(key, value);
    }
    return element;
  }
  
  function retrieve(element, key, defaultValue) {
    if (!(element = $(element))) return;
    var storage = getStorage(element), value = storage.get(key);
    
    if (Object.isUndefined(value)) {
      storage.set(key, defaultValue);
      value = defaultValue;
    }
    
    return value;
  }
  
  
  Object.extend(methods, {
    getStorage: getStorage,
    store:      store,
    retrieve:   retrieve
  });
  
  
  // ELEMENT EXTENSION
  var Methods = {}, ByTag = Element.Methods.ByTag,
   F = Prototype.BrowserFeatures;
  
  // Handle environments which support extending element prototypes
  // but don't expose the standard class name.
  if (!F.ElementExtensions && ('__proto__' in DIV)) {
    GLOBAL.HTMLElement = {};
    GLOBAL.HTMLElement.prototype = DIV['__proto__'];
    F.ElementExtensions = true;
  }
  
  // Certain oddball element types can't be extended in IE8.
  function checkElementPrototypeDeficiency(tagName) {
    if (typeof window.Element === 'undefined') return false;
    var proto = window.Element.prototype;
    if (proto) {
      var id = '_' + (Math.random() + '').slice(2),
       el = document.createElement(tagName);
      proto[id] = 'x';
      var isBuggy = (el[id] !== 'x');
      delete proto[id];
      el = null;
      return isBuggy;
    }
    
    return false;    
  }
  
  var HTMLOBJECTELEMENT_PROTOTYPE_BUGGY = 
   checkElementPrototypeDeficiency('object');
  
  function extendElementWith(element, methods) {
    for (var property in methods) {
      var value = methods[property];
      if (Object.isFunction(value) && !(property in element))
        element[property] = value.methodize();
    }
  }
  
  // Keeps track of the UIDs of extended elements.
  var EXTENDED = {};
  function elementIsExtended(element) {
    var uid = getUniqueElementID(element);
    return (uid in EXTENDED);
  }
  
  function extend(element) {
    if (!element || elementIsExtended(element)) return element;
    if (element.nodeType !== Node.ELEMENT_NODE || element == window)
      return element;
      
    var methods = Object.clone(Methods),
     tagName = element.tagName.toUpperCase();
     
    // Add methods for specific tags.
    if (ByTag[tagName]) Object.extend(methods, ByTag[tagName]);
    
    extendElementWith(element, methods);
    EXTENDED[getUniqueElementID(element)] = true;
    return element;
  }
  
  // Because of the deficiency mentioned above, IE8 needs a very thin version
  // of Element.extend that acts like Prototype.K _except_ when the element
  // is one of the problematic types.
  function extend_IE8(element) {
    if (!element || elementIsExtended(element)) return element;
    
    var t = element.tagName;
    if (t && (/^(?:object|applet|embed)$/i.test(t))) {
      extendElementWith(element, Element.Methods);
      extendElementWith(element, Element.Methods.Simulated);
      extendElementWith(element, Element.Methods.ByTag[t.toUpperCase()]);
    }
    
    return element;
  }
  // If the browser lets us extend specific elements, we can replace `extend`
  // with a thinner version (or, ideally, an empty version).
  if (F.SpecificElementExtensions) {
    extend = HTMLOBJECTELEMENT_PROTOTYPE_BUGGY ? extend_IE8 : Prototype.K;
  }
  
  function addMethodsToTagName(tagName, methods) {
    tagName = tagName.toUpperCase();
    if (!ByTag[tagName]) ByTag[tagName] = {};
    Object.extend(ByTag[tagName], methods);
  }
  
  function mergeMethods(destination, methods, onlyIfAbsent) {
    if (Object.isUndefined(onlyIfAbsent)) onlyIfAbsent = false;
    for (var property in methods) {
      var value = methods[property];
      if (!Object.isFunction(value)) continue;
      if (!onlyIfAbsent || !(property in destination))
        destination[property] = value.methodize();
    }
  }
  
  function findDOMClass(tagName) {
    var klass;
    var trans = {
      "OPTGROUP": "OptGroup", "TEXTAREA": "TextArea", "P": "Paragraph",
      "FIELDSET": "FieldSet", "UL": "UList", "OL": "OList", "DL": "DList",
      "DIR": "Directory", "H1": "Heading", "H2": "Heading", "H3": "Heading",
      "H4": "Heading", "H5": "Heading", "H6": "Heading", "Q": "Quote",
      "INS": "Mod", "DEL": "Mod", "A": "Anchor", "IMG": "Image", "CAPTION":
      "TableCaption", "COL": "TableCol", "COLGROUP": "TableCol", "THEAD":
      "TableSection", "TFOOT": "TableSection", "TBODY": "TableSection", "TR":
      "TableRow", "TH": "TableCell", "TD": "TableCell", "FRAMESET":
      "FrameSet", "IFRAME": "IFrame"
    };
    if (trans[tagName]) klass = 'HTML' + trans[tagName] + 'Element';
    if (window[klass]) return window[klass];
    klass = 'HTML' + tagName + 'Element';
    if (window[klass]) return window[klass];
    klass = 'HTML' + tagName.capitalize() + 'Element';
    if (window[klass]) return window[klass];
    var element = document.createElement(tagName),
     proto = element['__proto__'] || element.constructor.prototype;
        
    element = null;
    return proto;
  }
  
  function addMethods(methods) {
    if (arguments.length === 0) addFormMethods();
    
    if (arguments.length === 2) {
      // Tag names have been specified.
      var tagName = methods;
      methods = arguments[1];
    }
    
    if (!tagName) {
      Object.extend(Element.Methods, methods || {});
    } else {
      if (Object.isArray(tagName)) {
        for (var i = 0, tag; tag = tagName[i]; i++)
          addMethodsToTagName(tag, methods);
      } else {
        addMethodsToTagName(tagName, methods);
      }
    }
    
    var ELEMENT_PROTOTYPE = window.HTMLElement ? HTMLElement.prototype :
     Element.prototype;
     
    if (F.ElementExtensions) {
      mergeMethods(ELEMENT_PROTOTYPE, Element.Methods);
      mergeMethods(ELEMENT_PROTOTYPE, Element.Methods.Simulated, true);
    }
    
    if (F.SpecificElementExtensions) {
      for (var tag in Element.Methods.ByTag) {
        var klass = findDOMClass(tag);
        if (Object.isUndefined(klass)) continue;
        mergeMethods(klass.prototype, ByTag[tag]);
      }
    }
    
    Object.extend(Element, Element.Methods);
    Object.extend(Element, Element.Methods.Simulated);
    delete Element.ByTag;
    delete Element.Simulated;
    
    Element.extend.refresh();
    
    // We need to replace the element creation cache because the nodes in the
    // cache now have stale versions of the element methods.
    ELEMENT_CACHE = {};
  }
  
  Object.extend(GLOBAL.Element, {
    extend:     extend,
    addMethods: addMethods
  });
  
  if (extend === Prototype.K) {
    GLOBAL.Element.extend.refresh = Prototype.emptyFunction;
  } else {
    GLOBAL.Element.extend.refresh = function() {
      if (Prototype.BrowserFeatures.ElementExtensions) return;
      Object.extend(Methods, Element.Methods);
      Object.extend(Methods, Element.Methods.Simulated);
      // All existing extended elements are stale and need to be refreshed.
      EXTENDED = {};
    };
  }
  
  function addFormMethods() {
    // Add relevant element methods from the forms API.
    Object.extend(Form, Form.Methods);
    Object.extend(Form.Element, Form.Element.Methods);
    Object.extend(Element.Methods.ByTag, {
      "FORM":     Object.clone(Form.Methods),
      "INPUT":    Object.clone(Form.Element.Methods),
      "SELECT":   Object.clone(Form.Element.Methods),
      "TEXTAREA": Object.clone(Form.Element.Methods),
      "BUTTON":   Object.clone(Form.Element.Methods)
    });
  }
  Element.addMethods(methods);
  // Prevent IE leaks on DIV and ELEMENT_CACHE
  function destroyCache_IE() {
    DIV = null;
    ELEMENT_CACHE = null;
  }
  if (window.attachEvent)
    window.attachEvent('onunload', destroyCache_IE);
})(this);
(function() {
  
  // Converts a CSS percentage value to a decimal.
  // Ex: toDecimal("30%"); // -> 0.3
  function toDecimal(pctString) {
    var match = pctString.match(/^(\d+)%?$/i);
    if (!match) return null;
    return (Number(match[1]) / 100);
  }
  
  // A bare-bones version of Element.getStyle. Needed because getStyle is
  // public-facing and too user-friendly for our tastes. We need raw,
  // non-normalized values.
  //
  // Camel-cased property names only.
  function getRawStyle(element, style) {
    element = $(element);
    // Try inline styles first.
    var value = element.style[style];
    if (!value || value === 'auto') {
      // Reluctantly retrieve the computed style.
      var css = document.defaultView.getComputedStyle(element, null);
      value = css ? css[style] : null;
    }
    
    if (style === 'opacity') return value ? parseFloat(value) : 1.0;
    return value === 'auto' ? null : value;
  }
  
  function getRawStyle_IE(element, style) {
    // Try inline styles first.
    var value = element.style[style];    
    if (!value && element.currentStyle) {
      // Reluctantly retrieve the current style.
      value = element.currentStyle[style];
    }
    return value;
  }
  
  // Quickly figures out the content width of an element. Used instead of
  // `element.measure('width')` in several places below; we don't want to 
  // call back into layout code recursively if we don't have to.
  //
  // But this means it doesn't handle edge cases. Use it when you know the
  // element in question is visible and will give accurate measurements.
  function getContentWidth(element, context) {
    var boxWidth = element.offsetWidth;
    
    var bl = getPixelValue(element, 'borderLeftWidth',  context) || 0;
    var br = getPixelValue(element, 'borderRightWidth', context) || 0;
    var pl = getPixelValue(element, 'paddingLeft',      context) || 0;
    var pr = getPixelValue(element, 'paddingRight',     context) || 0;
    
    return boxWidth - bl - br - pl - pr;
  }
  
  if ('currentStyle' in document.documentElement) {
    getRawStyle = getRawStyle_IE;
  }
  
  
  // Can be called like this:
  //   getPixelValue("11px");
  // Or like this:
  //   getPixelValue(someElement, 'paddingTop');  
  function getPixelValue(value, property, context) {
    var element = null;
    if (Object.isElement(value)) {
      element = value;
      value = getRawStyle(element, property);
    }
    if (value === null || Object.isUndefined(value)) {
      return null;
    }
    
    // Non-IE browsers will always return pixels if possible.
    // (We use parseFloat instead of parseInt because Firefox can return
    // non-integer pixel values.)
    if ((/^(?:-)?\d+(\.\d+)?(px)?$/i).test(value)) {
      return window.parseFloat(value);
    }
    var isPercentage = value.include('%'), isViewport = (context === document.viewport);
    
    // When IE gives us something other than a pixel value, this technique
    // (invented by Dean Edwards) will convert it to pixels.
    //
    // (This doesn't work for percentage values on elements with `position: fixed`
    // because those percentages are relative to the viewport.)
    if (/\d/.test(value) && element && element.runtimeStyle && !(isPercentage && isViewport)) {
      var style = element.style.left, rStyle = element.runtimeStyle.left; 
      element.runtimeStyle.left = element.currentStyle.left;
      element.style.left = value || 0;  
      value = element.style.pixelLeft;
      element.style.left = style;
      element.runtimeStyle.left = rStyle;
      
      return value;
    }
    // For other browsers, we have to do a bit of work.
    // (At this point, only percentages should be left; all other CSS units
    // are converted to pixels by getComputedStyle.)
    if (element && isPercentage) {
      // The `context` argument comes into play for percentage units; it's
      // the thing that the unit represents a percentage of. When an
      // absolutely-positioned element has a width of 50%, we know that's
      // 50% of its offset parent. If it's `position: fixed` instead, we know
      // it's 50% of the viewport. And so on.
      context = context || element.parentNode;
      var decimal = toDecimal(value), whole = null;
      
      var isHorizontal = property.include('left') || property.include('right') ||
       property.include('width');
       
      var isVertical   = property.include('top') || property.include('bottom') ||
        property.include('height');
        
      if (context === document.viewport) {
        if (isHorizontal) {
          whole = document.viewport.getWidth();
        } else if (isVertical) {
          whole = document.viewport.getHeight();
        }
      } else {
        if (isHorizontal) {
          whole = $(context).measure('width');
        } else if (isVertical) {
          whole = $(context).measure('height');
        }
      }
      
      return (whole === null) ? 0 : whole * decimal;
    }
    
    // If we get this far, we should probably give up.
    return 0;
  }
  
  // Turns plain numbers into pixel measurements.
  function toCSSPixels(number) {
    if (Object.isString(number) && number.endsWith('px'))
      return number;
    return number + 'px';    
  }
  
  // Shortcut for figuring out if an element is `display: none` or not.
  function isDisplayed(element) {
    while (element && element.parentNode) {
      var display = element.getStyle('display');
      if (display === 'none') {
        return false;
      }
      element = $(element.parentNode);
    }
    return true;
  }
  
  // In IE6-7, positioned elements often need hasLayout triggered before they
  // report accurate measurements.
  var hasLayout = Prototype.K;  
  if ('currentStyle' in document.documentElement) {
    hasLayout = function(element) {
      if (!element.currentStyle.hasLayout) {
        element.style.zoom = 1;
      }
      return element;
    };
  }
  // Converts the layout hash property names back to the CSS equivalents.
  // For now, only the border properties differ.
  function cssNameFor(key) {
    if (key.include('border')) key = key + '-width';
    return key.camelize();
  }
  
  Element.Layout = Class.create(Hash, {
    initialize: function($super, element, preCompute) {
      $super();
      this.element = $(element);
      
      // nullify all properties keys
      Element.Layout.PROPERTIES.each( function(property) {
        this._set(property, null);
      }, this);
      
      // The 'preCompute' boolean tells us whether we should fetch all values
      // at once. If so, we should do setup/teardown only once. We set a flag
      // so that we can ignore calls to `_begin` and `_end` elsewhere.
      if (preCompute) {
        this._preComputing = true;
        this._begin();
        Element.Layout.PROPERTIES.each( this._compute, this );
        this._end();
        this._preComputing = false;
      }
    },
    
    _set: function(property, value) {
      return Hash.prototype.set.call(this, property, value);
    },    
    
    // TODO: Investigate.
    set: function(property, value) {
      throw "Properties of Element.Layout are read-only.";
    },
    
    get: function($super, property) {
      // Try to fetch from the cache.
      var value = $super(property);
      return value === null ? this._compute(property) : value;
    },
    
    // `_begin` and `_end` are two functions that are called internally 
    // before and after any measurement is done. In certain conditions (e.g.,
    // when hidden), elements need a "preparation" phase that ensures
    // accuracy of measurements.
    _begin: function() {
      if (this._isPrepared()) return;
      
      var element = this.element;
      if (isDisplayed(element)) {
        this._setPrepared(true);
        return;
      }
      
      // If we get this far, it means this element is hidden. To get usable
      // measurements, we must remove `display: none`, but in a manner that 
      // isn't noticeable to the user. That means we also set
      // `visibility: hidden` to make it invisible, and `position: absolute`
      // so that it won't alter the document flow when displayed.
      //
      // Once we do this, the element is "prepared," and we can make our
      // measurements. When we're done, the `_end` method cleans up our
      // changes.
      
      // Remember the original values for some styles we're going to alter.
      var originalStyles = {
        position:   element.style.position   || '',
        width:      element.style.width      || '',
        visibility: element.style.visibility || '',
        display:    element.style.display    || ''
      };
      
      // We store them so that the `_end` method can retrieve them later.
      element.store('prototype_original_styles', originalStyles);
      
      var position = getRawStyle(element, 'position'), width = element.offsetWidth;
      if (width === 0 || width === null) {
        // Opera/IE won't report the true width of the element through
        // `getComputedStyle` if it's hidden. If we got a nonsensical value,
        // we need to show the element and try again.
        element.style.display = 'block';
        width = element.offsetWidth;
      }
      
      // Preserve the context in case we get a percentage value.  
      var context = (position === 'fixed') ? document.viewport :
       element.parentNode;
       
      var tempStyles = {
        visibility: 'hidden',
        display:    'block'
      };
      
      // If the element's `position: fixed`, it's already out of the document
      // flow, so it's both unnecessary and inaccurate to set
      // `position: absolute`.
      if (position !== 'fixed') tempStyles.position = 'absolute';
       
      element.setStyle(tempStyles);
      
      var positionedWidth = element.offsetWidth, newWidth;
      if (width && (positionedWidth === width)) {
        // If the element's width is the same both before and after
        // we set absolute positioning, that means:
        //  (a) it was already absolutely-positioned; or
        //  (b) it has an explicitly-set width, instead of width: auto.
        // Either way, it means the element is the width it needs to be
        // in order to report an accurate height.
        newWidth = getContentWidth(element, context);
      } else if (position === 'absolute' || position === 'fixed') {
        // Absolute- and fixed-position elements' dimensions don't depend
        // upon those of their parents.
        newWidth = getContentWidth(element, context);
      } else {
        // Otherwise, the element's width depends upon the width of its
        // parent.
        var parent = element.parentNode, pLayout = $(parent).getLayout();
        newWidth = pLayout.get('width') -
         this.get('margin-left') -
         this.get('border-left') -
         this.get('padding-left') -
         this.get('padding-right') -
         this.get('border-right') -
         this.get('margin-right');
      }
      
      // Whatever the case, we've now figured out the correct `width` value
      // for the element.
      element.setStyle({ width: newWidth + 'px' });
      
      // The element is now ready for measuring.
      this._setPrepared(true);
    },
    
    _end: function() {
      var element = this.element;
      var originalStyles = element.retrieve('prototype_original_styles');
      element.store('prototype_original_styles', null);
      element.setStyle(originalStyles);
      this._setPrepared(false);
    },
    
    _compute: function(property) {
      var COMPUTATIONS = Element.Layout.COMPUTATIONS;
      if (!(property in COMPUTATIONS)) {
        throw "Property not found.";
      }
      
      return this._set(property, COMPUTATIONS[property].call(this, this.element));
    },
    
    _isPrepared: function() {
      return this.element.retrieve('prototype_element_layout_prepared', false);
    },
    
    _setPrepared: function(bool) {
      return this.element.store('prototype_element_layout_prepared', bool);
    },
    
    toObject: function() {
      var args = $A(arguments);
      var keys = (args.length === 0) ? Element.Layout.PROPERTIES :
       args.join(' ').split(' ');
      var obj = {};
      keys.each( function(key) {
        // Key needs to be a valid Element.Layout property.
        if (!Element.Layout.PROPERTIES.include(key)) return;
        var value = this.get(key);
        if (value != null) obj[key] = value;
      }, this);
      return obj;
    },
    
    toHash: function() {
      var obj = this.toObject.apply(this, arguments);
      return new Hash(obj);
    },
    
    toCSS: function() {
      var args = $A(arguments);
      var keys = (args.length === 0) ? Element.Layout.PROPERTIES :
       args.join(' ').split(' ');
      var css = {};
      keys.each( function(key) {
        // Key needs to be a valid Element.Layout property...
        if (!Element.Layout.PROPERTIES.include(key)) return;        
        // ...but not a composite property.
        if (Element.Layout.COMPOSITE_PROPERTIES.include(key)) return;
        var value = this.get(key);
        if (value != null) css[cssNameFor(key)] = value + 'px';
      }, this);
      return css;
    },
    
    inspect: function() {
      return "#<Element.Layout>";
    }
  });
  
  Object.extend(Element.Layout, {
    PROPERTIES: $w('height width top left right bottom border-left border-right border-top border-bottom padding-left padding-right padding-top padding-bottom margin-top margin-bottom margin-left margin-right padding-box-width padding-box-height border-box-width border-box-height margin-box-width margin-box-height'),
    
    COMPOSITE_PROPERTIES: $w('padding-box-width padding-box-height margin-box-width margin-box-height border-box-width border-box-height'),
    
    COMPUTATIONS: {
      'height': function(element) {
        if (!this._preComputing) this._begin();
        
        var bHeight = this.get('border-box-height');
        if (bHeight <= 0) {
          if (!this._preComputing) this._end();
          return 0;
        }
        
        var bTop = this.get('border-top'),
         bBottom = this.get('border-bottom');
        var pTop = this.get('padding-top'),
         pBottom = this.get('padding-bottom');
        if (!this._preComputing) this._end();
        return bHeight - bTop - bBottom - pTop - pBottom;
      },
      
      'width': function(element) {
        if (!this._preComputing) this._begin();
        
        var bWidth = this.get('border-box-width');
        if (bWidth <= 0) {
          if (!this._preComputing) this._end();
          return 0;
        }
        var bLeft = this.get('border-left'),
         bRight = this.get('border-right');
        var pLeft = this.get('padding-left'),
         pRight = this.get('padding-right');
         
        if (!this._preComputing) this._end();
        return bWidth - bLeft - bRight - pLeft - pRight;
      },
      
      'padding-box-height': function(element) {
        var height = this.get('height'),
         pTop = this.get('padding-top'),
         pBottom = this.get('padding-bottom');
         
        return height + pTop + pBottom;
      },
      'padding-box-width': function(element) {
        var width = this.get('width'),
         pLeft = this.get('padding-left'),
         pRight = this.get('padding-right');
         
        return width + pLeft + pRight;
      },
      
      'border-box-height': function(element) {
        if (!this._preComputing) this._begin();
        var height = element.offsetHeight;
        if (!this._preComputing) this._end();
        return height;
      },
            
      'border-box-width': function(element) {
        if (!this._preComputing) this._begin();
        var width = element.offsetWidth;
        if (!this._preComputing) this._end();
        return width;
      },
      
      'margin-box-height': function(element) {
        var bHeight = this.get('border-box-height'),
         mTop = this.get('margin-top'),
         mBottom = this.get('margin-bottom');
         
        if (bHeight <= 0) return 0;
         
        return bHeight + mTop + mBottom;        
      },
      'margin-box-width': function(element) {
        var bWidth = this.get('border-box-width'),
         mLeft = this.get('margin-left'),
         mRight = this.get('margin-right');
        if (bWidth <= 0) return 0;
         
        return bWidth + mLeft + mRight;
      },
      
      'top': function(element) {
        var offset = element.positionedOffset();
        return offset.top;
      },
      
      'bottom': function(element) {
        var offset = element.positionedOffset(),
         parent = element.getOffsetParent(),
         pHeight = parent.measure('height');
        
        var mHeight = this.get('border-box-height');
        
        return pHeight - mHeight - offset.top;
        // 
        // return getPixelValue(element, 'bottom');
      },
      
      'left': function(element) {
        var offset = element.positionedOffset();
        return offset.left;
      },
      
      'right': function(element) {
        var offset = element.positionedOffset(),
         parent = element.getOffsetParent(),
         pWidth = parent.measure('width');
        
        var mWidth = this.get('border-box-width');
        
        return pWidth - mWidth - offset.left;
        //  
        // return getPixelValue(element, 'right');
      },
      
      'padding-top': function(element) {
        return getPixelValue(element, 'paddingTop');
      },
      
      'padding-bottom': function(element) {
        return getPixelValue(element, 'paddingBottom');
      },
      
      'padding-left': function(element) {
        return getPixelValue(element, 'paddingLeft');
      },
      
      'padding-right': function(element) {
        return getPixelValue(element, 'paddingRight');
      },
      
      'border-top': function(element) {
        return getPixelValue(element, 'borderTopWidth');
      },
      
      'border-bottom': function(element) {
        return getPixelValue(element, 'borderBottomWidth');
      },
      
      'border-left': function(element) {
        return getPixelValue(element, 'borderLeftWidth');
      },
      
      'border-right': function(element) {
        return getPixelValue(element, 'borderRightWidth');
      },
      
      'margin-top': function(element) {
        return getPixelValue(element, 'marginTop');
      },
      
      'margin-bottom': function(element) {
        return getPixelValue(element, 'marginBottom');
      },
      
      'margin-left': function(element) {
        return getPixelValue(element, 'marginLeft');
      },
      
      'margin-right': function(element) {
        return getPixelValue(element, 'marginRight');
      }
    }
  });
  
  // An easier way to compute right and bottom offsets.
  if ('getBoundingClientRect' in document.documentElement) {
    Object.extend(Element.Layout.COMPUTATIONS, {
      'right': function(element) {
        var parent = hasLayout(element.getOffsetParent());
        var rect = element.getBoundingClientRect(),
         pRect = parent.getBoundingClientRect();
         
        return (pRect.right - rect.right).round();
      },
      
      'bottom': function(element) {
        var parent = hasLayout(element.getOffsetParent());
        var rect = element.getBoundingClientRect(),
         pRect = parent.getBoundingClientRect();
         
        return (pRect.bottom - rect.bottom).round();
      }
    });
  }
  
  Element.Offset = Class.create({
    initialize: function(left, top) {
      this.left = left.round();
      this.top  = top.round();
      
      // Act like an array.
      this[0] = this.left;
      this[1] = this.top;
    },
    
    relativeTo: function(offset) {
      return new Element.Offset(
        this.left - offset.left, 
        this.top  - offset.top
      );
    },
    
    inspect: function() {
      return "#<Element.Offset left: #{left} top: #{top}>".interpolate(this);
    },
    
    toString: function() {
      return "[#{left}, #{top}]".interpolate(this);
    },
    
    toArray: function() {
      return [this.left, this.top];
    }
  });
  
  function getLayout(element, preCompute) {
    return new Element.Layout(element, preCompute);
  }
    
  function measure(element, property) {
    return $(element).getLayout().get(property);  
  }
  function getHeight(element) {
    return Element.getDimensions(element).height;
  }
  
  function getWidth(element) {
    return Element.getDimensions(element).width;
  }
  function getDimensions(element) {
    element = $(element);
    var display = Element.getStyle(element, 'display');
    
    if (display && display !== 'none') {
      return { width: element.offsetWidth, height: element.offsetHeight };
    }
    
    // All *Width and *Height properties give 0 on elements with
    // `display: none`, so show the element temporarily.
    var style = element.style;
    var originalStyles = {
      visibility: style.visibility,
      position:   style.position,
      display:    style.display
    };
    
    var newStyles = {
      visibility: 'hidden',
      display:    'block'
    };
    // Switching `fixed` to `absolute` causes issues in Safari.
    if (originalStyles.position !== 'fixed')
      newStyles.position = 'absolute';
    
    Element.setStyle(element, newStyles);
    
    var dimensions = {
      width:  element.offsetWidth,
      height: element.offsetHeight
    };
    
    Element.setStyle(element, originalStyles);
    return dimensions;
  }
  
  function getOffsetParent(element) {
    element = $(element);
    
    // For unusual cases like these, we standardize on returning the BODY
    // element as the offset parent.
    if (isDocument(element) || isDetached(element) || isBody(element) || isHtml(element))
      return $(document.body);
    // IE reports offset parent incorrectly for inline elements.
    var isInline = (Element.getStyle(element, 'display') === 'inline');
    if (!isInline && element.offsetParent) return isHtml(element.offsetParent) ? $(document.body) : $(element.offsetParent);
    
    while ((element = element.parentNode) && element !== document.body) {
      if (Element.getStyle(element, 'position') !== 'static') {
        return isHtml(element) ? $(document.body) : $(element);
      }
    }
    
    return $(document.body);
  }
  
  
  function cumulativeOffset(element) {
    element = $(element);
    var valueT = 0, valueL = 0;
    if (element.parentNode) {
      do {
        valueT += element.offsetTop  || 0;
        valueL += element.offsetLeft || 0;
        element = element.offsetParent;
      } while (element);
    }
    return new Element.Offset(valueL, valueT);
  }
  
  function positionedOffset(element) {    
    element = $(element);
    // Account for the margin of the element.
    var layout = element.getLayout();
    
    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      element = element.offsetParent;
      if (element) {
        if (isBody(element)) break;
        var p = Element.getStyle(element, 'position');
        if (p !== 'static') break;
      }
    } while (element);
    
    valueT -= layout.get('margin-top');
    valueL -= layout.get('margin-left');
    
    return new Element.Offset(valueL, valueT);
  }
  function cumulativeScrollOffset(element) {
    var valueT = 0, valueL = 0;
    do {
      if(element == document.body){
        valueT += (window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop || 0;
        valueL += (window.pageXOffset !== undefined) ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft || 0;
        break;
      } else {
        valueT += element.scrollTop  || 0;
        valueL += element.scrollLeft || 0;
        element = element.parentNode;
      }
    } while (element);
    return new Element.Offset(valueL, valueT);
  }
  function viewportOffset(forElement) {
    var valueT = 0, valueL = 0, docBody = document.body;
    forElement = $(forElement);
    var element = forElement;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      // Safari fix
      if (element.offsetParent == docBody &&
        Element.getStyle(element, 'position') == 'absolute') break;
    } while (element = element.offsetParent);
    element = forElement;
    do {
      // Opera < 9.5 sets scrollTop/Left on both HTML and BODY elements.
      // Other browsers set it only on the HTML element. The BODY element
      // can be skipped since its scrollTop/Left should always be 0.
      if (element != docBody) {
        valueT -= element.scrollTop  || 0;
        valueL -= element.scrollLeft || 0;
      }
    } while (element = element.parentNode);    
    return new Element.Offset(valueL, valueT);
  }
  
  function absolutize(element) {
    element = $(element);
    
    if (Element.getStyle(element, 'position') === 'absolute') {
      return element;
    }
    
    var offsetParent = getOffsetParent(element);    
    var eOffset = element.viewportOffset(),
     pOffset = offsetParent.viewportOffset();
     
    var offset = eOffset.relativeTo(pOffset);
    var layout = element.getLayout();    
    
    element.store('prototype_absolutize_original_styles', {
      position: element.getStyle('position'),
      left:     element.getStyle('left'),
      top:      element.getStyle('top'),
      width:    element.getStyle('width'),
      height:   element.getStyle('height')
    });
    
    element.setStyle({
      position: 'absolute',
      top:    offset.top + 'px',
      left:   offset.left + 'px',
      width:  layout.get('width') + 'px',
      height: layout.get('height') + 'px'
    });
    
    return element;
  }
  
  function relativize(element) {
    element = $(element);
    if (Element.getStyle(element, 'position') === 'relative') {
      return element;
    }
    
    // Restore the original styles as captured by Element#absolutize.
    var originalStyles = 
     element.retrieve('prototype_absolutize_original_styles');
    
    if (originalStyles) element.setStyle(originalStyles);
    return element;
  }
  
  
  function scrollTo(element) {
    element = $(element);
    var pos = Element.cumulativeOffset(element);
    window.scrollTo(pos.left, pos.top);
    return element;
  }
  
  function makePositioned(element) {
    element = $(element);
    var position = Element.getStyle(element, 'position'), styles = {};
    if (position === 'static' || !position) {
      styles.position = 'relative';
      // When an element is `position: relative` with an undefined `top` and
      // `left`, Opera returns the offset relative to positioning context.
      if (Prototype.Browser.Opera) {
        styles.top  = 0;
        styles.left = 0;
      }
      Element.setStyle(element, styles);
      Element.store(element, 'prototype_made_positioned', true);
    }
    return element;
  }
  
  function undoPositioned(element) {
    element = $(element);
    var storage = Element.getStorage(element),
     madePositioned = storage.get('prototype_made_positioned');
    
    if (madePositioned) {
      storage.unset('prototype_made_positioned');
      Element.setStyle(element, {
        position: '',
        top:      '',
        bottom:   '',
        left:     '',
        right:    ''
      });
    }  
    return element;
  }
  
  function makeClipping(element) {
    element = $(element);
    
    var storage = Element.getStorage(element),
     madeClipping = storage.get('prototype_made_clipping');
    
    // The "prototype_made_clipping" storage key is meant to hold the
    // original CSS overflow value. A string value or `null` means that we've
    // called `makeClipping` already. An `undefined` value means we haven't.
    if (Object.isUndefined(madeClipping)) {
      var overflow = Element.getStyle(element, 'overflow');
      storage.set('prototype_made_clipping', overflow);
      if (overflow !== 'hidden')
        element.style.overflow = 'hidden';
    }
    
    return element;
  }
  
  function undoClipping(element) {
    element = $(element);
    var storage = Element.getStorage(element),
     overflow = storage.get('prototype_made_clipping');
    
    if (!Object.isUndefined(overflow)) {
      storage.unset('prototype_made_clipping');
      element.style.overflow = overflow || '';
    }
    
    return element;
  }
  
  function clonePosition(element, source, options) {
    options = Object.extend({
      setLeft:    true,
      setTop:     true,
      setWidth:   true,
      setHeight:  true,
      offsetTop:  0,
      offsetLeft: 0
    }, options || {});
    
    // Find page position of source.    
    source  = $(source);
    element = $(element);    
    var p, delta, layout, styles = {};
    if (options.setLeft || options.setTop) {
      p = Element.viewportOffset(source);
      delta = [0, 0];
      // A delta of 0/0 will work for `positioned: fixed` elements, but
      // for `position: absolute` we need to get the parent's offset.
      if (Element.getStyle(element, 'position') === 'absolute') {
        var parent = Element.getOffsetParent(element);
        if (parent !== document.body) delta = Element.viewportOffset(parent);
      }
    }
    if (options.setWidth || options.setHeight) {
      layout = Element.getLayout(source);
    }
    // Set position.
    if (options.setLeft)
      styles.left = (p[0] - delta[0] + options.offsetLeft) + 'px';
    if (options.setTop)
      styles.top  = (p[1] - delta[1] + options.offsetTop)  + 'px';
    
    if (options.setWidth)
      styles.width  = layout.get('border-box-width')  + 'px';
    if (options.setHeight)
      styles.height = layout.get('border-box-height') + 'px';
    
    return Element.setStyle(element, styles);
  }
  
    
  if (Prototype.Browser.IE) {
    // IE doesn't report offsets correctly for static elements, so we change them
    // to "relative" to get the values, then change them back.
    getOffsetParent = getOffsetParent.wrap(
      function(proceed, element) {
        element = $(element);
        
        // For unusual cases like these, we standardize on returning the BODY
        // element as the offset parent.
        if (isDocument(element) || isDetached(element) || isBody(element) || isHtml(element))
          return $(document.body);
        var position = element.getStyle('position');
        if (position !== 'static') return proceed(element);
        element.setStyle({ position: 'relative' });
        var value = proceed(element);
        element.setStyle({ position: position });
        return value;
      }
    );
    
    positionedOffset = positionedOffset.wrap(function(proceed, element) {
      element = $(element);
      if (!element.parentNode) return new Element.Offset(0, 0);
      var position = element.getStyle('position');
      if (position !== 'static') return proceed(element);
      // Trigger hasLayout on the offset parent so that IE6 reports
      // accurate offsetTop and offsetLeft values for position: fixed.
      var offsetParent = element.getOffsetParent();
      if (offsetParent && offsetParent.getStyle('position') === 'fixed')
        hasLayout(offsetParent);
      element.setStyle({ position: 'relative' });
      var value = proceed(element);
      element.setStyle({ position: position });
      return value;
    });
  } else if (Prototype.Browser.Webkit) {    
    // Safari returns margins on body which is incorrect if the child is absolutely
    // positioned.  For performance reasons, redefine Element#cumulativeOffset for
    // KHTML/WebKit only.
    cumulativeOffset = function(element) {
      element = $(element);
      var valueT = 0, valueL = 0;
      do {
        valueT += element.offsetTop  || 0;
        valueL += element.offsetLeft || 0;
        if (element.offsetParent == document.body) {
          if (Element.getStyle(element, 'position') == 'absolute') break;
        }
        element = element.offsetParent;
      } while (element);
      return new Element.Offset(valueL, valueT);
    };
  }
  
  
  Element.addMethods({
    getLayout:              getLayout,
    measure:                measure,
    getWidth:               getWidth,
    getHeight:              getHeight,
    getDimensions:          getDimensions,
    getOffsetParent:        getOffsetParent,
    cumulativeOffset:       cumulativeOffset,
    positionedOffset:       positionedOffset,
    cumulativeScrollOffset: cumulativeScrollOffset,
    viewportOffset:         viewportOffset,    
    absolutize:             absolutize,
    relativize:             relativize,
    scrollTo:               scrollTo,
    makePositioned:         makePositioned,
    undoPositioned:         undoPositioned,
    makeClipping:           makeClipping,
    undoClipping:           undoClipping,
    clonePosition:          clonePosition
  });
  
  function isBody(element) {
    return element.nodeName.toUpperCase() === 'BODY';
  }
  
  function isHtml(element) {
    return element.nodeName.toUpperCase() === 'HTML';
  }
  
  function isDocument(element) {
    return element.nodeType === Node.DOCUMENT_NODE;
  }
  
  function isDetached(element) {
    return element !== document.body &&
     !Element.descendantOf(element, document.body);
  }
  
  // If the browser supports the nonstandard `getBoundingClientRect`
  // (currently only IE and Firefox), it becomes far easier to obtain
  // true offsets.
  if ('getBoundingClientRect' in document.documentElement) {
    Element.addMethods({
      viewportOffset: function(element) {
        element = $(element);        
        if (isDetached(element)) return new Element.Offset(0, 0);
        var rect = element.getBoundingClientRect(),
         docEl = document.documentElement;
        // The HTML element on IE < 8 has a 2px border by default, giving
        // an incorrect offset. We correct this by subtracting clientTop
        // and clientLeft.
        return new Element.Offset(rect.left - docEl.clientLeft,
         rect.top - docEl.clientTop);
      }
    }); 
  }
  
  
})();
(function() {
  
  var IS_OLD_OPERA = Prototype.Browser.Opera &&
   (window.parseFloat(window.opera.version()) < 9.5);
  var ROOT = null;
  function getRootElement() {
    if (ROOT) return ROOT;    
    ROOT = IS_OLD_OPERA ? document.body : document.documentElement;
    return ROOT;
  }
  function getDimensions() {
    return { width: this.getWidth(), height: this.getHeight() };
  }
  
  function getWidth() {
    return getRootElement().clientWidth;
  }
  
  function getHeight() {
    return getRootElement().clientHeight;
  }
  
  function getScrollOffsets() {
    var x = window.pageXOffset || document.documentElement.scrollLeft ||
     document.body.scrollLeft;
    var y = window.pageYOffset || document.documentElement.scrollTop ||
     document.body.scrollTop;
     
    return new Element.Offset(x, y);
  }
  
  document.viewport = {
    getDimensions:    getDimensions,
    getWidth:         getWidth,
    getHeight:        getHeight,
    getScrollOffsets: getScrollOffsets
  };
  
})();
window.$$ = function() {
  var expression = $A(arguments).join(', ');
  return Prototype.Selector.select(expression, document);
};
Prototype.Selector = (function() {
  
  function select() {
    throw new Error('Method "Prototype.Selector.select" must be defined.');
  }
  function match() {
    throw new Error('Method "Prototype.Selector.match" must be defined.');
  }
  function find(elements, expression, index) {
    index = index || 0;
    var match = Prototype.Selector.match, length = elements.length, matchIndex = 0, i;
    for (i = 0; i < length; i++) {
      if (match(elements[i], expression) && index == matchIndex++) {
        return Element.extend(elements[i]);
      }
    }
  }
  
  function extendElements(elements) {
    for (var i = 0, length = elements.length; i < length; i++) {
      Element.extend(elements[i]);
    }
    return elements;
  }
  
  
  var K = Prototype.K;
  
  return {
    select: select,
    match: match,
    find: find,
    extendElements: (Element.extend === K) ? K : extendElements,
    extendElement: Element.extend
  };
})();
/*!
 * Sizzle CSS Selector Engine v1.9.4-pre
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-06-03
 */
(function( window, undefined ) {
var i,
	support,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,
	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,
	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	hasDuplicate = false,
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}
		return 0;
	},
	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,
	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},
	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	// Regular expressions
	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),
	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",
	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",
	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	rsibling = new RegExp( whitespace + "*[+~]" ),
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),
	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),
	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},
	rnative = /^[^{]+\{\s*\[native \w/,
	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,
	rescape = /'|\\/g,
	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?
		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :
		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}
function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;
	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}
	context = context || document;
	results = results || [];
	if ( !selector || typeof selector !== "string" ) {
		return results;
	}
	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}
	if ( documentIsHTML && !seed ) {
		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}
			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;
			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}
		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;
			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );
				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";
				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}
			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}
	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}
function createCache() {
	var keys = [];
	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	}
	return cache;
}
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}
function assert( fn ) {
	var div = document.createElement("div");
	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;
	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );
	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}
	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}
	return a ? 1 : -1;
}
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;
			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};
support = Sizzle.support = {};
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;
	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}
	// Set our document
	document = doc;
	docElem = doc.documentElement;
	// Support tests
	documentIsHTML = !isXML( doc );
	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent.attachEvent && parent !== parent.top ) {
		parent.attachEvent( "onbeforeunload", function() {
			setDocument();
		});
	}
	/* Attributes
	---------------------------------------------------------------------- */
	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});
	/* getElement(s)By*
	---------------------------------------------------------------------- */
	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});
	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";
		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});
	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});
	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}
	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );
			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}
				return tmp;
			}
			return results;
		};
	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};
	/* QSA/matchesSelector
	---------------------------------------------------------------------- */
	// QSA and matchesSelector support
	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];
	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];
	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";
			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}
			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});
		assert(function( div ) {
			// Support: Opera 10-12/IE8
			// ^= $= *= and empty values
			// Should not select anything
			// Support: Windows 8 Native Apps
			// The type attribute is restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "t", "" );
			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}
			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}
			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}
	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {
		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );
			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}
	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	/* Contains
	---------------------------------------------------------------------- */
	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = rnative.test( docElem.contains ) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};
	/* Sorting
	---------------------------------------------------------------------- */
	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}
		var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );
		if ( compare ) {
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
				// Choose the first element that is related to our preferred document
				if ( a === doc || contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || contains(preferredDoc, b) ) {
					return 1;
				}
				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}
			return compare & 4 ? -1 : 1;
		}
		// Not directly comparable, sort on existence of method
		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}
		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}
		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}
		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :
			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};
	return doc;
};
Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};
Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}
	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );
	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
		try {
			var ret = matches.call( elem, expr );
			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}
	return Sizzle( expr, document, null, [elem] ).length > 0;
};
Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};
Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}
	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;
	return val === undefined ?
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null :
		val;
};
Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;
	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );
	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}
	return results;
};
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;
	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes
	return ret;
};
Expr = Sizzle.selectors = {
	// Can be adjusted by the user
	cacheLength: 50,
	createPseudo: markFunction,
	match: matchExpr,
	attrHandle: {},
	find: {},
	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},
	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );
			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );
			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}
			return match.slice( 0, 4 );
		},
		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();
			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}
				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}
			return match;
		},
		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];
			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}
			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];
			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}
			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},
	filter: {
		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},
		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];
			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},
		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );
				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}
				result += "";
				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},
		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";
			return first === 1 && last === 0 ?
				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :
				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;
					if ( parent ) {
						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}
						start = [ forward ? parent.firstChild : parent.lastChild ];
						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {
								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}
						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];
						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {
								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}
									if ( node === elem ) {
										break;
									}
								}
							}
						}
						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},
		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );
			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}
			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}
			return fn;
		}
	},
	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );
			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;
					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),
		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),
		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),
		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),
		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},
		"root": function( elem ) {
			return elem === docElem;
		},
		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},
		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},
		"disabled": function( elem ) {
			return elem.disabled === true;
		},
		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},
		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}
			return elem.selected === true;
		},
		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},
		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},
		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},
		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},
		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},
		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},
		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),
		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),
		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),
		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),
		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),
		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),
		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};
Expr.pseudos["nth"] = Expr.pseudos["eq"];
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();
function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];
	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}
	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;
	while ( soFar ) {
		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}
		matched = false;
		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}
		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}
		if ( !matched ) {
			break;
		}
	}
	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}
function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}
function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;
	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :
		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;
			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}
function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}
function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;
	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}
	return newUnmatched;
}
function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,
			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,
			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
					// ...intermediate processing is necessary
					[] :
					// ...otherwise use results directly
					results :
				matcherIn;
		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}
		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );
			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}
		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}
				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {
						seed[temp] = !(results[temp] = elem);
					}
				}
			}
		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}
function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,
		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];
	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}
	return elementMatcher( matchers );
}
function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);
			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}
			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}
				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}
					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}
			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}
				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}
					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}
				// Add matches to results
				push.apply( results, setMatched );
				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {
					Sizzle.uniqueSort( results );
				}
			}
			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}
			return unmatched;
		};
	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}
compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];
	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}
		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};
function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}
function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );
	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {
			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector.slice( tokens.shift().value.length );
			}
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
						break;
					}
				}
			}
		}
	}
	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector )
	);
	return results;
}
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
support.detectDuplicates = hasDuplicate;
setDocument();
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return (val = elem.getAttributeNode( name )) && val.specified ?
				val.value :
				elem[ name ] === true ? name.toLowerCase() : null;
		}
	});
}
if ( true ) {
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return Sizzle; }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
	window.Sizzle = Sizzle;
}
})( window );
Prototype._original_property = window.Sizzle;
;(function(engine) {
  var extendElements = Prototype.Selector.extendElements;
  function select(selector, scope) {
    return extendElements(engine(selector, scope || document));
  }
  function match(element, selector) {
    return engine.matches(selector, [element]).length == 1;
  }
  Prototype.Selector.engine = engine;
  Prototype.Selector.select = select;
  Prototype.Selector.match = match;
})(Sizzle);
window.Sizzle = Prototype._original_property;
delete Prototype._original_property;
var Form = {
  reset: function(form) {
    form = $(form);
    form.reset();
    return form;
  },
  serializeElements: function(elements, options) {
    // An earlier version accepted a boolean second parameter (hash) where
    // the default if omitted was false; respect that, but if they pass in an
    // options object (e.g., the new signature) but don't specify the hash option,
    // default true, as that's the new preferred approach.
    if (typeof options != 'object') options = { hash: !!options };
    else if (Object.isUndefined(options.hash)) options.hash = true;
    var key, value, submitted = false, submit = options.submit, accumulator, initial;
    
    if (options.hash) {
      initial = {};
      accumulator = function(result, key, value) {
        if (key in result) {
          if (!Object.isArray(result[key])) result[key] = [result[key]];
          result[key] = result[key].concat(value);
        } else result[key] = value;
        return result;
      };
    } else {
      initial = '';
      accumulator = function(result, key, values) {
        if (!Object.isArray(values)) {values = [values];}
        if (!values.length) {return result;}
        // According to the spec, spaces should be '+' rather than '%20'.
        var encodedKey = encodeURIComponent(key).gsub(/%20/, '+');
        return result + (result ? "&" : "") + values.map(function (value) {
          // Normalize newlines as \r\n because the HTML spec says newlines should
          // be encoded as CRLFs.
          value = value.gsub(/(\r)?\n/, '\r\n');
          value = encodeURIComponent(value);
          // According to the spec, spaces should be '+' rather than '%20'.
          value = value.gsub(/%20/, '+');
          return encodedKey + "=" + value;
        }).join("&");
      };
    }
    
    return elements.inject(initial, function(result, element) {
      if (!element.disabled && element.name) {
        key = element.name; value = $(element).getValue();
        if (value != null && element.type != 'file' && (element.type != 'submit' || (!submitted &&
            submit !== false && (!submit || key == submit) && (submitted = true)))) {
          result = accumulator(result, key, value);
        }
      }
      return result;
    });
  }
};
Form.Methods = {
  serialize: function(form, options) {
    return Form.serializeElements(Form.getElements(form), options);
  },
  
  getElements: function(form) {
    var elements = $(form).getElementsByTagName('*');
    var element, results = [], serializers = Form.Element.Serializers;
    
    for (var i = 0; element = elements[i]; i++) {
      if (serializers[element.tagName.toLowerCase()])
        results.push(Element.extend(element));
    }
    return results;
  },
  getInputs: function(form, typeName, name) {
    form = $(form);
    var inputs = form.getElementsByTagName('input');
    if (!typeName && !name) return $A(inputs).map(Element.extend);
    for (var i = 0, matchingInputs = [], length = inputs.length; i < length; i++) {
      var input = inputs[i];
      if ((typeName && input.type != typeName) || (name && input.name != name))
        continue;
      matchingInputs.push(Element.extend(input));
    }
    return matchingInputs;
  },
  disable: function(form) {
    form = $(form);
    Form.getElements(form).invoke('disable');
    return form;
  },
  enable: function(form) {
    form = $(form);
    Form.getElements(form).invoke('enable');
    return form;
  },
  findFirstElement: function(form) {
    var elements = $(form).getElements().findAll(function(element) {
      return 'hidden' != element.type && !element.disabled;
    });
    var firstByIndex = elements.findAll(function(element) {
      return element.hasAttribute('tabIndex') && element.tabIndex >= 0;
    }).sortBy(function(element) { return element.tabIndex }).first();
    return firstByIndex ? firstByIndex : elements.find(function(element) {
      return /^(?:input|select|textarea)$/i.test(element.tagName);
    });
  },
  focusFirstElement: function(form) {
    form = $(form);
    var element = form.findFirstElement();
    if (element) element.activate();
    return form;
  },
  request: function(form, options) {
    form = $(form), options = Object.clone(options || { });
    var params = options.parameters, action = form.readAttribute('action') || '';
    if (action.blank()) action = window.location.href;
    options.parameters = form.serialize(true);
    if (params) {
      if (Object.isString(params)) params = params.toQueryParams();
      Object.extend(options.parameters, params);
    }
    if (form.hasAttribute('method') && !options.method)
      options.method = form.method;
    return new Ajax.Request(action, options);
  }
};
/*--------------------------------------------------------------------------*/
Form.Element = {
  focus: function(element) {
    $(element).focus();
    return element;
  },
  select: function(element) {
    $(element).select();
    return element;
  }
};
Form.Element.Methods = {
  serialize: function(element) {
    element = $(element);
    if (!element.disabled && element.name) {
      var value = element.getValue();
      if (value != undefined) {
        var pair = { };
        pair[element.name] = value;
        return Object.toQueryString(pair);
      }
    }
    return '';
  },
  getValue: function(element) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    return Form.Element.Serializers[method](element);
  },
  setValue: function(element, value) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    Form.Element.Serializers[method](element, value);
    return element;
  },
  clear: function(element) {
    $(element).value = '';
    return element;
  },
  present: function(element) {
    return $(element).value != '';
  },
  activate: function(element) {
    element = $(element);
    try {
      element.focus();
      if (element.select && (element.tagName.toLowerCase() != 'input' ||
          !(/^(?:button|reset|submit)$/i.test(element.type))))
        element.select();
    } catch (e) { }
    return element;
  },
  disable: function(element) {
    element = $(element);
    element.disabled = true;
    return element;
  },
  enable: function(element) {
    element = $(element);
    element.disabled = false;
    return element;
  }
};
/*--------------------------------------------------------------------------*/
var Field = Form.Element;
var $F = Form.Element.Methods.getValue;
/*--------------------------------------------------------------------------*/
Form.Element.Serializers = (function() {
  function input(element, value) {
    switch (element.type.toLowerCase()) {
      case 'checkbox':
      case 'radio':
        return inputSelector(element, value);
      default:
        return valueSelector(element, value);
    }
  }
  
  function inputSelector(element, value) {
    if (Object.isUndefined(value))
      return element.checked ? element.value : null;
    else element.checked = !!value;    
  }
  
  function valueSelector(element, value) {
    if (Object.isUndefined(value)) return element.value;
    else element.value = value;
  }
  
  function select(element, value) {
    if (Object.isUndefined(value))
      return (element.type === 'select-one' ? selectOne : selectMany)(element);
       
    var opt, currentValue, single = !Object.isArray(value);
    for (var i = 0, length = element.length; i < length; i++) {
      opt = element.options[i];
      currentValue = this.optionValue(opt);
      if (single) {
        if (currentValue == value) {
          opt.selected = true;
          return;
        }
      }
      else opt.selected = value.include(currentValue);
    }
  }
  
  function selectOne(element) {
    var index = element.selectedIndex;
    return index >= 0 ? optionValue(element.options[index]) : null;
  }
  
  function selectMany(element) {
    var values, length = element.length;
    if (!length) return null;
    for (var i = 0, values = []; i < length; i++) {
      var opt = element.options[i];
      if (opt.selected) values.push(optionValue(opt));
    }
    return values;
  }
  
  function optionValue(opt) {
    return Element.hasAttribute(opt, 'value') ? opt.value : opt.text;
  }
  
  return {
    input:         input,
    inputSelector: inputSelector,
    textarea:      valueSelector,
    select:        select,
    selectOne:     selectOne,
    selectMany:    selectMany,
    optionValue:   optionValue,
    button:        valueSelector
  };
})();
/*--------------------------------------------------------------------------*/
Abstract.TimedObserver = Class.create(PeriodicalExecuter, {
  initialize: function($super, element, frequency, callback) {
    $super(callback, frequency);
    this.element   = $(element);
    this.lastValue = this.getValue();
  },
  execute: function() {
    var value = this.getValue();
    if (Object.isString(this.lastValue) && Object.isString(value) ?
        this.lastValue != value : String(this.lastValue) != String(value)) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  }
});
Form.Element.Observer = Class.create(Abstract.TimedObserver, {
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});
Form.Observer = Class.create(Abstract.TimedObserver, {
  getValue: function() {
    return Form.serialize(this.element);
  }
});
/*--------------------------------------------------------------------------*/
Abstract.EventObserver = Class.create({
  initialize: function(element, callback) {
    this.element  = $(element);
    this.callback = callback;
    this.lastValue = this.getValue();
    if (this.element.tagName.toLowerCase() == 'form')
      this.registerFormCallbacks();
    else
      this.registerCallback(this.element);
  },
  onElementEvent: function() {
    var value = this.getValue();
    if (this.lastValue != value) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  },
  registerFormCallbacks: function() {
    Form.getElements(this.element).each(this.registerCallback, this);
  },
  registerCallback: function(element) {
    if (element.type) {
      switch (element.type.toLowerCase()) {
        case 'checkbox':
        case 'radio':
          Event.observe(element, 'click', this.onElementEvent.bind(this));
          break;
        default:
          Event.observe(element, 'change', this.onElementEvent.bind(this));
          break;
      }
    }
  }
});
Form.Element.EventObserver = Class.create(Abstract.EventObserver, {
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});
Form.EventObserver = Class.create(Abstract.EventObserver, {
  getValue: function() {
    return Form.serialize(this.element);
  }
});
(function(GLOBAL) {
  var DIV = document.createElement('div');
  var docEl = document.documentElement;
  var MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED = 'onmouseenter' in docEl
   && 'onmouseleave' in docEl;
  
  var Event = {
    KEY_BACKSPACE: 8,
    KEY_TAB:       9,
    KEY_RETURN:   13,
    KEY_ESC:      27,
    KEY_LEFT:     37,
    KEY_UP:       38,
    KEY_RIGHT:    39,
    KEY_DOWN:     40,
    KEY_DELETE:   46,
    KEY_HOME:     36,
    KEY_END:      35,
    KEY_PAGEUP:   33,
    KEY_PAGEDOWN: 34,
    KEY_INSERT:   45
  };
  
  // We need to support three different event "modes":
  //  1. browsers with only DOM L2 Events (WebKit, FireFox);
  //  2. browsers with only IE's legacy events system (IE 6-8);
  //  3. browsers with _both_ systems (IE 9 and arguably Opera).
  //
  // Groups 1 and 2 are easy; group three is trickier.
  var isIELegacyEvent = function(event) { return false; };
  if (window.attachEvent) {
    if (window.addEventListener) {
      // Both systems are supported. We need to decide at runtime.
      // (Though Opera supports both systems, the event object appears to be
      // the same no matter which system is used. That means that this function
      // will always return `true` in Opera, but that's OK; it keeps us from
      // having to do a browser sniff.)
      isIELegacyEvent = function(event) {
        return !(event instanceof window.Event);
      };
    } else {
      // No support for DOM L2 events. All events will be legacy.
      isIELegacyEvent = function(event) { return true; };
    }
  }
  
  // The two systems have different ways of indicating which button was used
  // for a mouse event.
  var _isButton;
  function _isButtonForDOMEvents(event, code) {
    return event.which ? (event.which === code + 1) : (event.button === code);
  }
  var legacyButtonMap = { 0: 1, 1: 4, 2: 2 };
  function _isButtonForLegacyEvents(event, code) {
    return event.button === legacyButtonMap[code];
  }
  // In WebKit we have to account for when the user holds down the "meta" key.
  function _isButtonForWebKit(event, code) {
    switch (code) {
      case 0: return event.which == 1 && !event.metaKey;
      case 1: return event.which == 2 || (event.which == 1 && event.metaKey);
      case 2: return event.which == 3;
      default: return false;
    }
  }
  if (window.attachEvent) {
    if (!window.addEventListener) {
      // Legacy IE events only.
      _isButton = _isButtonForLegacyEvents;      
    } else {
      // Both systems are supported; decide at runtime.
      _isButton = function(event, code) {
        return isIELegacyEvent(event) ? _isButtonForLegacyEvents(event, code) :
         _isButtonForDOMEvents(event, code);
      }
    }
  } else if (Prototype.Browser.WebKit) {
    _isButton = _isButtonForWebKit;
  } else {
    _isButton = _isButtonForDOMEvents;
  }
  
  function isLeftClick(event)   { return _isButton(event, 0) }
  function isMiddleClick(event) { return _isButton(event, 1) }
  function isRightClick(event)  { return _isButton(event, 2) }
  
  function element(event) {
    // The public version of `Event.element` is a thin wrapper around the
    // private `_element` method below. We do this so that we can use it
    // internally as `_element` without having to extend the node.
    return Element.extend(_element(event));
  }
  
  function _element(event) {
    event = Event.extend(event);
    var node = event.target, type = event.type,
     currentTarget = event.currentTarget;
    if (currentTarget && currentTarget.tagName) {
      // Firefox screws up the "click" event when moving between radio buttons
      // via arrow keys. It also screws up the "load" and "error" events on images,
      // reporting the document as the target instead of the original image.
      if (type === 'load' || type === 'error' ||
        (type === 'click' && currentTarget.tagName.toLowerCase() === 'input'
          && currentTarget.type === 'radio'))
            node = currentTarget;
    }
    // Fix a Safari bug where a text node gets passed as the target of an
    // anchor click rather than the anchor itself.
    return node.nodeType == Node.TEXT_NODE ? node.parentNode : node;
  }
  function findElement(event, expression) {
    var element = _element(event), selector = Prototype.Selector;
    if (!expression) return Element.extend(element);
    while (element) {
      if (Object.isElement(element) && selector.match(element, expression))
        return Element.extend(element);
      element = element.parentNode;
    }
  }
  
  function pointer(event) {
    return { x: pointerX(event), y: pointerY(event) };
  }
  function pointerX(event) {
    var docElement = document.documentElement,
     body = document.body || { scrollLeft: 0 };
    return event.pageX || (event.clientX +
      (docElement.scrollLeft || body.scrollLeft) -
      (docElement.clientLeft || 0));
  }
  function pointerY(event) {
    var docElement = document.documentElement,
     body = document.body || { scrollTop: 0 };
    return  event.pageY || (event.clientY +
       (docElement.scrollTop || body.scrollTop) -
       (docElement.clientTop || 0));
  }
  function stop(event) {
    Event.extend(event);
    event.preventDefault();
    event.stopPropagation();
    // Set a "stopped" property so that a custom event can be inspected
    // after the fact to determine whether or not it was stopped.
    event.stopped = true;
  }
  Event.Methods = {
    isLeftClick:   isLeftClick,
    isMiddleClick: isMiddleClick,
    isRightClick:  isRightClick,
    element:     element,
    findElement: findElement,
    pointer:  pointer,
    pointerX: pointerX,
    pointerY: pointerY,
    stop: stop
  };
  // Compile the list of methods that get extended onto Events.
  var methods = Object.keys(Event.Methods).inject({ }, function(m, name) {
    m[name] = Event.Methods[name].methodize();
    return m;
  });
  if (window.attachEvent) {
    // For IE's event system, we need to do some work to make the event
    // object behave like a standard event object.
    function _relatedTarget(event) {
      var element;
      switch (event.type) {
        case 'mouseover':
        case 'mouseenter':
          element = event.fromElement;
          break;
        case 'mouseout':
        case 'mouseleave':
          element = event.toElement;
          break;
        default:
          return null;
      }
      return Element.extend(element);
    }
    // These methods should be added _only_ to legacy IE event objects.
    var additionalMethods = {
      stopPropagation: function() { this.cancelBubble = true },
      preventDefault:  function() { this.returnValue = false },
      inspect: function() { return '[object Event]' }
    };
    // IE's method for extending events.
    Event.extend = function(event, element) {
      if (!event) return false;
      
      // If it's not a legacy event, it doesn't need extending.
      if (!isIELegacyEvent(event)) return event;
      // Mark this event so we know not to extend a second time.
      if (event._extendedByPrototype) return event;
      event._extendedByPrototype = Prototype.emptyFunction;
      
      var pointer = Event.pointer(event);
      // The optional `element` argument gives us a fallback value for the
      // `target` property in case IE doesn't give us through `srcElement`.
      Object.extend(event, {
        target: event.srcElement || element,
        relatedTarget: _relatedTarget(event),
        pageX:  pointer.x,
        pageY:  pointer.y
      });
      
      Object.extend(event, methods);
      Object.extend(event, additionalMethods);
      
      return event;
    };
  } else {
    // Only DOM events, so no manual extending necessary.
    Event.extend = Prototype.K;
  }
  
  if (window.addEventListener) {
    // In all browsers that support DOM L2 Events, we can augment
    // `Event.prototype` directly.
    Event.prototype = window.Event.prototype || document.createEvent('HTMLEvents').__proto__;
    Object.extend(Event.prototype, methods);
  }
  
  //
  // EVENT REGISTRY
  //
  var EVENT_TRANSLATIONS = {
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  };
  
  function getDOMEventName(eventName) {
    return EVENT_TRANSLATIONS[eventName] || eventName;
  }
  
  if (MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED)
    getDOMEventName = Prototype.K;
  
  function getUniqueElementID(element) {
    if (element === window) return 0;
    // Need to use actual `typeof` operator to prevent errors in some
    // environments when accessing node expandos.
    if (typeof element._prototypeUID === 'undefined')
      element._prototypeUID = Element.Storage.UID++;
    return element._prototypeUID;
  }
  
  // In Internet Explorer, DOM nodes have a `uniqueID` property. Saves us
  // from inventing our own.
  function getUniqueElementID_IE(element) {
    if (element === window) return 0;
    // The document object's `uniqueID` property changes each time you read it.
    if (element == document) return 1;
    return element.uniqueID;
  }
  
  if ('uniqueID' in DIV)
    getUniqueElementID = getUniqueElementID_IE;
  function isCustomEvent(eventName) {
    return eventName.include(':');
  }
  Event._isCustomEvent = isCustomEvent;
  // These two functions take an optional UID as a second argument so that we
  // can skip lookup if we've already got the element's UID.
  function getRegistryForElement(element, uid) {
    var CACHE = GLOBAL.Event.cache;
    if (Object.isUndefined(uid))
      uid = getUniqueElementID(element);
    if (!CACHE[uid]) CACHE[uid] = { element: element };
    return CACHE[uid];
  }
  
  function destroyRegistryForElement(element, uid) {
    if (Object.isUndefined(uid))
      uid = getUniqueElementID(element);
    delete GLOBAL.Event.cache[uid];
  }
  
  // The `register` and `unregister` functions handle creating the responder
  // and managing an event registry. They _don't_ attach and detach the
  // listeners themselves.
  
  // Add an event to the element's event registry.
  function register(element, eventName, handler) {
    var registry = getRegistryForElement(element);
    if (!registry[eventName]) registry[eventName] = [];
    var entries = registry[eventName];
    // Make sure this handler isn't already attached.
    var i = entries.length;
    while (i--)
      if (entries[i].handler === handler) return null;
      
    var uid = getUniqueElementID(element);
    var responder = GLOBAL.Event._createResponder(uid, eventName, handler);
    var entry = {
      responder: responder,
      handler:   handler
    };
    entries.push(entry);    
    return entry;
  }
  
  // Remove an event from the element's event registry.
  function unregister(element, eventName, handler) {
    var registry = getRegistryForElement(element);
    var entries = registry[eventName];
    if (!entries) return;
    
    var i = entries.length, entry;
    while (i--) {
      if (entries[i].handler === handler) {
        entry = entries[i];
        break;
      }
    }
    
    // This handler wasn't in the collection, so it doesn't need to be
    // unregistered.
    if (!entry) return;
    // Remove the entry from the collection;
    var index = entries.indexOf(entry);
    entries.splice(index, 1);
    if (entries.length == 0) {
      stopObservingEventName(element, eventName);
    }
    return entry;
  }  
  
  
  //
  // EVENT OBSERVING
  //
  function observe(element, eventName, handler) {
    element = $(element);
    var entry = register(element, eventName, handler);
    
    if (entry === null) return element;
    var responder = entry.responder;    
    if (isCustomEvent(eventName))
      observeCustomEvent(element, eventName, responder);
    else
      observeStandardEvent(element, eventName, responder);
      
    return element;
  }
  
  function observeStandardEvent(element, eventName, responder) {
    var actualEventName = getDOMEventName(eventName);
    if (element.addEventListener) {
      element.addEventListener(actualEventName, responder, false);
    } else {
      element.attachEvent('on' + actualEventName, responder);
    }
  }
  
  function observeCustomEvent(element, eventName, responder) {
    if (element.addEventListener) {
      element.addEventListener('dataavailable', responder, false);
    } else {
      // We observe two IE-proprietarty events: one for custom events that
      // bubble and one for custom events that do not bubble.
      element.attachEvent('ondataavailable', responder);
      element.attachEvent('onlosecapture',   responder);
    }
  }
  
  function stopObserving(element, eventName, handler) {
    element = $(element);
    var handlerGiven = !Object.isUndefined(handler),
     eventNameGiven = !Object.isUndefined(eventName);
     
    if (!eventNameGiven && !handlerGiven) {
      stopObservingElement(element);
      return element;
    }
    
    if (!handlerGiven) {
      stopObservingEventName(element, eventName);
      return element;
    }
    
    var entry = unregister(element, eventName, handler);
    
    if (!entry) return element; 
    removeEvent(element, eventName, entry.responder);
    return element;
  }
  
  function stopObservingStandardEvent(element, eventName, responder) {
    var actualEventName = getDOMEventName(eventName);
    if (element.removeEventListener) {
      element.removeEventListener(actualEventName, responder, false);      
    } else {
      element.detachEvent('on' + actualEventName, responder);
    }
  }
  
  function stopObservingCustomEvent(element, eventName, responder) {
    if (element.removeEventListener) {
      element.removeEventListener('dataavailable', responder, false);
    } else {
      element.detachEvent('ondataavailable', responder);
      element.detachEvent('onlosecapture',   responder);
    }
  }
  
  // The `stopObservingElement` and `stopObservingEventName` functions are
  // for bulk removal of event listeners. We use them rather than recurse
  // back into `stopObserving` to avoid touching the registry more often than
  // necessary.
  // Stop observing _all_ listeners on an element.
  function stopObservingElement(element) {
    // Do a manual registry lookup because we don't want to create a registry
    // if one doesn't exist.
    var uid = getUniqueElementID(element), registry = GLOBAL.Event.cache[uid];
    // This way we can return early if there is no registry.
    if (!registry) return;
    destroyRegistryForElement(element, uid);
    var entries, i;
    for (var eventName in registry) {
      // Explicitly skip elements so we don't accidentally find one with a
      // `length` property.
      if (eventName === 'element') continue;
      entries = registry[eventName];
      i = entries.length;
      while (i--)
        removeEvent(element, eventName, entries[i].responder);
    }
  }
  
  // Stop observing all listeners of a certain event name on an element.
  function stopObservingEventName(element, eventName) {
    var registry = getRegistryForElement(element);
    var entries = registry[eventName];
    if (!entries) return;
    delete registry[eventName];
    
    var i = entries.length;
    while (i--)
      removeEvent(element, eventName, entries[i].responder);
    for (var name in registry) {
      if (name === 'element') continue;
      return; // There is another registered event
    }
    // No other events for the element, destroy the registry:
    destroyRegistryForElement(element);
  }
  
  function removeEvent(element, eventName, handler) {
    if (isCustomEvent(eventName))
      stopObservingCustomEvent(element, eventName, handler);
    else
      stopObservingStandardEvent(element, eventName, handler);
  }
  
  
  
  // FIRING CUSTOM EVENTS
  function getFireTarget(element) {
    if (element !== document) return element;
    if (document.createEvent && !element.dispatchEvent)
      return document.documentElement;
    return element;
  }
  
  function fire(element, eventName, memo, bubble) {
    element = getFireTarget($(element));
    if (Object.isUndefined(bubble)) bubble = true;      
    memo = memo || {};
      
    var event = fireEvent(element, eventName, memo, bubble);
    return Event.extend(event);
  }
  
  function fireEvent_DOM(element, eventName, memo, bubble) {
    var event = document.createEvent('HTMLEvents');
    event.initEvent('dataavailable', bubble, true);
    
    event.eventName = eventName;
    event.memo = memo;
    
    element.dispatchEvent(event);
    return event;
  }
  
  function fireEvent_IE(element, eventName, memo, bubble) {
    var event = document.createEventObject();
    event.eventType = bubble ? 'ondataavailable' : 'onlosecapture';
    
    event.eventName = eventName;
    event.memo = memo;
    
    element.fireEvent(event.eventType, event);    
    return event;
  }
  
  var fireEvent = document.createEvent ? fireEvent_DOM : fireEvent_IE;
  
  
  // EVENT DELEGATION
  
  Event.Handler = Class.create({
    initialize: function(element, eventName, selector, callback) {
      this.element   = $(element);
      this.eventName = eventName;
      this.selector  = selector;
      this.callback  = callback;
      this.handler   = this.handleEvent.bind(this);
    },
    
    start: function() {
      Event.observe(this.element, this.eventName, this.handler);
      return this;
    },
    
    stop: function() {
      Event.stopObserving(this.element, this.eventName, this.handler);
      return this;
    },
    
    handleEvent: function(event) {
      var element = Event.findElement(event, this.selector);
      if (element) this.callback.call(this.element, event, element);
    }
  });
  
  function on(element, eventName, selector, callback) {
    element = $(element);
    if (Object.isFunction(selector) && Object.isUndefined(callback)) {
      callback = selector, selector = null;
    }
    
    return new Event.Handler(element, eventName, selector, callback).start();
  }
  
  Object.extend(Event, Event.Methods);
  Object.extend(Event, {
    fire:          fire,
    observe:       observe,
    stopObserving: stopObserving,
    on:            on
  });
  Element.addMethods({
    fire:          fire,
    observe:       observe,
    stopObserving: stopObserving,
    
    on:            on
  });
  Object.extend(document, {
    fire:          fire.methodize(),
    observe:       observe.methodize(),
    stopObserving: stopObserving.methodize(),
    
    on:            on.methodize(),
    loaded:        false
  });
  // Export to the global scope.
  if (GLOBAL.Event) Object.extend(window.Event, Event);
  else GLOBAL.Event = Event;
  
  GLOBAL.Event.cache = {};
    
  function destroyCache_IE() {
    GLOBAL.Event.cache = null;
  }
  
  if (window.attachEvent)
    window.attachEvent('onunload', destroyCache_IE);
    
  DIV = null;
  docEl = null;
})(this);
(function(GLOBAL) {  
  /* Code for creating leak-free event responders is based on work by
   John-David Dalton. */
  
  var docEl = document.documentElement;
  var MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED = 'onmouseenter' in docEl
    && 'onmouseleave' in docEl;
    
  function isSimulatedMouseEnterLeaveEvent(eventName) {
    return !MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED &&
     (eventName === 'mouseenter' || eventName === 'mouseleave');
  }
  
  // The functions for creating responders accept the element's UID rather
  // than the element itself. This way, there are _no_ DOM objects inside the
  // closure we create, meaning there's no need to unregister event listeners
  // on unload.
  function createResponder(uid, eventName, handler) {    
    if (Event._isCustomEvent(eventName))
      return createResponderForCustomEvent(uid, eventName, handler);      
    if (isSimulatedMouseEnterLeaveEvent(eventName))
      return createMouseEnterLeaveResponder(uid, eventName, handler);
    
    return function(event) {
      if (!Event.cache) return;
      
      var element = Event.cache[uid].element;
      Event.extend(event, element);
      handler.call(element, event);
    };
  }
  
  function createResponderForCustomEvent(uid, eventName, handler) {
    return function(event) {
      var element = Event.cache[uid] !== undefined ? Event.cache[uid].element : event.target;
      if (Object.isUndefined(event.eventName))
        return false;
        
      if (event.eventName !== eventName)
        return false;
        
      Event.extend(event, element);
      handler.call(element, event);
    };
  }
  
  function createMouseEnterLeaveResponder(uid, eventName, handler) {
    return function(event) {
      var element = Event.cache[uid].element;
      
      Event.extend(event, element);
      var parent = event.relatedTarget;
      
      // Walk up the DOM tree to see if the related target is a descendant of
      // the original element. If it is, we ignore the event to match the
      // behavior of mouseenter/mouseleave.
      while (parent && parent !== element) {
        try { parent = parent.parentNode; }
        catch(e) { parent = element; }
      }
      
      if (parent === element) return;      
      handler.call(element, event);
    }
  }
  
  GLOBAL.Event._createResponder = createResponder;
  docEl = null;
})(this);
(function(GLOBAL) {
  /* Support for the DOMContentLoaded event is based on work by Dan Webb,
     Matthias Miller, Dean Edwards, John Resig, and Diego Perini. */
  
  var TIMER;
  
  function fireContentLoadedEvent() {
    if (document.loaded) return;
    if (TIMER) window.clearTimeout(TIMER);
    document.loaded = true;
    document.fire('dom:loaded');
  }
  
  function checkReadyState() {
    if (document.readyState === 'complete') {
      document.detachEvent('onreadystatechange', checkReadyState);
      fireContentLoadedEvent();
    }
  }
  
  function pollDoScroll() {
    try {
      document.documentElement.doScroll('left');
    } catch (e) {
      TIMER = pollDoScroll.defer();
      return;
    }
    
    fireContentLoadedEvent();
  }
  if (document.readyState === 'complete') {
    // We must have been loaded asynchronously, because the DOMContentLoaded
    // event has already fired. We can just fire `dom:loaded` and be done
    // with it.
    fireContentLoadedEvent();
    return;
  }
  
  if (document.addEventListener) {
    // All browsers that support DOM L2 Events support DOMContentLoaded,
    // including IE 9.
    document.addEventListener('DOMContentLoaded', fireContentLoadedEvent, false);
  } else {
    document.attachEvent('onreadystatechange', checkReadyState);
    if (window == top) TIMER = pollDoScroll.defer();
  }
  
  // Worst-case fallback.
  Event.observe(window, 'load', fireContentLoadedEvent);
})(this);
Element.addMethods();
/*------------------------------- DEPRECATED -------------------------------*/
Hash.toQueryString = Object.toQueryString;
var Toggle = { display: Element.toggle };
Element.Methods.childOf = Element.Methods.descendantOf;
var Insertion = {
  Before: function(element, content) {
    return Element.insert(element, {before:content});
  },
  Top: function(element, content) {
    return Element.insert(element, {top:content});
  },
  Bottom: function(element, content) {
    return Element.insert(element, {bottom:content});
  },
  After: function(element, content) {
    return Element.insert(element, {after:content});
  }
};
var $continue = new Error('"throw $continue" is deprecated, use "return" instead');
var Position = {
  // set to true if needed, warning: firefox performance problems
  // NOT neeeded for page scrolling, only if draggable contained in
  // scrollable elements
  includeScrollOffsets: false,
  // must be called before calling withinIncludingScrolloffset, every time the
  // page is scrolled
  prepare: function() {
    this.deltaX =  window.pageXOffset
                || document.documentElement.scrollLeft
                || document.body.scrollLeft
                || 0;
    this.deltaY =  window.pageYOffset
                || document.documentElement.scrollTop
                || document.body.scrollTop
                || 0;
  },
  // caches x/y coordinate pair to use with overlap
  within: function(element, x, y) {
    if (this.includeScrollOffsets)
      return this.withinIncludingScrolloffsets(element, x, y);
    this.xcomp = x;
    this.ycomp = y;
    this.offset = Element.cumulativeOffset(element);
    return (y >= this.offset[1] &&
            y <  this.offset[1] + element.offsetHeight &&
            x >= this.offset[0] &&
            x <  this.offset[0] + element.offsetWidth);
  },
  withinIncludingScrolloffsets: function(element, x, y) {
    var offsetcache = Element.cumulativeScrollOffset(element);
    this.xcomp = x + offsetcache[0] - this.deltaX;
    this.ycomp = y + offsetcache[1] - this.deltaY;
    this.offset = Element.cumulativeOffset(element);
    return (this.ycomp >= this.offset[1] &&
            this.ycomp <  this.offset[1] + element.offsetHeight &&
            this.xcomp >= this.offset[0] &&
            this.xcomp <  this.offset[0] + element.offsetWidth);
  },
  // within must be called directly before
  overlap: function(mode, element) {
    if (!mode) return 0;
    if (mode == 'vertical')
      return ((this.offset[1] + element.offsetHeight) - this.ycomp) /
        element.offsetHeight;
    if (mode == 'horizontal')
      return ((this.offset[0] + element.offsetWidth) - this.xcomp) /
        element.offsetWidth;
  },
  // Deprecation layer -- use newer Element methods now (1.5.2).
  cumulativeOffset: Element.Methods.cumulativeOffset,
  positionedOffset: Element.Methods.positionedOffset,
  absolutize: function(element) {
    Position.prepare();
    return Element.absolutize(element);
  },
  relativize: function(element) {
    Position.prepare();
    return Element.relativize(element);
  },
  realOffset: Element.Methods.cumulativeScrollOffset,
  offsetParent: Element.Methods.getOffsetParent,
  page: Element.Methods.viewportOffset,
  clone: function(source, target, options) {
    options = options || { };
    return Element.clonePosition(target, source, options);
  }
};
/*--------------------------------------------------------------------------*/
if (!document.getElementsByClassName) document.getElementsByClassName = function(instanceMethods){
  function iter(name) {
    return name.blank() ? null : "[contains(concat(' ', @class, ' '), ' " + name + " ')]";
  }
  instanceMethods.getElementsByClassName = Prototype.BrowserFeatures.XPath ?
  function(element, className) {
    className = className.toString().strip();
    var cond = /\s/.test(className) ? $w(className).map(iter).join('') : iter(className);
    return cond ? document._getElementsByXPath('.//*' + cond, element) : [];
  } : function(element, className) {
    className = className.toString().strip();
    var elements = [], classNames = (/\s/.test(className) ? $w(className) : null);
    if (!classNames && !className) return elements;
    var nodes = $(element).getElementsByTagName('*');
    className = ' ' + className + ' ';
    for (var i = 0, child, cn; child = nodes[i]; i++) {
      if (child.className && (cn = ' ' + child.className + ' ') && (cn.include(className) ||
          (classNames && classNames.all(function(name) {
            return !name.toString().blank() && cn.include(' ' + name + ' ');
          }))))
        elements.push(Element.extend(child));
    }
    return elements;
  };
  return function(className, parentElement) {
    return $(parentElement || document.body).getElementsByClassName(className);
  };
}(Element.Methods);
/*--------------------------------------------------------------------------*/
Element.ClassNames = Class.create();
Element.ClassNames.prototype = {
  initialize: function(element) {
    this.element = $(element);
  },
  _each: function(iterator, context) {
    this.element.className.split(/\s+/).select(function(name) {
      return name.length > 0;
    })._each(iterator, context);
  },
  set: function(className) {
    this.element.className = className;
  },
  add: function(classNameToAdd) {
    if (this.include(classNameToAdd)) return;
    this.set($A(this).concat(classNameToAdd).join(' '));
  },
  remove: function(classNameToRemove) {
    if (!this.include(classNameToRemove)) return;
    this.set($A(this).without(classNameToRemove).join(' '));
  },
  toString: function() {
    return $A(this).join(' ');
  }
};
Object.extend(Element.ClassNames.prototype, Enumerable);
/*--------------------------------------------------------------------------*/
(function() {
  window.Selector = Class.create({
    initialize: function(expression) {
      this.expression = expression.strip();
    },
  
    findElements: function(rootElement) {
      return Prototype.Selector.select(this.expression, rootElement);
    },
  
    match: function(element) {
      return Prototype.Selector.match(element, this.expression);
    },
  
    toString: function() {
      return this.expression;
    },
  
    inspect: function() {
      return "#<Selector: " + this.expression + ">";
    }
  });
  Object.extend(Selector, {
    matchElements: function(elements, expression) {
      var match = Prototype.Selector.match,
          results = [];
          
      for (var i = 0, length = elements.length; i < length; i++) {
        var element = elements[i];
        if (match(element, expression)) {
          results.push(Element.extend(element));
        }
      }
      return results;
    },
    findElement: function(elements, expression, index) {
      index = index || 0;
      var matchIndex = 0, element;
      // Match each element individually, since Sizzle.matches does not preserve order
      for (var i = 0, length = elements.length; i < length; i++) {
        element = elements[i];
        if (Prototype.Selector.match(element, expression) && index === matchIndex++) {
          return Element.extend(element);
        }
      }
    },
    findChildElements: function(element, expressions) {
      var selector = expressions.toArray().join(', ');
      return Prototype.Selector.select(selector, element || document);
    }
  });
})();

/*** EXPORTS FROM exports-loader ***/
module.exports = $R;
}.call(window));
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(45), __webpack_require__(46), __webpack_require__(84)))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Adds two values.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a
 * @param {Number} b
 * @return {Number}
 * @see R.subtract
 * @example
 *
 *      R.add(2, 3);       //=>  5
 *      R.add(7)(10);      //=> 17
 */
module.exports = _curry2(function add(a, b) {
  return Number(a) + Number(b);
});


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Makes a shallow clone of an object, setting or overriding the specified
 * property with the given value. Note that this copies and flattens prototype
 * properties onto the new object as well. All non-primitive properties are
 * copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @sig String -> a -> {k: v} -> {k: v}
 * @param {String} prop The property name to set
 * @param {*} val The new value
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original except for the changed property.
 * @see R.dissoc
 * @example
 *
 *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}
 */
module.exports = _curry3(function assoc(prop, val, obj) {
  var result = {};
  for (var p in obj) {
    result[p] = obj[p];
  }
  result[prop] = val;
  return result;
});


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var curryN = __webpack_require__(7);


/**
 * Returns a curried equivalent of the provided function. The curried function
 * has two unusual capabilities. First, its arguments needn't be provided one
 * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value `R.__` may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is `R.__`, the
 * following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (* -> a) -> (* -> a)
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curryN
 * @example
 *
 *      var addFourNumbers = (a, b, c, d) => a + b + c + d;
 *
 *      var curriedAddFourNumbers = R.curry(addFourNumbers);
 *      var f = curriedAddFourNumbers(1, 2);
 *      var g = f(3);
 *      g(4); //=> 10
 */
module.exports = _curry1(function curry(fn) {
  return curryN(fn.length, fn);
});


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var curry = __webpack_require__(49);


/**
 * Returns a new function much like the supplied one, except that the first two
 * arguments' order is reversed.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)
 * @param {Function} fn The function to invoke with its first two parameters reversed.
 * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
 * @example
 *
 *      var mergeThree = (a, b, c) => [].concat(a, b, c);
 *
 *      mergeThree(1, 2, 3); //=> [1, 2, 3]
 *
 *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
 * @symb R.flip(f)(a, b, c) = f(b, a, c)
 */
module.exports = _curry1(function flip(fn) {
  return curry(function(a, b) {
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = b;
    args[1] = a;
    return fn.apply(this, args);
  });
});


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var _arity = __webpack_require__(20);
var _isPlaceholder = __webpack_require__(53);


/**
 * Internal curryN function.
 *
 * @private
 * @category Function
 * @param {Number} length The arity of the curried function.
 * @param {Array} received An array of arguments received thus far.
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
module.exports = function _curryN(length, received, fn) {
  return function() {
    var combined = [];
    var argsIdx = 0;
    var left = length;
    var combinedIdx = 0;
    while (combinedIdx < received.length || argsIdx < arguments.length) {
      var result;
      if (combinedIdx < received.length &&
          (!_isPlaceholder(received[combinedIdx]) ||
           argsIdx >= arguments.length)) {
        result = received[combinedIdx];
      } else {
        result = arguments[argsIdx];
        argsIdx += 1;
      }
      combined[combinedIdx] = result;
      if (!_isPlaceholder(result)) {
        left -= 1;
      }
      combinedIdx += 1;
    }
    return left <= 0 ? fn.apply(this, combined)
                     : _arity(left, _curryN(length, combined, fn));
  };
};


/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = function _isFunction(x) {
  return Object.prototype.toString.call(x) === '[object Function]';
};


/***/ }),
/* 53 */
/***/ (function(module, exports) {

module.exports = function _isPlaceholder(a) {
  return a != null &&
         typeof a === 'object' &&
         a['@@functional/placeholder'] === true;
};


/***/ }),
/* 54 */
/***/ (function(module, exports) {

module.exports = function _isString(x) {
  return Object.prototype.toString.call(x) === '[object String]';
};


/***/ }),
/* 55 */
/***/ (function(module, exports) {

module.exports = function _map(fn, functor) {
  var idx = 0;
  var len = functor.length;
  var result = Array(len);
  while (idx < len) {
    result[idx] = fn(functor[idx]);
    idx += 1;
  }
  return result;
};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var map = __webpack_require__(11);


/**
 * Returns a lens for the given getter and setter functions. The getter "gets"
 * the value of the focus; the setter "sets" the value of the focus. The setter
 * should not mutate the data structure.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig (s -> a) -> ((a, s) -> s) -> Lens s a
 * @param {Function} getter
 * @param {Function} setter
 * @return {Lens}
 * @see R.view, R.set, R.over, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lens(R.prop('x'), R.assoc('x'));
 *
 *      R.view(xLens, {x: 1, y: 2});            //=> 1
 *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
 *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
 */
module.exports = _curry2(function lens(getter, setter) {
  return function(toFunctorFn) {
    return function(target) {
      return map(
        function(focus) {
          return setter(focus, target);
        },
        toFunctorFn(getter(target))
      );
    };
  };
});


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var liftN = __webpack_require__(131);


/**
 * "lifts" a function of arity > 1 so that it may "map over" a list, Function or other
 * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig (*... -> *) -> ([*]... -> [*])
 * @param {Function} fn The function to lift into higher context
 * @return {Function} The lifted function.
 * @see R.liftN
 * @example
 *
 *      var madd3 = R.lift((a, b, c) => a + b + c);
 *
 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
 *
 *      var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);
 *
 *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]
 */
module.exports = _curry1(function lift(fn) {
  return liftN(fn.length, fn);
});


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly `n` parameters. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} n The desired arity of the new function.
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity `n`.
 * @example
 *
 *      var takesTwoArgs = (a, b) => [a, b];
 *
 *      takesTwoArgs.length; //=> 2
 *      takesTwoArgs(1, 2); //=> [1, 2]
 *
 *      var takesOneArg = R.nAry(1, takesTwoArgs);
 *      takesOneArg.length; //=> 1
 *      // Only `n` arguments are passed to the wrapped function
 *      takesOneArg(1, 2); //=> [1, undefined]
 * @symb R.nAry(0, f)(a, b) = f()
 * @symb R.nAry(1, f)(a, b) = f(a)
 * @symb R.nAry(2, f)(a, b) = f(a, b)
 */
module.exports = _curry2(function nAry(n, fn) {
  switch (n) {
    case 0: return function() {return fn.call(this);};
    case 1: return function(a0) {return fn.call(this, a0);};
    case 2: return function(a0, a1) {return fn.call(this, a0, a1);};
    case 3: return function(a0, a1, a2) {return fn.call(this, a0, a1, a2);};
    case 4: return function(a0, a1, a2, a3) {return fn.call(this, a0, a1, a2, a3);};
    case 5: return function(a0, a1, a2, a3, a4) {return fn.call(this, a0, a1, a2, a3, a4);};
    case 6: return function(a0, a1, a2, a3, a4, a5) {return fn.call(this, a0, a1, a2, a3, a4, a5);};
    case 7: return function(a0, a1, a2, a3, a4, a5, a6) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6);};
    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);};
    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);};
    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);};
    default: throw new Error('First argument to nAry must be a non-negative integer no greater than ten');
  }
});


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var _curryN = __webpack_require__(51);
var _dispatchable = __webpack_require__(3);
var _has = __webpack_require__(9);
var _reduce = __webpack_require__(14);
var _xreduceBy = __webpack_require__(272);


/**
 * Groups the elements of the list according to the result of calling
 * the String-returning function `keyFn` on each element and reduces the elements
 * of each group to a single value via the reducer function `valueFn`.
 *
 * This function is basically a more general `groupBy` function.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category List
 * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
 * @param {Function} valueFn The function that reduces the elements of each group to a single
 *        value. Receives two values, accumulator for a particular group and the current element.
 * @param {*} acc The (initial) accumulator value for each group.
 * @param {Function} keyFn The function that maps the list's element into a key.
 * @param {Array} list The array to group.
 * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of
 *         `valueFn` for elements which produced that key when passed to `keyFn`.
 * @see R.groupBy, R.reduce
 * @example
 *
 *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);
 *      var namesByGrade = reduceToNamesBy(function(student) {
 *        var score = student.score;
 *        return score < 65 ? 'F' :
 *               score < 70 ? 'D' :
 *               score < 80 ? 'C' :
 *               score < 90 ? 'B' : 'A';
 *      });
 *      var students = [{name: 'Lucy', score: 92},
 *                      {name: 'Drew', score: 85},
 *                      // ...
 *                      {name: 'Bart', score: 62}];
 *      namesByGrade(students);
 *      // {
 *      //   'A': ['Lucy'],
 *      //   'B': ['Drew']
 *      //   // ...,
 *      //   'F': ['Bart']
 *      // }
 */
module.exports = _curryN(4, [], _dispatchable([], _xreduceBy,
  function reduceBy(valueFn, valueAcc, keyFn, list) {
    return _reduce(function(acc, elt) {
      var key = keyFn(elt);
      acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);
      return acc;
    }, {}, list);
  }));


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var _complement = __webpack_require__(115);
var _curry2 = __webpack_require__(0);
var filter = __webpack_require__(73);


/**
 * The complement of `filter`.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array}
 * @see R.filter, R.transduce, R.addIndex
 * @example
 *
 *      var isOdd = (n) => n % 2 === 1;
 *
 *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */
module.exports = _curry2(function reject(pred, filterable) {
  return filter(_complement(pred), filterable);
});


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _isString = __webpack_require__(54);


/**
 * Returns a new list or string with the elements or characters in reverse
 * order.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {Array|String} list
 * @return {Array|String}
 * @example
 *
 *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
 *      R.reverse([1, 2]);     //=> [2, 1]
 *      R.reverse([1]);        //=> [1]
 *      R.reverse([]);         //=> []
 *
 *      R.reverse('abc');      //=> 'cba'
 *      R.reverse('ab');       //=> 'ba'
 *      R.reverse('a');        //=> 'a'
 *      R.reverse('');         //=> ''
 */
module.exports = _curry1(function reverse(list) {
  return _isString(list) ? list.split('').reverse().join('') :
                           Array.prototype.slice.call(list, 0).reverse();
});


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.1.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-09-22T22:30Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.1.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Simple selector that can be filtered directly, removing non-Elements
	if ( risSimple.test( qualifier ) ) {
		return jQuery.filter( qualifier, elements, not );
	}

	// Complex selector, compare the two sets, removing non-Elements
	qualifier = jQuery.filter( qualifier, elements );
	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			resolve.call( undefined, value );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.call( undefined, value );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && jQuery.nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

function manipulationTarget( elem, content ) {
	if ( jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE <=9 only
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i,
		val = 0;

	// If we already have the right measurement, avoid augmentation
	if ( extra === ( isBorderBox ? "border" : "content" ) ) {
		i = 4;

	// Otherwise initialize for horizontal or vertical properties
	} else {
		i = name === "width" ? 1 : 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val,
		valueIsBorderBox = true,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Support: IE <=11 only
	// Running getBoundingClientRect on a disconnected node
	// in IE throws an error.
	if ( elem.getClientRects().length ) {
		val = elem.getBoundingClientRect()[ name ];
	}

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function raf() {
	if ( timerId ) {
		window.requestAnimationFrame( raf );
		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off or if document is hidden
	if ( jQuery.fx.off || document.hidden ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.requestAnimationFrame ?
			window.requestAnimationFrame( raf ) :
			window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	if ( window.cancelAnimationFrame ) {
		window.cancelAnimationFrame( timerId );
	} else {
		window.clearInterval( timerId );
	}

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnothtmlwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( jQuery.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win, rect, doc,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		// Make sure element is not hidden (display: none)
		if ( rect.width || rect.height ) {
			doc = elem.ownerDocument;
			win = getWindow( doc );
			docElem = doc.documentElement;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		}

		// Return zeros for disconnected and hidden elements (gh-2310)
		return rect;
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.parseJSON = JSON.parse;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		return jQuery;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}





return jQuery;
} );


/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__graphicHelpers__ = __webpack_require__(43);



/**
 * AbstractHoverbox is an abstract class for all the UI elements and graphics surrounding a node on the canvas (a Person
 * or a partnership). This includes the box that appears around the node when it's hovered by a mouse, as
 * well as the handles used for creating connections and creating new nodes.
 *
 * @class AbstractHoverbox
 * @constructor
 * @param {AbstractNode} node The node Person or Partnership for which the hoverbox is drawn
 * @param {Number} x The x coordinate for the hoverbox
 * @param {Number} y The y coordinate for the hoverbox
 * @param {Number} width The width in pixels
 * @param {Number} height The height in pixels
 * @param {Number} nodeX The x coordinate of the node for which the hoverbox is drawn
 * @param {Number} nodeY The y coordinate of the node for which the hoverbox is drawn
 * @param {Raphael.st} nodeShapes Raphaël set containing the graphical elements that make up the node
 */

const AbstractHoverbox = Class.create({

    initialize: function (node, shiftX, shiftY, width, height, nodeX, nodeY, nodeShapes) {
        //var timer = new Timer();        
        this._node = node;
        this._relativeX = shiftX;
        this._relativeY = shiftY;
        this._nodeX = nodeX;
        this._nodeY = nodeY;
        this._hidden = true;
        this._enabled = false;
        this._width = width;
        this._height = height;
        this._isHovered = false;
        this._currentHandles = null;
        this._currentOrbs = null;
        this._currentButtons = null;
        this._handlesZoomSz = null;
        this._boxOnHover = editor.getPaper().rect(this.getX(), this.getY(), this._width, this._height, 5).attr(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].boxOnHover);
        this._backElements = editor.getPaper().set(this._boxOnHover);
        this._mask = this._boxOnHover.clone().attr({
            fill: "green",
            opacity: 0
        });
        this._frontElements = editor.getPaper().set().push(this._mask);

        var nodeShapeSet = nodeShapes.flatten();
        this._backElements.insertBefore(nodeShapeSet);
        this._frontElements.insertAfter(nodeShapeSet);

        this.animateDrawHoverZone = this.animateDrawHoverZone.bind(this);
        this.animateHideHoverZone = this.animateHideHoverZone.bind(this);
        // hide initially
        this.getBoxOnHover().attr({
            opacity: 0
        });
        this.enable();
        //timer.printSinceLast("=== abstract howerbox runtime: ");
        this._isMenuToggled = false;
        this._justClosedMenu = false;
    },

    /**
     * Returns the x coordinate of the hoverbox
     *
     * @method getX
     * @return {Number} The x coordinate in pixels
     */
    getX: function () {
        return this.getNodeX() + this._relativeX;
    },

    /**
     * Returns the y coordinate of the hoverbox
     *
     * @method getY
     * @return {Number} The y coordinate in pixels
     */
    getY: function () {
        return this.getNodeY() + this._relativeY;
    },

    /**
     * Returns the x coordinate of the attached node
     *
     * @method getNodeX
     * @return {Number} The x coordinate in pixels
     */
    getNodeX: function () {
        // note: during construction getGraphics() isnot yet available, so need to store nodeX.
        //       however node may have been moved later, in which case we need to use current graphics X
        var nodeGraphics = this.getNode().getGraphics();
        if (nodeGraphics) this._nodeX = nodeGraphics.getX();
        return this._nodeX;
    },

    /**
     * Returns the y coordinate of the attached node
     *
     * @method getNodeY
     * @return {Number} The y coordinate in pixels
     */
    getNodeY: function () {
        var nodeGraphics = this.getNode().getGraphics();
        if (nodeGraphics) this._nodeY = nodeGraphics.getY();
        return this._nodeY;
    },

    /**
     * Returns the width of the hoverbox
     *
     * @method getWidth
     * @return {Number} The width in pixels
     */
    getWidth: function () {
        return this._width;
    },

    /**
     * Returns the height of the hoverbox
     *
     * @method getHeight
     * @return {Number} The height in pixels
     */
    getHeight: function () {
        return this._height;
    },

    /**
     * Returns the node for which the hoverbox is drawn
     *
     * @method getNode
     * @return {AbstractNode} Can be either a Partnership or a Person
     */
    getNode: function () {
        return this._node;
    },

    /**
     * Creates the buttons used in this hoverbox
     *
     * @method generateButtons
     * @return {Raphael.st} A set of buttons
     */
    generateButtons: function () {
        if (this._currentButtons !== null) return;
        this._currentButtons = [];
    },

    regenerateButtons: function () {
        this.removeButtons();
        this.generateButtons();
    },

    removeButtons: function () {
        if (!this._currentButtons) return;

        var enableState = this._enabled;

        enableState && this.disable();
        for (var i = 0; i < this._currentButtons.length; i++) {
            this.getFrontElements().exclude(this._currentButtons[i]);
            this._currentButtons[i].remove();
        }
        this._currentButtons = null;
        enableState && this.enable();
    },

    hideButtons: function () {
        if (!this._currentButtons) return;
        for (var i = 0; i < this._currentButtons.length; i++) {
            if (this._currentButtons[i].hasOwnProperty("mask")) {
                this._currentButtons[i].mask.attr(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].btnMaskHoverOff);
            }
            this._currentButtons[i].hide();
        }
    },

    showButtons: function () {
        if (!this._currentButtons) return;
        for (var i = 0; i < this._currentButtons.length; i++) {
            this._currentButtons[i].show();
        }
    },

    /**
     * Returns Raphael set of the buttons in this hoverbox
     *
     * @method getCurrentButtons
     * @return {Raphael.st} A set of buttons
     */
    getCurrentButtons: function () {
        return this._currentButtons;
    },

    /**
     * Removes all handles currently used in this hoverbox
     *
     * @method removeHandles
     */
    removeHandles: function () {
        let i;
        if (!this._currentHandles) return;

        var enableState = this._enabled;
        enableState && this.disable();
        for (i = 0; i < this._currentOrbs.length; i++) this.getFrontElements().exclude(this._currentOrbs[i]);
        this._currentOrbs = null;
        enableState && this.enable();

        for (i = 0; i < this._currentHandles.length; i++) this._currentHandles[i].remove();
        this._currentHandles = null;
    },

    hideHandles: function () {
        if (!this._currentHandles) return;
        for (var i = 0; i < this._currentHandles.length; i++) this._currentHandles[i].hide();
    },

    showHandles: function () {
        if (!this._currentHandles) return;
        for (var i = 0; i < this._currentHandles.length; i++) this._currentHandles[i].show();
    },

    /**
     * Creates the handles used in this hoverbox. Returns a list of handles 
     *
     * @method generateHandles
     */
    generateHandles: function () {
        if (this._currentHandles !== null) return;
        this._currentHandles = [];
        this._currentOrbs = [];
        this._handlesZoomSz = editor.getWorkspace().getCurrentZoomLevel();
    },

    /**
     * Iff handles are present, removes all and creates new set of handles 
     *
     * @method regenerateHandles
     */
    regenerateHandles: function () {
        if (this._currentHandles) this.removeHandles();
        if (!this._hidden || this.isMenuToggled()) this.generateHandles();
    },

    /**
     * Generates a button and places it on the hoverbox
     *
     * @method createButton
     * @param {Number} x The x coordinate of the button
     * @param {Number} y The y coordinate of the button
     * @param {String|Array} svgPath The svg path for the button (correctly scaled)
     * @param {Object} svgPathBBox The BBox for the svg path. Precomputed for performance reasons
     * @param attributes The svg attributes
     * @param {Function} onClick Callback for the button
     * @param {String} className The class attribute for the button
     *
     * @return {Raphael.st} The generated button
     */
    createButton: function (x, y, svgPath, svgPathBBox, attributes, onClick, className, title) {
        var icon = editor.getPaper().path(svgPath).attr(attributes);
        icon.transform(["t", x, y]);

        // manually compute the size of the mask because Raphael.transform() is exptremely slow
        var xShift = svgPathBBox.width / 4;
        var yShift = svgPathBBox.height / 4;
        var newWidth = svgPathBBox.width * 1.5;
        var newHeight = svgPathBBox.height * 1.5;
        var mask = editor.getPaper().rect(x + svgPathBBox.x - xShift, y + svgPathBBox.y - yShift, newWidth, newHeight, 1);
        mask.attr({
            fill: "gray",
            opacity: 0,
            "stroke-width": 0
        });

        var button = editor.getPaper().set(mask, icon).toFront();

        var me = this;
        var clickFunct = function () {
            if (me._hidden) {
                button.isClicked = false;
                return;
            }
            button.isClicked = !button.isClicked;
            if (button.isClicked) {
                mask.attr(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].btnMaskClick);
            } else {
                mask.attr(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].btnMaskHoverOn);
            }
            onClick && onClick();
        };
        button.click(clickFunct);
        button.mousedown(function () {
            mask.attr(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].btnMaskClick);
        });
        button.hover(function () {
            //console.log("button hover");
            mask.attr(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].btnMaskHoverOn);
            if (title) mask.attr({
                "title": title
            });
        }, function () {
            //console.log("button unhover");
            mask.attr(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].btnMaskHoverOff);
        });
        className && button.forEach(function (element) {
            element.node.setAttribute("class", className);
        });
        button.icon = icon;
        button.mask = mask;
        if (this._hidden && !this.isMenuToggled()) button.hide();

        this._currentButtons.push(button);
        this.disable();
        this.getFrontElements().push(button);
        this.enable();
    },

    /**
     * Creates a show-menu button
     *
     * @method generateMenuBtn
     * @return {Raphael.st} The generated button
     */
    generateMenuBtn: function () {
        var me = this;
        var action = function () {
            me.toggleMenu(!me.isMenuToggled());
        };
        var attributes = __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].menuBtnIcon;
        var x = this.getX() + this.getWidth() - 20 - this.getWidth() / 40;
        var y = this.getY() + this.getHeight() / 40;
        this.createButton(x, y, editor.getView().__menuButton_svgPath, editor.getView().__menuButton_BBox, attributes, action, "menu-trigger", "node properties");
    },
    /**
     * Creates and returns a delete button (big red X).
     *
     * @method generateDeleteBtn
     * @return {Raphael.st} the generated button
     */
    generateDeleteBtn: function () {
        var me = this;
        var action = function () {
            me.animateHideHoverZone();
            var event = {
                "nodeID": me.getNode().getID()
            };
            document.fire("pedigree:node:remove", event);
        };
        var attributes = __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].deleteBtnIcon;
        var x = this.getX() + this.getWidth() - 20 - this.getWidth() / 40;
        var y = this.getY() + this.getHeight() / 40;
        this.createButton(x, y, editor.getView().__deleteButton_svgPath, editor.getView().__deleteButton_BBox, attributes, action, "delete", "remove node");
    },

    /**
     * Returns the gray box that appears when the node is hovered
     *
     * @method getBoxOnHover
     * @return {Raphael.el} Raphael rectangle element
     */
    getBoxOnHover: function () {
        return this._boxOnHover;
    },

    /**
     * Returns true box if the hoverbox is currently hovered
     *
     * @method isHovered
     * @return {Boolean} Raphael rectangle element
     */
    isHovered: function () {
        return this._isHovered;
    },

    /**
     * Sets the hovered property to isHovered.
     * @method setHovered
     * @param {Boolean} isHovered Set to true if the box is hovered
     */
    setHovered: function (isHovered) {
        this._isHovered = isHovered;
    },

    /**
     * Enbales or disables the highlighting of the node
     * @method setHighlighted
     * @param {Boolean} isHighlighted Set to true enables green highlight box, false disables it
     */
    setHighlighted: function (isHighlighted) {
        // autoimaticaly highlight and unhighlight the node being dragged over
        if (isHighlighted) {
            this.getBoxOnHover().attr(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].boxOnHover);
            this.getBoxOnHover().attr("fill", "green");
        } else {
            this.getBoxOnHover().attr(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].boxOnHover).attr("opacity", 0);
        }
    },

    /**
     * Returns the invisible mask layer in front of the hoverbox
     *
     * @method getHoverZoneMask
     * @return {Raphael.el} Raphael rectangle
     */
    getHoverZoneMask: function () {
        return this._mask;
    },

    /**
     * Returns a Raphael set containing all hoverbox elements that are layered
     * in front of the node graphics
     *
     * @method getFrontElements
     * @return {Raphael.st} set of Raphael elements
     */
    getFrontElements: function () {
        return this._frontElements;
    },

    /**
     * Returns a Raphael set containing all hoverbox elements that are layered
     * behind of the node graphics
     *
     * @method getBackElements
     * @return {Raphael.st} set of Raphael elements
     */
    getBackElements: function () {
        return this._backElements;
    },

    /**
     * Creates a handle with a blue orb from the center of the node and places it behind the node icon
     *
     * @method generateHandle
     * @param {String} type Should be 'parent', 'child' or 'partner'
     * @param {Number} orbX The x coordinate of the orb
     * @param {Number} orbY The y coordinate of the orb
     * @return {Raphael.st} Raphael set of elements that make up the handle
     */
    generateHandle: function (type, startX, startY, orbX, orbY, title, orbShapeGender, toHide) {
        if (!orbShapeGender) orbShapeGender = "F";
        var strokeWidth = editor.getWorkspace().getSizeNormalizedToDefaultZoom(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].handleStrokeWidth);
        var path = [["M", startX, startY], ["L", orbX, orbY]];
        var connection = editor.getPaper().path(path).attr({
            "stroke-width": strokeWidth,
            stroke: "gray"
        }).toBack();
        connection.oPath = path;

        var touchPresent = "createTouch" in document;

        var orbRadius = touchPresent ? __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].touchOrbRadius : __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].orbRadius;
        var orbHue = __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].orbHue;

        var normalOrbAttr = orbShapeGender != "F" ? {
            fill: "0-hsb(" + orbHue + ", 1, .75)-hsb(" + orbHue + ", .5, .25)",
            stroke: "#555",
            "stroke-width": "0.75"
        } : {
            fill: "r(.5,.9)hsb(" + orbHue + ", 1, .75)-hsb(" + orbHue + ", .5, .25)",
            stroke: "none"
        };
        var selectedOrbAttr = orbShapeGender != "F" ? {
            fill: "0-hsb(" + (orbHue + .36) + ", 1, .75)-hsb(" + (orbHue + .36) + ", .5, .25)"
        } : {
            fill: "r(.5,.9)hsb(" + (orbHue + .36) + ", 1, .75)-hsb(" + (orbHue + .36) + ", .5, .25)"
        };
        var orbAttrX = orbShapeGender != "F" ? "x" : "cx";
        var orbAttrY = orbShapeGender != "F" ? "y" : "cy";

        var orb = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__graphicHelpers__["e" /* generateOrb */])(editor.getPaper(), orbX, orbY, orbRadius * 1.1, orbShapeGender).attr("cursor", "pointer");
        orb[0].attr(normalOrbAttr);

        var handle = editor.getPaper().set().push(connection, orb);
        handle.type = type;
        connection.insertBefore(this.getHoverZoneMask());
        orb.toFront();

        var me = this;
        var inHoverMode = false;
        var interactionStarted = false;

        var onDragHandle = function () {
            if (!inHoverMode) {
                //console.log("on drag");
                inHoverMode = true;
                if (editor.getView().getCurrentDraggable() !== null) editor.getView().enterHoverMode(me.getNode(), type);
                toHide && toHide.hide();
            }
        };

        // is true when any button other than the left mouse button is presses
        var wrongClick = false;
        var start = function (x, y, e) {
            if (interactionStarted) return;
            interactionStarted = true;

            //console.log("handle: start: " + e.button);
            wrongClick = false;
            if (e.button != 0) {
                interactionStarted = false;
                wrongClick = true;
                return;
            }
            connection.toFront();
            orb.stop();
            orb.toFront();
            inHoverMode = false;
            me.disable();
            me.getFrontElements().toFront();
            if (!orb.ot) {
                orb.ot = orb[0].transform();
                orb.ox = orb[0].attr(orbAttrX);
                orb.oy = orb[0].attr(orbAttrY);
            } else {
                // revert to base transformation if next click started while "end" animation was still running
                orb.transform("");
                orb.attr(orbAttrX, orb.ox);
                orb.attr(orbAttrY, orb.oy);
                orb.transform(orb.ot);
            }
            connection.ox = connection.oPath[1][1];
            connection.oy = connection.oPath[1][2];
            handle.isDragged = false;
            editor.getView().setCurrentDraggable(me.getNode().getID());
            // highlight valid targets (after a small delay - so that nothing gets annoyingly highlighted
            // and instantly un-highlighted if the person just clicks the orb without dragging)
            setTimeout(onDragHandle, 100);
        };
        var move = function (dx, dy) {
            if (wrongClick) return;
            if (!interactionStarted) return;
            //console.log("handle: move");
            onDragHandle();
            dx = dx / editor.getWorkspace().zoomCoefficient;
            dy = dy / editor.getWorkspace().zoomCoefficient;
            orb.ot.length > 0 && orb.transform("");
            orb.attr(orbAttrX, orb.ox + dx);
            orb.attr(orbAttrY, orb.oy + dy);
            orb.ot.length > 0 && orb.transform(orb.ot);
            connection.oPath[1][1] = connection.ox + dx;
            connection.oPath[1][2] = connection.oy + dy;
            connection.attr("path", connection.oPath);
            if (dx > 1 || dx < -1 || dy > 1 || dy < -1) {
                handle.isDragged = true;
            }
            //console.log("currentHover: " + editor.getView()._currentHoveredNode + ", currentDrag: " + editor.getView()._currentDraggable);
        };
        var end = function () {
            inHoverMode = false;
            interactionStarted = false;
            if (wrongClick) return;

            var curHoveredId = editor.getView().getCurrentHoveredNode();

            editor.getView().setCurrentDraggable(null);
            editor.getView().exitHoverMode();

            if (handle.isDragged) {
                if (orb.ot.length == 0) {
                    var finalPosition = {};
                    finalPosition[orbAttrX] = orb.ox;
                    finalPosition[orbAttrY] = orb.oy;
                    orb.animate(finalPosition, 1000, "elastic", function () {});
                } else {
                    // animation for shapes with transformations (movement and animation via transform() could have been
                    // used in all cases, but works noticeably slower than plain coordinate manipulation in some browsers)
                    var dx = orb.ox - orb[0].attr(orbAttrX);
                    var dy = orb.oy - orb[0].attr(orbAttrY);
                    orb.animate({
                        "transform": "T" + dx + "," + dy + "R45"
                    }, 1000, "elastic", function () {
                        orb.transform("");
                        orb.attr(orbAttrX, orb.ox);
                        orb.attr(orbAttrY, orb.oy);
                        orb.transform(orb.ot);
                    });
                }
            }

            console.log("handle.isDragged: " + handle.isDragged + ", currentHover: " + curHoveredId);
            connection.oPath[1][1] = connection.ox;
            connection.oPath[1][2] = connection.oy;
            connection.animate({
                "path": connection.oPath
            }, 1000, "elastic");
            orb[0].attr(normalOrbAttr);
            connection.insertBefore(me.getHoverZoneMask());

            me.enable();

            if (!handle.isDragged || curHoveredId != null) me.handleAction(handle.type, handle.isDragged, curHoveredId);
        };

        orb.drag(move, start, end);
        orb.hover(function () {
            //console.log("orbon hover");
            orb[0].attr(selectedOrbAttr);
            if (title) {
                orb[0].attr({
                    "title": title
                });
                orb[1].attr({
                    "title": title
                });
            }
        }, function () {
            orb[0].attr(normalOrbAttr);
        });

        this._currentOrbs.push(orb[0]);
        this._currentOrbs.push(orb[1]);
        this.disable();
        //this.getFrontElements().forEach(function(el) { console.log("o"); });
        //console.log("Orb: " + orb);
        this.getFrontElements().push(orb[0]);
        this.getFrontElements().push(orb[1]);
        //this.getFrontElements().forEach(function(el) { console.log("*"); });
        this.enable();

        //handle.getType = function() {
        //    return type;
        //};
        return handle;
    },

    /**
     * Returns true if the menu for this node is open
     *
     * @method isMenuToggled
     * @return {Boolean}
     */
    isMenuToggled: function () {
        return false;
    },

    /*
     * Fades the hoverbox graphics in
     *
     * @method animateDrawHoverZone
     */
    animateDrawHoverZone: function () {
        this._hidden = false;
        if (editor.getView().getCurrentDraggable() !== null) return; // do not redraw when dragging
        //console.log("node: " + this.getNode().getID() + " -> show HB");

        this.getNode().getGraphics().setSelected(true);
        this.getBoxOnHover().stop().animate({
            opacity: 0.7
        }, 200);

        this.generateButtons();
        this.showButtons();
        this.getCurrentButtons().forEach(function (button) {
            if (button.hasOwnProperty("icon")) {
                button.icon.stop().animate({
                    opacity: 1
                }, 200);
            }
        });

        if (this._handlesZoomSz != editor.getWorkspace().getCurrentZoomLevel()) this.removeHandles();
        this.generateHandles();
        this.showHandles();
    },

    /**
     * Fades the hoverbox graphics out
     *
     * @method animateHideHoverZone
     */
    animateHideHoverZone: function () {
        this._hidden = true;
        if (editor.getView().getCurrentDraggable() !== null) return; // do not hide when dragging
        //console.log("node: " + this.getNode().getID() + " -> hide HB");

        this.getNode().getGraphics().setSelected(false);
        this.getBoxOnHover().stop().animate({
            opacity: 0
        }, 200);

        this.hideButtons();
        this.hideHandles();
    },

    /**
     * Stops the hoverbox from responding to mouseovers
     *
     * @method disable
     */
    disable: function () {
        //console.log("disable HB");
        this._enabled = false;
        this.getFrontElements().unhover(this.animateDrawHoverZone, this.animateHideHoverZone);
    },

    /**
     * Attaches onMouseOver behavior to the hoverbox
     *
     * @method enable
     */
    enable: function () {
        this._enabled = true;
        //console.log("enable HB");
        //this.getFrontElements().forEach(function(el) { console.log("."); });
        this.getFrontElements().hover(this.animateDrawHoverZone, this.animateHideHoverZone);
    },

    /**
     * Deletes the hoverbox
     *
     * @method remove
     */
    remove: function () {
        this.disable();
        this.removeButtons();
        this.removeHandles();
        this.getBackElements().remove();
        this.getFrontElements().remove();
    },

    /**
     * Updates the hoverbox behavior after a widget (like the menu) is closed
     *
     * @method onWidgetHide
     */
    onWidgetHide: function () {
        this._isMenuToggled = false;
        // prevent menu from closing and opening right away upon a click on the menu button while menu is open
        this._justClosedMenu = true;
        var me = this;
        setTimeout(function () {
            me._justClosedMenu = false;
        }, 100);

        if (this._hidden) this.animateHideHoverZone();else this.animateDrawHoverZone();
    },

    onWidgetShow: function () {
        this._isMenuToggled = true;
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = AbstractHoverbox;


/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__abstractNodeVisuals__ = __webpack_require__(41);

/**
 * AbstractNode is the general abstract class for nodes on the Pedigree graph. An AbstractNode contains information
 * about its position on the canvas and about relationships with other nodes on the graph.
 *
 * @class AbstractNode
 * @constructor
 * @param {Number} x The x coordinate on the canvas
 * @param {Number} y The y coordinate on the canvas
 * @param {Number} [id] The id of the node
 */

const AbstractNode = Class.create({

    initialize: function (x, y, id) {
        //console.log("abstract node");
        this._id = id;
        this._comments = "";
        !this._type && (this._type = "AbstractNode");
        this._graphics = this._generateGraphics(x, y);
        //console.log("abstract node end");
    },

    /**
     * Returns the unique ID of this node
     *
     * @method getID
     * @return {Number} the id of the node
     */
    getID: function () {
        return this._id;
    },

    /**
     * Sets the ID of this node
     * (when nodes get removed all ids above the removed id shift by one down) 
     *
     * @method setID
     */
    setID: function (id) {
        if (id == this._id) return;
        //console.log("Updating ID " + this._id + " to " + id);
        this._id = id;
        this._graphics.onSetID(id);
    },

    /**
     * Generates an instance of AbstractNodeVisuals
     *
     * @method _generateGraphics
     * @param {Number} x The x coordinate of the node
     * @param {Number} y The y coordinate of the node
     * @return {AbstractNodeVisuals}
     * @private
     */
    _generateGraphics: function (x, y) {
        // console.log("abstract node - generate graphics");
        return new __WEBPACK_IMPORTED_MODULE_0__abstractNodeVisuals__["a" /* AbstractNodeVisuals */](this, x, y);
    },

    /**
     * Returns the object responsible for managing graphics
     *
     * @method getGraphics
     * @return {AbstractNodeVisuals}
     */
    getGraphics: function () {
        return this._graphics;
    },

    /**
     * Returns the X coordinate of the node on the canvas
     *
     * @method getX
     * @return {Number} the x coordinate
     */
    getX: function () {
        return this.getGraphics().getX();
    },

    /**
     * Returns the Y coordinate of the node on the canvas
     *
     * @method getY
     * @return {Number} the y coordinate
     */
    getY: function () {
        return this.getGraphics().getY();
    },

    /**
     * Changes the position of the node to (x,y)
     *
     * @method setPos
     * @param {Number} x The x coordinate on the canvas
     * @param {Number} y The y coordinate on the canvas
     * @param {Boolean} [animate] Set to true if you want to animate the transition
     * @param {Function} [callback] The function called at the end of the animation
     */
    setPos: function (x, y, animate, callback) {
        this.getGraphics().setPos(x, y, animate, callback);
    },

    /**
     * Returns the type of this node
     *
     * @method getType
     * @return {String} The type (eg. "Partnership", "Person", etc)
     */
    getType: function () {
        return this._type;
    },

    /**
     * Removes the node and its visuals.
     *
     * @method remove
     * @param [skipConfirmation=false] {Boolean} if true, no confirmation box will pop up
     */
    remove: function () {
        this.getGraphics().remove();
    },

    /**
     * Returns any free-form comments associated with the node
     *
     * @method getComments
     * @return {String}
     */
    getComments: function () {
        return this._comments;
    },

    /**
     * Replaces free-form comments associated with the node
     *
     * @method setComments
     * @param comment
     */
    setComments: function (comment) {
        this._comments = comment;
    },

    /**
     * Returns an object containing all the properties of this node
     * except id, x, y & type
     *
     * @method getProperties
     * @return {Object} in the form
     *
     */
    getProperties: function () {
        var info = {};
        if (this.getComments() != "") info["comments"] = this.getComments();
        return info;
    },

    /**
     * Applies the properties found in info to this node.
     *
     * @method assignProperties
     * @param properties Object
     * @return {Boolean} True if properties were successfully assigned (i.e. no conflicts/invalid values)
     */
    assignProperties: function (properties) {
        if (properties.hasOwnProperty("comments") && this.getComments() != properties.comments) {
            this.setComments(properties.comments);
        }
        return true;
    },

    /**
     * Applies properties that happen to this node when a widget (such as the menu) is closed.
     *
     * @method onWidgetHide
     */
    onWidgetHide: function () {
        this.getGraphics().getHoverBox() && this.getGraphics().getHoverBox().onWidgetHide();
    },

    onWidgetShow: function () {
        this.getGraphics().getHoverBox() && this.getGraphics().getHoverBox().onWidgetShow();
    }
});
/* harmony export (immutable) */ __webpack_exports__["b"] = AbstractNode;


const ChildlessBehavior = {
    /**
     * Returns the childless status of this node
     *
     * @method getChildlessStatus
     * @return {Null|String} null, childless or infertile
     */
    getChildlessStatus: function () {
        return this._childlessStatus;
    },

    /**
     * Returns true if the status is either 'infertile' or 'childless'
     *
     * @method isValidChildlessStatus
     * @return {Boolean}
     */
    isValidChildlessStatus: function (status) {
        return status == "infertile" || status == "childless";
    },

    /**
     * Returns the reason for this node's status of 'infertile' or 'childless'
     *
     * @method getChildlessReason
     * @return {String}
     */
    getChildlessReason: function () {
        return this._childlessReason;
    },

    /**
     * Changes the reason for this node's 'childless' or 'infertile' status
     *
     * @method setChildlessReason
     * @param {String} reason Explanation for the condition (eg. "By Choice", "Vasectomy" etc)
     */
    setChildlessReason: function (reason) {
        if (this.getChildlessStatus() == null) reason = "";
        this._childlessReason = reason;
        this.getGraphics().updateChildlessStatusLabel();
    }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = ChildlessBehavior;


/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__dragdrop__ = __webpack_require__(159);

/**
 * Base class for various "legend" widgets
 *
 * @class Legend
 * @constructor
 */

const Legend = Class.create({

    initialize: function (title, allowDrop) {
        this._affectedNodes = {}; // for each object: the list of affected person nodes

        this._objectColors = {}; // for each object: the corresponding object color

        var legendContainer = $("legend-container");
        if (legendContainer == undefined) {
            var legendContainer = new Element("div", { "class": "legend-container", "id": "legend-container" });
            editor.getWorkspace().getWorkArea().insert(legendContainer);
        }

        this._legendBox = new Element("div", { "class": "legend-box", id: "legend-box" });
        this._legendBox.hide();
        legendContainer.insert(this._legendBox);

        var legendTitle = new Element("h2", { "class": "legend-title" }).update(title);
        this._legendBox.insert(legendTitle);

        this._list = new Element("ul", { "class": "disorder-list" });
        this._legendBox.insert(this._list);

        Element.observe(this._legendBox, "mouseover", function () {
            $$(".menu-box").invoke("setOpacity", .1);
        });
        Element.observe(this._legendBox, "mouseout", function () {
            $$(".menu-box").invoke("setOpacity", 1);
        });

        if (allowDrop) {
            __WEBPACK_IMPORTED_MODULE_0__dragdrop__["a" /* Droppables */].add(editor.getWorkspace().canvas, { accept: "drop-" + this._getPrefix(), onDrop: this._onDropWrapper.bind(this) });
        }
    },

    /**
     * Returns the prefix to be used on elements related to the object
     * (of type tracked by this legend) with the given id.
     *
     * @method _getPrefix
     * @param {String|Number} id ID of the object
     * @return {String} some identifier which should be a valid HTML id value (e.g. no spaces)
     */
    _getPrefix: function (id) {
        // To be overwritten in derived classes
        throw "prefix not defined";
    },

    /**
     * Retrieve the color associated with the given object
     *
     * @method getObjectColor
     * @param {String|Number} id ID of the object
     * @return {String} CSS color value for the object, displayed on affected nodes in the pedigree and in the legend
     */
    getObjectColor: function (id) {
        console.info(this._objectColors);
        if (!this._objectColors.hasOwnProperty(id)) return "#ff0000";
        return this._objectColors[id];
    },

    /**
     * Returns True if there are nodes reported to have the object with the given id
     *
     * @method _hasAffectedNodes
     * @param {String|Number} id ID of the object
     * @private
     */
    _hasAffectedNodes: function (id) {
        return this._affectedNodes.hasOwnProperty(id);
    },

    /**
     * Registers an occurrence of an object type being tracked by this legend.
     *
     * @method addCase
     * @param {String|Number} id ID of the object
     * @param {String} Name The description of the object to be displayed
     * @param {Number} nodeID ID of the Person who has this object associated with it
     */
    addCase: function (id, name, nodeID) {
        if (Object.keys(this._affectedNodes).length == 0) {
            this._legendBox.show();
        }
        if (!this._hasAffectedNodes(id)) {
            this._affectedNodes[id] = [nodeID];
            var listElement = this._generateElement(id, name);
            this._list.insert(listElement);
        } else {
            this._affectedNodes[id].push(nodeID);
        }
        this._updateCaseNumbersForObject(id);
    },

    /**
     * Removes an occurrence of an object, if there are any. Removes the object
     * from the 'Legend' box if this object is not registered in any individual any more.
     *
     * @param {String|Number} id ID of the object
     * @param {Number} nodeID ID of the Person who has/is affected by this object
     */
    removeCase: function (id, nodeID) {
        if (this._hasAffectedNodes(id)) {
            this._affectedNodes[id] = this._affectedNodes[id].without(nodeID);
            if (this._affectedNodes[id].length == 0) {
                delete this._affectedNodes[id];
                delete this._objectColors[id];
                var htmlElement = this._getListElementForObjectWithID(id);
                htmlElement.remove();
                if (Object.keys(this._affectedNodes).length == 0) {
                    this._legendBox.hide();
                }
            } else {
                this._updateCaseNumbersForObject(id);
            }
        }
    },

    _getListElementForObjectWithID: function (id) {
        return $(this._getPrefix() + "-" + id);
    },

    /**
     * Updates the displayed number of nodes assocated with/affected by the object
     *
     * @method _updateCaseNumbersForObject
     * @param {String|Number} id ID of the object
     * @private
     */
    _updateCaseNumbersForObject: function (id) {
        var label = this._legendBox.down("li#" + this._getPrefix() + "-" + id + " .disorder-cases");
        if (label) {
            var cases = this._affectedNodes.hasOwnProperty(id) ? this._affectedNodes[id].length : 0;
            label.update(cases + "&nbsp;case" + (cases - 1 && "s" || ""));
        }
    },

    /**
     * Generate the element that will display information about the given object in the legend
     *
     * @method _generateElement
     * @param {String|Number} id ID of the object
     * @param {String} name The human-readable object name or description
     * @return {HTMLLIElement} List element to be insert in the legend
     */
    _generateElement: function (id, name) {
        var color = this.getObjectColor(id);
        var item = new Element("li", { "class": "disorder " + "drop-" + this._getPrefix(), "id": this._getPrefix() + "-" + id }).update(new Element("span", { "class": "disorder-name" }).update(name));
        var bubble = new Element("span", { "class": "disorder-color" });
        bubble.style.backgroundColor = color;
        item.insert({ "top": bubble });
        var countLabel = new Element("span", { "class": "disorder-cases" });
        var countLabelContainer = new Element("span", { "class": "disorder-cases-container" }).insert("(").insert(countLabel).insert(")");
        item.insert(" ").insert(countLabelContainer);
        var me = this;
        Element.observe(item, "mouseover", function () {
            //item.setStyle({'text-decoration':'underline', 'cursor' : 'default'});
            //console.log(color);
            if (color === "#010101") {
                item.down(".disorder-name").setStyle({ "background": color, "cursor": "default", color: '#eee' });
            } else {
                item.down(".disorder-name").setStyle({ "background": color, "cursor": "default" });
            }

            me._affectedNodes[id] && me._affectedNodes[id].forEach(function (nodeID) {
                var node = editor.getNode(nodeID);
                node && node.getGraphics().highlight();
            });
        });
        Element.observe(item, "mouseout", function () {
            //item.setStyle({'text-decoration':'none'});
            if (color === "#010101") {
                item.down(".disorder-name").setStyle({ "background": "", "cursor": "default", color: '#000' });
            } else {
                item.down(".disorder-name").setStyle({ "background": "", "cursor": "default" });
            }
            me._affectedNodes[id] && me._affectedNodes[id].forEach(function (nodeID) {
                var node = editor.getNode(nodeID);
                node && node.getGraphics().unHighlight();
            });
        });
        new __WEBPACK_IMPORTED_MODULE_0__dragdrop__["b" /* Draggable */](item, {
            revert: true,
            reverteffect: function (segment) {
                // Reset the in-line style.
                segment.setStyle({
                    height: "",
                    left: "",
                    position: "",
                    top: "",
                    zIndex: "",
                    width: ""
                });
            },
            ghosting: true
        });
        return item;
    },

    /**
     * Callback for dragging an object from the legend onto nodes. Converts canvas coordinates
     * to nodeID and calls the actual drop holder once the grunt UI work is done.
     *
     * @method _onDropWrapper
     * @param {HTMLElement} [label]
     * @param {HTMLElement} [target]
     * @param {Event} [event]
     * @private
     */
    _onDropWrapper: function (label, target, event) {
        if (editor.isReadOnlyMode()) {
            return;
        }
        var divPos = editor.getWorkspace().viewportToDiv(event.pointerX(), event.pointerY());
        var pos = editor.getWorkspace().divToCanvas(divPos.x, divPos.y);
        var node = editor.getView().getPersonNodeNear(pos.x, pos.y);
        //console.log("Position x: " + pos.x + " position y: " + pos.y);
        if (node) {
            var id = label.id.substring(label.id.indexOf("-") + 1);
            this._onDropObject(node, id);
        }
    },

    /**
     * Callback for dragging an object from the legend onto nodes
     *
     * @method _onDropGeneric
     * @param {Person} Person node
     * @param {String|Number} id ID of the object
     */
    _onDropObject: function (node, objectID) {
        throw "drop functionality is not defined";
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = Legend;


/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__abstractHoverbox__ = __webpack_require__(63);


/**
 * A stub hoverbox used when generating read-only pedigrees
 */
const ReadOnlyHoverbox = Class.create(__WEBPACK_IMPORTED_MODULE_0__abstractHoverbox__["a" /* AbstractHoverbox */], {

    initialize: function ($super, node, x, y, shapes) {
        this._node = node;
        this._nodeX = x;
        this._nodeY = y;
        this._shapes = shapes;
    },

    getWidth: function () {
        return 0;
    },

    getHeight: function () {
        return 0;
    },

    getNode: function () {
        return this._node;
    },

    generateButtons: function () {},

    removeButtons: function () {},

    hideButtons: function () {},

    showButtons: function () {},

    getCurrentButtons: function () {
        return this._currentButtons;
    },

    removeHandles: function () {},

    hideHandles: function () {},

    showHandles: function () {},

    generateHandles: function () {},

    regenerateHandles: function () {},

    getBoxOnHover: function () {
        return null;
    },

    isHovered: function () {
        return false;
    },

    setHovered: function (isHovered) {},

    setHighlighted: function (isHighlighted) {},

    getHoverZoneMask: function () {
        return null;
    },

    getFrontElements: function () {
        return this._shapes;
    },

    getBackElements: function () {
        return this._shapes;
    },

    isMenuToggled: function () {
        return false;
    },

    animateDrawHoverZone: function () {},

    animateHideHoverZone: function () {},

    disable: function () {},

    enable: function () {},

    remove: function () {},

    onWidgetHide: function () {},

    onWidgetShow: function () {}
});
/* harmony export (immutable) */ __webpack_exports__["a"] = ReadOnlyHoverbox;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($R) {var $H, $A, $w, Enumerable, Prototype, Class, Template;
Prototype =   __webpack_require__(6);
              __webpack_require__(8);
Class =       __webpack_require__(10);
              __webpack_require__(13);
              __webpack_require__(15);
              __webpack_require__(18);
              __webpack_require__(23);
Template =    __webpack_require__(24);
Enumerable =  __webpack_require__(28);
$A =          __webpack_require__(17).A;
$w =          __webpack_require__(17).w;
$H =          __webpack_require__(31).H;

Object.extend(Number.prototype, (function() {
  function toColorPart() {
    return this.toPaddedString(2, 16);
  }

  function succ() {
    return this + 1;
  }

  function times(iterator, context) {
    $R(0, this, true).each(iterator, context);
    return this;
  }

  function toPaddedString(length, radix) {
    var string = this.toString(radix || 10);
    return '0'.times(length - string.length) + string;
  }

  function abs() {
    return Math.abs(this);
  }

  function round() {
    return Math.round(this);
  }

  function ceil() {
    return Math.ceil(this);
  }

  function floor() {
    return Math.floor(this);
  }

  return {
    toColorPart:    toColorPart,
    succ:           succ,
    times:          times,
    toPaddedString: toPaddedString,
    abs:            abs,
    round:          round,
    ceil:           ceil,
    floor:          floor
  };
})());
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(46)))

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var $H, $A, $w, Enumerable, Prototype, Class, Template;
Prototype =   __webpack_require__(6);
              __webpack_require__(8);
Class =       __webpack_require__(10);
              __webpack_require__(13);
              __webpack_require__(15);
              __webpack_require__(18);
              __webpack_require__(23);
Template =    __webpack_require__(24);
Enumerable =  __webpack_require__(28);
$A =          __webpack_require__(17).A;
$w =          __webpack_require__(17).w;
$H =          __webpack_require__(31).H;
              __webpack_require__(67);

function $R(start, end, exclusive) {
  return new ObjectRange(start, end, exclusive);
}

var ObjectRange = Class.create(Enumerable, (function() {
  function initialize(start, end, exclusive) {
    this.start = start;
    this.end = end;
    this.exclusive = exclusive;
  }

  function _each(iterator) {
    var value = this.start;
    while (this.include(value)) {
      iterator(value);
      value = value.succ();
    }
  }

  function include(value) {
    if (value < this.start)
      return false;
    if (this.exclusive)
      return value < this.end;
    return value <= this.end;
  }

  return {
    initialize: initialize,
    _each:      _each,
    include:    include
  };
})());
module.exports = {
    R:$R,
    ObjectRange:ObjectRange
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var _concat = __webpack_require__(16);
var _curry2 = __webpack_require__(0);
var _reduce = __webpack_require__(14);
var map = __webpack_require__(11);


/**
 * ap applies a list of functions to a list of values.
 *
 * Dispatches to the `ap` method of the second argument, if present. Also
 * treats curried functions as applicatives.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig [a -> b] -> [a] -> [b]
 * @sig Apply f => f (a -> b) -> f a -> f b
 * @param {Array} fns An array of functions
 * @param {Array} vs An array of values
 * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.
 * @example
 *
 *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
 *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> ["tasty pizza", "tasty salad", "PIZZA", "SALAD"]
 * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]
 */
module.exports = _curry2(function ap(applicative, fn) {
  return (
    typeof applicative.ap === 'function' ?
      applicative.ap(fn) :
    typeof applicative === 'function' ?
      function(x) { return applicative(x)(fn(x)); } :
    // else
      _reduce(function(acc, f) { return _concat(acc, map(f, fn)); }, [], applicative)
  );
});


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _makeFlat = __webpack_require__(123);
var _xchain = __webpack_require__(261);
var map = __webpack_require__(11);


/**
 * `chain` maps a function over a list and concatenates the results. `chain`
 * is also known as `flatMap` in some libraries
 *
 * Dispatches to the `chain` method of the second argument, if present,
 * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig Chain m => (a -> m b) -> m a -> m b
 * @param {Function} fn The function to map with
 * @param {Array} list The list to map over
 * @return {Array} The result of flat-mapping `list` with `fn`
 * @example
 *
 *      var duplicate = n => [n, n];
 *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]
 *
 *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]
 */
module.exports = _curry2(_dispatchable(['chain'], _xchain, function chain(fn, monad) {
  if (typeof monad === 'function') {
    return function(x) { return fn(monad(x))(x); };
  }
  return _makeFlat(false)(map(fn, monad));
}));


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var pipe = __webpack_require__(140);
var reverse = __webpack_require__(61);


/**
 * Performs right-to-left function composition. The rightmost function may have
 * any arity; the remaining functions must be unary.
 *
 * **Note:** The result of compose is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
 * @param {...Function} ...functions The functions to compose
 * @return {Function}
 * @see R.pipe
 * @example
 *
 *      var classyGreeting = (firstName, lastName) => "The name's " + lastName + ", " + firstName + " " + lastName
 *      var yellGreeting = R.compose(R.toUpper, classyGreeting);
 *      yellGreeting('James', 'Bond'); //=> "THE NAME'S BOND, JAMES BOND"
 *
 *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7
 *
 * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))
 */
module.exports = function compose() {
  if (arguments.length === 0) {
    throw new Error('compose requires at least one argument');
  }
  return pipe.apply(this, reverse(arguments));
};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _isArray = __webpack_require__(25);
var _isFunction = __webpack_require__(52);
var toString = __webpack_require__(40);


/**
 * Returns the result of concatenating the given lists or strings.
 *
 * Note: `R.concat` expects both arguments to be of the same type,
 * unlike the native `Array.prototype.concat` method. It will throw
 * an error if you `concat` an Array with a non-Array value.
 *
 * Dispatches to the `concat` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a] -> [a]
 * @sig String -> String -> String
 * @param {Array|String} firstList The first list
 * @param {Array|String} secondList The second list
 * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of
 * `secondList`.
 *
 * @example
 *
 *      R.concat('ABC', 'DEF'); // 'ABCDEF'
 *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 *      R.concat([], []); //=> []
 */
module.exports = _curry2(function concat(a, b) {
  if (a == null || !_isFunction(a.concat)) {
    throw new TypeError(toString(a) + ' does not have a method named "concat"');
  }
  if (_isArray(a) && !_isArray(b)) {
    throw new TypeError(toString(b) + ' is not an array');
  }
  return a.concat(b);
});


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _filter = __webpack_require__(117);
var _isObject = __webpack_require__(122);
var _reduce = __webpack_require__(14);
var _xfilter = __webpack_require__(266);
var keys = __webpack_require__(21);


/**
 * Takes a predicate and a "filterable", and returns a new filterable of the
 * same type containing the members of the given filterable which satisfy the
 * given predicate.
 *
 * Dispatches to the `filter` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array}
 * @see R.reject, R.transduce, R.addIndex
 * @example
 *
 *      var isEven = n => n % 2 === 0;
 *
 *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */
module.exports = _curry2(_dispatchable(['filter'], _xfilter, function(pred, filterable) {
  return (
    _isObject(filterable) ?
      _reduce(function(acc, key) {
        if (pred(filterable[key])) {
          acc[key] = filterable[key];
        }
        return acc;
      }, {}, keys(filterable)) :
    // else
      _filter(pred, filterable)
  );
}));


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _identity = __webpack_require__(77);


/**
 * A function that does nothing but return the parameter supplied to it. Good
 * as a default or placeholder function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> a
 * @param {*} x The value to return.
 * @return {*} The input value, `x`.
 * @example
 *
 *      R.identity(1); //=> 1
 *
 *      var obj = {};
 *      R.identity(obj) === obj; //=> true
 * @symb R.identity(a) = a
 */
module.exports = _curry1(_identity);


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var _objectAssign = __webpack_require__(251);

module.exports =
  typeof Object.assign === 'function' ? Object.assign : _objectAssign;


/***/ }),
/* 76 */
/***/ (function(module, exports) {

module.exports = function _containsWith(pred, x, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    if (pred(x, list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
};


/***/ }),
/* 77 */
/***/ (function(module, exports) {

module.exports = function _identity(x) { return x; };


/***/ }),
/* 78 */
/***/ (function(module, exports) {

module.exports = function _isTransformer(obj) {
  return typeof obj['@@transducer/step'] === 'function';
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns a function that when supplied an object returns the indicated
 * property of that object, if it exists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig s -> {s: a} -> a | Undefined
 * @param {String} p The property name
 * @param {Object} obj The object to query
 * @return {*} The value at `obj.p`.
 * @see R.path
 * @example
 *
 *      R.prop('x', {x: 100}); //=> 100
 *      R.prop('x', {}); //=> undefined
 */
module.exports = _curry2(function prop(p, obj) { return obj[p]; });


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var _checkForMethod = __webpack_require__(34);
var _curry1 = __webpack_require__(1);
var slice = __webpack_require__(30);


/**
 * Returns all but the first element of the given list or string (or object
 * with a `tail` method).
 *
 * Dispatches to the `slice` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.head, R.init, R.last
 * @example
 *
 *      R.tail([1, 2, 3]);  //=> [2, 3]
 *      R.tail([1, 2]);     //=> [2]
 *      R.tail([1]);        //=> []
 *      R.tail([]);         //=> []
 *
 *      R.tail('abc');  //=> 'bc'
 *      R.tail('ab');   //=> 'b'
 *      R.tail('a');    //=> ''
 *      R.tail('');     //=> ''
 */
module.exports = _curry1(_checkForMethod('tail', slice(1, Infinity)));


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);


/**
 * Gives a single-word string description of the (native) type of a value,
 * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
 * attempt to distinguish user Object types any further, reporting them all as
 * 'Object'.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Type
 * @sig (* -> {*}) -> String
 * @param {*} val The value to test
 * @return {String}
 * @example
 *
 *      R.type({}); //=> "Object"
 *      R.type(1); //=> "Number"
 *      R.type(false); //=> "Boolean"
 *      R.type('s'); //=> "String"
 *      R.type(null); //=> "Null"
 *      R.type([]); //=> "Array"
 *      R.type(/[A-z]/); //=> "RegExp"
 */
module.exports = _curry1(function type(val) {
  return val === null      ? 'Null'      :
         val === undefined ? 'Undefined' :
         Object.prototype.toString.call(val).slice(8, -1);
});


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(74);
var uniqBy = __webpack_require__(148);


/**
 * Returns a new list containing only one copy of each element in the original
 * list. `R.equals` is used to determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
 *      R.uniq([1, '1']);     //=> [1, '1']
 *      R.uniq([[42], [42]]); //=> [[42]]
 */
module.exports = uniqBy(identity);


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var _containsWith = __webpack_require__(76);
var _curry2 = __webpack_require__(0);


/**
 * Returns a new list containing only one copy of each element in the original
 * list, based upon the value returned by applying the supplied predicate to
 * two list elements. Prefers the first item if two items compare equal based
 * on the predicate.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category List
 * @sig (a, a -> Boolean) -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      var strEq = R.eqBy(String);
 *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]
 *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]
 *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]
 *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']
 */
module.exports = _curry2(function uniqWith(pred, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  var item;
  while (idx < len) {
    item = list[idx];
    if (!_containsWith(pred, item, result)) {
      result[result.length] = item;
    }
    idx += 1;
  }
  return result;
});


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

// EXPOSE
var _sizzle = window.Sizzle;

Sizzle.noConflict = function() {
	if ( window.Sizzle === Sizzle ) {
		window.Sizzle = _sizzle;
	}

	return Sizzle;
};

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return Sizzle; }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
// Sizzle requires that there be a global window in Common-JS like environments
} else if ( typeof module !== "undefined" && module.exports ) {
	module.exports = Sizzle;
} else {
	window.Sizzle = Sizzle;
}
// EXPOSE

})( window );


/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__abstractNodeVisuals__ = __webpack_require__(41);



/**
 * An abstract superclass for the a graphic engine used by nodes on the Pedigree graph. Can display
 * a shape representing the gender of the attached node.
 *
 * @class AbstractPersonVisuals
 * @extends AbstractNodeVisuals
 * @constructor
 * @param {AbstractPerson} node The node for which this graphics are handled
 * @param {Number} x The x coordinate on the canvas
 * @param {Number} y the y coordinate on the canvas
 */

const AbstractPersonVisuals = Class.create(__WEBPACK_IMPORTED_MODULE_1__abstractNodeVisuals__["a" /* AbstractNodeVisuals */], {

    initialize: function ($super, node, x, y) {
        $super(node, x, y);

        this._radius = __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius;
        this._width = __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius * 4;

        this._highlightBox = null;
        this._adoptedShape = null;
        this._genderShape = null;
        this._genderGraphics = null; // == set(_genderShape, shadow)
        this._numberLabel = null;

        this.setGenderGraphics();

        this.setHighlightBox();

        this.updateIDLabel();

        this._hoverBox = this.generateHoverbox(x, y);
    },

    updateIDLabel: function () {
        if (!editor.DEBUG_MODE) return;

        var x = this.getX();
        var y = this.getY();
        this._idLabel && this._idLabel.remove();
        this._idLabel = editor.getPaper().text(x, y, this.getNode().getID()).attr(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].dragMeLabel).toFront();
        this._idLabel.node.setAttribute("class", "no-mouse-interaction");
    },

    updateNumberLabel: function () {
        this._numberLabel && this._numberLabel.remove();
        if (this.getNode().getPedNumber() != "") {
            var x = this.getX();
            var y = this.getY();
            this._numberLabel = editor.getPaper().text(x, y, this.getNode().getPedNumber()).attr(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].pedNumberLabel).toFront();
            this._numberLabel.node.setAttribute("class", "no-mouse-interaction");
        }
    },

    generateHoverbox: function (x, y) {
        return null;
    },

    /**
     * Updates whatever needs to change when node id changes (e.g. id label) 
     *
     * @method onSetID
     */
    onSetID: function ($super, id) {
        $super(id);
        this.updateIDLabel();
    },

    /**
     * Changes the position of the node to (X,Y)
     *
     * @method setPos
     * @param {Number} x The x coordinate
     * @param {Number} y The y coordinate
     * @param {Boolean} animate Set to true if you want to animate the transition
     * @param {Function} callback The function called at the end of the animation
     */
    setPos: function ($super, x, y, animate, callback) {

        this.getHoverBox().removeHandles();
        this.getHoverBox().removeButtons();

        var moveX = x - this.getX();
        var moveY = y - this.getY();

        if (moveX == 0 && moveY == 0) return;

        // need to set X and Y before animation finishes or other
        // stuff will be drawn incorrectly
        $super(x, y, animate);

        if (animate) {
            var me = this;
            this._callback = function () {
                if (me._toMark) {
                    me.markPermanently();
                    delete me._toMark;
                }
                delete me._callback;
                callback && callback();
            };

            this.getAllGraphics().animate({ "transform": "t " + moveX + "," + moveY + "..." }, 900, "linear", me._callback); //easeInOut

            //this.getAllGraphics().transform("t " + moveX + "," + moveY + "...");
            //callback && callback();
        } else {
            this.getAllGraphics().transform("t " + moveX + "," + moveY + "...");
            callback && callback();
        }
    },

    /**
     * Expands the partnership circle
     *
     * @method grow
     */
    grow: function ($super) {
        $super();
        if (this._callback) throw "Assertion failed: grow() during animation";
        if (this.glow) return;
        this.glow = this._genderShape.glow({ width: 11, fill: true, opacity: 0.4, color: "green" });
        if (this.marked) this.marked.hide();
    },

    /**
     * Shrinks node graphics to the original size
     *
     * @method shrink
     */
    shrink: function ($super) {
        this.glow && this.glow.remove();
        delete this.glow;
        if (this.marked) this.marked.show();
        $super();
    },

    /**
     * Marks the node in  away different from glow
     *
     * @method grow
     */
    markPermanently: function () {
        //console.log("marking " + this.getNode().getID());
        if (this._callback && !this._toMark) {
            // trying to mark during animation - need ot wait until animation finishes to mark @ the final location
            this._toMark = true;
            return;
        }
        if (this.marked) return;
        this.marked = this._genderShape.glow({ width: 11, fill: true, opacity: 0.6, color: "#ee8d00" });
    },

    /**
     * Unmarks the node
     *
     * @method shrink
     */
    unmark: function () {
        this.marked && this.marked.remove();
        delete this.marked;
    },

    /**
     * Returns true if this node's graphic representation covers coordinates (x,y)
     *
     * @method containsXY
     */
    containsXY: function (x, y) {
        if (Math.abs(x - this.getX()) <= this._radius && Math.abs(y - this.getY()) <= this._radius) return true;
        return false;
    },

    /**
     * Returns the Y coordinate of the lowest part of this node's graphic on the canvas
     *
     * @method getY
     * @return {Number} The y coordinate
     */
    getBottomY: function () {
        return this._absoluteY + this._radius + __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].childlessLength;
    },

    /**
     * Draws brackets around the node icon to show that this node is adopted
     *
     * @method drawAdoptedShape
     */
    drawAdoptedShape: function () {
        this._adoptedShape && this._adoptedShape.remove();
        var r = __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius,
            x1 = this.getX() - 0.8 * r,
            x2 = this.getX() + 0.8 * r,
            y = this.getY() - 1.3 * r + 1,
            brackets = "M" + x1 + " " + y + "l" + r / -2 + " " + 0 + "l0 " + (2.6 * r - 2) + "l" + r / 2 + " 0M" + x2 + " " + y + "l" + r / 2 + " 0" + "l0 " + (2.6 * r - 2) + "l" + r / -2 + " 0";
        this._adoptedShape = editor.getPaper().path(brackets).attr("stroke-width", 2.5);
        this._adoptedShape.toBack();
    },

    /**
     * Removes the brackets around the node icon that show that this node is adopted
     *
     * @method removeAdoptedShape
     */
    removeAdoptedShape: function () {
        this._adoptedShape && this._adoptedShape.remove();
    },

    /**
     * Returns the raphael element or set containing the adoption shape
     *
     * @method getAdoptedShape
     * @return {Raphael.el} Raphael Element
     */
    getAdoptedShape: function () {
        return this._adoptedShape;
    },

    /**
     * Returns a Raphael set or element that contains the graphics associated with this node, excluding the labels.
     *
     * @method getShapes
     */
    getShapes: function ($super) {
        var shapes = $super().push(this.getGenderGraphics());
        this.getAdoptedShape() && shapes.push(this.getAdoptedShape());
        return shapes;
    },

    /**
     * Returns a Raphael set that contains all the graphics and labels associated with this node.
     *
     * @method getAllGraphics
     * @return {Raphael.st}
     */
    getAllGraphics: function ($super) {
        return editor.getPaper().set(this.getHighlightBox(), this._idLabel, this._numberLabel).concat($super());
    },

    /**
     * Returns the Raphael element representing the gender of the node.
     *
     * @method getGenderGraphics
     * @return {Raphael.st|Raphael.el} Raphael set or Raphael element
     */
    getGenderGraphics: function () {
        return this._genderGraphics;
    },

    /**
     * Returns only the shape element from the genderGraphics (i.e. no shadow)
     *
     * @method getGenderShape
     * @return {Raphael.st|Raphael.el}
     */
    getGenderShape: function () {
        return this._genderShape;
    },

    /**
     * Sets/replaces the gender graphics with graphics appropriate for the gender
     *
     * @method setGenderGraphics
     */
    setGenderGraphics: function () {
        this.unmark();
        this._genderGraphics && this._genderGraphics.remove();

        this._shapeRadius = this.getNode().getGender() == "U" ? __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius * 1.1 / Math.sqrt(2) : __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius;
        if (this.getNode().isPersonGroup()) this._shapeRadius *= __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].groupNodesScale;

        var shape;
        var x = this.getX(),
            y = this.getY(),
            radius = this._shapeRadius;

        if (this.getNode().getGender() == "F") {
            shape = editor.getPaper().circle(x, y, radius);
        } else {
            //console.log("x: " + x + ", y: " + y + ", rad: " + radius + ", shape: " + this._genderShape);
            shape = editor.getPaper().rect(x - radius, y - radius, radius * 2, radius * 2);
            //if (this.getNode().getGender() == 'M') {
            //    shape.node.setAttribute("shape-rendering","crispEdges");
            //}
        }

        if (this.getNode().getGender() == "U") {
            shape.attr(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].nodeShapeDiag);
            shape.attr({ transform: "...R45" });
        } else {
            shape.attr(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].nodeShape);
        }

        if (!editor.isUnsupportedBrowser()) {
            //var shadow = shape.glow({width: 5, fill: true, opacity: 0.1}).translate(3,3);
            var shadow = shape.clone().attr({ stroke: "none", fill: "gray", opacity: .3 });
            shadow.translate(3, 3);
            shadow.insertBefore(shape);
        }

        this._genderShape = shape;

        this._genderGraphics = editor.getPaper().set(shadow, shape);
    },

    /**
     * Sets/replaces the current highlight box
     *
     * @method setGenderGraphics
     */
    setHighlightBox: function () {
        this._highlightBox && this._highlightBox.remove();

        var radius = __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHoverBoxRadius;
        this._highlightBox = editor.getPaper().rect(this.getX() - radius, this.getY() - radius, radius * 2, radius * 2, 5).attr(__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].boxOnHover);
        this._highlightBox.attr({ fill: "black", opacity: 0, "fill-opacity": 0 });
        this._highlightBox.insertBefore(this.getGenderGraphics().flatten());
    },

    /**
     * Returns the box around the element that appears when the node is highlighted
     *
     * @method getHighlightBox
     * @return {Raphael.rect} Raphael rectangle element
     */
    getHighlightBox: function () {
        return this._highlightBox;
    },

    /**
     * Displays the highlightBox around the node
     *
     * @method highlight
     */
    highlight: function () {
        this.getHighlightBox() && this.getHighlightBox().attr({ "opacity": .5, "fill-opacity": .5 });
    },

    /**
     * Hides the highlightBox around the node
     *
     * @method unHighlight
     */
    unHighlight: function () {
        this.getHighlightBox().attr({ "opacity": 0, "fill-opacity": 0 });
    },

    remove: function ($super) {
        this.marked && this.marked.remove();
        $super();
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = AbstractPersonVisuals;


/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(5);

/*
 * Disorder is a class for storing genetic disorder info and loading it from the
 * the OMIM database. These disorders can be attributed to an individual in the Pedigree.
 *
 * @param disorderID the id number for the disorder, taken from the OMIM database
 * @param name a string representing the name of the disorder e.g. "Down Syndrome"
 */

const Disorder = Class.create({

    initialize: function (disorderID, name, callWhenReady) {
        // user-defined disorders
        if (name == null && !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["i" /* isInt */])(disorderID)) {
            name = Disorder.desanitizeID(disorderID);
        }

        this._disorderID = Disorder.sanitizeID(disorderID);
        this._name = name ? name : "loading...";

        if (!name && callWhenReady) this.load(callWhenReady);
    },

    /*
     * Returns the disorderID of the disorder
     */
    getDisorderID: function () {
        return this._disorderID;
    },

    /*
     * Returns the name of the disorder
     */
    getName: function () {
        return this._name;
    },

    load: function (callWhenReady) {
        var baseOMIMServiceURL = Disorder.getOMIMServiceURL();
        var queryURL = baseOMIMServiceURL + "&q=id:" + this._disorderID;
        //console.log("queryURL: " + queryURL);
        // new Ajax.Request(queryURL, {
        //     method: "GET",
        //     onSuccess: this.onDataReady.bind(this),
        //     //onComplete: complete.bind(this)
        //     onComplete: callWhenReady ? callWhenReady : {}
        // });
    },

    onDataReady: function (response) {
        try {
            var parsed = JSON.parse(response.responseText);
            //console.log(stringifyObject(parsed));
            console.log("LOADED DISORDER: disorder id = " + this._disorderID + ", name = " + parsed.rows[0].name);
            this._name = parsed.rows[0].name;
        } catch (err) {
            console.log("[LOAD DISORDER] Error: " + err);
            console.trace(err);
        }
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = Disorder;


/*
 * IDs are used as part of HTML IDs in the Legend box, which breaks when IDs contain some non-alphanumeric symbols.
 * For that purpose these symbols in IDs are converted in memory (but not in the stored pedigree) to some underscores.
 */
Disorder.sanitizeID = function (disorderID) {
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["i" /* isInt */])(disorderID)) return disorderID;
    var temp = disorderID.replace(/[\(\[]/g, "_L_");
    temp = temp.replace(/[\)\]]/g, "_J_");
    return temp.replace(/[^a-zA-Z0-9,;_\-*]/g, "__");
};

Disorder.desanitizeID = function (disorderID) {
    var temp = disorderID.replace(/__/g, " ");
    temp = temp.replace(/_L_/g, "(");
    return temp.replace(/_J_/g, ")");
};

Disorder.getOMIMServiceURL = function () {
    return "";
};

/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/*
 * HPOTerm is a class for storing phenotype information and loading it from the
 * the HPO database. These phenotypes can be attributed to an individual in the Pedigree.
 *
 * @param hpoID the id number for the HPO term, taken from the HPO database
 * @param name a string representing the name of the term e.g. "Abnormality of the eye"
 */

const HPOTerm = Class.create({

    initialize: function (hpoID, name, callWhenReady) {
        // user-defined terms
        if (name == null && !HPOTerm.isValidID(HPOTerm.desanitizeID(hpoID))) {
            name = HPOTerm.desanitizeID(hpoID);
        }

        this._hpoID = HPOTerm.sanitizeID(hpoID);
        this._name = name ? name : "loading...";

        if (!name && callWhenReady) this.load(callWhenReady);
    },

    /*
     * Returns the hpoID of the phenotype
     */
    getID: function () {
        return this._hpoID;
    },

    /*
     * Returns the name of the term
     */
    getName: function () {
        return this._name;
    },

    load: function (callWhenReady) {
        var baseServiceURL = HPOTerm.getServiceURL();
        var queryURL = baseServiceURL + "&q=id%3A" + HPOTerm.desanitizeID(this._hpoID).replace(":", "%5C%3A");
        //console.log("QueryURL: " + queryURL);
        // new Ajax.Request(queryURL, {
        //     method: "GET",
        //     onSuccess: this.onDataReady.bind(this),
        //     //onComplete: complete.bind(this)
        //     onComplete: callWhenReady ? callWhenReady : {}
        // });
    },

    onDataReady: function (response) {
        try {
            var parsed = JSON.parse(response.responseText);
            //console.log(stringifyObject(parsed));
            console.log("LOADED HPO TERM: id = " + HPOTerm.desanitizeID(this._hpoID) + ", name = " + parsed.rows[0].name);
            this._name = parsed.rows[0].name;
        } catch (err) {
            console.log("[LOAD HPO TERM] Error: ");
            console.trace(err);
        }
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = HPOTerm;


/*
 * IDs are used as part of HTML IDs in the Legend box, which breaks when IDs contain some non-alphanumeric symbols.
 * For that purpose these symbols in IDs are converted in memory (but not in the stored pedigree) to some underscores.
 */
HPOTerm.sanitizeID = function (id) {
    var temp = id.replace(/[\(\[]/g, "_L_");
    temp = temp.replace(/[\)\]]/g, "_J_");
    temp = temp.replace(/[:]/g, "_C_");
    return temp.replace(/[^a-zA-Z0-9,;_\-*]/g, "__");
};

HPOTerm.desanitizeID = function (id) {
    var temp = id.replace(/__/g, " ");
    temp = temp.replace(/_C_/g, ":");
    temp = temp.replace(/_L_/g, "(");
    return temp.replace(/_J_/g, ")");
};

HPOTerm.isValidID = function (id) {
    var pattern = /^HP\:(\d)+$/i;
    return pattern.test(id);
};

HPOTerm.getServiceURL = function () {
    return "";
};

/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__abstractPerson__ = __webpack_require__(155);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__personVisuals__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__disorder__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__hpoTerm__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__abstractNode__ = __webpack_require__(64);






/**
 * Person is a class representing any AbstractPerson that has sufficient information to be
 * displayed on the final pedigree graph (printed or exported). Person objects
 * contain information about disorders, age and other relevant properties, as well
 * as graphical data to visualize this information.
 *
 * @class Person
 * @constructor
 * @extends AbstractPerson
 * @param {Number} x X coordinate on the Raphael canvas at which the node drawing will be centered
 * @param {Number} y Y coordinate on the Raphael canvas at which the node drawing will be centered
 * @param {String} gender 'M', 'F' or 'U' depending on the gender
 * @param {Number} id Unique ID number
 * @param {Boolean} isProband True if this person is the proband
 */

const Person = Class.create(__WEBPACK_IMPORTED_MODULE_0__abstractPerson__["a" /* AbstractPerson */], {

    initialize: function ($super, x, y, id, properties) {
        //var timer = new Timer();
        !this._type && (this._type = "Person");
        this._setDefault();
        this._isProband = properties.isProband;
        this.setFocused(properties.focused);
        var gender = properties.hasOwnProperty("gender") ? properties["gender"] : "U";
        $super(x, y, gender, id);

        // need to assign after super() and explicitly pass gender to super()
        // because changing properties requires a redraw, which relies on gender
        // shapes being there already
        this.assignProperties(properties);
        //timer.printSinceLast("=== new person runtime: ");
    },

    _setDefault: function () {
        this._firstName = "";
        this._lastName = "";
        this._lastNameAtBirth = "";
        this._birthDate = "";
        this._deathDate = "";
        this._conceptionDate = "";
        this._gestationAge = "";
        this._isAdopted = false;
        this._externalID = "";
        this._externalIDHref = "";
        this._lifeStatus = "alive";
        this._childlessStatus = null;
        this._childlessReason = "";
        this._carrierStatus = "";
        this._disorders = [];
        this._hpo = [];
        this._ethnicities = [];
        this._candidateGenes = [];
        this._twinGroup = null;
        this._monozygotic = false;
        this._evaluated = false;
        this._pedNumber = "";
        this._lostContact = false;
        this._focused = false;
        this._isProband = false;
    },

    /**
     * Initializes the object responsible for creating graphics for this Person
     *
     * @method _generateGraphics
     * @param {Number} x X coordinate on the Raphael canvas at which the node drawing will be centered
     * @param {Number} y Y coordinate on the Raphael canvas at which the node drawing will be centered
     * @return {PersonVisuals}
     * @private
     */
    _generateGraphics: function (x, y) {
        // console.log("person - generate graphics");
        return new __WEBPACK_IMPORTED_MODULE_1__personVisuals__["a" /* PersonVisuals */](this, x, y);
    },

    /**
     * Returns True if this node is the proband (i.e. the main patient)
     *
     * @method isProband
     * @return {Boolean}
     */
    isProband: function () {
        console.log('getting proband info', this._isProband);
        return this._isProband;
    },

    /**
     * Returns the first name of this Person
     *
     * @method getFirstName
     * @return {String}
     */
    getFirstName: function () {
        return this._firstName;
    },

    /**
     * Replaces the first name of this Person with firstName, and displays the label
     *
     * @method setFirstName
     * @param firstName
     */
    setFirstName: function (firstName) {
        firstName && (firstName = firstName.charAt(0).toUpperCase() + firstName.slice(1));
        this._firstName = firstName;
        this.getGraphics().updateNameLabel();
    },

    /**
     * Returns the last name of this Person
     *
     * @method getLastName
     * @return {String}
     */
    getLastName: function () {
        return this._lastName;
    },

    /**
     * Replaces the last name of this Person with lastName, and displays the label
     *
     * @method setLastName
     * @param lastName
     */
    setLastName: function (lastName) {
        lastName && (lastName = lastName.charAt(0).toUpperCase() + lastName.slice(1));
        this._lastName = lastName;
        this.getGraphics().updateNameLabel();
        return lastName;
    },

    /**
     * Returns the externalID of this Person
     *
     * @method getExternalID
     * @return {String}
     */
    getExternalID: function () {
        return this._externalID;
    },

    /**
     * Returns the externalID of this Person
     *
     * @method getExternalID
     * @return {String}
     */
    getExternalIDHref: function () {
        return this._externalIDHref;
    },

    /**
     * Is this the person we are currently looking at?
     *
     * @method getLostContact
     * @return {Boolean}
     */
    getFocused: function () {
        return this._focused;
    },

    isFocused: function () {
        return this.getFocused();
    },

    /**
     * Sets the "focused" property of this node
     *
     * @method setFocused
     */
    setFocused: function (focused) {
        if (focused == this._focused) return;
        this._focused = focused;
    },

    /**
     * Sets the user-visible node ID for this person
     * ("I-1","I-2","I-3", "II-1", "II-2", etc.)
     *
     * @method setPedNumber
     */
    setPedNumber: function (pedNumberString) {
        this._pedNumber = pedNumberString;
        this.getGraphics().updateNumberLabel();
    },

    /**
     * Returns the user-visible node ID for this person, e.g. "I", "II", "III", "IV", etc.
     *
     * @method getPedNumber
     * @return {String}
     */
    getPedNumber: function () {
        return this._pedNumber;
    },

    /**
     * Replaces the external ID of this Person with the given ID, and displays the label
     *
     * @method setExternalID
     * @param externalID
     */
    setExternalID: function (externalID) {
        this._externalID = externalID;
        this.getGraphics().updateExternalIDLabel();
    },

    /**
     * Replaces the external ID of this Person with the given ID, and displays the label
     *
     * @method setExternalID
     * @param externalID
     */
    setExternalIDHref: function (externalIDHref) {
        this._externalIDHref = externalIDHref;
        this.getGraphics().updateExternalIDLabel();
    },

    /**
     * Returns the last name at birth of this Person
     *
     * @method getLastNameAtBirth
     * @return {String}
     */
    getLastNameAtBirth: function () {
        return this._lastNameAtBirth;
    },

    /**
     * Replaces the last name at birth of this Person with the given name, and updates the label
     *
     * @method setLastNameAtBirth
     * @param lastNameAtBirth
     */
    setLastNameAtBirth: function (lastNameAtBirth) {
        lastNameAtBirth && (lastNameAtBirth = lastNameAtBirth.charAt(0).toUpperCase() + lastNameAtBirth.slice(1));
        this._lastNameAtBirth = lastNameAtBirth;
        this.getGraphics().updateNameLabel();
        return lastNameAtBirth;
    },

    /**
     * Replaces free-form comments associated with the node and redraws the label
     *
     * @method setComments
     * @param comment
     */
    setComments: function ($super, comment) {
        if (comment != this.getComments()) {
            $super(comment);
            this.getGraphics().updateCommentsLabel();
        }
    },

    /**
     * Sets the type of twin
     *
     * @method setMonozygotic
     */
    setMonozygotic: function (monozygotic) {
        if (monozygotic == this._monozygotic) return;
        this._monozygotic = monozygotic;
    },

    /**
     * Returns the documented evaluation status
     *
     * @method getEvaluated
     * @return {Boolean}
     */
    getEvaluated: function () {
        return this._evaluated;
    },

    /**
     * Sets the documented evaluation status
     *
     * @method setEvaluated
     */
    setEvaluated: function (evaluationStatus) {
        if (evaluationStatus == this._evaluated) return;
        this._evaluated = evaluationStatus;
        this.getGraphics().updateEvaluationLabel();
    },

    /**
     * Returns the "in contact" status of this node.
     * "False" means proband has lost contaxt with this individual
     *
     * @method getLostContact
     * @return {Boolean}
     */
    getLostContact: function () {
        return this._lostContact;
    },

    /**
     * Sets the "in contact" status of this node
     *
     * @method setLostContact
     */
    setLostContact: function (lostContact) {
        if (lostContact == this._lostContact) return;
        this._lostContact = lostContact;
    },

    /**
     * Returns the type of twin: monozygotic or not
     * (always false for non-twins)
     *
     * @method getMonozygotic
     * @return {Boolean}
     */
    getMonozygotic: function () {
        return this._monozygotic;
    },

    /**
     * Assigns this node to the given twin group
     * (a twin group is all the twins from a given pregnancy)
     *
     * @method setTwinGroup
     */
    setTwinGroup: function (groupId) {
        this._twinGroup = groupId;
    },

    /**
     * Returns the status of this Person
     *
     * @method getLifeStatus
     * @return {String} "alive", "deceased", "stillborn", "unborn", "aborted" or "miscarriage"
     */
    getLifeStatus: function () {
        return this._lifeStatus;
    },

    /**
     * Returns True if this node's status is not 'alive' or 'deceased'.
     *
     * @method isFetus
     * @return {Boolean}
     */
    isFetus: function () {
        return this.getLifeStatus() != "alive" && this.getLifeStatus() != "deceased";
    },

    /**
     * Returns True is status is 'unborn', 'stillborn', 'aborted', 'miscarriage', 'alive' or 'deceased'
     *
     * @method _isValidLifeStatus
     * @param {String} status
     * @returns {boolean}
     * @private
     */
    _isValidLifeStatus: function (status) {
        return status == "unborn" || status == "stillborn" || status == "aborted" || status == "miscarriage" || status == "alive" || status == "deceased";
    },

    /**
     * Changes the life status of this Person to newStatus
     *
     * @method setLifeStatus
     * @param {String} newStatus "alive", "deceased", "stillborn", "unborn", "aborted" or "miscarriage"
     */
    setLifeStatus: function (newStatus) {
        if (this._isValidLifeStatus(newStatus)) {
            var oldStatus = this._lifeStatus;

            this._lifeStatus = newStatus;

            newStatus != "deceased" && this.setDeathDate("");
            newStatus == "alive" && this.setGestationAge();
            this.getGraphics().updateSBLabel();

            if (this.isFetus()) {
                this.setBirthDate("");
                this.setAdopted(false);
                this.setChildlessStatus(null);
            }
            this.getGraphics().updateLifeStatusShapes(oldStatus);
            this.getGraphics().getHoverBox().regenerateHandles();
            this.getGraphics().getHoverBox().regenerateButtons();
        }
    },

    /**
     * Returns the date of the conception date of this Person
     *
     * @method getConceptionDate
     * @return {Date}
     */
    getConceptionDate: function () {
        return this._conceptionDate;
    },

    /**
     * Replaces the conception date with newDate
     *
     * @method setConceptionDate
     * @param {Date} newDate Date of conception
     */
    setConceptionDate: function (newDate) {
        this._conceptionDate = newDate ? new Date(newDate) : "";
        this.getGraphics().updateAgeLabel();
    },

    /**
     * Returns the number of weeks since conception
     *
     * @method getGestationAge
     * @return {Number}
     */
    getGestationAge: function () {
        if (this.getLifeStatus() == "unborn" && this.getConceptionDate()) {
            var oneWeek = 1000 * 60 * 60 * 24 * 7,
                lastDay = new Date();
            return Math.round((lastDay.getTime() - this.getConceptionDate().getTime()) / oneWeek);
        } else if (this.isFetus()) {
            return this._gestationAge;
        } else {
            return null;
        }
    },

    /**
     * Updates the conception age of the Person given the number of weeks passed since conception
     *
     * @method setGestationAge
     * @param {Number} numWeeks Greater than or equal to 0
     */
    setGestationAge: function (numWeeks) {
        try {
            numWeeks = parseInt(numWeeks);
        } catch (err) {
            numWeeks = "";
        }
        if (numWeeks) {
            this._gestationAge = numWeeks;
            var daysAgo = numWeeks * 7,
                d = new Date();
            d.setDate(d.getDate() - daysAgo);
            this.setConceptionDate(d);
        } else {
            this._gestationAge = "";
            this.setConceptionDate(null);
        }
        this.getGraphics().updateAgeLabel();
    },

    /**
     * Returns the the birth date of this Person
     *
     * @method getBirthDate
     * @return {Date}
     */
    getBirthDate: function () {
        return this._birthDate;
    },

    /**
     * Replaces the birth date with newDate
     *
     * @method setBirthDate
     * @param {Date} newDate Must be earlier date than deathDate and a later than conception date
     */
    setBirthDate: function (newDate) {
        newDate = newDate ? new Date(newDate) : "";
        if (!newDate || !this.getDeathDate() || newDate.getTime() < this.getDeathDate().getTime()) {
            this._birthDate = newDate;
            this.getGraphics().updateAgeLabel();
        }
    },

    /**
     * Returns the death date of this Person
     *
     * @method getDeathDate
     * @return {Date}
     */
    getDeathDate: function () {
        return this._deathDate;
    },

    /**
     * Replaces the death date with deathDate
     *
     *
     * @method setDeathDate
     * @param {Date} deathDate Must be a later date than birthDate
     */
    setDeathDate: function (deathDate) {
        deathDate = deathDate ? new Date(deathDate) : "";
        // only set death date if it happens ot be after the birth date, or there is no birth or death date
        if (!deathDate || !this.getBirthDate() || deathDate.getTime() > this.getBirthDate().getTime()) {
            this._deathDate = deathDate;
            this._deathDate && this.getLifeStatus() == "alive" && this.setLifeStatus("deceased");
        }
        this.getGraphics().updateAgeLabel();
        return this.getDeathDate();
    },

    _isValidCarrierStatus: function (status) {
        return status == "" || status == "carrier" || status == "affected" || status == "presymptomatic";
    },

    /**
     * Sets the global disorder carrier status for this Person
     *
     * @method setCarrier
     * @param status One of {'', 'carrier', 'affected', 'presymptomatic'}
     */
    setCarrierStatus: function (status) {
        var numDisorders = this.getDisorders().length;

        if (status === undefined || status === null) {
            if (numDisorders == 0) {
                status = "";
            } else {
                status = this.getCarrierStatus();
                if (status == "") {
                    status = "affected";
                }
            }
        }

        if (!this._isValidCarrierStatus(status)) return;

        if (numDisorders > 0 && status == "") {
            if (numDisorders == 1 && this.getDisorders()[0] == "affected") {
                this.removeDisorder("affected");
                this.getGraphics().updateDisorderShapes();
            } else {
                status = "affected";
            }
        } else if (numDisorders == 0 && status == "affected") {
            this.addDisorder("affected");
            this.getGraphics().updateDisorderShapes();
        }

        if (status != this._carrierStatus) {
            this._carrierStatus = status;
            this.getGraphics().updateCarrierGraphic();
        }
    },

    /**
     * Returns the global disorder carrier status for this person.
     *
     * @method getCarrier
     * @return {String} Dissorder carrier status
     */
    getCarrierStatus: function () {
        return this._carrierStatus;
    },

    /**
     * Returns the list of all colors associated with the node
     * (e.g. all colors of all disorders and all colors of all the genes)
     * @method getAllNodeColors
     * @return {Array of Strings}
     */
    getAllNodeColors: function () {
        var i;
        var result = [];
        for (i = 0; i < this.getDisorders().length; i++) {
            result.push(editor.getDisorderLegend().getObjectColor(this.getDisorders()[i]));
        }
        for (i = 0; i < this.getGenes().length; i++) {
            result.push(editor.getGeneLegend().getObjectColor(this.getGenes()[i]));
        }
        return result;
    },

    /**
     * Returns a list of disorders of this person.
     *
     * @method getDisorders
     * @return {Array} List of disorder IDs.
     */
    getDisorders: function () {
        //console.log("Get disorders: " + stringifyObject(this._disorders)); 
        return this._disorders;
    },

    /**
     * Returns a list of disorders of this person, with non-scrambled IDs
     *
     * @method getDisordersForExport
     * @return {Array} List of human-readable versions of disorder IDs
     */
    getDisordersForExport: function () {
        var exportDisorders = this._disorders.slice(0);
        for (var i = 0; i < exportDisorders.length; i++) {
            exportDisorders[i] = __WEBPACK_IMPORTED_MODULE_2__disorder__["a" /* Disorder */].desanitizeID(exportDisorders[i]);
        }
        return exportDisorders;
    },

    /**
     * Adds disorder to the list of this node's disorders and updates the Legend.
     *
     * @method addDisorder
     * @param {Disorder} disorder Disorder object or a free-text name string
     */
    addDisorder: function (disorder) {
        if (typeof disorder != "object") {
            disorder = editor.getDisorderLegend().getDisorder(disorder);
        }
        if (!this.hasDisorder(disorder.getDisorderID())) {
            editor.getDisorderLegend().addCase(disorder.getDisorderID(), disorder.getName(), this.getID());
            this.getDisorders().push(disorder.getDisorderID());
        } else {
            console.warn("This person already has the specified disorder");
        }

        // if any "real" disorder has been added
        // the virtual "affected" disorder should be automatically removed
        if (this.getDisorders().length > 1) {
            this.removeDisorder("affected");
        }
    },

    /**
     * Removes disorder from the list of this node's disorders and updates the Legend.
     *
     * @method removeDisorder
     * @param {Number} disorderID id of the disorder to be removed 
     */
    removeDisorder: function (disorderID) {
        if (this.hasDisorder(disorderID)) {
            editor.getDisorderLegend().removeCase(disorderID, this.getID());
            this._disorders = this.getDisorders().without(disorderID);
        } else {
            if (disorderID != "affected") {
                console.warn("This person doesn't have the specified disorder");
            }
        }
    },

    /**
     * Sets the list of disorders of this person to the given list
     *
     * @method setDisorders
     * @param {Array} disorders List of Disorder objects
     */
    setDisorders: function (disorders) {
        var i;
        //console.log("Set disorders: " + stringifyObject(disorders));
        for (i = this.getDisorders().length - 1; i >= 0; i--) {
            this.removeDisorder(this.getDisorders()[i]);
        }
        for (i = 0; i < disorders.length; i++) {
            this.addDisorder(disorders[i]);
        }
        this.getGraphics().updateDisorderShapes();
        this.setCarrierStatus(); // update carrier status
    },

    /**
     * Returns a list of all HPO terms associated with the patient
     *
     * @method getHPO
     * @return {Array} List of HPO IDs.
     */
    getHPO: function () {
        return this._hpo;
    },

    /**
     * Returns a list of phenotypes of this person, with non-scrambled IDs
     *
     * @method getHPOForExport
     * @return {Array} List of human-readable versions of HPO IDs
     */
    getHPOForExport: function () {
        var exportHPOs = this._hpo.slice(0);
        for (var i = 0; i < exportHPOs.length; i++) {
            exportHPOs[i] = __WEBPACK_IMPORTED_MODULE_3__hpoTerm__["a" /* HPOTerm */].desanitizeID(exportHPOs[i]);
        }
        return exportHPOs;
    },

    /**
     * Adds HPO term to the list of this node's phenotypes and updates the Legend.
     *
     * @method addHPO
     * @param {HPOTerm} hpo HPOTerm object or a free-text name string
     */
    addHPO: function (hpo) {
        if (typeof hpo != "object") {
            hpo = editor.getHPOLegend().getTerm(hpo);
        }
        if (!this.hasHPO(hpo.getID())) {
            editor.getHPOLegend().addCase(hpo.getID(), hpo.getName(), this.getID());
            this.getHPO().push(hpo.getID());
        } else {
            console.warn("This person already has the specified phenotype");
        }
    },

    /**
     * Removes HPO term from the list of this node's terms and updates the Legend.
     *
     * @method removeHPO
     * @param {Number} hpoID id of the term to be removed
     */
    removeHPO: function (hpoID) {
        if (this.hasHPO(hpoID)) {
            editor.getHPOLegend().removeCase(hpoID, this.getID());
            this._hpo = this.getHPO().without(hpoID);
        } else {
            console.warn("This person doesn't have the specified HPO term");
        }
    },

    /**
     * Sets the list of HPO temrs of this person to the given list
     *
     * @method setHPO
     * @param {Array} hpos List of HPOTerm objects
     */
    setHPO: function (hpos) {
        var i;
        for (i = this.getHPO().length - 1; i >= 0; i--) {
            this.removeHPO(this.getHPO()[i]);
        }
        for (i = 0; i < hpos.length; i++) {
            this.addHPO(hpos[i]);
        }
    },

    /**
     * @method hasHPO
     * @param {Number} id Term ID, taken from the HPO database
     */
    hasHPO: function (id) {
        return this.getHPO().indexOf(id) != -1;
    },

    /**
     * Sets the list of ethnicities of this person to the given list
     *
     * @method setEthnicities
     * @param {Array} ethnicities List of ethnicity names (as strings)
     */
    setEthnicities: function (ethnicities) {
        this._ethnicities = ethnicities;
    },

    /**
     * Returns a list of ethnicities of this person.
     *
     * @method getEthnicities
     * @return {Array} List of ethnicity names.
     */
    getEthnicities: function () {
        return this._ethnicities;
    },

    /**
     * Adds gene to the list of this node's candidate genes
     *
     * @method addGenes
     */
    addGene: function (gene) {
        if (this.getGenes().indexOf(gene) == -1) {
            editor.getGeneLegend().addCase(gene, gene, this.getID());
            this.getGenes().push(gene);
        }
    },

    /**
     * Removes gene from the list of this node's candidate genes
     *
     * @method removeGene
     */
    removeGene: function (gene) {
        if (this.getGenes().indexOf(gene) !== -1) {
            editor.getGeneLegend().removeCase(gene, this.getID());
            this._candidateGenes = this.getGenes().without(gene);
        }
    },

    /**
     * Sets the list of candidate genes of this person to the given list
     *
     * @method setGenes
     * @param {Array} genes List of gene names (as strings)
     */
    setGenes: function (genes) {
        var i;
        for (i = this.getGenes().length - 1; i >= 0; i--) {
            this.removeGene(this.getGenes()[i]);
        }
        for (i = 0; i < genes.length; i++) {
            this.addGene(genes[i]);
        }
        this.getGraphics().updateDisorderShapes();
    },

    /**
     * Returns a list of candidate genes for this person.
     *
     * @method getGenes
     * @return {Array} List of gene names.
     */
    getGenes: function () {
        return this._candidateGenes;
    },

    /**
     * Removes the node and its visuals.
     *
     * @method remove
     * @param [skipConfirmation=false] {Boolean} if true, no confirmation box will pop up
     */
    remove: function ($super) {
        this.setDisorders([]); // remove disorders form the legend
        this.setHPO([]);
        this.setGenes([]);
        $super();
    },

    /**
     * Returns disorder with given id if this person has it. Returns null otherwise.
     *
     * @method getDisorderByID
     * @param {Number} id Disorder ID, taken from the OMIM database
     * @return {Disorder}
     */
    hasDisorder: function (id) {
        return this.getDisorders().indexOf(id) != -1;
    },

    /**
     * Changes the childless status of this Person. Nullifies the status if the given status is not
     * "childless" or "infertile". Modifies the status of the partnerships as well.
     *
     * @method setChildlessStatus
     * @param {String} status Can be "childless", "infertile" or null
     * @param {Boolean} ignoreOthers If True, changing the status will not modify partnerships's statuses or
     * detach any children
     */
    setChildlessStatus: function (status) {
        if (!this.isValidChildlessStatus(status)) status = null;
        if (status != this.getChildlessStatus()) {
            this._childlessStatus = status;
            this.setChildlessReason(null);
            this.getGraphics().updateChildlessShapes();
            this.getGraphics().getHoverBox().regenerateHandles();
        }
        return this.getChildlessStatus();
    },

    /**
     * Returns an object (to be accepted by the menu) with information about this Person
     *
     * @method getSummary
     * @return {Object} Summary object for the menu
     */
    getSummary: function () {
        var onceAlive = editor.getGraph().hasRelationships(this.getID());
        var inactiveStates = onceAlive ? ["unborn", "aborted", "miscarriage", "stillborn"] : false;

        var inactiveGenders = false;
        var genderSet = editor.getGraph().getPossibleGenders(this.getID());
        for (var gender in genderSet) if (genderSet.hasOwnProperty(gender)) if (!genderSet[gender]) inactiveGenders = [gender];

        var childlessInactive = this.isFetus(); // TODO: can a person which already has children become childless?
        // maybe: use editor.getGraph().hasNonPlaceholderNonAdoptedChildren() ?
        var disorders = [];
        this.getDisorders().forEach(function (disorder) {
            var disorderName = editor.getDisorderLegend().getDisorder(disorder).getName();
            disorders.push({ id: disorder, value: disorderName });
        });
        var hpoTerms = [];
        this.getHPO().forEach(function (hpo) {
            var termName = editor.getHPOLegend().getTerm(hpo).getName();
            hpoTerms.push({ id: hpo, value: termName });
        });

        var cantChangeAdopted = this.isFetus() || editor.getGraph().hasToBeAdopted(this.getID());

        var inactiveMonozygothic = true;
        var disableMonozygothic = true;
        var twins = editor.getGraph().getAllTwinsSortedByOrder(this.getID());
        if (twins.length > 1) {
            // check that there are twins and that all twins
            // have the same gender, otherwise can't be monozygothic
            inactiveMonozygothic = false;
            disableMonozygothic = false;
            for (var i = 0; i < twins.length; i++) {
                if (editor.getGraph().getGender(twins[i]) != this.getGender()) {
                    disableMonozygothic = true;
                    break;
                }
            }
        }

        var inactiveCarriers = [];
        if (disorders.length > 0) {
            if (disorders.length != 1 || disorders[0].id != "affected") {
                inactiveCarriers = [""];
            }
        }
        if (this.getLifeStatus() == "aborted" || this.getLifeStatus() == "miscarriage") {
            inactiveCarriers.push("presymptomatic");
        }

        var inactiveLostContact = this.isProband() || !editor.getGraph().isRelatedToProband(this.getID());

        return {
            identifier: { value: this.getID() },
            first_name: { value: this.getFirstName() },
            last_name: { value: this.getLastName() },
            last_name_birth: { value: this.getLastNameAtBirth() }, //, inactive: (this.getGender() != 'F')},
            external_id: { value: this.getExternalID() },
            gender: { value: this.getGender(), inactive: inactiveGenders },
            date_of_birth: { value: this.getBirthDate(), inactive: this.isFetus() },
            carrier: { value: this.getCarrierStatus(), disabled: inactiveCarriers },
            disorders: { value: disorders },
            ethnicity: { value: this.getEthnicities() },
            candidate_genes: { value: this.getGenes() },
            adopted: { value: this.isAdopted(), inactive: cantChangeAdopted },
            state: { value: this.getLifeStatus(), inactive: inactiveStates },
            date_of_death: { value: this.getDeathDate(), inactive: this.isFetus() },
            comments: { value: this.getComments(), inactive: false },
            gestation_age: { value: this.getGestationAge(), inactive: !this.isFetus() },
            childlessSelect: { value: this.getChildlessStatus() ? this.getChildlessStatus() : "none", inactive: childlessInactive },
            childlessText: { value: this.getChildlessReason() ? this.getChildlessReason() : undefined, inactive: childlessInactive, disabled: !this.getChildlessStatus() },
            placeholder: { value: false, inactive: true },
            monozygotic: { value: this.getMonozygotic(), inactive: inactiveMonozygothic, disabled: disableMonozygothic },
            evaluated: { value: this.getEvaluated() },
            hpo_positive: { value: hpoTerms },
            nocontact: { value: this.getLostContact(), inactive: inactiveLostContact }
        };
    },

    /**
     * Returns an object containing all the properties of this node
     * except id, x, y & type 
     *
     * @method getProperties
     * @return {Object} in the form
     *
     {
       property: value
     }
     */
    getProperties: function ($super) {
        // note: properties equivalent to default are not set
        var info = $super();
        if (this.getFirstName() != "") info["fName"] = this.getFirstName();
        if (this.getLastName() != "") info["lName"] = this.getLastName();
        if (this.getLastNameAtBirth() != "") info["lNameAtB"] = this.getLastNameAtBirth();
        if (this.getExternalID() != "") info["externalID"] = this.getExternalID();
        if (this.getBirthDate() != "") info["dob"] = this.getBirthDate().toDateString();
        if (this.isAdopted()) info["isAdopted"] = this.isAdopted();
        if (this.getLifeStatus() != "alive") info["lifeStatus"] = this.getLifeStatus();
        if (this.getDeathDate() != "") info["dod"] = this.getDeathDate().toDateString();
        if (this.getGestationAge() != null) info["gestationAge"] = this.getGestationAge();
        if (this.getChildlessStatus() != null) {
            info["childlessStatus"] = this.getChildlessStatus();
            info["childlessReason"] = this.getChildlessReason();
        }
        if (this.getDisorders().length > 0) info["disorders"] = this.getDisordersForExport();
        if (this.getHPO().length > 0) info["hpoTerms"] = this.getHPOForExport();
        if (this.getEthnicities().length > 0) info["ethnicities"] = this.getEthnicities();
        if (this.getGenes().length > 0) info["candidateGenes"] = this.getGenes();
        if (this._twinGroup !== null) info["twinGroup"] = this._twinGroup;
        if (this._monozygotic) info["monozygotic"] = this._monozygotic;
        if (this._evaluated) info["evaluated"] = this._evaluated;
        if (this._carrierStatus) info["carrierStatus"] = this._carrierStatus;
        if (this.getLostContact()) info["lostContact"] = this.getLostContact();
        if (this.getPedNumber() != "") info["nodeNumber"] = this.getPedNumber();
        info["focused"] = this.getFocused();
        info["isProband"] = this.isProband();
        return info;
    },

    /**
     * Applies the properties found in info to this node.
     *
     * @method assignProperties
     * @param properties Object
     * @return {Boolean} True if info was successfully assigned
     */
    assignProperties: function ($super, info) {
        this._setDefault();

        if ($super(info)) {
            if (info.fName && this.getFirstName() != info.fName) {
                this.setFirstName(info.fName);
            }
            if (info.lName && this.getLastName() != info.lName) {
                this.setLastName(info.lName);
            }
            if (info.lNameAtB && this.getLastNameAtBirth() != info.lNameAtB) {
                this.setLastNameAtBirth(info.lNameAtB);
            }
            if (info.externalID && this.getExternalID() != info.externalID) {
                this.setExternalID(info.externalID);
            }
            if (info.externalIDHref && this.getExternalIDHref() != info.externalIDHref) {
                this.setExternalIDHref(info.externalIDHref);
            }
            if (info.dob && this.getBirthDate() != info.dob) {
                this.setBirthDate(info.dob);
            }
            if (info.disorders) {
                this.setDisorders(info.disorders);
            }
            if (info.hpoTerms) {
                this.setHPO(info.hpoTerms);
            }
            if (info.ethnicities) {
                this.setEthnicities(info.ethnicities);
            }
            if (info.candidateGenes) {
                this.setGenes(info.candidateGenes);
            }
            if (info.hasOwnProperty("isAdopted") && this.isAdopted() != info.isAdopted) {
                this.setAdopted(info.isAdopted);
            }
            if (info.hasOwnProperty("lifeStatus") && this.getLifeStatus() != info.lifeStatus) {
                this.setLifeStatus(info.lifeStatus);
            }
            if (info.dod && this.getDeathDate() != info.dod) {
                this.setDeathDate(info.dod);
            }
            if (info.gestationAge && this.getGestationAge() != info.gestationAge) {
                this.setGestationAge(info.gestationAge);
            }
            if (info.childlessStatus && this.getChildlessStatus() != info.childlessStatus) {
                this.setChildlessStatus(info.childlessStatus);
            }
            if (info.childlessReason && this.getChildlessReason() != info.childlessReason) {
                this.setChildlessReason(info.childlessReason);
            }
            if (info.hasOwnProperty("twinGroup") && this._twinGroup != info.twinGroup) {
                this.setTwinGroup(info.twinGroup);
            }
            if (info.hasOwnProperty("monozygotic") && this._monozygotic != info.monozygotic) {
                this.setMonozygotic(info.monozygotic);
            }
            if (info.hasOwnProperty("evaluated") && this._evaluated != info.evaluated) {
                this.setEvaluated(info.evaluated);
            }
            if (info.hasOwnProperty("carrierStatus") && this._carrierStatus != info.carrierStatus) {
                this.setCarrierStatus(info.carrierStatus);
            }
            if (info.hasOwnProperty("nodeNumber") && this.getPedNumber() != info.nodeNumber) {
                this.setPedNumber(info.nodeNumber);
            }
            if (info.hasOwnProperty("lostContact") && this.getLostContact() != info.lostContact) {
                this.setLostContact(info.lostContact);
            }
            if (info.hasOwnProperty("focused")) {
                this.setFocused(info.focused);
            }
            if (info.hasOwnProperty("isProband")) {
                this._isProband = info.isProband;
            }
            return true;
        }
        return false;
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = Person;


//ATTACHES CHILDLESS BEHAVIOR METHODS TO THIS CLASS
Person.addMethods(__WEBPACK_IMPORTED_MODULE_4__abstractNode__["a" /* ChildlessBehavior */]);

/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__abstractHoverbox__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__ = __webpack_require__(12);



/**
 * PersonHoverbox is a class for all the UI elements and graphics surrounding a Person node and
 * its labels. This includes the box that appears around the node when it's hovered by a mouse, as
 * well as the handles used for creating connections and creating new nodes.
 *
 * @class PersonHoverbox
 * @extends AbstractHoverbox
 * @constructor
 * @param {Person} personNode The person for whom this hoverbox is being drawn.
 * @param {Number} centerX The X coordinate for the center of the hoverbox
 * @param {Number} centerY The Y coordinate for the center of the hoverbox
 * @param {Raphael.st} nodeShapes All shapes associated with the person node
 */

const PersonHoverbox = Class.create(__WEBPACK_IMPORTED_MODULE_0__abstractHoverbox__["a" /* AbstractHoverbox */], {

    initialize: function ($super, personNode, centerX, centerY, nodeShapes) {
        var radius = __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHoverBoxRadius;
        $super(personNode, -radius, -radius, radius * 2, radius * 2, centerX, centerY, nodeShapes);
    },

    /**
     * Creates the handles used in this hoverbox
     *
     * @method generateHandles
     * @return {Raphael.st} A set of handles
     */
    generateHandles: function ($super) {
        if (this._currentHandles !== null) return;
        $super();

        //var timer = new Timer();

        var x = this.getNodeX();
        var y = this.getNodeY();
        var node = this.getNode();
        var nodeShapes = node.getGraphics().getGenderGraphics().flatten();

        editor.getPaper().setStart();

        if (__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].newHandles) {
            var strokeWidth = editor.getWorkspace().getSizeNormalizedToDefaultZoom(__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].handleStrokeWidth);

            var partnerGender = "U";
            if (node.getGender() == "F") partnerGender = "M";
            if (node.getGender() == "M") partnerGender = "F";

            // static part (2 lines: going above the node + going to the left)
            var splitLocationY = y - __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleBreakY - 4;
            var path = [["M", x, y], ["L", x, splitLocationY], ["L", x - __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personSiblingHandleLengthX, splitLocationY]];
            editor.getPaper().path(path).attr({ "stroke-width": strokeWidth, stroke: "gray" }).insertBefore(nodeShapes);

            // sibling handle
            this.generateHandle("sibling", x - __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personSiblingHandleLengthX + strokeWidth / 3, splitLocationY, x - __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personSiblingHandleLengthX + strokeWidth / 2, splitLocationY + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personSiblingHandleLengthY, "Click to create a sibling or drag to an existing parentless person (valid choices will be highlighted in green)", "U");

            if (editor.getGraph().getParentRelationship(node.getID()) === null) {
                // hint for the parent handle
                var topHandleHint = undefined;
                if (__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].enableHandleHintImages) {
                    var hintSize = __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius / 2;
                    var path = [["M", x - hintSize, y - __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleLength], ["L", x + hintSize, y - __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleLength]];
                    var line1 = editor.getPaper().path(path).attr({ "stroke-width": strokeWidth / 3, stroke: "#555555" }).toBack();
                    var father = editor.getPaper().rect(x - hintSize - 11, y - __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleLength - 5.5, 11, 11).attr({ fill: "#CCCCCC" }).toBack();
                    var mother = editor.getPaper().circle(x + hintSize + 6, y - __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleLength, 6).attr({ fill: "#CCCCCC" }).toBack();
                    var topHandleHint = editor.getPaper().set().push(line1, father, mother);
                }
                // parent handle
                this.generateHandle("parent", x, splitLocationY, x, y - __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleLength, "Click to create new nodes for the parents or drag to an existing person or partnership (valid choices will be highlighted in green). Dragging to a person will create a new relationship.", "F", topHandleHint);
            } else {
                if (__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].enableHandleHintImages) {
                    var path = [["M", x, splitLocationY], ["L", x, y - __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHoverBoxRadius + 4]];
                    editor.getPaper().path(path).attr({ "stroke-width": strokeWidth, stroke: "gray" }).insertBefore(nodeShapes);
                }
            }

            if (!node.isFetus()) {

                if (node.getChildlessStatus() === null) {
                    // children handle
                    //static part (going right below the node)            
                    var path = [["M", x, y], ["L", x, y + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleBreakX]];
                    editor.getPaper().path(path).attr({ "stroke-width": strokeWidth, stroke: "gray" }).insertBefore(nodeShapes);
                    this.generateHandle("child", x, y + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleBreakX - 2, x, y + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleLength, "Click to create a new child node or drag to an existing parentless person (valid choices will be highlighted in green)", "U");
                }

                // partner handle
                var vertPosForPartnerHandles = y;
                //static part (going right form the node)            
                var path = [["M", x, vertPosForPartnerHandles], ["L", x + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleBreakX, vertPosForPartnerHandles]];
                editor.getPaper().path(path).attr({ "stroke-width": strokeWidth, stroke: "gray" }).insertBefore(nodeShapes);
                this.generateHandle("partnerR", x + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleBreakX - 2, vertPosForPartnerHandles, x + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleLength, vertPosForPartnerHandles, "Click to create a new partner node or drag to an existing node (valid choices will be highlighted in green)", partnerGender);
            }
        } else {
            if (editor.getGraph().getParentRelationship(node.getID()) === null) this.generateHandle("parent", x, y, x, y - __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleLength, "Click to create new nodes for the parents or drag to an existing person or partnership (valid choices will be highlighted in green)");

            if (!node.isFetus()) {
                if (node.getChildlessStatus() === null) this.generateHandle("child", x, y, x, y + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleLength, "Click to create a new child node or drag to an existing parentless node (valid choices will be highlighted in green)");
                this.generateHandle("partnerR", x, y, x + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleLength, y, "Click to create a new partner node or drag to an existing node (valid choices will be highlighted in green)");
                this.generateHandle("partnerL", x, y, x - __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleLength, y, "Click to create a new partner node or drag to an existing node (valid choices will be highlighted in green)");
            }
        }

        this._currentHandles.push(editor.getPaper().setFinish());

        //timer.printSinceLast("Generate handles ");
    },

    /**
     * Creates the buttons used in this hoverbox
     *
     * @method generateButtons
     */
    generateButtons: function ($super) {
        if (this._currentButtons !== null) return;
        $super();

        this.generateMenuBtn();

        // proband can't be removed
        if (!this.getNode().isProband()) this.generateDeleteBtn();
    },

    /**
     * Creates a node-shaped show-menu button
     *
     * @method generateMenuBtn
     * @return {Raphael.st} The generated button
     */
    generateMenuBtn: function () {
        var me = this;
        var action = function () {
            me.toggleMenu(!me.isMenuToggled());
        };
        var genderShapedButton = this.getNode().getGraphics().getGenderShape().clone();
        genderShapedButton.attr(__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].nodeShapeMenuOff);
        genderShapedButton.click(action);
        genderShapedButton.hover(function () {
            genderShapedButton.attr(__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].nodeShapeMenuOn);
        }, function () {
            genderShapedButton.attr(__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].nodeShapeMenuOff);
        });
        genderShapedButton.attr("cursor", "pointer");
        this._currentButtons.push(genderShapedButton);
        this.disable();
        this.getFrontElements().push(genderShapedButton);
        this.enable();
    },

    /**
     * Returns true if the menu for this node is open
     *
     * @method isMenuToggled
     * @return {Boolean}
     */
    isMenuToggled: function () {
        return this._isMenuToggled;
    },

    /**
     * Shows/hides the menu for this node
     *
     * @method toggleMenu
     */
    toggleMenu: function (isMenuToggled) {
        if (this._justClosedMenu) return;
        //console.log("toggle menu: current = " + this._isMenuToggled);
        this._isMenuToggled = isMenuToggled;
        if (isMenuToggled) {
            this.getNode().getGraphics().unmark();
            var optBBox = this.getBoxOnHover().getBBox();
            var x = optBBox.x2;
            var y = optBBox.y;
            var position = editor.getWorkspace().canvasToDiv(x + 5, y);
            editor.getNodeMenu().show(this.getNode(), position.x, position.y);
        }
    },

    /**
     * Hides the hoverbox with a fade out animation
     *
     * @method animateHideHoverZone
     */
    animateHideHoverZone: function ($super) {
        this._hidden = true;
        if (!this.isMenuToggled()) {
            var parentPartnershipNode = editor.getGraph().getParentRelationship(this.getNode().getID());
            //console.log("Node: " + this.getNode().getID() + ", parentPartnershipNode: " + parentPartnershipNode);            
            if (parentPartnershipNode && editor.getNode(parentPartnershipNode)) editor.getNode(parentPartnershipNode).getGraphics().unmarkPregnancy();
            $super();
        }
    },

    /**
     * Displays the hoverbox with a fade in animation
     *
     * @method animateDrawHoverZone
     */
    animateDrawHoverZone: function ($super) {
        this._hidden = false;
        if (!this.isMenuToggled()) {
            var parentPartnershipNode = editor.getGraph().getParentRelationship(this.getNode().getID());
            if (parentPartnershipNode && editor.getNode(parentPartnershipNode)) editor.getNode(parentPartnershipNode).getGraphics().markPregnancy();
            $super();
        }
    },

    /**
     * Performs the appropriate action for clicking on the handle of type handleType
     *
     * @method handleAction
     * @param {String} handleType "child", "partner" or "parent"
     * @param {Boolean} isDrag True if this handle is being dragged
     */
    handleAction: function (handleType, isDrag, curHoveredId) {
        console.log("handleType: " + handleType + ", isDrag: " + isDrag + ", curHovered: " + curHoveredId);

        if (isDrag && curHoveredId !== null) {

            if (handleType == "parent") {
                this.removeHandles();
                this.removeButtons();
                var event = { "personID": this.getNode().getID(), "parentID": curHoveredId };
                document.fire("pedigree:person:drag:newparent", event);
            } else if (handleType == "partnerR" || handleType == "partnerL") {
                this.removeHandles();
                var event = { "personID": this.getNode().getID(), "partnerID": curHoveredId };
                document.fire("pedigree:person:drag:newpartner", event);
            } else if (handleType == "child") {
                var event = { "personID": curHoveredId, "parentID": this.getNode().getID() };
                document.fire("pedigree:person:drag:newparent", event);
            } else if (handleType == "sibling") {
                var event = { "sibling2ID": curHoveredId, "sibling1ID": this.getNode().getID() };
                document.fire("pedigree:person:drag:newsibling", event);
            }
        } else if (!isDrag) {
            if (handleType == "partnerR" || handleType == "partnerL") {
                this.removeHandles();
                var preferLeft = this.getNode().getGender() == "F" || handleType == "partnerL";
                var event = { "personID": this.getNode().getID(), "preferLeft": preferLeft };
                document.fire("pedigree:person:newpartnerandchild", event);
            } else if (handleType == "child") {
                var position = editor.getWorkspace().canvasToDiv(this.getNodeX(), this.getNodeY() + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleLength + 15);
                editor.getNodetypeSelectionBubble().show(this.getNode(), position.x, position.y);
                // if user selects anything the bubble will fire an even on its own
            } else if (handleType == "sibling") {
                var position = editor.getWorkspace().canvasToDiv(this.getNodeX() - __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personSiblingHandleLengthX, this.getNodeY() - __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personHandleBreakY + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].personSiblingHandleLengthY + 15);
                editor.getSiblingSelectionBubble().show(this.getNode(), position.x, position.y);
            } else if (handleType == "parent") {
                this.removeHandles();
                this.removeButtons();
                var event = { "personID": this.getNode().getID() };
                document.fire("pedigree:person:newparent", event);
            }
        }
        this.animateHideHoverZone();
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = PersonHoverbox;


/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Raphael) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__abstractPersonVisuals__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__readonlyHoverbox__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__personHoverbox__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__graphicHelpers__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ageCalc__ = __webpack_require__(156);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__abstractNodeVisuals__ = __webpack_require__(41);








/**
 * Class for organizing graphics for Person nodes.
 *
 * @class PersonVisuals
 * @extends AbstractPersonVisuals
 * @constructor
 * @param {Person} node The node for which the graphics are handled
 * @param {Number} x The x coordinate on the canvas
 * @param {Number} y The y coordinate on the canvas
 */

const PersonVisuals = Class.create(__WEBPACK_IMPORTED_MODULE_0__abstractPersonVisuals__["a" /* AbstractPersonVisuals */], {

    initialize: function ($super, node, x, y) {
        //var timer = new Timer();
        //console.log("person visuals");
        $super(node, x, y);
        this._nameLabel = null;
        this._stillBirthLabel = null;
        this._ageLabel = null;
        this._externalIDLabel = null;
        this._commentsLabel = null;
        this._childlessStatusLabel = null;
        this._disorderShapes = null;
        this._deadShape = null;
        this._unbornShape = null;
        this._childlessShape = null;
        this._isSelected = false;
        this._carrierGraphic = null;
        this._evalLabel = null;
        //console.log("person visuals end");
        //timer.printSinceLast("Person visuals time");
    },

    generateHoverbox: function (x, y) {
        if (editor.isReadOnlyMode()) {
            return new __WEBPACK_IMPORTED_MODULE_1__readonlyHoverbox__["a" /* ReadOnlyHoverbox */](this.getNode(), x, y, this.getGenderGraphics());
        } else {
            return new __WEBPACK_IMPORTED_MODULE_2__personHoverbox__["a" /* PersonHoverbox */](this.getNode(), x, y, this.getGenderGraphics());
        }
    },

    /**
     * Draws the icon for this Person depending on the gender, life status and whether this Person is the proband.
     * Updates the disorder shapes.
     *
     * @method setGenderGraphics
     */
    setGenderGraphics: function ($super) {
        console.log("set gender graphics");
        if (this.getNode().getLifeStatus() == "aborted" || this.getNode().getLifeStatus() == "miscarriage") {
            this._genderGraphics && this._genderGraphics.remove();

            var radius = __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius;
            if (this.getNode().isPersonGroup()) radius *= __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].groupNodesScale;
            this._shapeRadius = radius;

            var side = radius * Math.sqrt(3.5),
                height = side / Math.sqrt(2),
                x = this.getX() - height,
                y = this.getY();
            var shape = editor.getPaper().path(["M", x, y, "l", height, -height, "l", height, height, "z"]);
            shape.attr(__WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].nodeShape);
            this._genderShape = shape;
            shape = editor.getPaper().set(shape.glow({ width: 5, fill: true, opacity: 0.1 }).transform(["t", 3, 3, "..."]), shape);

            if (this.getNode().isProband()) {
                shape.transform(["...s", 1.07]);
                // shape.attr("stroke-width", 5);
            }

            if (this.getNode().getGender() == "U") {
                this._genderGraphics = shape;
            } else {
                x = this.getX();
                y = this.getY() + radius / 1.4;
                var text = this.getNode().getGender() == "M" ? "Male" : "Female";
                var genderLabel = editor.getPaper().text(x, y, text).attr(__WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].label);
                this._genderGraphics = editor.getPaper().set(shape, genderLabel);
            }
        } else {
            $super();
        }

        if (this.getNode().isProband()) {
            this._genderGraphics.push(this.generateProbandArrow());
            this.getGenderShape().transform(["...s", 1.08]);
            // this.getGenderShape().attr("stroke-width", 5.5);
        }
        if (this.getNode().isFocused()) {
            this.getGenderShape().attr("stroke-width", 3);
            this.getGenderShape().attr("stroke", "blue");
        }
        if (!editor.isUnsupportedBrowser() && this.getHoverBox()) {
            this._genderGraphics.flatten().insertBefore(this.getFrontElements().flatten());
        }
        this.updateDisorderShapes();
        this.updateCarrierGraphic();
        this.updateEvaluationLabel();
    },

    generateProbandArrow: function () {
        var icon = editor.getPaper().path(editor.getView().__probandArrowPath).attr({ fill: "#595959", stroke: "none", opacity: 1 });
        var x = this.getX() - this._shapeRadius - 26;
        var y = this.getY() + this._shapeRadius - 12;
        if (this.getNode().getGender() == "F") {
            x += 5;
            y -= 5;
        }
        icon.transform(["t", x, y]);
        return icon;
    },

    /**
     * Returns all graphical elements that are behind the gender graphics
     *
     * @method getBackElements
     * @return {Raphael.st}
     */
    getBackElements: function () {
        return this.getHoverBox().getBackElements().concat(editor.getPaper().set(this.getChildlessStatusLabel(), this.getChildlessShape()));
    },

    /**
     * Returns all graphical elements that should receive mouse focus/clicks
     *
     * @method getFrontElements
     * @return {Raphael.st}
     */
    getFrontElements: function () {
        return this.getHoverBox().getFrontElements();
    },

    /**
     * Updates the external ID label for this Person
     *
     * @method updateExternalIDLabel
     */
    updateExternalIDLabel: function () {
        this._externalIDLabel && this._externalIDLabel.remove();

        if (this.getNode().getExternalID()) {
            var text = "[ " + this.getNode().getExternalID() + " ]";
            var href = this.getNode().getExternalIDHref();
            let attrs = __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].externalIDLabels;
            if (href) {
                attrs.href = href;
            }
            this._externalIDLabel = editor.getPaper().text(this.getX(), this.getY() + __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius, text).attr(attrs);
        } else {
            this._externalIDLabel = null;
        }
        this.drawLabels();
    },

    /**
     * Returns the Person's external ID label
     *
     * @method getExternalIDLabel
     * @return {Raphael.el}
     */
    getExternalIDLabel: function () {
        return this._externalIDLabel;
    },

    /**
     * Updates the name label for this Person
     *
     * @method updateNameLabel
     */
    updateNameLabel: function () {
        this._nameLabel && this._nameLabel.remove();
        var text = "";
        this.getNode().getFirstName() && (text = this.getNode().getFirstName());

        if (this.getNode().getLastName()) {
            text += " " + this.getNode().getLastName();
            this.getNode().getLastNameAtBirth() && (text += " (" + this.getNode().getLastNameAtBirth() + ")");
        } else this.getNode().getLastNameAtBirth() && (text += " " + this.getNode().getLastNameAtBirth());

        this._nameLabel && this._nameLabel.remove();
        if (text.strip() != "") {
            this._nameLabel = editor.getPaper().text(this.getX(), this.getY() + __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius, text).attr(__WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].nameLabels);
        } else {
            this._nameLabel = null;
        }
        this.drawLabels();
    },

    /**
     * Returns the Person's name label
     *
     * @method getNameLabel
     * @return {Raphael.el}
     */
    getNameLabel: function () {
        return this._nameLabel;
    },

    /**
     * Returns colored blocks representing disorders
     *
     * @method getDisorderShapes
     * @return {Raphael.st} Set of disorder shapes
     */
    getDisorderShapes: function () {
        return this._disorderShapes;
    },

    /**
     * Displays the disorders currently registered for this node.
     *
     * @method updateDisorderShapes
     */
    updateDisorderShapes: function () {
        this._disorderShapes && this._disorderShapes.remove();
        var colors = this.getNode().getAllNodeColors();
        console.error(colors);
        if (colors.length == 0) return;

        var gradient = function (color, angle) {
            var hsb = Raphael.rgb2hsb(color),
                darker = Raphael.hsb2rgb(hsb["h"], hsb["s"], hsb["b"] - .1)["hex"];
            return angle + "-" + darker + ":0-" + color + ":100";
        };
        var disorderShapes = editor.getPaper().set();
        var delta, color;

        if (this.getNode().getLifeStatus() == "aborted" || this.getNode().getLifeStatus() == "miscarriage") {
            var radius = __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius;
            if (this.getNode().isPersonGroup()) radius *= __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].groupNodesScale;

            var side = radius * Math.sqrt(3.5),
                height = side / Math.sqrt(2),
                x1 = this.getX() - height,
                y1 = this.getY();
            delta = height * 2 / colors.length;

            for (var k = 0; k < colors.length; k++) {
                var corner = [];
                var x2 = x1 + delta;
                var y2 = this.getY() - (height - Math.abs(x2 - this.getX()));
                if (x1 < this.getX() && x2 >= this.getX()) {
                    corner = ["L", this.getX(), this.getY() - height];
                }
                var slice = editor.getPaper().path(["M", x1, y1, corner, "L", x2, y2, "L", this.getX(), this.getY(), "z"]);
                color = gradient(colors[k], 70);
                disorderShapes.push(slice.attr({ fill: color, "stroke-width": .5, stroke: "none" }));
                x1 = x2;
                y1 = y2;
            }
            if (this.getNode().isProband()) {
                disorderShapes.transform(["...s", 1.04, 1.04, this.getX(), this.getY() - this._shapeRadius]);
            }
        } else {
            var disorderAngle = (360 / colors.length).round();
            delta = 360 / colors.length / 2;
            if (colors.length == 1 && this.getNode().getGender() == "U") delta -= 45; // since this will be rotated by shape transform later

            var radius = this._shapeRadius - 0.6; // -0.6 to avoid disorder fills to overlap with shape borders (due to aliasing/Raphael pixel layout)
            if (this.getNode().getGender() == "U") radius *= 1.155; // TODO: magic number hack: due to a Raphael transform bug (?) just using correct this._shapeRadius does not work

            for (var i = 0; i < colors.length; i++) {
                //color = gradient(colors[i], (i * disorderAngle)+delta);
                disorderShapes.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__graphicHelpers__["c" /* sector */])(editor.getPaper(), this.getX(), this.getY(), radius, this.getNode().getGender(), i * disorderAngle, (i + 1) * disorderAngle, colors[i]));
            }

            disorderShapes.length < 2 ? disorderShapes.attr("stroke", "none") : disorderShapes.attr({ stroke: "#595959", "stroke-width": .03 });
            if (this.getNode().isProband()) {
                disorderShapes.transform(["...s", 1.04, 1.04, this.getX(), this.getY()]);
            }
        }
        this._disorderShapes = disorderShapes;
        this._disorderShapes.flatten().insertAfter(this.getGenderGraphics().flatten());
    },

    /**
     * Draws a line across the Person to display that he is dead (or aborted).
     *
     * @method drawDeadShape
     */
    drawDeadShape: function () {
        var strokeWidth = editor.getWorkspace().getSizeNormalizedToDefaultZoom(2.5);
        var x, y;
        if (this.getNode().getLifeStatus() == "aborted") {
            var side = __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius * Math.sqrt(3.5);
            var height = side / Math.sqrt(2);
            if (this.getNode().isPersonGroup()) height *= __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].groupNodesScale;

            var x = this.getX() - height / 1.5;
            if (this.getNode().isPersonGroup()) x -= __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius / 4;

            var y = this.getY() + height / 3;
            this._deadShape = editor.getPaper().path(["M", x, y, "l", height + height / 3, -(height + height / 3), "z"]);
            this._deadShape.attr("stroke-width", strokeWidth);
        } else {
            x = this.getX();
            y = this.getY();
            var coeff = 10.0 / 8.0 * (this.getNode().isPersonGroup() ? __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].groupNodesScale : 1.0);
            var x1 = x - coeff * __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius,
                y1 = y + coeff * __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius,
                x2 = x + coeff * __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius,
                y2 = y - coeff * __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius;
            this._deadShape = editor.getPaper().path(["M", x1, y1, "L", x2, y2]).attr("stroke-width", strokeWidth);
        }
        if (!editor.isUnsupportedBrowser()) {
            this._deadShape.toFront();
            this._deadShape.node.setAttribute("class", "no-mouse-interaction");
        }
    },

    /**
     * Returns the line drawn across a dead Person's icon
     *
     * @method getDeadShape
     * @return {Raphael.st}
     */
    getDeadShape: function () {
        return this._deadShape;
    },

    /**
     * Returns this Person's age label
     *
     * @method getAgeLabel
     * @return {Raphael.el}
     */
    getAgeLabel: function () {
        return this._ageLabel;
    },

    /**
     * Updates the age label for this Person
     *
     * @method updateAgeLabel
     */
    updateAgeLabel: function () {
        var text,
            person = this.getNode();
        if (person.isFetus()) {
            var date = person.getGestationAge();
            text = date ? date + " weeks" : null;
        } else if (person.getLifeStatus() == "alive") {
            if (person.getBirthDate()) {
                var age = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__ageCalc__["a" /* getAge */])(person.getBirthDate(), null);
                if (age.indexOf("day") != -1) {
                    text = age; // 5 days
                } else if (age.indexOf(" y") == -1) {
                    text = "b. " + person.getBirthDate().getFullYear() + " (" + age + ")"; // b. 2014 (3 wk)
                } else {
                    text = "b. " + person.getBirthDate().getFullYear(); // b. 1972
                }
            }
        } else {
            if (person.getDeathDate() && person.getBirthDate()) {
                var age = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__ageCalc__["a" /* getAge */])(person.getBirthDate(), person.getDeathDate());
                if (age.indexOf("day") != -1 || age.indexOf("wk") != -1 || age.indexOf("mo") != -1) {
                    text = "d. " + person.getDeathDate().getFullYear() + " (" + age + ")";
                } else {
                    text = person.getBirthDate().getFullYear() + " – " + person.getDeathDate().getFullYear();
                }
            } else if (person.getDeathDate()) {
                text = "d. " + person.getDeathDate().getFullYear();
            } else if (person.getBirthDate()) {
                text = person.getBirthDate().getFullYear() + " – ?";
            }
        }
        this.getAgeLabel() && this.getAgeLabel().remove();
        this._ageLabel = text ? editor.getPaper().text(this.getX(), this.getY(), text).attr(__WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].label) : null;
        this.drawLabels();
    },

    /**
     * Returns the shape marking a Person's 'unborn' life-status
     *
     * @method getUnbornShape
     * @return {Raphael.el}
     */
    getUnbornShape: function () {
        return this._unbornShape;
    },

    /**
     * Draws a "P" on top of the node to display this Person's 'unborn' life-status
     *
     * @method drawUnbornShape
     */
    drawUnbornShape: function () {
        this._unbornShape && this._unbornShape.remove();
        if (this.getNode().getLifeStatus() == "unborn") {
            this._unbornShape = editor.getPaper().text(this.getX(), this.getY(), "P").attr(__WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].unbornShape);
            if (!editor.isUnsupportedBrowser()) this._unbornShape.insertBefore(this.getHoverBox().getFrontElements());
        } else {
            this._unbornShape = null;
        }
    },

    /**
     * Draws the evaluation status symbol for this Person
     *
     * @method updateEvaluationLabel
     */
    updateEvaluationLabel: function () {
        this._evalLabel && this._evalLabel.remove();
        if (this.getNode().getEvaluated()) {
            if (this.getNode().getLifeStatus() == "aborted" || this.getNode().getLifeStatus() == "miscarriage") {
                var x = this.getX() + this._shapeRadius * 1.6;
                var y = this.getY() + this._shapeRadius * 0.6;
            } else {
                var mult = 1.1;
                if (this.getNode().getGender() == "U") mult = 1.3;else if (this.getNode().getGender() == "M") mult = 1.4;
                if (this.getNode().isProband) mult *= 1.1;
                var x = this.getX() + this._shapeRadius * mult - 5;
                var y = this.getY() + this._shapeRadius * mult;
            }
            this._evalLabel = editor.getPaper().text(x, y, "*").attr(__WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].evaluationShape).toBack();
        } else {
            this._evalLabel = null;
        }
    },

    /**
     * Returns this Person's evaluation label
     *
     * @method getEvaluationGraphics
     * @return {Raphael.el}
     */
    getEvaluationGraphics: function () {
        return this._evalLabel;
    },

    /**
     * Draws various distorder carrier graphics such as a dot (for carriers) or
     * a vertical line (for pre-symptomatic)
     *
     * @method updateCarrierGraphic
     */
    updateCarrierGraphic: function () {
        this._carrierGraphic && this._carrierGraphic.remove();
        var status = this.getNode().getCarrierStatus();

        if (status != "" && status != "affected") {
            if (status == "carrier") {
                if (this.getNode().getLifeStatus() == "aborted" || this.getNode().getLifeStatus() == "miscarriage") {
                    x = this.getX();
                    y = this.getY() - this._radius / 2;
                } else {
                    x = this.getX();
                    y = this.getY();
                }
                this._carrierGraphic = editor.getPaper().circle(x, y, __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].carrierDotRadius).attr(__WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].carrierShape);
            } else if (status == "presymptomatic") {
                if (this.getNode().getLifeStatus() == "aborted" || this.getNode().getLifeStatus() == "miscarriage") {
                    this._carrierGraphic = null;
                    return;
                }
                editor.getPaper().setStart();
                var startX = this.getX() - __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].presymptomaticShapeWidth / 2;
                var startY = this.getY() - this._radius;
                editor.getPaper().rect(startX, startY, __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].presymptomaticShapeWidth, this._radius * 2).attr(__WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].presymptomaticShape);
                if (this.getNode().getGender() == "U") {
                    editor.getPaper().path("M " + startX + " " + startY + "L " + this.getX() + " " + (this.getY() - this._radius * 1.1) + "L " + (startX + __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].presymptomaticShapeWidth) + " " + startY + "Z").attr(__WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].presymptomaticShape);
                    var endY = this.getY() + this._radius;
                    editor.getPaper().path("M " + startX + " " + endY + "L " + this.getX() + " " + (this.getY() + this._radius * 1.1) + "L " + (startX + __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].presymptomaticShapeWidth) + " " + endY + "Z").attr(__WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].presymptomaticShape);
                }
                this._carrierGraphic = editor.getPaper().setFinish();
            }
            if (editor.isReadOnlyMode()) this._carrierGraphic.toFront();else this._carrierGraphic.insertBefore(this.getHoverBox().getFrontElements());
        } else {
            this._carrierGraphic = null;
        }
    },

    /**
     * Returns this Person's disorder carrier graphics
     *
     * @method getCarrierGraphics
     * @return {Raphael.el}
     */
    getCarrierGraphics: function () {
        return this._carrierGraphic;
    },

    /**
     * Returns this Person's stillbirth label
     *
     * @method getSBLabel
     * @return {Raphael.el}
     */
    getSBLabel: function () {
        return this._stillBirthLabel;
    },

    /**
     * Updates the stillbirth label for this Person
     *
     * @method updateSBLabel
     */
    updateSBLabel: function () {
        this.getSBLabel() && this.getSBLabel().remove();
        if (this.getNode().getLifeStatus() == "stillborn") {
            this._stillBirthLabel = editor.getPaper().text(this.getX(), this.getY(), "SB").attr(__WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].label);
        } else {
            this._stillBirthLabel = null;
        }
        this.drawLabels();
    },

    /**
     * Returns this Person's comments label
     *
     * @method getCommentsLabel
     * @return {Raphael.el}
     */
    getCommentsLabel: function () {
        return this._commentsLabel;
    },

    /**
     * Updates the stillbirth label for this Person
     *
     * @method updateCommentsLabel
     */
    updateCommentsLabel: function () {
        this.getCommentsLabel() && this.getCommentsLabel().remove();
        if (this.getNode().getComments() != "") {
            var text = this.getNode().getComments(); //.replace(/\n/g, '<br />');
            this._commentsLabel = editor.getPaper().text(this.getX(), this.getY(), text).attr(__WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].commentLabel);
            this._commentsLabel.alignTop = true;
        } else {
            this._commentsLabel = null;
        }
        this.drawLabels();
        /**        
         *     
         */
    },

    /**
     * Displays the correct graphics to represent the current life status for this Person.
     *
     * @method updateLifeStatusShapes
     */
    updateLifeStatusShapes: function (oldStatus) {
        var status = this.getNode().getLifeStatus();

        this.getDeadShape() && this.getDeadShape().remove();
        this.getUnbornShape() && this.getUnbornShape().remove();
        this.getSBLabel() && this.getSBLabel().remove();

        // save some redraws if possible
        var oldShapeType = oldStatus == "aborted" || oldStatus == "miscarriage";
        var newShapeType = status == "aborted" || status == "miscarriage";
        if (oldShapeType != newShapeType) this.setGenderGraphics();

        if (status == "deceased" || status == "aborted") {
            // but not "miscarriage"
            this.drawDeadShape();
        } else if (status == "stillborn") {
            this.drawDeadShape();
            this.updateSBLabel();
        } else if (status == "unborn") {
            this.drawUnbornShape();
        }
        this.updateAgeLabel();
    },

    /**
     * Marks this node as hovered, and moves the labels out of the way
     *
     * @method setSelected
     */
    setSelected: function ($super, isSelected) {
        $super(isSelected);
        if (isSelected) {
            this.shiftLabels();
        } else {
            this.unshiftLabels();
        }
    },

    /**
     * Moves the labels down to make space for the hoverbox
     *
     * @method shiftLabels
     */
    shiftLabels: function () {
        var shift = this._labelSelectionOffset();
        var labels = this.getLabels();
        for (var i = 0; i < labels.length; i++) {
            labels[i].stop().animate({ "y": labels[i].oy + shift }, 200, ">");
        }
    },

    /**
     * Animates the labels of this node to their original position under the node
     *
     * @method unshiftLabels
     */
    unshiftLabels: function () {
        var labels = this.getLabels();
        var firstLable = this._childlessStatusLabel ? 1 : 0;
        for (var i = 0; i < labels.length; i++) {
            labels[i].stop().animate({ "y": labels[i].oy }, 200, ">");
        }
    },

    /**
     * Returns set of labels for this Person
     *
     * @method getLabels
     * @return {Raphael.st}
     */
    getLabels: function () {
        var labels = editor.getPaper().set();
        this.getSBLabel() && labels.push(this.getSBLabel());
        this.getNameLabel() && labels.push(this.getNameLabel());
        this.getAgeLabel() && labels.push(this.getAgeLabel());
        this.getExternalIDLabel() && labels.push(this.getExternalIDLabel());
        this.getCommentsLabel() && labels.push(this.getCommentsLabel());
        return labels;
    },

    /**
     * Displays all the appropriate labels for this Person in the correct layering order
     *
     * @method drawLabels
     */
    drawLabels: function () {
        var labels = this.getLabels();
        var selectionOffset = this._labelSelectionOffset();
        var childlessOffset = this.getChildlessStatusLabel() ? __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].label["font-size"] : 0;
        childlessOffset += this.getNode().getChildlessStatus() !== null ? __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].infertileMarkerHeight + 2 : 0;

        var lowerBound = __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius * (this.getNode().isPersonGroup() ? __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].groupNodesScale : 1.0);

        var startY = this.getY() + lowerBound * 1.8 + selectionOffset + childlessOffset;
        for (var i = 0; i < labels.length; i++) {
            var offset = labels[i].alignTop ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__graphicHelpers__["d" /* getElementHalfHeight */])(labels[i]) - 7 : 0;
            labels[i].attr("y", startY + offset);
            labels[i].oy = labels[i].attr("y") - selectionOffset;
            startY = labels[i].getBBox().y2 + 11;
        }
        if (!editor.isUnsupportedBrowser()) labels.flatten().insertBefore(this.getHoverBox().getFrontElements().flatten());
    },

    _labelSelectionOffset: function () {
        var selectionOffset = this.isSelected() ? __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius / 1.4 : 0;

        if (this.isSelected() && this.getNode().isPersonGroup()) selectionOffset += __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius * (1 - __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].groupNodesScale) + 5;

        if (this.getChildlessStatusLabel()) selectionOffset = selectionOffset / 2;
        return selectionOffset;
    },

    /**
     * Returns set with the gender icon, disorder shapes and life status shapes.
     *
     * @method getShapes
     * @return {Raphael.st}
     */
    getShapes: function ($super) {
        var lifeStatusShapes = editor.getPaper().set();
        this.getUnbornShape() && lifeStatusShapes.push(this.getUnbornShape());
        this.getChildlessShape() && lifeStatusShapes.push(this.getChildlessShape());
        this.getChildlessStatusLabel() && lifeStatusShapes.push(this.getChildlessStatusLabel());
        this.getDeadShape() && lifeStatusShapes.push(this.getDeadShape());
        return $super().concat(editor.getPaper().set(this.getDisorderShapes(), lifeStatusShapes));
    },

    /**
     * Returns all the graphics and labels associated with this Person.
     *
     * @method getAllGraphics
     * @return {Raphael.st}
     */
    getAllGraphics: function ($super) {
        //console.log("Node " + this.getNode().getID() + " getAllGraphics");
        return $super().push(this.getHoverBox().getBackElements(), this.getLabels(), this.getCarrierGraphics(), this.getEvaluationGraphics(), this.getHoverBox().getFrontElements());
    },

    /**
     * Changes the position of the node to (x,y)
     *
     * @method setPos
     * @param [$super]
     * @param {Number} x the x coordinate on the canvas
     * @param {Number} y the y coordinate on the canvas
     * @param {Boolean} animate set to true if you want to animate the transition
     * @param {Function} callback a function that will be called at the end of the animation
     */
    setPos: function ($super, x, y, animate, callback) {
        var funct = callback;
        if (animate) {
            var me = this;
            this.getHoverBox().disable();
            funct = function () {
                me.getHoverBox().enable();
                callback && callback();
            };
        }
        $super(x, y, animate, funct);
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = PersonVisuals;


//ATTACHES CHILDLESS BEHAVIOR METHODS
PersonVisuals.addMethods(__WEBPACK_IMPORTED_MODULE_6__abstractNodeVisuals__["b" /* ChildlessBehaviorVisuals */]);
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(27)))

/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__templateSelector__ = __webpack_require__(92);


/**
 * SaveLoadEngine is responsible for automatic and manual save and load operations.
 *
 * @class SaveLoadEngine
 * @constructor
 */

const ProbandDataLoader = Class.create({
    initialize: function () {
        this.probandData = undefined;
    },
    load: function (callWhenReady) {
        // new Ajax.Request("public/xwiki/PhenoTips.PatientClass/0.xml", {
        //     method: "GET",
        //     onSuccess: this.onProbandDataReady.bind(this),
        //     onComplete: callWhenReady ? callWhenReady : {}
        // });
    },

    onProbandDataReady: function (response) {
        var responseXML = response.responseXML; //documentElement.
        this.probandData = {};
        this.probandData.firstName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["a" /* unescapeRestData */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["b" /* getSubSelectorTextFromXML */])(responseXML, "property", "name", "first_name", "value"));
        this.probandData.lastName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["a" /* unescapeRestData */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["b" /* getSubSelectorTextFromXML */])(responseXML, "property", "name", "last_name", "value"));
        this.probandData.gender = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["a" /* unescapeRestData */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["b" /* getSubSelectorTextFromXML */])(responseXML, "property", "name", "gender", "value"));
        if (this.probandData.gender === undefined || this.probandData.gender == "") this.probandData.gender = "U";
        console.log("Proband data: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(this.probandData));
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = ProbandDataLoader;


const SaveLoadEngine = Class.create({

    initialize: function () {
        this._saveInProgress = false;
    },

    /**
     * Saves the state of the graph
     *
     * @return Serialization data for the entire graph
     */
    serialize: function () {
        return editor.getGraph().toJSON();
    },

    createGraphFromSerializedData: function (JSONString, noUndo, centerAround0) {
        console.log("---- load: parsing data ----");
        console.log(JSONString);
        document.fire("pedigree:load:start");

        try {
            var changeSet = editor.getGraph().fromJSON(JSONString);
        } catch (err) {
            console.log("ERROR loading the graph: " + err);
            console.warn("Error loading the graph");
            document.fire("pedigree:graph:clear");
            document.fire("pedigree:load:finish");
            return;
        }

        if (!noUndo) {
            var probandData = editor.getProbandDataFromPhenotips();
            if (probandData) {
                var genderOk = editor.getGraph().setProbandData(probandData.firstName, probandData.lastName, probandData.gender);
                if (!genderOk) console.warn("Proband gender defined in Phenotips is incompatible with this pedigree. Setting proband gender to 'Unknown'");
            }

            JSONString = editor.getGraph().toJSON();
        }

        if (editor.getView().applyChanges(changeSet, false)) {
            editor.getWorkspace().adjustSizeToScreen();
        }

        if (centerAround0) editor.getWorkspace().centerAroundNode(0);

        if (!noUndo) editor.getActionStack().addState(null, null, JSONString);

        document.fire("pedigree:load:finish");
    },

    createGraphFromImportData: function (importString, importType, importOptions, noUndo, centerAround0) {
        let JSONString;
        console.log("---- import: parsing data ----");
        document.fire("pedigree:load:start");

        try {
            var changeSet = editor.getGraph().fromImport(importString, importType, importOptions);
            if (changeSet == null) throw "unable to create a pedigree from imported data";
        } catch (err) {
            console.warn("Error importing pedigree: " + err.stack);
            document.fire("pedigree:load:finish");
            return;
        }

        if (!noUndo) {
            var probandData = editor.getProbandDataFromPhenotips();
            if (probandData) {
                var genderOk = editor.getGraph().setProbandData(probandData.firstName, probandData.lastName, probandData.gender);
                if (!genderOk) console.warn("Proband gender defined in Phenotips is incompatible with this pedigree. Setting proband gender to 'Unknown'");
            }
            JSONString = editor.getGraph().toJSON();
        }

        if (editor.getView().applyChanges(changeSet, false)) {
            editor.getWorkspace().adjustSizeToScreen();
        }

        if (centerAround0) editor.getWorkspace().centerAroundNode(0);

        if (!noUndo) editor.getActionStack().addState(null, null, JSONString);

        document.fire("pedigree:load:finish");
    },

    save: function () {
        if (this._saveInProgress) return; // Don't send parallel save requests

        var me = this;

        var jsonData = this.serialize();

        console.log("[SAVE] data: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(jsonData));

        var image = $("canvas");
        var background = image.getElementsByClassName("panning-background")[0];
        var backgroundPosition = background.nextSibling;
        var backgroundParent = background.parentNode;
        backgroundParent.removeChild(background);
        var bbox = image.down().getBBox();
        // new Ajax.Request("public/xwiki/PhenoTips.PedigreeClass/0.xml", {
        //     method: "POST",
        //     onCreate: function() {
        //         me._saveInProgress = true;
        //     },
        //     onComplete: function() {
        //         me._saveInProgress = false;
        //     },
        //     onSuccess: function() { console.log("saved"); },
        //     parameters: {"property#data": jsonData, "property#image": image.innerHTML.replace(/xmlns:xlink=".*?"/, "").replace(/width=".*?"/, "").replace(/height=".*?"/, "").replace(/viewBox=".*?"/, "viewBox=\"" + bbox.x + " " + bbox.y + " " + bbox.width + " " + bbox.height + "\" width=\"" + bbox.width + "\" height=\"" + bbox.height + "\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"")}
        // });
        backgroundParent.insertBefore(background, backgroundPosition);
    },

    load: function () {
        console.log("initiating load process");

        // new Ajax.Request("public/xwiki/PhenoTips.PedigreeClass/0.xml", {
        //     method: "GET",
        //     onCreate: function() {
        //         document.fire("pedigree:load:start");
        //     },
        //     onSuccess: function (response) {
        //         //console.log("Data from LOAD: " + stringifyObject(response));
        //         //console.log("[Data from LOAD]");
        //         var rawdata  = getSubSelectorTextFromXML(response.responseXML, "property", "name", "data", "value");
        //         var jsonData = unescapeRestData(rawdata);
        //         if (jsonData.trim()) {
        //             console.log("[LOAD] recived JSON: " + stringifyObject(jsonData));
        // 
        //             jsonData = editor.getVersionUpdater().updateToCurrentVersion(jsonData);
        // 
        //             this.createGraphFromSerializedData(jsonData);
        //         } else {
        //             new TemplateSelector(true);
        //         }
        //     }.bind(this)
        // });
    }
});
/* harmony export (immutable) */ __webpack_exports__["b"] = SaveLoadEngine;


/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(5);


/**
 * The UI Element for browsing and selecting pre-defined Pedigree templates
 *
 * @class TemplateSelector
 * @constructor
 * @param {Boolean} isStartupTemplateSelector Set to True if no pedigree has been loaded yet
 */

const TemplateSelector = Class.create({

    initialize: function (isStartupTemplateSelector) {
        this._isStartupTemplateSelector = isStartupTemplateSelector;
        this.mainDiv = new Element("div", { "class": "template-picture-container" });
        this.mainDiv.update("Loading list of templates...");
        var closeShortcut = isStartupTemplateSelector ? [] : ["Esc"];
        this.dialog = new PhenoTips.widgets.ModalPopup(this.mainDiv, { close: { method: this.hide.bind(this), keys: closeShortcut } }, { extraClassName: "pedigree-template-chooser", title: "Please select a pedigree template", displayCloseButton: !isStartupTemplateSelector, verticalPosition: "top" });
        isStartupTemplateSelector && this.dialog.show();
        // new Ajax.Request("public/xwiki/PhenoTips.PedigreeClass/index.xml", {
        //     method: "GET",
        //     onSuccess: this._onTemplateListAvailable.bind(this)
        // });
    },

    /**
     * Returns True if this template selector is the one displayed on startup
     *
     * @method isStartupTemplateSelector
     * @return {Boolean}
     */
    isStartupTemplateSelector: function () {
        return this._isStartupTemplateSelector;
    },

    /**
     * Displays the templates once they have been downloaded
     *
     * @param response
     * @private
     */
    _onTemplateListAvailable: function (response) {
        this.mainDiv.update();
        var objects = response.responseXML.documentElement.getElementsByTagName("objectSummary");
        for (var i = 0; i < objects.length; ++i) {
            var pictureBox = new Element("div", { "class": "picture-box" });
            pictureBox.update("Loading...");
            this.mainDiv.insert(pictureBox);
            var href = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["d" /* getSelectorFromXML */])(objects[i], "link", "rel", "http://www.xwiki.org/rel/properties").getAttribute("href").substring(1);
            // new Ajax.Request(href, {
            //     method: "GET",
            //     onSuccess: this._onTemplateAvailable.bind(this, pictureBox)
            // });
        }
    },

    /**
     * Creates a clickable template thumbnail once the information has been downloaded
     *
     * @param pictureBox
     * @param response
     * @private
     */
    _onTemplateAvailable: function (pictureBox, response) {
        pictureBox.innerHTML = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["b" /* getSubSelectorTextFromXML */])(response.responseXML, "property", "name", "image", "value").replace(/&amp;/, "&");
        pictureBox.pedigreeData = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["b" /* getSubSelectorTextFromXML */])(response.responseXML, "property", "name", "data", "value");
        pictureBox.type = "internal";
        pictureBox.description = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["b" /* getSubSelectorTextFromXML */])(response.responseXML, "property", "name", "description", "value");
        pictureBox.title = pictureBox.description;

        //console.log("[Data from Template] - " + stringifyObject(pictureBox.pedigreeData));

        // TODO: render images with JavaScript instead
        if (window.SVGSVGElement && document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#Image", "1.1")) {
            pictureBox.update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["b" /* getSubSelectorTextFromXML */])(response.responseXML, "property", "name", "image", "value"));
        } else {
            pictureBox.innerHTML = "<table bgcolor='#FFFAFA'><tr><td><br>&nbsp;" + pictureBox.description + "&nbsp;<br><br></td></tr></table>";
        }
        pictureBox.observe("click", this._onTemplateSelected.bindAsEventListener(this, pictureBox));
    },

    /**
     * Loads the template once it has been selected
     *
     * @param event
     * @param pictureBox
     * @private
     */
    _onTemplateSelected: function (event, pictureBox) {
        //console.log("observe onTemplateSelected");
        this.dialog.close();
        if (pictureBox.type == "internal") {
            editor.getSaveLoadEngine().createGraphFromSerializedData(pictureBox.pedigreeData, false /* add to undo stack */, true /*center around 0*/);
        } else if (pictureBox.type == "simpleJSON") {
            editor.getSaveLoadEngine().createGraphFromImportData(pictureBox.pedigreeData, "simpleJSON", {}, false /* add to undo stack */, true /*center around 0*/);
        }
    },

    /**
     * Displays the template selector
     *
     * @method show
     */
    show: function () {
        this.dialog.show();
    },

    /**
     * Removes the the template selector
     *
     * @method hide
     */
    hide: function () {
        this.dialog.closeDialog();
    }
});
/* unused harmony export TemplateSelector */


/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__baseGraph__ = __webpack_require__(42);
/* harmony export (immutable) */ __webpack_exports__["b"] = XCoord;
/* harmony export (immutable) */ __webpack_exports__["c"] = XCoordScore;
/* harmony export (immutable) */ __webpack_exports__["a"] = VerticalLevels;



/*
 * xinit: coordinates of _center_ of every vertex, or null
 */
function XCoord(xinit, graph) {
    // local copies just for convenience & performance
    this.halfWidth = [];
    for (var i = 0; i < graph.GG.vWidth.length; i++) this.halfWidth[i] = Math.floor(graph.GG.vWidth[i] / 2);

    this.graph = graph;

    if (xinit) this.xcoord = xinit; // coordinates of _center_ of every vertex
    else this.xcoord = this.init_xcoord();
}

XCoord.prototype = {

    relationshipOrChhub: function (v) {
        if (this.graph.GG.type[v] == __WEBPACK_IMPORTED_MODULE_1__baseGraph__["b" /* TYPE */].RELATIONSHIP || this.graph.GG.type[v] == __WEBPACK_IMPORTED_MODULE_1__baseGraph__["b" /* TYPE */].CHILDHUB) return true;
        return false;
    },

    getSeparation: function (v1, v2) {
        if (this.relationshipOrChhub(v1) && this.relationshipOrChhub(v2)) return this.graph.horizontalTwinSeparationDist;

        if (this.relationshipOrChhub(v1) || this.relationshipOrChhub(v2)) return this.graph.horizontalRelSeparationDist;

        if (this.graph.GG.type[v1] == __WEBPACK_IMPORTED_MODULE_1__baseGraph__["b" /* TYPE */].VIRTUALEDGE || this.graph.GG.type[v2] == __WEBPACK_IMPORTED_MODULE_1__baseGraph__["b" /* TYPE */].VIRTUALEDGE) {
            if (this.graph.GG.hasEdge(v1, v2) || this.graph.GG.hasEdge(v2, v1)) return this.graph.horizontalRelSeparationDist;
            return this.graph.horizontalTwinSeparationDist;
        }

        // separation between twins: a bit less than between other people
        if ((this.graph.GG.type[v1] == __WEBPACK_IMPORTED_MODULE_1__baseGraph__["b" /* TYPE */].PERSON || this.graph.GG.type[v2] == __WEBPACK_IMPORTED_MODULE_1__baseGraph__["b" /* TYPE */].PERSON) && this.graph.GG.getTwinGroupId(v1) == this.graph.GG.getTwinGroupId(v2) && this.graph.GG.getTwinGroupId(v1) != null) return this.graph.horizontalTwinSeparationDist;

        return this.graph.horizontalPersonSeparationDist;
    },

    init_xcoord: function () {
        var xinit = [];
        // For each rank, the left-most node is assigned coordinate 0 (actually, since xinit[v] is
        // the coordinate of the center, not 0 but halfWidth[node]). The coordinate of the next
        // node is then assigned a value sufficient to satisfy the minimal separation from the prev
        // one, and so on. Thus, on each rank, nodes are initially packed as far left as possible.
        for (var r = 0; r < this.graph.order.order.length; r++) {

            xinit[this.graph.order.order[r][0]] = this.halfWidth[this.graph.order.order[r][0]];

            for (var i = 1; i < this.graph.order.order[r].length; i++) {
                var vPrev = this.graph.order.order[r][i - 1];
                var v = this.graph.order.order[r][i];
                var separation = this.getSeparation(vPrev, v);

                xinit[v] = xinit[vPrev] + this.halfWidth[vPrev] + separation + this.halfWidth[v];
            }
        }
        return xinit;
    },

    getLeftMostNoDisturbPosition: function (v) {
        var leftNeighbour = this.graph.order.getLeftNeighbour(v, this.graph.ranks[v]);
        if (leftNeighbour !== null) {
            var leftBoundary = this.getRightEdge(leftNeighbour) + this.getSeparation(v, leftNeighbour) + this.halfWidth[v];
            //console.log("leftNeighbour: " + leftNeighbour + ", rightEdge: " + this.getRightEdge(leftNeighbour) + ", separation: " + this.getSeparation(v, leftNeighbour));
            return leftBoundary;
        }
        return -Infinity;
    },

    getSlackOnTheLeft: function (v) {
        return this.xcoord[v] - this.getLeftMostNoDisturbPosition(v);
    },

    getRightMostNoDisturbPosition: function (v, alsoMoveRelationship) {
        var rightNeighbour = this.graph.order.getRightNeighbour(v, this.graph.ranks[v]);
        if (rightNeighbour !== null) {
            var rightBoundary = this.getLeftEdge(rightNeighbour) - this.getSeparation(v, rightNeighbour) - this.halfWidth[v];

            if (alsoMoveRelationship && this.graph.GG.type[rightNeighbour] == __WEBPACK_IMPORTED_MODULE_1__baseGraph__["b" /* TYPE */].RELATIONSHIP) {
                var rightMost = this.getRightMostNoDisturbPosition(rightNeighbour);
                var slack = rightMost - this.xcoord[rightNeighbour];
                rightBoundary += slack;
            }
            return rightBoundary;
        }
        return Infinity;
    },

    getSlackOnTheRight: function (v) {
        return this.getRightMostNoDisturbPosition(v, false) - this.xcoord[v];
    },

    getLeftEdge: function (v) {
        return this.xcoord[v] - this.halfWidth[v];
    },

    getRightEdge: function (v) {
        return this.xcoord[v] + this.halfWidth[v];
    },

    shiftLeftOneVertex: function (v, amount) {
        // attempts to move vertex v to the left by ``amount``, but stops
        // as soon as it get as close as allowed to it's left neighbour

        var leftBoundary = this.getLeftMostNoDisturbPosition(v);

        var actualShift = Math.min(amount, this.xcoord[v] - leftBoundary);

        this.xcoord[v] -= actualShift;

        return actualShift;
    },

    shiftRightOneVertex: function (v, amount) {
        // attempts to move vertex v to the right by ``amount``, but stops
        // as soon as it get as close as allowed to it's right neighbour

        var rightBoundary = this.getRightMostNoDisturbPosition(v);

        var actualShift = Math.min(amount, rightBoundary - this.xcoord[v]);

        this.xcoord[v] += actualShift;

        return actualShift;
    },

    shiftRightAndShiftOtherIfNecessary: function (v, amount) {
        // shifts a vertext to the right by the given ``amount``, and shifts
        // all right neighbours, the minimal amount to accomodate this shift
        this.xcoord[v] += amount;

        var rightEdge = this.getRightEdge(v);
        var rank = this.graph.ranks[v];
        var order = this.graph.order.vOrder[v];

        for (var i = order + 1; i < this.graph.order.order[rank].length; i++) {
            var rightNeighbour = this.graph.order.order[rank][i];
            if (this.getLeftEdge(rightNeighbour) >= rightEdge + this.getSeparation(v, rightNeighbour)) {
                // we are not interfering with the vertex to the right
                break;
            }
            this.xcoord[rightNeighbour] = rightEdge + this.getSeparation(v, rightNeighbour) + this.halfWidth[rightNeighbour];

            rightEdge = this.getRightEdge(rightNeighbour);
            v = rightNeighbour;
        }

        return amount;
    },

    moveNodeAsCloseToXAsPossible: function (v, targetX) {
        var x = this.xcoord[v];
        if (x > targetX) {
            var leftMostOK = this.getLeftMostNoDisturbPosition(v);
            if (leftMostOK <= targetX) this.xcoord[v] = targetX;else this.xcoord[v] = leftMostOK;
        } else {
            var rightMostOK = this.getRightMostNoDisturbPosition(v);
            if (rightMostOK >= targetX) this.xcoord[v] = targetX;else this.xcoord[v] = rightMostOK;
        }

        if (this.xcoord[v] != x) // we've moved the mode
            return true;

        return false;
    },

    normalize: function () {
        var leftMostElement = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["p" /* indexOfLastMinElementInArray */])(this.xcoord);
        var moveAmount = this.xcoord[leftMostElement] - this.halfWidth[leftMostElement];

        for (var i = 0; i < this.xcoord.length; i++) this.xcoord[i] -= moveAmount;
    },

    copy: function () {
        // returns an instance with deep copy of this.xcoord
        var newX = new XCoord(this.xcoord.slice(0), this.graph, this.halfWidth);

        return newX;
    },

    findVertexSetSlacks: function (set) {
        // returns the minimum slack (on the left and right) of the set of vertices, assuming all of them are moved at once
        //
        // e.g. separately for left/right, for each vertex in the set if the vertex to the given side of it is not in the set
        // computes min(vertex_slack_on_that_side, current_min_slack_for_that_side) and returns total min slack
        var leftSlack = Infinity;
        var rightSlack = Infinity;

        for (var v in set) {
            if (set.hasOwnProperty(v)) {
                var leftNeighbour = this.graph.order.getLeftNeighbour(v, this.graph.ranks[v]);
                if (!set.hasOwnProperty(leftNeighbour)) {
                    leftSlack = Math.min(leftSlack, this.getSlackOnTheLeft(v));
                }
                var rightNeighbour = this.graph.order.getRightNeighbour(v, this.graph.ranks[v]);
                if (!set.hasOwnProperty(rightNeighbour)) {
                    rightSlack = Math.min(rightSlack, this.getSlackOnTheRight(v));
                }
            }
        }

        return { "rightSlack": rightSlack, "leftSlack": leftSlack };
    }
};

//==================================================================================================

function XCoordScore(maxRealVertexId) {
    this.score = 0;
    this.inEdgeMaxLen = [];
    this.maxRealVertexId = maxRealVertexId;
    this.numStraightLong = 0;
}

XCoordScore.prototype = {

    add: function (amount) {
        this.score += amount;
    },

    addEdge: function (v, u, length) {
        if (u > this.maxRealVertexId) {
            if (length == 0 && v > this.maxRealVertexId) this.numStraightLong++;

            length /= 2;
        }

        if (!this.inEdgeMaxLen[u] || length > this.inEdgeMaxLen[u]) {
            this.inEdgeMaxLen[u] = length;
        }

        for (var i = 0; i < u; i++) if (this.inEdgeMaxLen[i] === undefined) this.inEdgeMaxLen[i] = 0;
    },

    isBettertThan: function (otherScore) {
        if (this.score == otherScore.score) {
            if (this.numStraightLong == otherScore.numStraightLong) {
                // if score is the same the arrangements with smaller sum of
                // longest in-edges wins
                //if (this.inEdgeMaxLen.length == 0 || otherScore.inEdgeMaxLen.length == 0 ) {
                //    printObject(this);
                //    printObject(otherScore);
                //}
                var score1 = this.inEdgeMaxLen.length == 0 ? 0 : this.inEdgeMaxLen.reduce(function (a, b) {
                    return a + b;
                });
                var score2 = otherScore.inEdgeMaxLen.length == 0 ? 0 : otherScore.inEdgeMaxLen.reduce(function (a, b) {
                    return a + b;
                });

                if (score1 == score2) return Math.max.apply(null, this.inEdgeMaxLen) < Math.max.apply(null, otherScore.inEdgeMaxLen); // given everything else equal, prefer layout with shorter longest edge

                return score1 < score2; // prefer layout with smaller total edge length
            }
            return this.numStraightLong > otherScore.numStraightLong;
        }
        return this.score < otherScore.score;
    }
};

//==================================================================================================

function VerticalLevels() {

    this.rankVerticalLevels = []; // for each rank: how many "levels" of horizontal edges are between this and next ranks
    this.childEdgeLevel = []; // for each "childhub" node contains the verticalLevelID to use for the child edges
    // (where levelID is for levels between this and next ranks)
    this.outEdgeVerticalLevel = []; // for each "person" node contains outgoing relationship edge level as {target1: {attachLevel: level, lineLevel: level}, target2: ... }
    // (where levelID is for levels between this and previous ranks)
}

VerticalLevels.prototype = {
    copy: function () {
        var result = new VerticalLevels();

        result.rankVerticalLevels = this.rankVerticalLevels.slice(0);
        result.childEdgeLevel = this.childEdgeLevel.slice(0);
        result.outEdgeVerticalLevel = this.outEdgeVerticalLevel.slice(0);
        return result;
    }
};

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

var Prototype, Class, Template, Enumerable, $A, $w, $H,Hash, $R, ObjectRange, Try, PeriodicalExecuter;
Prototype =           __webpack_require__(6);
                      __webpack_require__(8);
Class =               __webpack_require__(10);
                      __webpack_require__(13);
                      __webpack_require__(15);
                      __webpack_require__(18);
                      __webpack_require__(23);
Template =            __webpack_require__(24);
Enumerable =          __webpack_require__(28);
$A =                  __webpack_require__(17).A;
$w =                  __webpack_require__(17).w;
$H =                  __webpack_require__(31).H;
Hash =                __webpack_require__(31).Hash;
                      __webpack_require__(67);
$R =                  __webpack_require__(68).R;
ObjectRange =         __webpack_require__(68).ObjectRange;
Try =                 __webpack_require__(183);
PeriodicalExecuter =  __webpack_require__(182);


module.exports = {
  Prototype: Prototype,
  Template: Template,
  Class: Class,
  Enumerable: Enumerable,
  Hash: Hash,
  $A: $A,
  $w: $w,
  $H: $H,
  $R: $R,
  ObjectRange:ObjectRange,
  PeriodicalExecuter: PeriodicalExecuter,
  Try: Try
};

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  F: __webpack_require__(184),
  T: __webpack_require__(185),
  __: __webpack_require__(186),
  add: __webpack_require__(47),
  addIndex: __webpack_require__(187),
  adjust: __webpack_require__(96),
  all: __webpack_require__(188),
  allPass: __webpack_require__(189),
  always: __webpack_require__(32),
  and: __webpack_require__(97),
  any: __webpack_require__(98),
  anyPass: __webpack_require__(190),
  ap: __webpack_require__(69),
  aperture: __webpack_require__(191),
  append: __webpack_require__(192),
  apply: __webpack_require__(99),
  applySpec: __webpack_require__(193),
  ascend: __webpack_require__(194),
  assoc: __webpack_require__(48),
  assocPath: __webpack_require__(100),
  binary: __webpack_require__(195),
  bind: __webpack_require__(101),
  both: __webpack_require__(196),
  call: __webpack_require__(197),
  chain: __webpack_require__(70),
  clamp: __webpack_require__(198),
  clone: __webpack_require__(199),
  comparator: __webpack_require__(200),
  complement: __webpack_require__(201),
  compose: __webpack_require__(71),
  composeK: __webpack_require__(102),
  composeP: __webpack_require__(202),
  concat: __webpack_require__(72),
  cond: __webpack_require__(203),
  construct: __webpack_require__(204),
  constructN: __webpack_require__(103),
  contains: __webpack_require__(205),
  converge: __webpack_require__(104),
  countBy: __webpack_require__(206),
  curry: __webpack_require__(49),
  curryN: __webpack_require__(7),
  dec: __webpack_require__(207),
  descend: __webpack_require__(208),
  defaultTo: __webpack_require__(105),
  difference: __webpack_require__(106),
  differenceWith: __webpack_require__(107),
  dissoc: __webpack_require__(108),
  dissocPath: __webpack_require__(209),
  divide: __webpack_require__(210),
  drop: __webpack_require__(109),
  dropLast: __webpack_require__(211),
  dropLastWhile: __webpack_require__(212),
  dropRepeats: __webpack_require__(213),
  dropRepeatsWith: __webpack_require__(110),
  dropWhile: __webpack_require__(214),
  either: __webpack_require__(215),
  empty: __webpack_require__(111),
  eqBy: __webpack_require__(216),
  eqProps: __webpack_require__(217),
  equals: __webpack_require__(19),
  evolve: __webpack_require__(218),
  filter: __webpack_require__(73),
  find: __webpack_require__(219),
  findIndex: __webpack_require__(220),
  findLast: __webpack_require__(221),
  findLastIndex: __webpack_require__(222),
  flatten: __webpack_require__(223),
  flip: __webpack_require__(50),
  forEach: __webpack_require__(224),
  forEachObjIndexed: __webpack_require__(225),
  fromPairs: __webpack_require__(226),
  groupBy: __webpack_require__(227),
  groupWith: __webpack_require__(228),
  gt: __webpack_require__(229),
  gte: __webpack_require__(230),
  has: __webpack_require__(231),
  hasIn: __webpack_require__(232),
  head: __webpack_require__(233),
  identical: __webpack_require__(112),
  identity: __webpack_require__(74),
  ifElse: __webpack_require__(234),
  inc: __webpack_require__(235),
  indexBy: __webpack_require__(236),
  indexOf: __webpack_require__(237),
  init: __webpack_require__(238),
  insert: __webpack_require__(239),
  insertAll: __webpack_require__(240),
  intersection: __webpack_require__(275),
  intersectionWith: __webpack_require__(276),
  intersperse: __webpack_require__(277),
  into: __webpack_require__(278),
  invert: __webpack_require__(279),
  invertObj: __webpack_require__(280),
  invoker: __webpack_require__(35),
  is: __webpack_require__(127),
  isArrayLike: __webpack_require__(36),
  isEmpty: __webpack_require__(281),
  isNil: __webpack_require__(282),
  join: __webpack_require__(283),
  juxt: __webpack_require__(128),
  keys: __webpack_require__(21),
  keysIn: __webpack_require__(284),
  last: __webpack_require__(129),
  lastIndexOf: __webpack_require__(285),
  length: __webpack_require__(130),
  lens: __webpack_require__(56),
  lensIndex: __webpack_require__(286),
  lensPath: __webpack_require__(287),
  lensProp: __webpack_require__(288),
  lift: __webpack_require__(57),
  liftN: __webpack_require__(131),
  lt: __webpack_require__(289),
  lte: __webpack_require__(290),
  map: __webpack_require__(11),
  mapAccum: __webpack_require__(291),
  mapAccumRight: __webpack_require__(292),
  mapObjIndexed: __webpack_require__(293),
  match: __webpack_require__(294),
  mathMod: __webpack_require__(295),
  max: __webpack_require__(33),
  maxBy: __webpack_require__(296),
  mean: __webpack_require__(132),
  median: __webpack_require__(297),
  memoize: __webpack_require__(298),
  merge: __webpack_require__(299),
  mergeAll: __webpack_require__(300),
  mergeWith: __webpack_require__(301),
  mergeWithKey: __webpack_require__(133),
  min: __webpack_require__(302),
  minBy: __webpack_require__(303),
  modulo: __webpack_require__(304),
  multiply: __webpack_require__(134),
  nAry: __webpack_require__(58),
  negate: __webpack_require__(305),
  none: __webpack_require__(306),
  not: __webpack_require__(135),
  nth: __webpack_require__(37),
  nthArg: __webpack_require__(307),
  objOf: __webpack_require__(136),
  of: __webpack_require__(308),
  omit: __webpack_require__(309),
  once: __webpack_require__(310),
  or: __webpack_require__(137),
  over: __webpack_require__(138),
  pair: __webpack_require__(311),
  partial: __webpack_require__(312),
  partialRight: __webpack_require__(313),
  partition: __webpack_require__(314),
  path: __webpack_require__(38),
  pathEq: __webpack_require__(315),
  pathOr: __webpack_require__(316),
  pathSatisfies: __webpack_require__(317),
  pick: __webpack_require__(318),
  pickAll: __webpack_require__(139),
  pickBy: __webpack_require__(319),
  pipe: __webpack_require__(140),
  pipeK: __webpack_require__(320),
  pipeP: __webpack_require__(141),
  pluck: __webpack_require__(39),
  prepend: __webpack_require__(142),
  product: __webpack_require__(321),
  project: __webpack_require__(322),
  prop: __webpack_require__(79),
  propEq: __webpack_require__(323),
  propIs: __webpack_require__(324),
  propOr: __webpack_require__(325),
  propSatisfies: __webpack_require__(326),
  props: __webpack_require__(327),
  range: __webpack_require__(328),
  reduce: __webpack_require__(22),
  reduceBy: __webpack_require__(59),
  reduceRight: __webpack_require__(143),
  reduceWhile: __webpack_require__(329),
  reduced: __webpack_require__(330),
  reject: __webpack_require__(60),
  remove: __webpack_require__(331),
  repeat: __webpack_require__(332),
  replace: __webpack_require__(333),
  reverse: __webpack_require__(61),
  scan: __webpack_require__(334),
  sequence: __webpack_require__(144),
  set: __webpack_require__(335),
  slice: __webpack_require__(30),
  sort: __webpack_require__(336),
  sortBy: __webpack_require__(337),
  sortWith: __webpack_require__(338),
  split: __webpack_require__(339),
  splitAt: __webpack_require__(340),
  splitEvery: __webpack_require__(341),
  splitWhen: __webpack_require__(342),
  subtract: __webpack_require__(343),
  sum: __webpack_require__(145),
  symmetricDifference: __webpack_require__(344),
  symmetricDifferenceWith: __webpack_require__(345),
  tail: __webpack_require__(80),
  take: __webpack_require__(146),
  takeLast: __webpack_require__(346),
  takeLastWhile: __webpack_require__(347),
  takeWhile: __webpack_require__(348),
  tap: __webpack_require__(349),
  test: __webpack_require__(350),
  times: __webpack_require__(147),
  toLower: __webpack_require__(351),
  toPairs: __webpack_require__(352),
  toPairsIn: __webpack_require__(353),
  toString: __webpack_require__(40),
  toUpper: __webpack_require__(354),
  transduce: __webpack_require__(355),
  transpose: __webpack_require__(356),
  traverse: __webpack_require__(357),
  trim: __webpack_require__(358),
  tryCatch: __webpack_require__(359),
  type: __webpack_require__(81),
  unapply: __webpack_require__(360),
  unary: __webpack_require__(361),
  uncurryN: __webpack_require__(362),
  unfold: __webpack_require__(363),
  union: __webpack_require__(364),
  unionWith: __webpack_require__(365),
  uniq: __webpack_require__(82),
  uniqBy: __webpack_require__(148),
  uniqWith: __webpack_require__(83),
  unless: __webpack_require__(366),
  unnest: __webpack_require__(367),
  until: __webpack_require__(368),
  update: __webpack_require__(149),
  useWith: __webpack_require__(150),
  values: __webpack_require__(151),
  valuesIn: __webpack_require__(369),
  view: __webpack_require__(370),
  when: __webpack_require__(371),
  where: __webpack_require__(152),
  whereEq: __webpack_require__(372),
  without: __webpack_require__(373),
  xprod: __webpack_require__(374),
  zip: __webpack_require__(375),
  zipObj: __webpack_require__(376),
  zipWith: __webpack_require__(377)
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var _concat = __webpack_require__(16);
var _curry3 = __webpack_require__(2);


/**
 * Applies a function to the value at the given index of an array, returning a
 * new copy of the array with the element at the given index replaced with the
 * result of the function application.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig (a -> a) -> Number -> [a] -> [a]
 * @param {Function} fn The function to apply.
 * @param {Number} idx The index.
 * @param {Array|Arguments} list An array-like object whose value
 *        at the supplied index will be replaced.
 * @return {Array} A copy of the supplied array-like object with
 *         the element at index `idx` replaced with the value
 *         returned by applying `fn` to the existing element.
 * @see R.update
 * @example
 *
 *      R.adjust(R.add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]
 *      R.adjust(R.add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]
 * @symb R.adjust(f, -1, [a, b]) = [a, f(b)]
 * @symb R.adjust(f, 0, [a, b]) = [f(a), b]
 */
module.exports = _curry3(function adjust(fn, idx, list) {
  if (idx >= list.length || idx < -list.length) {
    return list;
  }
  var start = idx < 0 ? list.length : 0;
  var _idx = start + idx;
  var _list = _concat(list);
  _list[_idx] = fn(list[_idx]);
  return _list;
});


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns `true` if both arguments are `true`; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {Any} a
 * @param {Any} b
 * @return {Any} the first argument if it is falsy, otherwise the second argument.
 * @see R.both
 * @example
 *
 *      R.and(true, true); //=> true
 *      R.and(true, false); //=> false
 *      R.and(false, true); //=> false
 *      R.and(false, false); //=> false
 */
module.exports = _curry2(function and(a, b) {
  return a && b;
});


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xany = __webpack_require__(124);


/**
 * Returns `true` if at least one of elements of the list match the predicate,
 * `false` otherwise.
 *
 * Dispatches to the `any` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`
 *         otherwise.
 * @see R.all, R.none, R.transduce
 * @example
 *
 *      var lessThan0 = R.flip(R.lt)(0);
 *      var lessThan2 = R.flip(R.lt)(2);
 *      R.any(lessThan0)([1, 2]); //=> false
 *      R.any(lessThan2)([1, 2]); //=> true
 */
module.exports = _curry2(_dispatchable(['any'], _xany, function any(fn, list) {
  var idx = 0;
  while (idx < list.length) {
    if (fn(list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
}));


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Applies function `fn` to the argument list `args`. This is useful for
 * creating a fixed-arity function from a variadic function. `fn` should be a
 * bound function if context is significant.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig (*... -> a) -> [*] -> a
 * @param {Function} fn The function which will be called with `args`
 * @param {Array} args The arguments to call `fn` with
 * @return {*} result The result, equivalent to `fn(...args)`
 * @see R.call, R.unapply
 * @example
 *
 *      var nums = [1, 2, 3, -99, 42, 6, 7];
 *      R.apply(Math.max, nums); //=> 42
 * @symb R.apply(f, [a, b, c]) = f(a, b, c)
 */
module.exports = _curry2(function apply(fn, args) {
  return fn.apply(this, args);
});


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var _has = __webpack_require__(9);
var _isArray = __webpack_require__(25);
var _isInteger = __webpack_require__(120);
var assoc = __webpack_require__(48);


/**
 * Makes a shallow clone of an object, setting or overriding the nodes required
 * to create the given path, and placing the specific value at the tail end of
 * that path. Note that this copies and flattens prototype properties onto the
 * new object as well. All non-primitive properties are copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> a -> {a} -> {a}
 * @param {Array} path the path to set
 * @param {*} val The new value
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original except along the specified path.
 * @see R.dissocPath
 * @example
 *
 *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}
 *
 *      // Any missing or non-object keys in path will be overridden
 *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}
 */
module.exports = _curry3(function assocPath(path, val, obj) {
  if (path.length === 0) {
    return val;
  }
  var idx = path[0];
  if (path.length > 1) {
    var nextObj = _has(idx, obj) ? obj[idx] : _isInteger(path[1]) ? [] : {};
    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);
  }
  if (_isInteger(idx) && _isArray(obj)) {
    var arr = [].concat(obj);
    arr[idx] = val;
    return arr;
  } else {
    return assoc(idx, val, obj);
  }
});


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var _arity = __webpack_require__(20);
var _curry2 = __webpack_require__(0);


/**
 * Creates a function that is bound to a context.
 * Note: `R.bind` does not provide the additional argument-binding capabilities of
 * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @category Object
 * @sig (* -> *) -> {*} -> (* -> *)
 * @param {Function} fn The function to bind to context
 * @param {Object} thisObj The context to bind `fn` to
 * @return {Function} A function that will execute in the context of `thisObj`.
 * @see R.partial
 * @example
 *
 *      var log = R.bind(console.log, console);
 *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
 *      // logs {a: 2}
 * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
 */
module.exports = _curry2(function bind(fn, thisObj) {
  return _arity(fn.length, function() {
    return fn.apply(thisObj, arguments);
  });
});


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var chain = __webpack_require__(70);
var compose = __webpack_require__(71);
var map = __webpack_require__(11);


/**
 * Returns the right-to-left Kleisli composition of the provided functions,
 * each of which must return a value of a type supported by [`chain`](#chain).
 *
 * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Function
 * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)
 * @param {...Function} ...functions The functions to compose
 * @return {Function}
 * @see R.pipeK
 * @example
 *
 *       //  get :: String -> Object -> Maybe *
 *       var get = R.curry((propName, obj) => Maybe(obj[propName]))
 *
 *       //  getStateCode :: Maybe String -> Maybe String
 *       var getStateCode = R.composeK(
 *         R.compose(Maybe.of, R.toUpper),
 *         get('state'),
 *         get('address'),
 *         get('user'),
 *       );
 *       getStateCode({"user":{"address":{"state":"ny"}}}); //=> Maybe.Just("NY")
 *       getStateCode({}); //=> Maybe.Nothing()
 * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))
 */
module.exports = function composeK() {
  if (arguments.length === 0) {
    throw new Error('composeK requires at least one argument');
  }
  var init = Array.prototype.slice.call(arguments);
  var last = init.pop();
  return compose(compose.apply(this, map(chain, init)), last);
};


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var curry = __webpack_require__(49);
var nAry = __webpack_require__(58);


/**
 * Wraps a constructor function inside a curried function that can be called
 * with the same arguments and returns the same type. The arity of the function
 * returned is specified to allow using variadic constructor functions.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Function
 * @sig Number -> (* -> {*}) -> (* -> {*})
 * @param {Number} n The arity of the constructor function.
 * @param {Function} Fn The constructor function to wrap.
 * @return {Function} A wrapped, curried constructor function.
 * @example
 *
 *      // Variadic Constructor function
 *      function Salad() {
 *        this.ingredients = arguments;
 *      };
 *      Salad.prototype.recipe = function() {
 *        var instructions = R.map((ingredient) => (
 *          'Add a whollop of ' + ingredient, this.ingredients)
 *        )
 *        return R.join('\n', instructions)
 *      }
 *
 *      var ThreeLayerSalad = R.constructN(3, Salad)
 *
 *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.
 *      var salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup')
 *      console.log(salad.recipe());
 *      // Add a whollop of Mayonnaise
 *      // Add a whollop of Potato Chips
 *      // Add a whollop of Potato Ketchup
 */
module.exports = _curry2(function constructN(n, Fn) {
  if (n > 10) {
    throw new Error('Constructor with greater than ten arguments');
  }
  if (n === 0) {
    return function() { return new Fn(); };
  }
  return curry(nAry(n, function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
    switch (arguments.length) {
      case  1: return new Fn($0);
      case  2: return new Fn($0, $1);
      case  3: return new Fn($0, $1, $2);
      case  4: return new Fn($0, $1, $2, $3);
      case  5: return new Fn($0, $1, $2, $3, $4);
      case  6: return new Fn($0, $1, $2, $3, $4, $5);
      case  7: return new Fn($0, $1, $2, $3, $4, $5, $6);
      case  8: return new Fn($0, $1, $2, $3, $4, $5, $6, $7);
      case  9: return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);
      case 10: return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
    }
  }));
});


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _map = __webpack_require__(55);
var curryN = __webpack_require__(7);
var max = __webpack_require__(33);
var pluck = __webpack_require__(39);
var reduce = __webpack_require__(22);


/**
 * Accepts a converging function and a list of branching functions and returns
 * a new function. When invoked, this new function is applied to some
 * arguments, each branching function is applied to those same arguments. The
 * results of each branching function are passed as arguments to the converging
 * function to produce the return value.
 *
 * @func
 * @memberOf R
 * @since v0.4.2
 * @category Function
 * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
 * @param {Function} after A function. `after` will be invoked with the return values of
 *        `fn1` and `fn2` as its arguments.
 * @param {Array} functions A list of functions.
 * @return {Function} A new function.
 * @see R.useWith
 * @example
 *
 *      var average = R.converge(R.divide, [R.sum, R.length])
 *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4
 *
 *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])
 *      strangeConcat("Yodel") //=> "YODELyodel"
 *
 * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))
 */
module.exports = _curry2(function converge(after, fns) {
  return curryN(reduce(max, 0, pluck('length', fns)), function() {
    var args = arguments;
    var context = this;
    return after.apply(context, _map(function(fn) {
      return fn.apply(context, args);
    }, fns));
  });
});


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns the second argument if it is not `null`, `undefined` or `NaN`
 * otherwise the first argument is returned.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {a} default The default value.
 * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.
 * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value
 * @example
 *
 *      var defaultTo42 = R.defaultTo(42);
 *
 *      defaultTo42(null);  //=> 42
 *      defaultTo42(undefined);  //=> 42
 *      defaultTo42('Ramda');  //=> 'Ramda'
 *      // parseInt('string') results in NaN
 *      defaultTo42(parseInt('string')); //=> 42
 */
module.exports = _curry2(function defaultTo(d, v) {
  return v == null || v !== v ? d : v;
});


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var _contains = __webpack_require__(29);
var _curry2 = __webpack_require__(0);


/**
 * Finds the set (i.e. no duplicates) of all elements in the first list not
 * contained in the second list. Objects and Arrays are compared are compared
 * in terms of value equality, not reference equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` that are not in `list2`.
 * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith
 * @example
 *
 *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]
 *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]
 *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]
 */
module.exports = _curry2(function difference(first, second) {
  var out = [];
  var idx = 0;
  var firstLen = first.length;
  while (idx < firstLen) {
    if (!_contains(first[idx], second) && !_contains(first[idx], out)) {
      out[out.length] = first[idx];
    }
    idx += 1;
  }
  return out;
});


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var _containsWith = __webpack_require__(76);
var _curry3 = __webpack_require__(2);


/**
 * Finds the set (i.e. no duplicates) of all elements in the first list not
 * contained in the second list. Duplication is determined according to the
 * value returned by applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` that are not in `list2`.
 * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith
 * @example
 *
 *      var cmp = (x, y) => x.a === y.a;
 *      var l1 = [{a: 1}, {a: 2}, {a: 3}];
 *      var l2 = [{a: 3}, {a: 4}];
 *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]
 */
module.exports = _curry3(function differenceWith(pred, first, second) {
  var out = [];
  var idx = 0;
  var firstLen = first.length;
  while (idx < firstLen) {
    if (!_containsWith(pred, first[idx], second) &&
        !_containsWith(pred, first[idx], out)) {
      out.push(first[idx]);
    }
    idx += 1;
  }
  return out;
});


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns a new object that does not contain a `prop` property.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Object
 * @sig String -> {k: v} -> {k: v}
 * @param {String} prop The name of the property to dissociate
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original but without the specified property
 * @see R.assoc
 * @example
 *
 *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}
 */
module.exports = _curry2(function dissoc(prop, obj) {
  var result = {};
  for (var p in obj) {
    result[p] = obj[p];
  }
  delete result[prop];
  return result;
});


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xdrop = __webpack_require__(262);
var slice = __webpack_require__(30);


/**
 * Returns all but the first `n` elements of the given list, string, or
 * transducer/transformer (or object with a `drop` method).
 *
 * Dispatches to the `drop` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n
 * @param {[a]} list
 * @return {[a]} A copy of list without the first `n` elements
 * @see R.take, R.transduce, R.dropLast, R.dropWhile
 * @example
 *
 *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
 *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']
 *      R.drop(3, ['foo', 'bar', 'baz']); //=> []
 *      R.drop(4, ['foo', 'bar', 'baz']); //=> []
 *      R.drop(3, 'ramda');               //=> 'da'
 */
module.exports = _curry2(_dispatchable(['drop'], _xdrop, function drop(n, xs) {
  return slice(Math.max(0, n), Infinity, xs);
}));


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xdropRepeatsWith = __webpack_require__(125);
var last = __webpack_require__(129);


/**
 * Returns a new list without any consecutively repeating elements. Equality is
 * determined by applying the supplied predicate to each pair of consecutive elements. The
 * first element in a series of equal elements will be preserved.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig (a, a -> Boolean) -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list The array to consider.
 * @return {Array} `list` without repeating elements.
 * @see R.transduce
 * @example
 *
 *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];
 *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]
 */
module.exports = _curry2(_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {
  var result = [];
  var idx = 1;
  var len = list.length;
  if (len !== 0) {
    result[0] = list[0];
    while (idx < len) {
      if (!pred(last(result), list[idx])) {
        result[result.length] = list[idx];
      }
      idx += 1;
    }
  }
  return result;
}));



/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _isArguments = __webpack_require__(119);
var _isArray = __webpack_require__(25);
var _isObject = __webpack_require__(122);
var _isString = __webpack_require__(54);


/**
 * Returns the empty value of its argument's type. Ramda defines the empty
 * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other
 * types are supported if they define `<Type>.empty` and/or
 * `<Type>.prototype.empty`.
 *
 * Dispatches to the `empty` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig a -> a
 * @param {*} x
 * @return {*}
 * @example
 *
 *      R.empty(Just(42));      //=> Nothing()
 *      R.empty([1, 2, 3]);     //=> []
 *      R.empty('unicorns');    //=> ''
 *      R.empty({x: 1, y: 2});  //=> {}
 */
module.exports = _curry1(function empty(x) {
  return (
    (x != null && typeof x.empty === 'function') ?
      x.empty() :
    (x != null && x.constructor != null && typeof x.constructor.empty === 'function') ?
      x.constructor.empty() :
    _isArray(x) ?
      [] :
    _isString(x) ?
      '' :
    _isObject(x) ?
      {} :
    _isArguments(x) ?
      (function() { return arguments; }()) :
    // else
      void 0
  );
});


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns true if its arguments are identical, false otherwise. Values are
 * identical if they reference the same memory. `NaN` is identical to `NaN`;
 * `0` and `-0` are not identical.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Relation
 * @sig a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @example
 *
 *      var o = {};
 *      R.identical(o, o); //=> true
 *      R.identical(1, 1); //=> true
 *      R.identical(1, '1'); //=> false
 *      R.identical([], []); //=> false
 *      R.identical(0, -0); //=> false
 *      R.identical(NaN, NaN); //=> true
 */
module.exports = _curry2(function identical(a, b) {
  // SameValue algorithm
  if (a === b) { // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return a !== 0 || 1 / a === 1 / b;
  } else {
    // Step 6.a: NaN == NaN
    return a !== a && b !== b;
  }
});


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

var _cloneRegExp = __webpack_require__(114);
var type = __webpack_require__(81);


/**
 * Copies an object.
 *
 * @private
 * @param {*} value The value to be copied
 * @param {Array} refFrom Array containing the source references
 * @param {Array} refTo Array containing the copied source references
 * @param {Boolean} deep Whether or not to perform deep cloning.
 * @return {*} The copied value.
 */
module.exports = function _clone(value, refFrom, refTo, deep) {
  var copy = function copy(copiedValue) {
    var len = refFrom.length;
    var idx = 0;
    while (idx < len) {
      if (value === refFrom[idx]) {
        return refTo[idx];
      }
      idx += 1;
    }
    refFrom[idx + 1] = value;
    refTo[idx + 1] = copiedValue;
    for (var key in value) {
      copiedValue[key] = deep ?
        _clone(value[key], refFrom, refTo, true) : value[key];
    }
    return copiedValue;
  };
  switch (type(value)) {
    case 'Object':  return copy({});
    case 'Array':   return copy([]);
    case 'Date':    return new Date(value.valueOf());
    case 'RegExp':  return _cloneRegExp(value);
    default:        return value;
  }
};


/***/ }),
/* 114 */
/***/ (function(module, exports) {

module.exports = function _cloneRegExp(pattern) {
  return new RegExp(pattern.source, (pattern.global     ? 'g' : '') +
                                    (pattern.ignoreCase ? 'i' : '') +
                                    (pattern.multiline  ? 'm' : '') +
                                    (pattern.sticky     ? 'y' : '') +
                                    (pattern.unicode    ? 'u' : ''));
};


/***/ }),
/* 115 */
/***/ (function(module, exports) {

module.exports = function _complement(f) {
  return function() {
    return !f.apply(this, arguments);
  };
};


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

var _arity = __webpack_require__(20);
var _curry2 = __webpack_require__(0);


module.exports = function _createPartialApplicator(concat) {
  return _curry2(function(fn, args) {
    return _arity(Math.max(0, fn.length - args.length), function() {
      return fn.apply(this, concat(args, arguments));
    });
  });
};


/***/ }),
/* 117 */
/***/ (function(module, exports) {

module.exports = function _filter(fn, list) {
  var idx = 0;
  var len = list.length;
  var result = [];

  while (idx < len) {
    if (fn(list[idx])) {
      result[result.length] = list[idx];
    }
    idx += 1;
  }
  return result;
};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

var equals = __webpack_require__(19);


module.exports = function _indexOf(list, a, idx) {
  var inf, item;
  // Array.prototype.indexOf doesn't exist below IE9
  if (typeof list.indexOf === 'function') {
    switch (typeof a) {
      case 'number':
        if (a === 0) {
          // manually crawl the list to distinguish between +0 and -0
          inf = 1 / a;
          while (idx < list.length) {
            item = list[idx];
            if (item === 0 && 1 / item === inf) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        } else if (a !== a) {
          // NaN
          while (idx < list.length) {
            item = list[idx];
            if (typeof item === 'number' && item !== item) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        }
        // non-zero numbers can utilise Set
        return list.indexOf(a, idx);

      // all these types can utilise Set
      case 'string':
      case 'boolean':
      case 'function':
      case 'undefined':
        return list.indexOf(a, idx);

      case 'object':
        if (a === null) {
          // null can utilise Set
          return list.indexOf(a, idx);
        }
    }
  }
  // anything else not covered above, defer to R.equals
  while (idx < list.length) {
    if (equals(list[idx], a)) {
      return idx;
    }
    idx += 1;
  }
  return -1;
};


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var _has = __webpack_require__(9);


module.exports = (function() {
  var toString = Object.prototype.toString;
  return toString.call(arguments) === '[object Arguments]' ?
    function _isArguments(x) { return toString.call(x) === '[object Arguments]'; } :
    function _isArguments(x) { return _has('callee', x); };
}());


/***/ }),
/* 120 */
/***/ (function(module, exports) {

/**
 * Determine if the passed argument is an integer.
 *
 * @private
 * @param {*} n
 * @category Type
 * @return {Boolean}
 */
module.exports = Number.isInteger || function _isInteger(n) {
  return (n << 0) === n;
};


/***/ }),
/* 121 */
/***/ (function(module, exports) {

module.exports = function _isNumber(x) {
  return Object.prototype.toString.call(x) === '[object Number]';
};


/***/ }),
/* 122 */
/***/ (function(module, exports) {

module.exports = function _isObject(x) {
  return Object.prototype.toString.call(x) === '[object Object]';
};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__(36);


/**
 * `_makeFlat` is a helper function that returns a one-level or fully recursive
 * function based on the flag passed in.
 *
 * @private
 */
module.exports = function _makeFlat(recursive) {
  return function flatt(list) {
    var value, jlen, j;
    var result = [];
    var idx = 0;
    var ilen = list.length;

    while (idx < ilen) {
      if (isArrayLike(list[idx])) {
        value = recursive ? flatt(list[idx]) : list[idx];
        j = 0;
        jlen = value.length;
        while (j < jlen) {
          result[result.length] = value[j];
          j += 1;
        }
      } else {
        result[result.length] = list[idx];
      }
      idx += 1;
    }
    return result;
  };
};


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _reduced = __webpack_require__(26);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XAny(f, xf) {
    this.xf = xf;
    this.f = f;
    this.any = false;
  }
  XAny.prototype['@@transducer/init'] = _xfBase.init;
  XAny.prototype['@@transducer/result'] = function(result) {
    if (!this.any) {
      result = this.xf['@@transducer/step'](result, false);
    }
    return this.xf['@@transducer/result'](result);
  };
  XAny.prototype['@@transducer/step'] = function(result, input) {
    if (this.f(input)) {
      this.any = true;
      result = _reduced(this.xf['@@transducer/step'](result, true));
    }
    return result;
  };

  return _curry2(function _xany(f, xf) { return new XAny(f, xf); });
}());


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XDropRepeatsWith(pred, xf) {
    this.xf = xf;
    this.pred = pred;
    this.lastValue = undefined;
    this.seenFirstValue = false;
  }

  XDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;
  XDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;
  XDropRepeatsWith.prototype['@@transducer/step'] = function(result, input) {
    var sameAsLast = false;
    if (!this.seenFirstValue) {
      this.seenFirstValue = true;
    } else if (this.pred(this.lastValue, input)) {
      sameAsLast = true;
    }
    this.lastValue = input;
    return sameAsLast ? result : this.xf['@@transducer/step'](result, input);
  };

  return _curry2(function _xdropRepeatsWith(pred, xf) { return new XDropRepeatsWith(pred, xf); });
}());


/***/ }),
/* 126 */
/***/ (function(module, exports) {

module.exports = (function() {
  function XWrap(fn) {
    this.f = fn;
  }
  XWrap.prototype['@@transducer/init'] = function() {
    throw new Error('init not implemented on XWrap');
  };
  XWrap.prototype['@@transducer/result'] = function(acc) { return acc; };
  XWrap.prototype['@@transducer/step'] = function(acc, x) {
    return this.f(acc, x);
  };

  return function _xwrap(fn) { return new XWrap(fn); };
}());


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * See if an object (`val`) is an instance of the supplied constructor. This
 * function will check up the inheritance chain, if any.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Type
 * @sig (* -> {*}) -> a -> Boolean
 * @param {Object} ctor A constructor
 * @param {*} val The value to test
 * @return {Boolean}
 * @example
 *
 *      R.is(Object, {}); //=> true
 *      R.is(Number, 1); //=> true
 *      R.is(Object, 1); //=> false
 *      R.is(String, 's'); //=> true
 *      R.is(String, new String('')); //=> true
 *      R.is(Object, new String('')); //=> true
 *      R.is(Object, 's'); //=> false
 *      R.is(Number, {}); //=> false
 */
module.exports = _curry2(function is(Ctor, val) {
  return val != null && val.constructor === Ctor || val instanceof Ctor;
});


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var converge = __webpack_require__(104);


/**
 * juxt applies a list of functions to a list of values.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Function
 * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
 * @param {Array} fns An array of functions
 * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.
 * @see R.applySpec
 * @example
 *
 *      var getRange = R.juxt([Math.min, Math.max]);
 *      getRange(3, 4, 9, -3); //=> [-3, 9]
 * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]
 */
module.exports = _curry1(function juxt(fns) {
  return converge(function() { return Array.prototype.slice.call(arguments, 0); }, fns);
});


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

var nth = __webpack_require__(37);


/**
 * Returns the last element of the given list or string.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig [a] -> a | Undefined
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.init, R.head, R.tail
 * @example
 *
 *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
 *      R.last([]); //=> undefined
 *
 *      R.last('abc'); //=> 'c'
 *      R.last(''); //=> ''
 */
module.exports = nth(-1);


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _isNumber = __webpack_require__(121);


/**
 * Returns the number of elements in the array by returning `list.length`.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [a] -> Number
 * @param {Array} list The array to inspect.
 * @return {Number} The length of the array.
 * @example
 *
 *      R.length([]); //=> 0
 *      R.length([1, 2, 3]); //=> 3
 */
module.exports = _curry1(function length(list) {
  return list != null && _isNumber(list.length) ? list.length : NaN;
});


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _reduce = __webpack_require__(14);
var ap = __webpack_require__(69);
var curryN = __webpack_require__(7);
var map = __webpack_require__(11);


/**
 * "lifts" a function to be the specified arity, so that it may "map over" that
 * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig Number -> (*... -> *) -> ([*]... -> [*])
 * @param {Function} fn The function to lift into higher context
 * @return {Function} The lifted function.
 * @see R.lift, R.ap
 * @example
 *
 *      var madd3 = R.liftN(3, (...args) => R.sum(args));
 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
 */
module.exports = _curry2(function liftN(arity, fn) {
  var lifted = curryN(arity, fn);
  return curryN(arity, function() {
    return _reduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
  });
});


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var sum = __webpack_require__(145);


/**
 * Returns the mean of the given list of numbers.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list
 * @return {Number}
 * @example
 *
 *      R.mean([2, 7, 9]); //=> 6
 *      R.mean([]); //=> NaN
 */
module.exports = _curry1(function mean(list) {
  return sum(list) / list.length;
});


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var _has = __webpack_require__(9);


/**
 * Creates a new object with the own properties of the two provided objects. If
 * a key exists in both objects, the provided function is applied to the key
 * and the values associated with the key in each object, with the result being
 * used as the value associated with the key in the returned object. The key
 * will be excluded from the returned object if the resulting value is
 * `undefined`.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.merge, R.mergeWith
 * @example
 *
 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
 *      R.mergeWithKey(concatValues,
 *                     { a: true, thing: 'foo', values: [10, 20] },
 *                     { b: true, thing: 'bar', values: [15, 35] });
 *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }
 * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }
 */
module.exports = _curry3(function mergeWithKey(fn, l, r) {
  var result = {};
  var k;

  for (k in l) {
    if (_has(k, l)) {
      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];
    }
  }

  for (k in r) {
    if (_has(k, r) && !(_has(k, result))) {
      result[k] = r[k];
    }
  }

  return result;
});


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Multiplies two numbers. Equivalent to `a * b` but curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a * b`.
 * @see R.divide
 * @example
 *
 *      var double = R.multiply(2);
 *      var triple = R.multiply(3);
 *      double(3);       //=>  6
 *      triple(4);       //=> 12
 *      R.multiply(2, 5);  //=> 10
 */
module.exports = _curry2(function multiply(a, b) { return a * b; });


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);


/**
 * A function that returns the `!` of its argument. It will return `true` when
 * passed false-y value, and `false` when passed a truth-y one.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig * -> Boolean
 * @param {*} a any value
 * @return {Boolean} the logical inverse of passed argument.
 * @see R.complement
 * @example
 *
 *      R.not(true); //=> false
 *      R.not(false); //=> true
 *      R.not(0); //=> true
 *      R.not(1); //=> false
 */
module.exports = _curry1(function not(a) {
  return !a;
});


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Creates an object containing a single key:value pair.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Object
 * @sig String -> a -> {String:a}
 * @param {String} key
 * @param {*} val
 * @return {Object}
 * @see R.pair
 * @example
 *
 *      var matchPhrases = R.compose(
 *        R.objOf('must'),
 *        R.map(R.objOf('match_phrase'))
 *      );
 *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}
 */
module.exports = _curry2(function objOf(key, val) {
  var obj = {};
  obj[key] = val;
  return obj;
});


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns `true` if one or both of its arguments are `true`. Returns `false`
 * if both arguments are `false`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {Any} a
 * @param {Any} b
 * @return {Any} the first argument if truthy, otherwise the second argument.
 * @see R.either
 * @example
 *
 *      R.or(true, true); //=> true
 *      R.or(true, false); //=> true
 *      R.or(false, true); //=> true
 *      R.or(false, false); //=> false
 */
module.exports = _curry2(function or(a, b) {
  return a || b;
});


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given lens to the result of applying the given function to
 * the focused value.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> (a -> a) -> s -> s
 * @param {Lens} lens
 * @param {*} v
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var headLens = R.lensIndex(0);
 *
 *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']
 */
module.exports = (function() {
  // `Identity` is a functor that holds a single value, where `map` simply
  // transforms the held value with the provided function.
  var Identity = function(x) {
    return {value: x, map: function(f) { return Identity(f(x)); }};
  };

  return _curry3(function over(lens, f, x) {
    // The value returned by the getter function is first transformed with `f`,
    // then set as the value of an `Identity`. This is then mapped over with the
    // setter function of the lens.
    return lens(function(y) { return Identity(f(y)); })(x).value;
  });
}());


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Similar to `pick` except that this one includes a `key: undefined` pair for
 * properties that don't exist.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> {k: v}
 * @param {Array} names an array of String property names to copy onto a new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties from `names` on it.
 * @see R.pick
 * @example
 *
 *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
 *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}
 */
module.exports = _curry2(function pickAll(names, obj) {
  var result = {};
  var idx = 0;
  var len = names.length;
  while (idx < len) {
    var name = names[idx];
    result[name] = obj[name];
    idx += 1;
  }
  return result;
});


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var _arity = __webpack_require__(20);
var _pipe = __webpack_require__(253);
var reduce = __webpack_require__(22);
var tail = __webpack_require__(80);


/**
 * Performs left-to-right function composition. The leftmost function may have
 * any arity; the remaining functions must be unary.
 *
 * In some libraries this function is named `sequence`.
 *
 * **Note:** The result of pipe is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.compose
 * @example
 *
 *      var f = R.pipe(Math.pow, R.negate, R.inc);
 *
 *      f(3, 4); // -(3^4) + 1
 * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))
 */
module.exports = function pipe() {
  if (arguments.length === 0) {
    throw new Error('pipe requires at least one argument');
  }
  return _arity(arguments[0].length,
                reduce(_pipe, arguments[0], tail(arguments)));
};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var _arity = __webpack_require__(20);
var _pipeP = __webpack_require__(254);
var reduce = __webpack_require__(22);
var tail = __webpack_require__(80);


/**
 * Performs left-to-right composition of one or more Promise-returning
 * functions. The leftmost function may have any arity; the remaining functions
 * must be unary.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.composeP
 * @example
 *
 *      //  followersForUser :: String -> Promise [User]
 *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);
 */
module.exports = function pipeP() {
  if (arguments.length === 0) {
    throw new Error('pipeP requires at least one argument');
  }
  return _arity(arguments[0].length,
                reduce(_pipeP, arguments[0], tail(arguments)));
};


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

var _concat = __webpack_require__(16);
var _curry2 = __webpack_require__(0);


/**
 * Returns a new list with the given element at the front, followed by the
 * contents of the list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} el The item to add to the head of the output list.
 * @param {Array} list The array to add to the tail of the output list.
 * @return {Array} A new array.
 * @see R.append
 * @example
 *
 *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']
 */
module.exports = _curry2(function prepend(el, list) {
  return _concat([el], list);
});


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * Similar to `reduce`, except moves through the input list from the right to
 * the left.
 *
 * The iterator function receives two values: *(value, acc)*, while the arguments'
 * order of `reduce`'s iterator function is *(acc, value)*.
 *
 * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduce` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a, b -> b) -> b -> [a] -> b
 * @param {Function} fn The iterator function. Receives two values, the current element from the array
 *        and the accumulator.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.addIndex
 * @example
 *
 *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2
 *          -               -2
 *         / \              / \
 *        1   -            1   3
 *           / \              / \
 *          2   -     ==>    2  -1
 *             / \              / \
 *            3   -            3   4
 *               / \              / \
 *              4   0            4   0
 *
 * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))
 */
module.exports = _curry3(function reduceRight(fn, acc, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    acc = fn(list[idx], acc);
    idx -= 1;
  }
  return acc;
});


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var ap = __webpack_require__(69);
var map = __webpack_require__(11);
var prepend = __webpack_require__(142);
var reduceRight = __webpack_require__(143);


/**
 * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)
 * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an
 * Applicative of Traversable.
 *
 * Dispatches to the `sequence` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
 * @param {Function} of
 * @param {*} traversable
 * @return {*}
 * @see R.traverse
 * @example
 *
 *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])
 *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()
 *
 *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]
 *      R.sequence(R.of, Nothing());       //=> [Nothing()]
 */
module.exports = _curry2(function sequence(of, traversable) {
  return typeof traversable.sequence === 'function' ?
    traversable.sequence(of) :
    reduceRight(function(x, acc) { return ap(map(prepend, x), acc); },
                of([]),
                traversable);
});


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

var add = __webpack_require__(47);
var reduce = __webpack_require__(22);


/**
 * Adds together all the elements of a list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list An array of numbers
 * @return {Number} The sum of all the numbers in the list.
 * @see R.reduce
 * @example
 *
 *      R.sum([2,4,6,8,100,1]); //=> 121
 */
module.exports = reduce(add, 0);


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xtake = __webpack_require__(273);
var slice = __webpack_require__(30);


/**
 * Returns the first `n` elements of the given list, string, or
 * transducer/transformer (or object with a `take` method).
 *
 * Dispatches to the `take` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n
 * @param {*} list
 * @return {*}
 * @see R.drop
 * @example
 *
 *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']
 *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
 *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.take(3, 'ramda');               //=> 'ram'
 *
 *      var personnel = [
 *        'Dave Brubeck',
 *        'Paul Desmond',
 *        'Eugene Wright',
 *        'Joe Morello',
 *        'Gerry Mulligan',
 *        'Bob Bates',
 *        'Joe Dodge',
 *        'Ron Crotty'
 *      ];
 *
 *      var takeFive = R.take(5);
 *      takeFive(personnel);
 *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']
 * @symb R.take(-1, [a, b]) = [a, b]
 * @symb R.take(0, [a, b]) = []
 * @symb R.take(1, [a, b]) = [a]
 * @symb R.take(2, [a, b]) = [a, b]
 */
module.exports = _curry2(_dispatchable(['take'], _xtake, function take(n, xs) {
  return slice(0, n < 0 ? Infinity : n, xs);
}));


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Calls an input function `n` times, returning an array containing the results
 * of those function calls.
 *
 * `fn` is passed one argument: The current value of `n`, which begins at `0`
 * and is gradually incremented to `n - 1`.
 *
 * @func
 * @memberOf R
 * @since v0.2.3
 * @category List
 * @sig (Number -> a) -> Number -> [a]
 * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.
 * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.
 * @return {Array} An array containing the return values of all calls to `fn`.
 * @example
 *
 *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]
 * @symb R.times(f, 0) = []
 * @symb R.times(f, 1) = [f(0)]
 * @symb R.times(f, 2) = [f(0), f(1)]
 */
module.exports = _curry2(function times(fn, n) {
  var len = Number(n);
  var idx = 0;
  var list;

  if (len < 0 || isNaN(len)) {
    throw new RangeError('n must be a non-negative number');
  }
  list = new Array(len);
  while (idx < len) {
    list[idx] = fn(idx);
    idx += 1;
  }
  return list;
});


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

var _Set = __webpack_require__(241);
var _curry2 = __webpack_require__(0);


/**
 * Returns a new list containing only one copy of each element in the original
 * list, based upon the value returned by applying the supplied function to
 * each list element. Prefers the first item if the supplied function produces
 * the same value on two items. `R.equals` is used for comparison.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> b) -> [a] -> [a]
 * @param {Function} fn A function used to produce a value to use during comparisons.
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]
 */
module.exports = _curry2(function uniqBy(fn, list) {
  var set = new _Set();
  var result = [];
  var idx = 0;
  var appliedItem, item;

  while (idx < list.length) {
    item = list[idx];
    appliedItem = fn(item);
    if (set.add(appliedItem)) {
      result.push(item);
    }
    idx += 1;
  }
  return result;
});


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var adjust = __webpack_require__(96);
var always = __webpack_require__(32);


/**
 * Returns a new copy of the array with the element at the provided index
 * replaced with the given value.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig Number -> a -> [a] -> [a]
 * @param {Number} idx The index to update.
 * @param {*} x The value to exist at the given index of the returned array.
 * @param {Array|Arguments} list The source array-like object to be updated.
 * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.
 * @see R.adjust
 * @example
 *
 *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]
 *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]
 * @symb R.update(-1, a, [b, c]) = [b, a]
 * @symb R.update(0, a, [b, c]) = [a, c]
 * @symb R.update(1, a, [b, c]) = [b, a]
 */
module.exports = _curry3(function update(idx, x, list) {
  return adjust(always(x), idx, list);
});


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var curryN = __webpack_require__(7);


/**
 * Accepts a function `fn` and a list of transformer functions and returns a
 * new curried function. When the new function is invoked, it calls the
 * function `fn` with parameters consisting of the result of calling each
 * supplied handler on successive arguments to the new function.
 *
 * If more arguments are passed to the returned function than transformer
 * functions, those arguments are passed directly to `fn` as additional
 * parameters. If you expect additional arguments that don't need to be
 * transformed, although you can ignore them, it's best to pass an identity
 * function so that the new function reports the correct arity.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
 * @param {Function} fn The function to wrap.
 * @param {Array} transformers A list of transformer functions
 * @return {Function} The wrapped function.
 * @see R.converge
 * @example
 *
 *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81
 *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81
 *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32
 *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32
 * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))
 */
module.exports = _curry2(function useWith(fn, transformers) {
  return curryN(transformers.length, function() {
    var args = [];
    var idx = 0;
    while (idx < transformers.length) {
      args.push(transformers[idx].call(this, arguments[idx]));
      idx += 1;
    }
    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));
  });
});


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var keys = __webpack_require__(21);


/**
 * Returns a list of all the enumerable own properties of the supplied object.
 * Note that the order of the output array is not guaranteed across different
 * JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [v]
 * @param {Object} obj The object to extract values from
 * @return {Array} An array of the values of the object's own properties.
 * @example
 *
 *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]
 */
module.exports = _curry1(function values(obj) {
  var props = keys(obj);
  var len = props.length;
  var vals = [];
  var idx = 0;
  while (idx < len) {
    vals[idx] = obj[props[idx]];
    idx += 1;
  }
  return vals;
});


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _has = __webpack_require__(9);


/**
 * Takes a spec object and a test object; returns true if the test satisfies
 * the spec. Each of the spec's own properties must be a predicate function.
 * Each predicate is applied to the value of the corresponding property of the
 * test object. `where` returns true if all the predicates return true, false
 * otherwise.
 *
 * `where` is well suited to declaratively expressing constraints for other
 * functions such as `filter` and `find`.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category Object
 * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean
 * @param {Object} spec
 * @param {Object} testObj
 * @return {Boolean}
 * @example
 *
 *      // pred :: Object -> Boolean
 *      var pred = R.where({
 *        a: R.equals('foo'),
 *        b: R.complement(R.equals('bar')),
 *        x: R.gt(__, 10),
 *        y: R.lt(__, 20)
 *      });
 *
 *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true
 *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false
 *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false
 *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false
 *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false
 */
module.exports = _curry2(function where(spec, testObj) {
  for (var prop in spec) {
    if (_has(prop, spec) && !spec[prop](testObj[prop])) {
      return false;
    }
  }
  return true;
});


/***/ }),
/* 153 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ramda__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ramda___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ramda__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__dynamicGraph__ = __webpack_require__(160);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__viewerWorkspace__ = __webpack_require__(179);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__view__ = __webpack_require__(177);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__disorderLegend__ = __webpack_require__(158);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__hpoLegend__ = __webpack_require__(164);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__geneLegend__ = __webpack_require__(162);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__viewerSaveLoadEngine__ = __webpack_require__(178);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__controller__ = __webpack_require__(157);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__undoRedo__ = __webpack_require__(176);












const isTruthy = val => {
    const truthy = ['1', 'y', 'yes', 'ye', 't', 'tr', 'true'];
    if (val && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_ramda__["contains"])(val.toString().trim().toLowerCase(), truthy)) {
        return true;
    }
    return false;
};

const cleanBooleanField = val => {
    if (val && isTruthy(val)) return true;
    return false;
};

const cleanGender = val => {
    const maleLike = ['m', 'male'];
    const femaleLike = ['f', 'female'];
    if (val && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_ramda__["contains"])(val.toString().trim().toLowerCase(), maleLike)) {
        return "M";
    }
    if (val && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_ramda__["contains"])(val.toString().trim().toLowerCase(), femaleLike)) {
        return "F";
    }
    return "U";
};

/*
    HAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHA
 */
const cleanData = data => {
    return JSON.parse(data).map(datum => {
        const {
            hpoTerms,
            mother,
            father,
            proband,
            focused,
            externalIDHref,
            sex,
            externalId,
            disorders,
            gender,
            id
        } = datum;
        return {
            proband: cleanBooleanField(proband),
            focused: cleanBooleanField(focused),
            hpoTerms: hpoTerms,
            mother: mother,
            father: father,
            sex: cleanGender(sex),
            externalIDHref: externalIDHref,
            externalId: externalId,
            disorders: disorders,
            gender: cleanGender(gender),
            id: id
        };
    });
};

class ViewerPedigree {
    constructor(args) {
        var me = this;
        //this.DEBUG_MODE = true;
        window.editor = this;

        const data = cleanData(args.data); // hahahaha

        // initialize main data structure which holds the graph structure
        this._graphModel = __WEBPACK_IMPORTED_MODULE_2__dynamicGraph__["a" /* DynamicPositionedGraph */].makeEmpty(ViewerPedigree.attributes.layoutRelativePersonWidth, ViewerPedigree.attributes.layoutRelativeOtherWidth);

        //initialize the elements of the app
        this._workspace = new __WEBPACK_IMPORTED_MODULE_3__viewerWorkspace__["a" /* ViewerWorkspace */]();
        this._disorderLegend = new __WEBPACK_IMPORTED_MODULE_5__disorderLegend__["a" /* DisorderLegend */]();
        this._geneLegend = new __WEBPACK_IMPORTED_MODULE_7__geneLegend__["a" /* GeneLegend */]();
        this._hpoLegend = new __WEBPACK_IMPORTED_MODULE_6__hpoLegend__["a" /* HPOLegend */]();

        this._view = new __WEBPACK_IMPORTED_MODULE_4__view__["a" /* View */]();

        this._controller = new __WEBPACK_IMPORTED_MODULE_9__controller__["a" /* Controller */]();
        this._actionStack = new __WEBPACK_IMPORTED_MODULE_10__undoRedo__["a" /* ActionStack */]();
        this._saveLoadEngine = new __WEBPACK_IMPORTED_MODULE_8__viewerSaveLoadEngine__["a" /* ViewerSaveLoadEngine */](args.pedigreeDataUrl);
        const probandData = data.filter(node => isTruthy(node.proband))[0] || false;
        if (probandData) {
            this._probandData = probandData;
        }

        me._saveLoadEngine.createGraphFromImportData(JSON.stringify(data), args.type, {});
    }
    /**
     * Returns the graph node with the corresponding nodeID
     * @method getNode
     * @param {Number} nodeID The id of the desired node
     * @return {AbstractNode} the node whose id is nodeID
     */
    getNode(nodeID) {
        return this.getView().getNode(nodeID);
    }

    /**
     * @method getView
     * @return {View} (responsible for managing graphical representations of nodes and interactive elements)
     */
    getView() {
        return this._view;
    }

    /**
     * @method getVersionUpdater
     * @return {VersionUpdater}
     */
    getVersionUpdater() {
        return this._versionUpdater;
    }

    /**
     * @method getGraph
     * @return {DynamicPositionedGraph} (data model: responsible for managing nodes and their positions)
     */
    getGraph() {
        return this._graphModel;
    }

    /**
     * @method getController
     * @return {Controller} (responsible for managing user input and corresponding data changes)
     */
    getController() {
        return this._controller;
    }

    /**
     * @method getActionStack
     * @return {ActionStack} (responsible for undoing and redoing actions)
     */
    getActionStack() {
        return this._actionStack;
    }

    /**
     * @method getOkCancelDialogue
     * @return {OkCancelDialogue} (responsible for displaying ok/cancel prompts)
     */
    getOkCancelDialogue() {
        return this._okCancelDialogue;
    }

    /**
     * @method getNodetypeSelectionBubble
     * @return {NodetypeSelectionBubble} (floating window with initialization options for new nodes)
     */
    getNodetypeSelectionBubble() {
        return this._nodetypeSelectionBubble;
    }

    /**
     * @method getSiblingSelectionBubble
     * @return {NodetypeSelectionBubble} (floating window with initialization options for new sibling nodes)
     */
    getSiblingSelectionBubble() {
        return this._siblingSelectionBubble;
    }

    /**
     * @method getWorkspace
     * @return {Workspace}
     */
    getWorkspace() {
        return this._workspace;
    }

    /**
     * @method getDisorderLegend
     * @return {Legend} Responsible for managing and displaying the disorder legend
     */
    getDisorderLegend() {
        return this._disorderLegend;
    }

    /**
     * @method getHPOLegend
     * @return {Legend} Responsible for managing and displaying the phenotype/HPO legend
     */
    getHPOLegend() {
        return this._hpoLegend;
    }

    /**
     * @method getGeneLegend
     * @return {Legend} Responsible for managing and displaying the candidate genes legend
     */
    getGeneLegend() {
        return this._geneLegend;
    }

    /**
     * @method getPaper
     * @return {Workspace.paper} Raphael paper element
     */
    getPaper() {
        return this.getWorkspace().getPaper();
    }

    /**
     * @method isReadOnlyMode
     * @return {Boolean} True iff pedigree drawn should be read only with no handles
     *                   (read-only mode is used for IE8 as well as for template display and
     *                   print and export versions).
     */
    isReadOnlyMode() {
        return true;
    }

    isUnsupportedBrowser() {
        // http://voormedia.com/blog/2012/10/displaying-and-detecting-support-for-svg-images
        if (!document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1")) {
            // implies unpredictable behavior when using handles & interactive elements,
            // and most likely extremely slow on any CPU
            return true;
        }
        // http://kangax.github.io/es5-compat-table/
        if (!window.JSON) {
            // no built-in JSON parser - can't proceed in any way; note that this also implies
            // no support for some other functions such as parsing XML.
            //
            // TODO: include free third-party JSON parser and replace XML with JSON when loading data;
            //       (e.g. https://github.com/douglascrockford/JSON-js)
            //
            //       => at that point all browsers which suport SVG but are treated as unsupported
            //          should theoreticaly start working (FF 3.0, Safari 3 & Opera 9/10 - need to test).
            //          IE7 does not support SVG and JSON and is completely out of the running;
            console.warn("Your browser is not supported and is unable to load and display any pedigrees.\n\n" + "Suported browsers include Internet Explorer version 9 and higher, Safari version 4 and higher, " + "Firefox version 3.6 and higher, Opera version 10.5 and higher, any version of Chrome and most " + "other modern browsers (including mobile). IE8 is able to display pedigrees in read-only mode.");
            window.stop && window.stop();
            return true;
        }
        return false;
    }

    /**
     * @method getSaveLoadEngine
     * @return {SaveLoadEngine} Engine responsible for saving and loading operations
     */
    getSaveLoadEngine() {
        return this._saveLoadEngine;
    }

    /**
     * @method getProbandDataFromPhenotips
     * @return {firstName: "...", lastName: "..."}
     */
    getProbandDataFromPhenotips() {
        return this._probandData;
    }

    /**
     * @method getTemplateSelector
     * @return {TemplateSelector}
     */
    getTemplateSelector() {
        return this._templateSelector;
    }

    /**
     * @method getImportSelector
     * @return {ImportSelector}
     */
    getImportSelector() {
        return this._importSelector;
    }

    /**
     * @method getExportSelector
     * @return {ExportSelector}
     */
    getExportSelector() {
        return this._exportSelector;
    }

    /**
     * Returns true if any of the node menus are visible
     * (since some UI interactions should be disabled while menu is active - e.g. mouse wheel zoom)
     *
     * @method isAnyMenuVisible
     */
    isAnyMenuVisible() {
        return false;
    }

    /**
     * Creates the context menu for Person nodes
     *
     * @method generateNodeMenu
     * @return {NodeMenu}
     */
    generateNodeMenu() {
        if (this.isReadOnlyMode()) return null;
        var _this = this;
        return new NodeMenu([{
            'name': 'identifier',
            'label': '',
            'type': 'hidden',
            'tab': 'Personal'
        }, {
            'name': 'gender',
            'label': 'Gender',
            'type': 'radio',
            'tab': 'Personal',
            'columns': 3,
            'values': [{
                'actual': 'M',
                'displayed': 'Male'
            }, {
                'actual': 'F',
                'displayed': 'Female'
            }, {
                'actual': 'U',
                'displayed': 'Unknown'
            }],
            'default': 'U',
            'function': 'setGender'
        }, {
            'name': 'first_name',
            'label': 'First name',
            'type': 'text',
            'tab': 'Personal',
            'function': 'setFirstName'
        }, {
            'name': 'last_name',
            'label': 'Last name',
            'type': 'text',
            'tab': 'Personal',
            'function': 'setLastName'
        }, {
            'name': 'last_name_birth',
            'label': 'Last name at birth',
            'type': 'text',
            'tab': 'Personal',
            'function': 'setLastNameAtBirth'
        }, {
            'name': 'external_id',
            'label': 'External ID',
            'type': 'text',
            'tab': 'Personal',
            'function': 'setExternalID'
        }, {
            'name': 'ethnicity',
            'label': 'Ethnicities',
            'type': 'ethnicity-picker',
            'tab': 'Personal',
            'function': 'setEthnicities'
        }, {
            'name': 'carrier',
            'label': 'Carrier status',
            'type': 'radio',
            'tab': 'Clinical',
            'values': [{
                'actual': '',
                'displayed': 'Not affected'
            }, {
                'actual': 'carrier',
                'displayed': 'Carrier'
            },
            //{ 'actual' : 'obligate', 'displayed' : 'Obligate carrier' },
            {
                'actual': 'affected',
                'displayed': 'Affected'
            }, {
                'actual': 'presymptomatic',
                'displayed': 'Pre-symptomatic'
            }],
            'default': '',
            'function': 'setCarrierStatus'
        }, {
            'name': 'evaluated',
            'label': 'Documented evaluation',
            'type': 'checkbox',
            'tab': 'Clinical',
            'function': 'setEvaluated'
        }, {
            'name': 'disorders',
            'label': 'Known disorders of this individual',
            'type': 'disease-picker',
            'tab': 'Clinical',
            'function': 'setDisorders'
        }, {
            'name': 'hpo_positive',
            'label': 'Clinical symptoms: observed phenotypes',
            'type': 'hpo-picker',
            'tab': 'Clinical',
            'function': 'setHPO'
        }, {
            'name': 'candidate_genes',
            'label': 'Genotype information: candidate genes',
            'type': 'gene-picker',
            'tab': 'Clinical',
            'function': 'setGenes'
        }, {
            'name': 'date_of_birth',
            'label': 'Date of birth',
            'type': 'date-picker',
            'tab': 'Personal',
            'format': 'dd/MM/yyyy',
            'function': 'setBirthDate'
        }, {
            'name': 'date_of_death',
            'label': 'Date of death',
            'type': 'date-picker',
            'tab': 'Personal',
            'format': 'dd/MM/yyyy',
            'function': 'setDeathDate'
        }, {
            'name': 'gestation_age',
            'label': 'Gestation age',
            'type': 'select',
            'tab': 'Personal',
            'range': {
                'start': 0,
                'end': 50,
                'item': ['week', 'weeks']
            },
            'nullValue': true,
            'function': 'setGestationAge'
        }, {
            'name': 'state',
            'label': 'Individual is',
            'type': 'radio',
            'tab': 'Personal',
            'columns': 3,
            'values': [{
                'actual': 'alive',
                'displayed': 'Alive'
            }, {
                'actual': 'stillborn',
                'displayed': 'Stillborn'
            }, {
                'actual': 'deceased',
                'displayed': 'Deceased'
            }, {
                'actual': 'miscarriage',
                'displayed': 'Miscarriage'
            }, {
                'actual': 'unborn',
                'displayed': 'Unborn'
            }, {
                'actual': 'aborted',
                'displayed': 'Aborted'
            }],
            'default': 'alive',
            'function': 'setLifeStatus'
        }, {
            'label': 'Heredity options',
            'name': 'childlessSelect',
            'values': [{
                'actual': 'none',
                displayed: 'None'
            }, {
                'actual': 'childless',
                displayed: 'Childless'
            }, {
                'actual': 'infertile',
                displayed: 'Infertile'
            }],
            'type': 'select',
            'tab': 'Personal',
            'function': 'setChildlessStatus'
        }, {
            'name': 'childlessText',
            'type': 'text',
            'dependency': 'childlessSelect != none',
            'tip': 'Reason',
            'tab': 'Personal',
            'function': 'setChildlessReason'
        }, {
            'name': 'adopted',
            'label': 'Adopted in',
            'type': 'checkbox',
            'tab': 'Personal',
            'function': 'setAdopted'
        }, {
            'name': 'monozygotic',
            'label': 'Monozygotic twin',
            'type': 'checkbox',
            'tab': 'Personal',
            'function': 'setMonozygotic'
        }, {
            'name': 'nocontact',
            'label': 'Not in contact with proband',
            'type': 'checkbox',
            'tab': 'Personal',
            'function': 'setLostContact'
        }, {
            'name': 'placeholder',
            'label': 'Placeholder node',
            'type': 'checkbox',
            'tab': 'Personal',
            'function': 'makePlaceholder'
        }, {
            'name': 'comments',
            'label': 'Comments',
            'type': 'textarea',
            'tab': 'Clinical',
            'rows': 2,
            'function': 'setComments'
        }], ["Personal", "Clinical"]);
    }

    /**
     * @method getNodeMenu
     * @return {NodeMenu} Context menu for nodes
     */
    getNodeMenu() {
        return this._nodeMenu;
    }

    /**
     * Creates the context menu for PersonGroup nodes
     *
     * @method generateNodeGroupMenu
     * @return {NodeMenu}
     */
    generateNodeGroupMenu() {
        if (this.isReadOnlyMode()) return null;
        var _this = this;
        return new NodeMenu([{
            'name': 'identifier',
            'label': '',
            'type': 'hidden'
        }, {
            'name': 'gender',
            'label': 'Gender',
            'type': 'radio',
            'columns': 3,
            'values': [{
                'actual': 'M',
                'displayed': 'Male'
            }, {
                'actual': 'F',
                'displayed': 'Female'
            }, {
                'actual': 'U',
                'displayed': 'Unknown'
            }],
            'default': 'U',
            'function': 'setGender'
        }, {
            'name': 'numInGroup',
            'label': 'Number of persons in this group',
            'type': 'select',
            'values': [{
                'actual': 1,
                displayed: 'N'
            }, {
                'actual': 2,
                displayed: '2'
            }, {
                'actual': 3,
                displayed: '3'
            }, {
                'actual': 4,
                displayed: '4'
            }, {
                'actual': 5,
                displayed: '5'
            }, {
                'actual': 6,
                displayed: '6'
            }, {
                'actual': 7,
                displayed: '7'
            }, {
                'actual': 8,
                displayed: '8'
            }, {
                'actual': 9,
                displayed: '9'
            }],
            'function': 'setNumPersons'
        }, {
            'name': 'external_ids',
            'label': 'External ID(s)',
            'type': 'text',
            'function': 'setExternalID'
        }, {
            'name': 'ethnicity',
            'label': 'Ethnicities<br>(common to all individuals in the group)',
            'type': 'ethnicity-picker',
            'function': 'setEthnicities'
        }, {
            'name': 'disorders',
            'label': 'Known disorders<br>(common to all individuals in the group)',
            'type': 'disease-picker',
            'function': 'setDisorders'
        }, {
            'name': 'comments',
            'label': 'Comments',
            'type': 'textarea',
            'rows': 2,
            'function': 'setComments'
        }, {
            'name': 'state',
            'label': 'All individuals in the group are',
            'type': 'radio',
            'values': [{
                'actual': 'alive',
                'displayed': 'Alive'
            }, {
                'actual': 'aborted',
                'displayed': 'Aborted'
            }, {
                'actual': 'deceased',
                'displayed': 'Deceased'
            }, {
                'actual': 'miscarriage',
                'displayed': 'Miscarriage'
            }],
            'default': 'alive',
            'function': 'setLifeStatus'
        }, {
            'name': 'evaluatedGrp',
            'label': 'Documented evaluation',
            'type': 'checkbox',
            'function': 'setEvaluated'
        }, {
            'name': 'adopted',
            'label': 'Adopted in',
            'type': 'checkbox',
            'function': 'setAdopted'
        }], []);
    }

    /**
     * @method getNodeGroupMenu
     * @return {NodeMenu} Context menu for nodes
     */
    getNodeGroupMenu() {
        return this._nodeGroupMenu;
    }

    /**
     * Creates the context menu for Partnership nodes
     *
     * @method generatePartnershipMenu
     * @return {NodeMenu}
     */
    generatePartnershipMenu() {
        if (this.isReadOnlyMode()) return null;
        var _this = this;
        return new NodeMenu([{
            'label': 'Heredity options',
            'name': 'childlessSelect',
            'values': [{
                'actual': 'none',
                displayed: 'None'
            }, {
                'actual': 'childless',
                displayed: 'Childless'
            }, {
                'actual': 'infertile',
                displayed: 'Infertile'
            }],
            'type': 'select',
            'function': 'setChildlessStatus'
        }, {
            'name': 'childlessText',
            'type': 'text',
            'dependency': 'childlessSelect != none',
            'tip': 'Reason',
            'function': 'setChildlessReason'
        }, {
            'name': 'consangr',
            'label': 'Consanguinity of this relationship',
            'type': 'radio',
            'values': [{
                'actual': 'A',
                'displayed': 'Automatic'
            }, {
                'actual': 'Y',
                'displayed': 'Yes'
            }, {
                'actual': 'N',
                'displayed': 'No'
            }],
            'default': 'A',
            'function': 'setConsanguinity'
        }, {
            'name': 'broken',
            'label': 'Separated',
            'type': 'checkbox',
            'function': 'setBrokenStatus'
        }], [], "relationship-menu");
    }

    /**
     * @method getPartnershipMenu
     * @return {NodeMenu} The context menu for Partnership nodes
     */
    getPartnershipMenu() {
        return this._partnershipMenu;
    }

    /**
     * @method convertGraphCoordToCanvasCoord
     * @return [x,y] coordinates on the canvas
     */
    convertGraphCoordToCanvasCoord(x, y) {
        var scale = __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].layoutScale;
        return {
            x: x * scale.xscale + 100,
            y: y * scale.yscale
        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = ViewerPedigree;
;

var editor; // ????

//attributes for graphical elements in the editor
ViewerPedigree.attributes = __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */];

/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_prototype__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_prototype___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prototype__);


String.prototype.parseColor = function () {
    var b;
    var a = "#";
    if (this.slice(0, 4) == "rgb(") {
        var c = this.slice(4, this.length - 1).split(",");
        b = 0;
        do {
            a += parseInt(c[b]).toColorPart();
        } while (++b < 3);
    } else {
        if (this.slice(0, 1) == "#") {
            if (this.length == 4) {
                for (b = 1; b < 4; b++) {
                    a += (this.charAt(b) + this.charAt(b)).toLowerCase();
                }
            }
            if (this.length == 7) {
                a = this.toLowerCase();
            }
        }
    }
    return a.length == 7 ? a : arguments[0] || this;
};
Element.collectTextNodes = function (a) {
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$A"])($(a).childNodes).collect(function (b) {
        return b.nodeType == 3 ? b.nodeValue : b.hasChildNodes() ? Element.collectTextNodes(b) : "";
    }).flatten().join("");
};
Element.collectTextNodesIgnoreClass = function (a, b) {
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$A"])($(a).childNodes).collect(function (c) {
        return c.nodeType == 3 ? c.nodeValue : c.hasChildNodes() && !Element.hasClassName(c, b) ? Element.collectTextNodesIgnoreClass(c, b) : "";
    }).flatten().join("");
};
Element.setContentZoom = function (a, b) {
    a = $(a);
    a.setStyle({
        fontSize: b / 100 + "em"
    });
    if (__WEBPACK_IMPORTED_MODULE_0_prototype__["Prototype"].Browser.WebKit) {
        window.scrollBy(0, 0);
    }
    return a;
};
Element.getInlineOpacity = function (a) {
    return $(a).style.opacity || "";
};
Element.forceRerendering = function (a) {
    try {
        a = $(a);
        var c = document.createTextNode(" ");
        a.appendChild(c);
        a.removeChild(c);
    } catch (b) {}
};
var Effect = {
    _elementDoesNotExistError: {
        name: "ElementDoesNotExistError",
        message: "The specified DOM element does not exist, but is required for this effect to operate"
    },
    Transitions: {
        linear: __WEBPACK_IMPORTED_MODULE_0_prototype__["Prototype"].K,
        sinoidal: function (a) {
            return -Math.cos(a * Math.PI) / 2 + 0.5;
        },
        reverse: function (a) {
            return 1 - a;
        },
        flicker: function (a) {
            a = -Math.cos(a * Math.PI) / 4 + 0.75 + Math.random() / 4;
            return a > 1 ? 1 : a;
        },
        wobble: function (a) {
            return -Math.cos(a * Math.PI * (9 * a)) / 2 + 0.5;
        },
        pulse: function (b, a) {
            return -Math.cos(b * ((a || 5) - 0.5) * 2 * Math.PI) / 2 + 0.5;
        },
        spring: function (a) {
            return 1 - Math.cos(a * 4.5 * Math.PI) * Math.exp(-a * 6);
        },
        none: function (a) {
            return 0;
        },
        full: function (a) {
            return 1;
        }
    },
    DefaultOptions: {
        duration: 1,
        fps: 100,
        sync: false,
        from: 0,
        to: 1,
        delay: 0,
        queue: "parallel"
    },
    tagifyText: function (a) {
        var b = "position:relative";
        if (__WEBPACK_IMPORTED_MODULE_0_prototype__["Prototype"].Browser.IE) {
            b += ";zoom:1";
        }
        a = $(a);
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$A"])(a.childNodes).each(function (c) {
            if (c.nodeType == 3) {
                c.nodeValue.toArray().each(function (d) {
                    a.insertBefore(new Element("span", {
                        style: b
                    }).update(d == " " ? String.fromCharCode(160) : d), c);
                });
                Element.remove(c);
            }
        });
    },
    multiple: function (b, c) {
        var e;
        if ((typeof b == "object" || Object.isFunction(b)) && b.length) {
            e = b;
        } else {
            e = $(b).childNodes;
        }
        var a = Object.extend({
            speed: 0.1,
            delay: 0
        }, arguments[2] || {});
        var d = a.delay;
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$A"])(e).each(function (g, f) {
            new c(g, Object.extend(a, {
                delay: f * a.speed + d
            }));
        });
    },
    PAIRS: {
        slide: ["SlideDown", "SlideUp"],
        blind: ["BlindDown", "BlindUp"],
        appear: ["Appear", "Fade"]
    },
    toggle: function (b, c, a) {
        b = $(b);
        c = (c || "appear").toLowerCase();
        return Effect[Effect.PAIRS[c][b.visible() ? 1 : 0]](b, Object.extend({
            queue: {
                position: "end",
                scope: b.id || "global",
                limit: 1
            }
        }, a || {}));
    }
};
Effect.DefaultOptions.transition = Effect.Transitions.sinoidal;
Effect.ScopedQueue = __WEBPACK_IMPORTED_MODULE_0_prototype__["Class"].create(__WEBPACK_IMPORTED_MODULE_0_prototype__["Enumerable"], {
    initialize: function () {
        this.effects = [];
        this.interval = null;
    },
    _each: function (a) {
        this.effects._each(a);
    },
    add: function (b) {
        var c = new Date().getTime();
        var a = Object.isString(b.options.queue) ? b.options.queue : b.options.queue.position;
        switch (a) {
            case "front":
                this.effects.findAll(function (d) {
                    return d.state == "idle";
                }).each(function (d) {
                    d.startOn += b.finishOn;
                    d.finishOn += b.finishOn;
                });
                break;
            case "with-last":
                c = this.effects.pluck("startOn").max() || c;
                break;
            case "end":
                c = this.effects.pluck("finishOn").max() || c;
                break;
        }
        b.startOn += c;
        b.finishOn += c;
        if (!b.options.queue.limit || this.effects.length < b.options.queue.limit) {
            this.effects.push(b);
        }
        if (!this.interval) {
            this.interval = setInterval(this.loop.bind(this), 15);
        }
    },
    remove: function (a) {
        this.effects = this.effects.reject(function (b) {
            return b == a;
        });
        if (this.effects.length == 0) {
            clearInterval(this.interval);
            this.interval = null;
        }
    },
    loop: function () {
        var c = new Date().getTime();
        for (var b = 0, a = this.effects.length; b < a; b++) {
            this.effects[b] && this.effects[b].loop(c);
        }
    }
});
Effect.Queues = {
    instances: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$H"])(),
    get: function (a) {
        if (!Object.isString(a)) {
            return a;
        }
        return this.instances.get(a) || this.instances.set(a, new Effect.ScopedQueue());
    }
};
Effect.Queue = Effect.Queues.get("global");
Effect.Base = __WEBPACK_IMPORTED_MODULE_0_prototype__["Class"].create({
    position: null,
    start: function (a) {
        if (a && a.transition === false) {
            a.transition = Effect.Transitions.linear;
        }
        this.options = Object.extend(Object.extend({}, Effect.DefaultOptions), a || {});
        this.currentFrame = 0;
        this.state = "idle";
        this.startOn = this.options.delay * 1000;
        this.finishOn = this.startOn + this.options.duration * 1000;
        this.fromToDelta = this.options.to - this.options.from;
        this.totalTime = this.finishOn - this.startOn;
        this.totalFrames = this.options.fps * this.options.duration;
        this.render = function () {
            function b(d, c) {
                if (d.options[c + "Internal"]) {
                    d.options[c + "Internal"](d);
                }
                if (d.options[c]) {
                    d.options[c](d);
                }
            }
            return function (c) {
                if (this.state === "idle") {
                    this.state = "running";
                    b(this, "beforeSetup");
                    if (this.setup) {
                        this.setup();
                    }
                    b(this, "afterSetup");
                }
                if (this.state === "running") {
                    c = this.options.transition(c) * this.fromToDelta + this.options.from;
                    this.position = c;
                    b(this, "beforeUpdate");
                    if (this.update) {
                        this.update(c);
                    }
                    b(this, "afterUpdate");
                }
            };
        }();
        this.event("beforeStart");
        if (!this.options.sync) {
            Effect.Queues.get(Object.isString(this.options.queue) ? "global" : this.options.queue.scope).add(this);
        }
    },
    loop: function (c) {
        if (c >= this.startOn) {
            if (c >= this.finishOn) {
                this.render(1);
                this.cancel();
                this.event("beforeFinish");
                if (this.finish) {
                    this.finish();
                }
                this.event("afterFinish");
                return;
            }
            var b = (c - this.startOn) / this.totalTime,
                a = (b * this.totalFrames).round();
            if (a > this.currentFrame) {
                this.render(b);
                this.currentFrame = a;
            }
        }
    },
    cancel: function () {
        if (!this.options.sync) {
            Effect.Queues.get(Object.isString(this.options.queue) ? "global" : this.options.queue.scope).remove(this);
        }
        this.state = "finished";
    },
    event: function (a) {
        if (this.options[a + "Internal"]) {
            this.options[a + "Internal"](this);
        }
        if (this.options[a]) {
            this.options[a](this);
        }
    },
    inspect: function () {
        var a = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$H"])();
        for (var property in this) {
            if (!Object.isFunction(this[property])) {
                a.set(property, this[property]);
            }
        }
        return "#<Effect:" + a.inspect() + ",options:" + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$H"])(this.options).inspect() + ">";
    }
});
Effect.Parallel = __WEBPACK_IMPORTED_MODULE_0_prototype__["Class"].create(Effect.Base, {
    initialize: function (a) {
        this.effects = a || [];
        this.start(arguments[1]);
    },
    update: function (a) {
        this.effects.invoke("render", a);
    },
    finish: function (a) {
        this.effects.each(function (b) {
            b.render(1);
            b.cancel();
            b.event("beforeFinish");
            if (b.finish) {
                b.finish(a);
            }
            b.event("afterFinish");
        });
    }
});
Effect.Tween = __WEBPACK_IMPORTED_MODULE_0_prototype__["Class"].create(Effect.Base, {
    initialize: function (c, f, e) {
        c = Object.isString(c) ? $(c) : c;
        var b = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$A"])(arguments),
            d = b.last(),
            a = b.length == 5 ? b[3] : null;
        this.method = Object.isFunction(d) ? d.bind(c) : Object.isFunction(c[d]) ? c[d].bind(c) : function (g) {
            c[d] = g;
        };
        this.start(Object.extend({
            from: f,
            to: e
        }, a || {}));
    },
    update: function (a) {
        this.method(a);
    }
});
Effect.Event = __WEBPACK_IMPORTED_MODULE_0_prototype__["Class"].create(Effect.Base, {
    initialize: function () {
        this.start(Object.extend({
            duration: 0
        }, arguments[0] || {}));
    },
    update: __WEBPACK_IMPORTED_MODULE_0_prototype__["Prototype"].emptyFunction
});
Effect.Opacity = __WEBPACK_IMPORTED_MODULE_0_prototype__["Class"].create(Effect.Base, {
    initialize: function (b) {
        this.element = $(b);
        if (!this.element) {
            throw Effect._elementDoesNotExistError;
        }
        if (__WEBPACK_IMPORTED_MODULE_0_prototype__["Prototype"].Browser.IE && !this.element.currentStyle.hasLayout) {
            this.element.setStyle({
                zoom: 1
            });
        }
        var a = Object.extend({
            from: this.element.getOpacity() || 0,
            to: 1
        }, arguments[1] || {});
        a.from = parseFloat(a.from);
        a.to = parseFloat(a.to);
        this.start(a);
    },
    update: function (a) {
        this.element.setOpacity(a);
    }
});
Effect.Move = __WEBPACK_IMPORTED_MODULE_0_prototype__["Class"].create(Effect.Base, {
    initialize: function (b) {
        this.element = $(b);
        if (!this.element) {
            throw Effect._elementDoesNotExistError;
        }
        var a = Object.extend({
            x: 0,
            y: 0,
            mode: "relative"
        }, arguments[1] || {});
        this.start(a);
    },
    setup: function () {
        this.element.makePositioned();
        this.originalLeft = parseFloat(this.element.getStyle("left") || "0");
        this.originalTop = parseFloat(this.element.getStyle("top") || "0");
        if (this.options.mode == "absolute") {
            this.options.x = this.options.x - this.originalLeft;
            this.options.y = this.options.y - this.originalTop;
        }
    },
    update: function (a) {
        this.element.setStyle({
            left: (this.options.x * a + this.originalLeft).round() + "px",
            top: (this.options.y * a + this.originalTop).round() + "px"
        });
    }
});
Effect.MoveBy = function (b, a, c) {
    return new Effect.Move(b, Object.extend({
        x: c,
        y: a
    }, arguments[3] || {}));
};
Effect.Scale = __WEBPACK_IMPORTED_MODULE_0_prototype__["Class"].create(Effect.Base, {
    initialize: function (b, c) {
        this.element = $(b);
        if (!this.element) {
            throw Effect._elementDoesNotExistError;
        }
        var a = Object.extend({
            scaleX: true,
            scaleY: true,
            scaleContent: true,
            scaleFromCenter: false,
            scaleMode: "box",
            scaleFrom: 100,
            scaleTo: c
        }, arguments[2] || {});
        this.start(a);
    },
    setup: function () {
        this.restoreAfterFinish = this.options.restoreAfterFinish || false;
        this.elementPositioning = this.element.getStyle("position");
        this.originalStyle = {};
        ["top", "left", "width", "height", "fontSize"].each(function (b) {
            this.originalStyle[b] = this.element.style[b];
        }.bind(this));
        this.originalTop = this.element.offsetTop;
        this.originalLeft = this.element.offsetLeft;
        var a = this.element.getStyle("font-size") || "100%";
        ["em", "px", "%", "pt"].each(function (b) {
            if (a.indexOf(b) > 0) {
                this.fontSize = parseFloat(a);
                this.fontSizeType = b;
            }
        }.bind(this));
        this.factor = (this.options.scaleTo - this.options.scaleFrom) / 100;
        this.dims = null;
        if (this.options.scaleMode == "box") {
            this.dims = [this.element.offsetHeight, this.element.offsetWidth];
        }
        if (/^content/.test(this.options.scaleMode)) {
            this.dims = [this.element.scrollHeight, this.element.scrollWidth];
        }
        if (!this.dims) {
            this.dims = [this.options.scaleMode.originalHeight, this.options.scaleMode.originalWidth];
        }
    },
    update: function (a) {
        var b = this.options.scaleFrom / 100 + this.factor * a;
        if (this.options.scaleContent && this.fontSize) {
            this.element.setStyle({
                fontSize: this.fontSize * b + this.fontSizeType
            });
        }
        this.setDimensions(this.dims[0] * b, this.dims[1] * b);
    },
    finish: function (a) {
        if (this.restoreAfterFinish) {
            this.element.setStyle(this.originalStyle);
        }
    },
    setDimensions: function (a, e) {
        var f = {};
        if (this.options.scaleX) {
            f.width = e.round() + "px";
        }
        if (this.options.scaleY) {
            f.height = a.round() + "px";
        }
        if (this.options.scaleFromCenter) {
            var c = (a - this.dims[0]) / 2;
            var b = (e - this.dims[1]) / 2;
            if (this.elementPositioning == "absolute") {
                if (this.options.scaleY) {
                    f.top = this.originalTop - c + "px";
                }
                if (this.options.scaleX) {
                    f.left = this.originalLeft - b + "px";
                }
            } else {
                if (this.options.scaleY) {
                    f.top = -c + "px";
                }
                if (this.options.scaleX) {
                    f.left = -b + "px";
                }
            }
        }
        this.element.setStyle(f);
    }
});
Effect.Highlight = __WEBPACK_IMPORTED_MODULE_0_prototype__["Class"].create(Effect.Base, {
    initialize: function (b) {
        this.element = $(b);
        if (!this.element) {
            throw Effect._elementDoesNotExistError;
        }
        var a = Object.extend({
            startcolor: "#ffff99"
        }, arguments[1] || {});
        this.start(a);
    },
    setup: function () {
        if (this.element.getStyle("display") == "none") {
            this.cancel();
            return;
        }
        this.oldStyle = {};
        if (!this.options.keepBackgroundImage) {
            this.oldStyle.backgroundImage = this.element.getStyle("background-image");
            this.element.setStyle({
                backgroundImage: "none"
            });
        }
        if (!this.options.endcolor) {
            this.options.endcolor = this.element.getStyle("background-color").parseColor("#ffffff");
        }
        if (!this.options.restorecolor) {
            this.options.restorecolor = this.element.getStyle("background-color");
        }
        this._base = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$R"])(0, 2).map(function (a) {
            return parseInt(this.options.startcolor.slice(a * 2 + 1, a * 2 + 3), 16);
        }.bind(this));
        this._delta = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$R"])(0, 2).map(function (a) {
            return parseInt(this.options.endcolor.slice(a * 2 + 1, a * 2 + 3), 16) - this._base[a];
        }.bind(this));
    },
    update: function (a) {
        this.element.setStyle({
            backgroundColor: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$R"])(0, 2).inject("#", function (b, c, d) {
                return b + (this._base[d] + this._delta[d] * a).round().toColorPart();
            }.bind(this))
        });
    },
    finish: function () {
        this.element.setStyle(Object.extend(this.oldStyle, {
            backgroundColor: this.options.restorecolor
        }));
    }
});
Effect.ScrollTo = function (c) {
    var b = arguments[1] || {},
        a = document.viewport.getScrollOffsets(),
        d = $(c).cumulativeOffset();
    if (b.offset) {
        d[1] += b.offset;
    }
    return new Effect.Tween(null, a.top, d[1], b, function (e) {
        scrollTo(a.left, e.round());
    });
};
Effect.Fade = function (c) {
    c = $(c);
    var a = c.getInlineOpacity();
    var b = Object.extend({
        from: c.getOpacity() || 1,
        to: 0,
        afterFinishInternal: function (d) {
            if (d.options.to != 0) {
                return;
            }
            d.element.hide().setStyle({
                opacity: a
            });
        }
    }, arguments[1] || {});
    return new Effect.Opacity(c, b);
};
Effect.Appear = function (b) {
    b = $(b);
    var a = Object.extend({
        from: b.getStyle("display") == "none" ? 0 : b.getOpacity() || 0,
        to: 1,
        afterFinishInternal: function (c) {
            c.element.forceRerendering();
        },
        beforeSetup: function (c) {
            c.element.setOpacity(c.options.from).show();
        }
    }, arguments[1] || {});
    return new Effect.Opacity(b, a);
};
Effect.Puff = function (b) {
    b = $(b);
    var a = {
        opacity: b.getInlineOpacity(),
        position: b.getStyle("position"),
        top: b.style.top,
        left: b.style.left,
        width: b.style.width,
        height: b.style.height
    };
    return new Effect.Parallel([new Effect.Scale(b, 200, {
        sync: true,
        scaleFromCenter: true,
        scaleContent: true,
        restoreAfterFinish: true
    }), new Effect.Opacity(b, {
        sync: true,
        to: 0
    })], Object.extend({
        duration: 1,
        beforeSetupInternal: function (c) {
            Position.absolutize(c.effects[0].element);
        },
        afterFinishInternal: function (c) {
            c.effects[0].element.hide().setStyle(a);
        }
    }, arguments[1] || {}));
};
Effect.BlindUp = function (a) {
    a = $(a);
    a.makeClipping();
    return new Effect.Scale(a, 0, Object.extend({
        scaleContent: false,
        scaleX: false,
        restoreAfterFinish: true,
        afterFinishInternal: function (b) {
            b.element.hide().undoClipping();
        }
    }, arguments[1] || {}));
};
Effect.BlindDown = function (b) {
    b = $(b);
    var a = b.getDimensions();
    return new Effect.Scale(b, 100, Object.extend({
        scaleContent: false,
        scaleX: false,
        scaleFrom: 0,
        scaleMode: {
            originalHeight: a.height,
            originalWidth: a.width
        },
        restoreAfterFinish: true,
        afterSetup: function (c) {
            c.element.makeClipping().setStyle({
                height: "0px"
            }).show();
        },
        afterFinishInternal: function (c) {
            c.element.undoClipping();
        }
    }, arguments[1] || {}));
};
Effect.SwitchOff = function (b) {
    b = $(b);
    var a = b.getInlineOpacity();
    return new Effect.Appear(b, Object.extend({
        duration: 0.4,
        from: 0,
        transition: Effect.Transitions.flicker,
        afterFinishInternal: function (c) {
            new Effect.Scale(c.element, 1, {
                duration: 0.3,
                scaleFromCenter: true,
                scaleX: false,
                scaleContent: false,
                restoreAfterFinish: true,
                beforeSetup: function (d) {
                    d.element.makePositioned().makeClipping();
                },
                afterFinishInternal: function (d) {
                    d.element.hide().undoClipping().undoPositioned().setStyle({
                        opacity: a
                    });
                }
            });
        }
    }, arguments[1] || {}));
};
Effect.DropOut = function (b) {
    b = $(b);
    var a = {
        top: b.getStyle("top"),
        left: b.getStyle("left"),
        opacity: b.getInlineOpacity()
    };
    return new Effect.Parallel([new Effect.Move(b, {
        x: 0,
        y: 100,
        sync: true
    }), new Effect.Opacity(b, {
        sync: true,
        to: 0
    })], Object.extend({
        duration: 0.5,
        beforeSetup: function (c) {
            c.effects[0].element.makePositioned();
        },
        afterFinishInternal: function (c) {
            c.effects[0].element.hide().undoPositioned().setStyle(a);
        }
    }, arguments[1] || {}));
};
Effect.Shake = function (d) {
    d = $(d);
    var b = Object.extend({
        distance: 20,
        duration: 0.5
    }, arguments[1] || {});
    var e = parseFloat(b.distance);
    var c = parseFloat(b.duration) / 10;
    var a = {
        top: d.getStyle("top"),
        left: d.getStyle("left")
    };
    return new Effect.Move(d, {
        x: e,
        y: 0,
        duration: c,
        afterFinishInternal: function (f) {
            new Effect.Move(f.element, {
                x: -e * 2,
                y: 0,
                duration: c * 2,
                afterFinishInternal: function (g) {
                    new Effect.Move(g.element, {
                        x: e * 2,
                        y: 0,
                        duration: c * 2,
                        afterFinishInternal: function (h) {
                            new Effect.Move(h.element, {
                                x: -e * 2,
                                y: 0,
                                duration: c * 2,
                                afterFinishInternal: function (i) {
                                    new Effect.Move(i.element, {
                                        x: e * 2,
                                        y: 0,
                                        duration: c * 2,
                                        afterFinishInternal: function (j) {
                                            new Effect.Move(j.element, {
                                                x: -e,
                                                y: 0,
                                                duration: c,
                                                afterFinishInternal: function (k) {
                                                    k.element.undoPositioned().setStyle(a);
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                        }
                    });
                }
            });
        }
    });
};
Effect.SlideDown = function (c) {
    c = $(c).cleanWhitespace();
    var a = c.down().getStyle("bottom");
    var b = c.getDimensions();
    return new Effect.Scale(c, 100, Object.extend({
        scaleContent: false,
        scaleX: false,
        scaleFrom: window.opera ? 0 : 1,
        scaleMode: {
            originalHeight: b.height,
            originalWidth: b.width
        },
        restoreAfterFinish: true,
        afterSetup: function (d) {
            d.element.makePositioned();
            d.element.down().makePositioned();
            if (window.opera) {
                d.element.setStyle({
                    top: ""
                });
            }
            d.element.makeClipping().setStyle({
                height: "0px"
            }).show();
        },
        afterUpdateInternal: function (d) {
            d.element.down().setStyle({
                bottom: d.dims[0] - d.element.clientHeight + "px"
            });
        },
        afterFinishInternal: function (d) {
            d.element.undoClipping().undoPositioned();
            d.element.down().undoPositioned().setStyle({
                bottom: a
            });
        }
    }, arguments[1] || {}));
};
Effect.SlideUp = function (c) {
    c = $(c).cleanWhitespace();
    var a = c.down().getStyle("bottom");
    var b = c.getDimensions();
    return new Effect.Scale(c, window.opera ? 0 : 1, Object.extend({
        scaleContent: false,
        scaleX: false,
        // scaleMode: "box",
        scaleFrom: 100,
        scaleMode: {
            originalHeight: b.height,
            originalWidth: b.width
        },
        restoreAfterFinish: true,
        afterSetup: function (d) {
            d.element.makePositioned();
            d.element.down().makePositioned();
            if (window.opera) {
                d.element.setStyle({
                    top: ""
                });
            }
            d.element.makeClipping().show();
        },
        afterUpdateInternal: function (d) {
            d.element.down().setStyle({
                bottom: d.dims[0] - d.element.clientHeight + "px"
            });
        },
        afterFinishInternal: function (d) {
            d.element.hide().undoClipping().undoPositioned();
            d.element.down().undoPositioned().setStyle({
                bottom: a
            });
        }
    }, arguments[1] || {}));
};
Effect.Squish = function (a) {
    return new Effect.Scale(a, window.opera ? 1 : 0, {
        restoreAfterFinish: true,
        beforeSetup: function (b) {
            b.element.makeClipping();
        },
        afterFinishInternal: function (b) {
            b.element.hide().undoClipping();
        }
    });
};
Effect.Grow = function (c) {
    c = $(c);
    var b = Object.extend({
        direction: "center",
        moveTransition: Effect.Transitions.sinoidal,
        scaleTransition: Effect.Transitions.sinoidal,
        opacityTransition: Effect.Transitions.full
    }, arguments[1] || {});
    var a = {
        top: c.style.top,
        left: c.style.left,
        height: c.style.height,
        width: c.style.width,
        opacity: c.getInlineOpacity()
    };
    var g = c.getDimensions();
    var h, f;
    var e, d;
    switch (b.direction) {
        case "top-left":
            h = f = e = d = 0;
            break;
        case "top-right":
            h = g.width;
            f = d = 0;
            e = -g.width;
            break;
        case "bottom-left":
            h = e = 0;
            f = g.height;
            d = -g.height;
            break;
        case "bottom-right":
            h = g.width;
            f = g.height;
            e = -g.width;
            d = -g.height;
            break;
        case "center":
            h = g.width / 2;
            f = g.height / 2;
            e = -g.width / 2;
            d = -g.height / 2;
            break;
    }
    return new Effect.Move(c, {
        x: h,
        y: f,
        duration: 0.01,
        beforeSetup: function (i) {
            i.element.hide().makeClipping().makePositioned();
        },
        afterFinishInternal: function (i) {
            new Effect.Parallel([new Effect.Opacity(i.element, {
                sync: true,
                to: 1,
                from: 0,
                transition: b.opacityTransition
            }), new Effect.Move(i.element, {
                x: e,
                y: d,
                sync: true,
                transition: b.moveTransition
            }), new Effect.Scale(i.element, 100, {
                scaleMode: {
                    originalHeight: g.height,
                    originalWidth: g.width
                },
                sync: true,
                scaleFrom: window.opera ? 1 : 0,
                transition: b.scaleTransition,
                restoreAfterFinish: true
            })], Object.extend({
                beforeSetup: function (j) {
                    j.effects[0].element.setStyle({
                        height: "0px"
                    }).show();
                },
                afterFinishInternal: function (j) {
                    j.effects[0].element.undoClipping().undoPositioned().setStyle(a);
                }
            }, b));
        }
    });
};
Effect.Shrink = function (c) {
    c = $(c);
    var b = Object.extend({
        direction: "center",
        moveTransition: Effect.Transitions.sinoidal,
        scaleTransition: Effect.Transitions.sinoidal,
        opacityTransition: Effect.Transitions.none
    }, arguments[1] || {});
    var a = {
        top: c.style.top,
        left: c.style.left,
        height: c.style.height,
        width: c.style.width,
        opacity: c.getInlineOpacity()
    };
    var f = c.getDimensions();
    var e, d;
    switch (b.direction) {
        case "top-left":
            e = d = 0;
            break;
        case "top-right":
            e = f.width;
            d = 0;
            break;
        case "bottom-left":
            e = 0;
            d = f.height;
            break;
        case "bottom-right":
            e = f.width;
            d = f.height;
            break;
        case "center":
            e = f.width / 2;
            d = f.height / 2;
            break;
    }
    return new Effect.Parallel([new Effect.Opacity(c, {
        sync: true,
        to: 0,
        from: 1,
        transition: b.opacityTransition
    }), new Effect.Scale(c, window.opera ? 1 : 0, {
        sync: true,
        transition: b.scaleTransition,
        restoreAfterFinish: true
    }), new Effect.Move(c, {
        x: e,
        y: d,
        sync: true,
        transition: b.moveTransition
    })], Object.extend({
        beforeStartInternal: function (g) {
            g.effects[0].element.makePositioned().makeClipping();
        },
        afterFinishInternal: function (g) {
            g.effects[0].element.hide().undoClipping().undoPositioned().setStyle(a);
        }
    }, b));
};
Effect.Pulsate = function (c) {
    c = $(c);
    var b = arguments[1] || {},
        a = c.getInlineOpacity(),
        e = b.transition || Effect.Transitions.linear,
        d = function (f) {
        return 1 - e(-Math.cos(f * (b.pulses || 5) * 2 * Math.PI) / 2 + 0.5);
    };
    return new Effect.Opacity(c, Object.extend(Object.extend({
        duration: 2,
        from: 0,
        afterFinishInternal: function (f) {
            f.element.setStyle({
                opacity: a
            });
        }
    }, b), {
        transition: d
    }));
};
Effect.Fold = function (b) {
    b = $(b);
    var a = {
        top: b.style.top,
        left: b.style.left,
        width: b.style.width,
        height: b.style.height
    };
    b.makeClipping();
    return new Effect.Scale(b, 5, Object.extend({
        scaleContent: false,
        scaleX: false,
        afterFinishInternal: function (c) {
            new Effect.Scale(b, 1, {
                scaleContent: false,
                scaleY: false,
                afterFinishInternal: function (d) {
                    d.element.hide().undoClipping().setStyle(a);
                }
            });
        }
    }, arguments[1] || {}));
};
Effect.Morph = __WEBPACK_IMPORTED_MODULE_0_prototype__["Class"].create(Effect.Base, {
    initialize: function (c) {
        this.element = $(c);
        if (!this.element) {
            throw Effect._elementDoesNotExistError;
        }
        var a = Object.extend({
            style: {}
        }, arguments[1] || {});
        if (!Object.isString(a.style)) {
            this.style = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$H"])(a.style);
        } else {
            if (a.style.include(":")) {
                this.style = a.style.parseStyle();
            } else {
                this.element.addClassName(a.style);
                this.style = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$H"])(this.element.getStyles());
                this.element.removeClassName(a.style);
                var b = this.element.getStyles();
                this.style = this.style.reject(function (d) {
                    return d.value == b[d.key];
                });
                a.afterFinishInternal = function (d) {
                    d.element.addClassName(d.options.style);
                    d.transforms.each(function (e) {
                        d.element.style[e.style] = "";
                    });
                };
            }
        }
        this.start(a);
    },
    setup: function () {
        function a(b) {
            if (!b || ["rgba(0, 0, 0, 0)", "transparent"].include(b)) {
                b = "#ffffff";
            }
            b = b.parseColor();
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$R"])(0, 2).map(function (c) {
                return parseInt(b.slice(c * 2 + 1, c * 2 + 3), 16);
            });
        }
        this.transforms = this.style.map(function (g) {
            var f = g[0],
                e = g[1],
                d = null;
            if (e.parseColor("#zzzzzz") != "#zzzzzz") {
                e = e.parseColor();
                d = "color";
            } else {
                if (f == "opacity") {
                    e = parseFloat(e);
                    if (__WEBPACK_IMPORTED_MODULE_0_prototype__["Prototype"].Browser.IE && !this.element.currentStyle.hasLayout) {
                        this.element.setStyle({
                            zoom: 1
                        });
                    }
                } else {
                    if (Element.CSS_LENGTH.test(e)) {
                        var c = e.match(/^([\+\-]?[0-9\.]+)(.*)$/);
                        e = parseFloat(c[1]);
                        d = c.length == 3 ? c[2] : null;
                    }
                }
            }
            var b = this.element.getStyle(f);
            return {
                style: f.camelize(),
                originalValue: d == "color" ? a(b) : parseFloat(b || 0),
                targetValue: d == "color" ? a(e) : e,
                unit: d
            };
        }.bind(this)).reject(function (b) {
            return b.originalValue == b.targetValue || b.unit != "color" && (isNaN(b.originalValue) || isNaN(b.targetValue));
        });
    },
    update: function (a) {
        var d = {},
            b,
            c = this.transforms.length;
        while (c--) {
            d[(b = this.transforms[c]).style] = b.unit == "color" ? "#" + Math.round(b.originalValue[0] + (b.targetValue[0] - b.originalValue[0]) * a).toColorPart() + Math.round(b.originalValue[1] + (b.targetValue[1] - b.originalValue[1]) * a).toColorPart() + Math.round(b.originalValue[2] + (b.targetValue[2] - b.originalValue[2]) * a).toColorPart() : (b.originalValue + (b.targetValue - b.originalValue) * a).toFixed(3) + (b.unit === null ? "" : b.unit);
        }
        this.element.setStyle(d, true);
    }
});
Effect.Transform = __WEBPACK_IMPORTED_MODULE_0_prototype__["Class"].create({
    initialize: function (a) {
        this.tracks = [];
        this.options = arguments[1] || {};
        this.addTracks(a);
    },
    addTracks: function (a) {
        a.each(function (b) {
            b = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$H"])(b);
            var c = b.values().first();
            this.tracks.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$H"])({
                ids: b.keys().first(),
                effect: Effect.Morph,
                options: {
                    style: c
                }
            }));
        }.bind(this));
        return this;
    },
    play: function () {
        return new Effect.Parallel(this.tracks.map(function (a) {
            var d = a.get("ids"),
                c = a.get("effect"),
                b = a.get("options");
            var e = [$(d) || $$(d)].flatten();
            return e.map(function (f) {
                return new c(f, Object.extend({
                    sync: true
                }, b));
            });
        }).flatten(), this.options);
    }
});
Element.CSS_PROPERTIES = "backgroundColor backgroundPosition borderBottomColor borderBottomStyle borderBottomWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderSpacing borderTopColor borderTopStyle borderTopWidth bottom clip color fontSize fontWeight height left letterSpacing lineHeight marginBottom marginLeft marginRight marginTop markerOffset maxHeight maxWidth minHeight minWidth opacity outlineColor outlineOffset outlineWidth paddingBottom paddingLeft paddingRight paddingTop right textIndent top width wordSpacing zIndex".split(" ");
Element.CSS_LENGTH = /^(([\+\-]?[0-9\.]+)(em|ex|px|in|cm|mm|pt|pc|\%))|0$/;
String.__parseStyleElement = document.createElement("div");
String.prototype.parseStyle = function () {
    var b,
        a = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$H"])();
    if (__WEBPACK_IMPORTED_MODULE_0_prototype__["Prototype"].Browser.WebKit) {
        b = new Element("div", {
            style: this
        }).style;
    } else {
        String.__parseStyleElement.innerHTML = "<div style=\"" + this + "\"></div>";
        b = String.__parseStyleElement.childNodes[0].style;
    }
    Element.CSS_PROPERTIES.each(function (c) {
        if (b[c]) {
            a.set(c, b[c]);
        }
    });
    if (__WEBPACK_IMPORTED_MODULE_0_prototype__["Prototype"].Browser.IE && this.include("opacity")) {
        a.set("opacity", this.match(/opacity:\s*((?:0|1)?(?:\.\d*)?)/)[1]);
    }
    return a;
};
if (document.defaultView && document.defaultView.getComputedStyle) {
    Element.getStyles = function (b) {
        var a = document.defaultView.getComputedStyle($(b), null);
        return Element.CSS_PROPERTIES.inject({}, function (c, d) {
            c[d] = a[d];
            return c;
        });
    };
} else {
    Element.getStyles = function (b) {
        b = $(b);
        var a = b.currentStyle,
            c;
        c = Element.CSS_PROPERTIES.inject({}, function (d, e) {
            d[e] = a[e];
            return d;
        });
        if (!c.opacity) {
            c.opacity = b.getOpacity();
        }
        return c;
    };
}
Effect.Methods = {
    morph: function (a, b) {
        a = $(a);
        new Effect.Morph(a, Object.extend({
            style: b
        }, arguments[2] || {}));
        return a;
    },
    visualEffect: function (c, e, b) {
        c = $(c);
        var d = e.dasherize().camelize(),
            a = d.charAt(0).toUpperCase() + d.substring(1);
        new Effect[a](c, b);
        return c;
    },
    highlight: function (b, a) {
        b = $(b);
        new Effect.Highlight(b, a);
        return b;
    }
};
"fade appear grow shrink fold blindUp blindDown slideUp slideDown pulsate shake puff squish switchOff dropOut".split(" ").each(function (a) {
    Effect.Methods[a] = function (c, b) {
        c = $(c);
        Effect[a.charAt(0).toUpperCase() + a.substring(1)](c, b);
        return c;
    };
});
"getInlineOpacity forceRerendering setContentZoom collectTextNodes collectTextNodesIgnoreClass getStyles".split(" ").each(function (a) {
    Effect.Methods[a] = Element[a];
});
Element.addMethods(Effect.Methods);

/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__abstractPersonVisuals__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__abstractNode__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ramda__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ramda___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_ramda__);




/**
 * A general superclass for Person nodes on the Pedigree graph. Contains information about related nodes
 * and some properties specific for people. Creates an instance of AbstractPersonVisuals on initialization
 *
 * @class AbstractPerson
 * @extends AbstractNode
 * @constructor
 * @param {Number} x The x coordinate on the canvas
 * @param {Number} y The y coordinate on the canvas
 * @param {String} gender Can be "M", "F", or "U"
 * @param {Number} [id] The id of the node
 */

const AbstractPerson = Class.create(__WEBPACK_IMPORTED_MODULE_1__abstractNode__["b" /* AbstractNode */], {

    initialize: function ($super, x, y, gender, id) {
        //console.log("abstract person");            
        this._gender = this.parseGender(gender);
        this._isAdopted = false;
        !this._type && (this._type = "AbstractPerson");
        $super(x, y, id);
        //console.log("abstract person end");
    },

    /**
     * Initializes the object responsible for creating graphics for this node
     *
     * @method _generateGraphics
     * @param {Number} x The x coordinate on the canvas at which the node is centered
     * @param {Number} y The y coordinate on the canvas at which the node is centered
     * @return {AbstractPersonVisuals}
     * @private
     */
    _generateGraphics: function (x, y) {
        return new __WEBPACK_IMPORTED_MODULE_0__abstractPersonVisuals__["a" /* AbstractPersonVisuals */](this, x, y);
    },

    /**
     * Reads a string of input and converts it into the standard gender format of "M","F" or "U".
     * Defaults to "U" if string is not recognized
     *
     * @method parseGender
     * @param {String} gender The string to be parsed
     * @return {String} the gender in the standard form ("M", "F", or "U")
     */
    parseGender: function (gender) {
        return gender.toUpperCase() == "M" || gender.toUpperCase() == "F" ? gender.toUpperCase() : "U";
    },

    /**
     * Returns "U", "F" or "M" depending on the gender of this node
     *
     * @method getGender
     * @return {String}
     */
    getGender: function () {
        return this._gender;
    },

    /**
     * @method isPersonGroup
     */
    isPersonGroup: function () {
        return this._type == "PersonGroup";
    },

    /**
     * Updates the gender of this node
     *
     * @method setGender
     * @param {String} gender Should be "U", "F", or "M" depending on the gender
     */
    setGender: function (gender) {
        gender = this.parseGender(gender);
        if (this._gender != gender) {
            this._gender = gender;
            this.getGraphics().setGenderGraphics();
            this.getGraphics().getHoverBox().regenerateHandles();
            this.getGraphics().getHoverBox().regenerateButtons();
        }
    },

    /**
     * Changes the adoption status of this Person to isAdopted. Updates the graphics.
     *
     * @method setAdopted
     * @param {Boolean} isAdopted Set to true if you want to mark the Person adopted
     */
    setAdopted: function (isAdopted) {
        this._isAdopted = isAdopted;
        //TODO: implement adopted and social parents
        if (isAdopted) this.getGraphics().drawAdoptedShape();else this.getGraphics().removeAdoptedShape();
    },

    /**
     * Returns true if this Person is marked adopted
     *
     * @method isAdopted
     * @return {Boolean}
     */
    isAdopted: function () {
        return this._isAdopted;
    },

    // TODO: for automated setMethod -> getMethod used for undo/redo 
    getAdopted: function () {
        //console.log("GET ADOPTED: " + this.isAdopted()); 
        return this.isAdopted();
    },

    /**
     * Returns an object containing all the properties of this node
     * except id, x, y & type 
     *
     * @method getProperties
     * @return {Object} in the form
     *
     {
       sex: "gender of the node"
     }
     */
    getProperties: function ($super) {
        var info = $super();
        info["gender"] = this.getGender();
        info["focused"] = this.getFocused();
        info["isProband"] = this.isProband();
        return info;
    },

    /**
     * Applies the properties found in info to this node.
     *
     * @method assignProperties
     * @param properties Object
     * @return {Boolean} True if info was successfully assigned
     */
    assignProperties: function ($super, properties) {
        if (!$super(properties)) return false;
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_ramda__["isNil"])(properties.gender) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_ramda__["isNil"])(properties.focused) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_ramda__["isNil"])(properties.isProband)) return false;
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_ramda__["isNil"])(properties.gender) && this.getGender() != this.parseGender(properties.gender)) this.setGender(properties.gender);
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_ramda__["isNil"])(properties.gender) && this.getFocused() !== properties.focused) this.setFocused(properties.focused);
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_ramda__["isNil"])(properties.isProband) && this.isProband() !== properties.isProband) {
            this._isProband = properties.isProband;
        }
        return true;
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = AbstractPerson;


/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getAge;
/**
 * Returns the age of a person with the given birth and death dates
 * @param {Date} birthDate
 * @param {Date} [deathDate]
 * @return {String} Age formatted with years, months, days
 */
function getAge(birthDate, deathDate) {
    var now, months;
    if (deathDate == null) {
        now = new Date();
    } else {
        now = deathDate;
    }

    var aSecond = 1000;
    var aMinute = aSecond * 60;
    var aHour = aMinute * 60;
    var aDay = aHour * 24;
    var aWeek = aDay * 7;
    var aMonth = aDay * 30;

    var age = now.getTime() - birthDate.getTime();

    if (age < 0) {
        return "not born yet";
    }

    var years = new Date(now.getTime() - aMonth * birthDate.getMonth()).getFullYear() - new Date(birthDate.getTime() - aMonth * birthDate.getMonth()).getFullYear();

    var offsetNow = new Date(now.getTime() - aDay * (birthDate.getDate() - 1));
    var offsetBirth = new Date(birthDate.getTime() - aDay * (birthDate.getDate() - 1));
    if (years > 1) {
        months = years * 12 + (offsetNow.getMonth() - offsetBirth.getMonth());
    } else {
        months = (now.getFullYear() - birthDate.getFullYear()) * 12 + (offsetNow.getMonth() - offsetBirth.getMonth());
    }

    var agestr = "";

    if (months < 12) {
        var days = Math.floor(age / aDay);

        if (days < 21) {
            if (days == 1) {
                agestr = days + " day";
            } else {
                agestr = days + " days";
            }
        } else if (days < 60) {
            var weeks = Math.floor(age / aWeek);
            agestr = weeks + " wk";
        } else {
            agestr = months + " mo";
        }
    } else {
        agestr = years + " y";
    }
    return agestr;
}

/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers__ = __webpack_require__(5);



/**
 * ...
 *
 * @class Controller
 * @constructor
 */

// TODO: undo/redo in all handlers

const Controller = Class.create({
    initialize: function () {
        document.observe("pedigree:autolayout", this.handleAutoLayout);
        document.observe("pedigree:graph:clear", this.handleClearGraph);
        document.observe("pedigree:undo", this.handleUndo);
        document.observe("pedigree:redo", this.handleRedo);
        document.observe("pedigree:renumber", this.handleRenumber);
        document.observe("pedigree:node:remove", this.handleRemove);
        document.observe("pedigree:node:setproperty", this.handleSetProperty);
        document.observe("pedigree:node:modify", this.handleModification);
        document.observe("pedigree:person:drag:newparent", this.handlePersonDragToNewParent);
        document.observe("pedigree:person:drag:newpartner", this.handlePersonDragToNewPartner);
        document.observe("pedigree:person:drag:newsibling", this.handlePersonDragToNewSibling);
        document.observe("pedigree:person:newparent", this.handlePersonNewParents);
        document.observe("pedigree:person:newsibling", this.handlePersonNewSibling);
        document.observe("pedigree:person:newpartnerandchild", this.handlePersonNewPartnerAndChild);
        document.observe("pedigree:partnership:newchild", this.handleRelationshipNewChild);
    },

    handleUndo: function (event) {
        console.log("event: " + event.eventName + ", memo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(event.memo));
        editor.getActionStack().undo();
    },

    handleRedo: function (event) {
        console.log("event: " + event.eventName + ", memo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(event.memo));
        editor.getActionStack().redo();
    },

    handleRenumber: function (event) {
        // Assigns user-visible node labels for all person nodes, based on generation and order
        // ("I-1","I-2","I-3", "II-1", "II-2", etc.)

        console.log("event: " + event.eventName + ", memo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(event.memo));

        var check = event.memo.hasOwnProperty("check");
        var clear = false;
        var needRedraw = false;

        do {
            var secondPass = false;

            for (var nodeID in editor.getView().getNodeMap()) {
                if (editor.getView().getNodeMap().hasOwnProperty(nodeID)) {
                    if (editor.getGraph().isPerson(nodeID)) {
                        var node = editor.getView().getNode(nodeID);
                        var currentPedNumber = node.getPedNumber();

                        if (clear) {
                            var pedNumber = "";
                        } else {
                            var generation = editor.getGraph().getGeneration(nodeID);
                            var order = editor.getGraph().getOrderWithinGeneration(nodeID);
                            pedNumber = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["e" /* romanize */])(generation) + "-" + order;

                            if (check) {
                                if (pedNumber != currentPedNumber) {
                                    // one of the nodes PED number is not correct
                                    clear = true;
                                    secondPass = true;
                                    break;
                                }
                            }
                        }

                        if (currentPedNumber != pedNumber) {
                            needRedraw = true;
                            node.setPedNumber(pedNumber);
                            var allProperties = node.getProperties();
                            editor.getGraph().setProperties(nodeID, allProperties);
                        }
                    }
                }
            }
        } while (secondPass);

        var renumberButton = $("action-number");
        if (renumberButton) {
            if (clear) {
                renumberButton.className = renumberButton.className.replace("disabled-menu-item", "menu-item");
            } else {
                renumberButton.className = renumberButton.className.replace(/^menu-item/, "disabled-menu-item");
            }
        }

        if (!event.memo.noUndoRedo && needRedraw) {
            editor.getView().unmarkAll();
            editor.getActionStack().addState(event);
        }
    },

    handleAutoLayout: function (event) {
        try {
            console.log("event: " + event.eventName + ", memo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(event.memo));
            var changeSet = editor.getGraph().redrawAll();
            editor.getView().applyChanges(changeSet, true);

            if (!event.memo.noUndoRedo) editor.getActionStack().addState(event);
        } catch (err) {
            console.log("Autolayout error: ");
            console.trace(err);
        }
    },

    handleClearGraph: function (event) {
        console.log("event: " + event.eventName + ", memo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(event.memo));
        var changeSet = editor.getGraph().clearAll();
        editor.getView().applyChanges(changeSet, true);

        editor.getWorkspace().centerAroundNode(0, false);

        if (!event.memo.noUndoRedo) editor.getActionStack().addState(event);
    },

    handleRemove: function (event) {
        console.log("event: " + event.eventName + ", memo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(event.memo));
        var nodeID = event.memo.nodeID;

        // get the list of affected nodes
        var disconnectedList = editor.getGraph().getDisconnectedSetIfNodeRemoved(nodeID);

        var removeSelected = function () {
            try {
                var changeSet = editor.getGraph().removeNodes(disconnectedList);

                editor.getView().applyChanges(changeSet, true);

                changeSet = editor.getGraph().improvePosition();
                editor.getView().applyChanges(changeSet, true);

                if (!event.memo.noUndoRedo) editor.getActionStack().addState(event);
            } catch (err) {
                console.log("[DEBUG] Remove error: ");
                console.trace(err);
            }
        };

        // if there is only one node or this removal is done as part of an undo/redo action
        // => just remove without asking any questions or highlighting any nodes
        if (disconnectedList.length <= 1 || event.memo.hasOwnProperty("noUndoRedo")) {
            removeSelected();
            return;
        }

        // otherwise remove current highlighting and highlight all nodes which will be removed
        editor.getView().unmarkAll();
        for (var i = 0; i < disconnectedList.length; i++) {
            var nextHighlight = disconnectedList[i];
            editor.getView().getNode(nextHighlight).getGraphics().markPermanently();
        }

        var unhighlightSelected = function () {
            for (var i = 0; i < disconnectedList.length; i++) {
                var nextHighlight = disconnectedList[i];
                editor.getView().getNode(nextHighlight).getGraphics().unmark();
            }
        };

        // ...and display a OK/Cancel dialogue, calling "removeSelected()" on OK and "unhighlightSelected" on Cancel
        editor.getOkCancelDialogue().show("All highlighted nodes will be removed. Do you want to proceed?", "Delete nodes?", removeSelected, unhighlightSelected);
    },

    handleSetProperty: function (event) {
        //console.log("event: " + event.eventName + ", memo: " + stringifyObject(event.memo));
        var nodeID = event.memo.nodeID;
        var properties = event.memo.properties;
        var undoEvent = { "eventName": event.eventName, "memo": { "nodeID": nodeID, "properties": __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["f" /* cloneObject */])(event.memo.properties) } };

        var node = editor.getView().getNode(nodeID);
        var changed = false;

        var twinUpdate = undefined;
        var needUpdateAncestors = false;
        var needUpdateRelationship = false;
        var needUpdateAllRelationships = false;

        var changedValue = false;

        for (var propertySetFunction in properties) {
            if (properties.hasOwnProperty(propertySetFunction)) {
                var propValue = properties[propertySetFunction];

                //console.log("attmepting to set property " + propertySetFunction + " to " + propValue);
                if (!Controller._validatePropertyValue(nodeID, propertySetFunction, propValue)) continue;

                //console.log("validated");
                // prepare undo event
                var propertyGetFunction = propertySetFunction.replace("set", "get");
                var oldValue = node[propertyGetFunction]();
                if (oldValue == propValue) continue;

                if (Object.prototype.toString.call(oldValue) === "[object Array]") {
                    oldValue = oldValue.slice(0);
                }

                undoEvent.memo.properties[propertySetFunction] = oldValue;

                if (propertySetFunction == "setDeathDate" || propertySetFunction == "setBirthDate") {
                    // some browsers may not treat the date string as provided by the date widget the same way,
                    // so convert to the least common denominator which seems to be the toDateString()
                    if (propValue != "") {
                        try {
                            var parsedDate = new Date(propValue);
                            propValue = parsedDate.toDateString();
                        } catch (err) {
                            console.trace(err);
                            // in case date did not parse: set date exactly as provided
                        }
                    }
                }

                // sometimes UNDO includes more then the property itself: e.g. changing life status
                // from "dead" to "alive" also clears the death date. Need to add it to the "undo" event
                if (propertySetFunction == "setLifeStatus") {
                    undoEvent.memo.properties["setDeathDate"] = node.getDeathDate();
                    undoEvent.memo.properties["setGestationAge"] = node.getGestationAge();
                    undoEvent.memo.properties["setBirthDate"] = node.getBirthDate();
                    undoEvent.memo.properties["setAdopted"] = node.getAdopted();
                }
                if (propertySetFunction == "setDeathDate") {
                    undoEvent.memo.properties["setLifeStatus"] = node.getLifeStatus();
                }
                if (propertySetFunction == "setChildlessStatus") {
                    undoEvent.memo.properties["setChildlessReason"] = node.getChildlessReason();
                }
                if (propertySetFunction == "setDisorders") {
                    undoEvent.memo.properties["setCarrierStatus"] = node.getCarrierStatus();
                }
                if (propertySetFunction == "setCarrierStatus") {
                    undoEvent.memo.properties["setDisorders"] = node.getDisorders().slice(0);
                }

                node[propertySetFunction](propValue);

                if (propertySetFunction == "setDisorders") {
                    var newDisorders = node[propertyGetFunction]();
                    if (JSON.stringify(oldValue) == JSON.stringify(newDisorders)) continue;
                }

                changedValue = true;

                if (propertySetFunction == "setLastName") {
                    if (__WEBPACK_IMPORTED_MODULE_0__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].propagateLastName) {
                        if (node.getGender(nodeID) == "M") {
                            if (propValue != "") {
                                // propagate last name as "last name at birth" to all descendants (by the male line)
                                Controller._propagateLastNameAtBirth(nodeID, propValue, oldValue);
                                undoEvent = null; // there is no easy undo other than just remember the previous graph state
                            }
                        }
                    }
                }

                if (propertySetFunction == "setGender") {
                    if (node.getMonozygotic()) {
                        if (!twinUpdate) twinUpdate = {};
                        twinUpdate[propertySetFunction] = propValue;
                    }
                }

                if (propertySetFunction == "setAdopted") {
                    needUpdateAncestors = true;
                    if (!twinUpdate) twinUpdate = {};
                    twinUpdate[propertySetFunction] = propValue;
                }

                if (propertySetFunction == "setMonozygotic") {
                    needUpdateRelationship = true;
                    if (!twinUpdate) twinUpdate = {};
                    twinUpdate[propertySetFunction] = propValue;
                }

                if (propertySetFunction == "setConsanguinity" || propertySetFunction == "setBrokenStatus") {
                    // this updates the relationship lines, as well as any lines
                    // crossed by the relationship llines to maintain correct crossing graphics
                    needUpdateRelationship = true;
                }

                if (propertySetFunction == "setLostContact") {
                    // it is hard to say which of the incoming/outgoing lines needs to be redraws/updated,
                    // so it is easier to just redraw all
                    needUpdateAllRelationships = true;
                }
            }
        }

        // some properties should be the same for all the twins. If one of those
        // was changed, need to update all the twins
        if (twinUpdate) {
            var allTwins = editor.getGraph().getAllTwinsSortedByOrder(nodeID);
            for (var propertySetFunction in twinUpdate) {
                if (twinUpdate.hasOwnProperty(propertySetFunction)) {
                    var propValue = twinUpdate[propertySetFunction];

                    for (var i = 0; i < allTwins.length; i++) {
                        var twin = allTwins[i];
                        if (twin == nodeID) continue;
                        var twinNode = editor.getView().getNode(twin);
                        twinNode[propertySetFunction](propValue);
                        var twinProperties = twinNode.getProperties();
                        console.log("Setting twin properties: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(twinProperties));
                        editor.getGraph().setProperties(twin, twinProperties);
                    }
                }
            }
        }

        var allProperties = node.getProperties();
        editor.getGraph().setProperties(nodeID, allProperties);

        if (needUpdateAncestors) {
            var changeSet = editor.getGraph().updateAncestors();
            editor.getView().applyChanges(changeSet, true);
        }

        if (needUpdateAllRelationships) {
            var rels = editor.getGraph().getAllRelatedRelationships(nodeID);
            var changeSet = { "moved": rels };
            editor.getView().applyChanges(changeSet, true);
        }

        if (needUpdateRelationship) {
            var relID = editor.getGraph().isRelationship(nodeID) ? nodeID : editor.getGraph().getParentRelationship(nodeID);
            var changeSet = { "moved": [relID] };
            editor.getView().applyChanges(changeSet, true);
        }

        editor.getNodeMenu().update(); // for example, user selected a wrong gender in the nodeMenu, which
        // gets reverted back - need to select the correct one in the nodeMenu as well

        //console.log("event: " + event.eventName + ", memo: " + stringifyObject(event.memo));
        //console.log("Undo event: " + stringifyObject(undoEvent));
        if (!event.memo.noUndoRedo && changedValue) editor.getActionStack().addState(event, undoEvent);
    },

    handleModification: function (event) {
        try {
            console.log("event: " + event.eventName + ", memo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(event.memo));
            var nodeID = event.memo.nodeID;
            var modifications = event.memo.modifications;

            var node = editor.getView().getNode(nodeID);

            //var allProperties = node.getProperties();

            for (var modificationType in modifications) if (modifications.hasOwnProperty(modificationType)) {
                var modValue = modifications[modificationType];

                if (modificationType == "addTwin") {
                    var numNewTwins = modValue - 1; // current node is one of the twins, so need to create one less
                    for (var i = 0; i < numNewTwins; i++) {
                        var twinProperty = { "gender": node.getGender() };
                        var changeSet = editor.getGraph().addTwin(nodeID, twinProperty);
                        editor.getView().applyChanges(changeSet, true);
                    }
                    node.assignProperties(editor.getGraph().getProperties(nodeID));
                }

                if (modificationType == "makePlaceholder") {
                    // TODO
                }
            }

            if (!event.memo.noUndoRedo) editor.getActionStack().addState(event);
        } catch (err) {
            console.log("err: " + err);
        }
    },

    handlePersonDragToNewParent: function (event) {
        console.log("event: " + event.eventName + ", memo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(event.memo));

        var personID = event.memo.personID;
        var parentID = event.memo.parentID;
        if (!editor.getGraph().isPerson(personID) || !editor.getGraph().isValidID(parentID)) return;

        if (editor.getGraph().isChildless(parentID)) {
            editor.getController().handleSetProperty({ "memo": { "nodeID": personID, "properties": { "setAdopted": true }, "noUndoRedo": true } });
        }

        try {
            var changeSet = editor.getGraph().assignParent(parentID, personID);
            editor.getView().applyChanges(changeSet, true);

            if (changeSet.moved.indexOf(personID) != -1) editor.getWorkspace().centerAroundNode(personID, true);

            if (!event.memo.noUndoRedo) editor.getActionStack().addState(event);
        } catch (err) {
            console.trace(err);
        }
    },

    handlePersonNewParents: function (event) {
        console.log("event: " + event.eventName + ", memo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(event.memo));

        var personID = event.memo.personID;
        if (!editor.getGraph().isPerson(personID)) return;

        var changeSet = editor.getGraph().addNewParents(personID);
        editor.getView().applyChanges(changeSet, true);

        if (!event.memo.noUndoRedo) editor.getActionStack().addState(event);

        return changeSet["new"][0]; // new relationship
    },

    handlePersonNewSibling: function (event) {
        console.log("event: " + event.eventName + ", memo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(event.memo));

        // { "personID": id, "childParams": data.params.parameters, "preferLeft": false };
        var personID = event.memo.personID;
        var childParams = event.memo.childParams ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["f" /* cloneObject */])(event.memo.childParams) : {};
        var numTwins = event.memo.twins ? event.memo.twins : 1;
        var numPersons = event.memo.groupSize ? event.memo.groupSize : 0;

        var parentRelationship = editor.getGraph().getParentRelationship(personID);

        if (parentRelationship === null) {
            // need to add new parents
            parentRelationship = editor.getController().handlePersonNewParents({ "memo": { "personID": personID, "noUndoRedo": true } });
        }

        if (event.memo.twins) {
            var nextEvent = { "nodeID": personID, "modifications": { "addTwin": event.memo.twins }, "noUndoRedo": true };
            editor.getController().handleModification({ "memo": nextEvent });
        } else {
            var nextEvent = { "partnershipID": parentRelationship, "childParams": childParams, "noUndoRedo": true };
            if (event.memo.groupSize) nextEvent["groupSize"] = event.memo.groupSize;

            editor.getController().handleRelationshipNewChild({ "memo": nextEvent });
        }

        if (!event.memo.noUndoRedo) editor.getActionStack().addState(event);
    },

    handlePersonDragToNewSibling: function (event) {
        console.log("event: " + event.eventName + ", memo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(event.memo));

        var sibling1 = event.memo.sibling1ID;
        var sibling2 = event.memo.sibling2ID;

        var parentRelationship = editor.getGraph().getParentRelationship(sibling1);
        if (parentRelationship == null) parentRelationship = editor.getGraph().getParentRelationship(sibling2);

        if (parentRelationship === null) {
            // need to add new parents
            parentRelationship = editor.getController().handlePersonNewParents({ "memo": { "personID": sibling1, "noUndoRedo": true } });
        }

        if (editor.getGraph().getParentRelationship(sibling2) != parentRelationship) {
            // assign sibling 2 to this relationship: covers the case when none have parents or sibling1 has parents
            editor.getController().handlePersonDragToNewParent({ "memo": { "personID": sibling2, "parentID": parentRelationship, "noUndoRedo": true } });
        } else {
            // assign sibling 1 to this relationship
            editor.getController().handlePersonDragToNewParent({ "memo": { "personID": sibling1, "parentID": parentRelationship, "noUndoRedo": true } });
        }

        if (!event.memo.noUndoRedo) editor.getActionStack().addState(event);
    },

    handlePersonNewPartnerAndChild: function (event) {
        var timer = new __WEBPACK_IMPORTED_MODULE_1__helpers__["g" /* Timer */]();

        try {
            console.log("event: " + event.eventName + ", memo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(event.memo));

            var personID = event.memo.personID;
            if (!editor.getGraph().isPerson(personID)) return;
            var preferLeft = event.memo.preferLeft;
            var childParams = event.memo.childParams ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["f" /* cloneObject */])(event.memo.childParams) : {};
            var numTwins = event.memo.twins ? event.memo.twins : 1;
            var numPersons = event.memo.groupSize ? event.memo.groupSize : 0;

            if (editor.getGraph().isChildless(personID)) {
                childParams["isAdopted"] = true;
            }

            if (numPersons > 0) {
                childParams["numPersons"] = numPersons;
            }

            var changeSet = editor.getGraph().addNewRelationship(personID, childParams, preferLeft, numTwins);
            editor.getView().applyChanges(changeSet, true);

            if (!event.memo.noUndoRedo) editor.getActionStack().addState(event);
        } catch (err) {
            console.trace(err);
        }

        timer.printSinceLast("=== Total new partner+child runtime: ");
    },

    handlePersonDragToNewPartner: function (event) {
        console.log("event: " + event.eventName + ", memo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(event.memo));

        var personID = event.memo.personID;
        var partnerID = event.memo.partnerID;
        if (!editor.getGraph().isPerson(personID) || !editor.getGraph().isPerson(partnerID)) return;

        var childProperties = {};
        if (editor.getGraph().isChildless(personID) || editor.getGraph().isChildless(partnerID)) {
            childProperties = { "isAdopted": true };
        }

        // when partnering up a node with unknown gender with a node of known gender
        // change the unknown gender to the opposite of known
        var node1 = editor.getView().getNode(personID);
        var node2 = editor.getView().getNode(partnerID);

        if (node1.getGender() == "U" && node2.getGender() != "U") {
            var gender1 = editor.getGraph().getOppositeGender(partnerID);
            node1.setGender(gender1);
            editor.getGraph().setProperties(personID, node1.getProperties());
        } else if (node1.getGender() != "U" && node2.getGender() == "U") {
            var gender2 = editor.getGraph().getOppositeGender(personID);
            node2.setGender(gender2);
            editor.getGraph().setProperties(partnerID, node2.getProperties());
        }

        // TODO: propagate change of gender down the partnership chain

        var changeSet = editor.getGraph().assignPartner(personID, partnerID, childProperties);
        editor.getView().applyChanges(changeSet, true);

        if (!event.memo.noUndoRedo) editor.getActionStack().addState(event);
    },

    handleRelationshipNewChild: function (event) {
        console.log("event: " + event.eventName + ", memo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(event.memo));

        var partnershipID = event.memo.partnershipID;
        if (!editor.getGraph().isRelationship(partnershipID)) return;

        var numTwins = event.memo.twins ? event.memo.twins : 1;

        var childParams = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["f" /* cloneObject */])(event.memo.childParams);
        if (editor.getGraph().isChildless(partnershipID)) {
            childParams["isAdopted"] = true;
        }

        var numPersons = event.memo.groupSize ? event.memo.groupSize : 0;
        if (numPersons > 0) {
            childParams["numPersons"] = numPersons;
        }

        var changeSet = editor.getGraph().addNewChild(partnershipID, childParams, numTwins);
        editor.getView().applyChanges(changeSet, true);

        if (!event.memo.noUndoRedo) editor.getActionStack().addState(event);
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


Controller._validatePropertyValue = function (nodeID, propertySetFunction, propValue) {
    if (propertySetFunction == "setGender") {
        var possibleGenders = editor.getGraph().getPossibleGenders(nodeID);
        //console.log("valid genders: " + stringifyObject(possibleGenders));
        return possibleGenders[propValue];
    }
    return true;
};

Controller._propagateLastNameAtBirth = function (parentID, parentLastName, changeIfEqualTo) {
    var children = editor.getGraph().getAllChildren(parentID);

    for (var i = 0; i < children.length; i++) {
        var childID = children[i];
        var childNode = editor.getView().getNode(childID);

        if (childNode.getLastName() == "" && (childNode.getLastNameAtBirth() == "" || childNode.getLastNameAtBirth() == changeIfEqualTo)) {
            childNode.setLastNameAtBirth(parentLastName);
            var allProperties = childNode.getProperties();
            editor.getGraph().setProperties(childID, allProperties);
            if (childNode.getGender() == "M") {
                Controller._propagateLastNameAtBirth(childID, parentLastName, changeIfEqualTo);
            }
        }
    }
};

/***/ }),
/* 158 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Raphael) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__legend__ = __webpack_require__(65);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__disorder__ = __webpack_require__(86);




/**
 * Class responsible for keeping track of disorders and their properties, and for
 * caching disorders data as loaded from the OMIM database.
 * This information is graphically displayed in a 'Legend' box.
 *
 * @class DisorderLegend
 * @constructor
 */
const DisorderLegend = Class.create(__WEBPACK_IMPORTED_MODULE_0__legend__["a" /* Legend */], {

    initialize: function ($super) {
        $super("Disorders", true);

        this._disorderCache = {};

        this._specialDisordersRegexps = [new RegExp("^1BrCa", "i"), new RegExp("^2BrCa", "i"), new RegExp("^OvCa", "i"), new RegExp("^ProCa", "i"), new RegExp("^PanCa", "i")];
    },

    _getPrefix: function (id) {
        return "disorder";
    },

    /**
     * Returns the disorder object with the given ID. If object is not in cache yet
     * returns a newly created one which may have the disorder name & other attributes not loaded yet
     *
     * @method getDisorder
     * @return {Object}
     */
    getDisorder: function (disorderID) {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["i" /* isInt */])(disorderID)) {
            disorderID = __WEBPACK_IMPORTED_MODULE_2__disorder__["a" /* Disorder */].sanitizeID(disorderID);
        }
        if (!this._disorderCache.hasOwnProperty(disorderID)) {
            var whenNameIsLoaded = function () {
                this._updateDisorderName(disorderID);
            };
            this._disorderCache[disorderID] = new __WEBPACK_IMPORTED_MODULE_2__disorder__["a" /* Disorder */](disorderID, null, whenNameIsLoaded.bind(this));
        }
        return this._disorderCache[disorderID];
    },

    /**
     * Registers an occurrence of a disorder. If disorder hasn't been documented yet,
     * designates a color for it.
     *
     * @method addCase
     * @param {Number|String} disorderID ID for this disorder taken from the OMIM database
     * @param {String} disorderName The name of the disorder
     * @param {Number} nodeID ID of the Person who has this disorder
     */
    addCase: function ($super, disorderID, disorderName, nodeID) {
        if (!this._disorderCache.hasOwnProperty(disorderID)) this._disorderCache[disorderID] = new __WEBPACK_IMPORTED_MODULE_2__disorder__["a" /* Disorder */](disorderID, disorderName);

        $super(disorderID, disorderName, nodeID);
    },

    /**
     * Updates the displayed disorder name for the given disorder
     *
     * @method _updateDisorderName
     * @param {Number} disorderID The identifier of the disorder to update
     * @private
     */
    _updateDisorderName: function (disorderID) {
        //console.log("updating disorder display for " + disorderID + ", name = " + this.getDisorder(disorderID).getName());
        var name = this._legendBox.down("li#" + this._getPrefix() + "-" + disorderID + " .disorder-name");
        name.update(this.getDisorder(disorderID).getName());
    },

    /**
     * Generate the element that will display information about the given disorder in the legend
     *
     * @method _generateElement
     * @param {Number} disorderID The id for the disorder, taken from the OMIM database
     * @param {String} name The human-readable disorder name
     * @return {HTMLLIElement} List element to be insert in the legend
     */
    _generateElement: function ($super, disorderID, name) {
        if (!this._objectColors.hasOwnProperty(disorderID)) {
            var color = this._generateColor(disorderID);
            this._objectColors[disorderID] = color;
            document.fire("disorder:color", { "id": disorderID, color: color });
        }

        return $super(disorderID, name);
    },

    /**
     * Callback for dragging an object from the legend onto nodes
     *
     * @method _onDropGeneric
     * @param {Person} Person node
     * @param {String|Number} id ID of the disorder being dropped
     */
    _onDropObject: function (node, disorderID) {
        var currentDisorders = node.getDisorders().slice(0);
        if (currentDisorders.indexOf(disorderID) == -1) {
            // only if the node does not have this disorder yet
            currentDisorders.push(disorderID);
            editor.getView().unmarkAll();
            var properties = { "setDisorders": currentDisorders };
            var event = { "nodeID": node.getID(), "properties": properties };
            document.fire("pedigree:node:setproperty", event);
        } else {
            console.warn("This person already has the specified disorder");
        }
    },

    /**
     * Generates a CSS color.
     * Has preference for some predefined colors that can be distinguished in gray-scale
     * and are distint from gene colors.
     *
     * @method generateColor
     * @return {String} CSS color
     */
    _generateColor: function (disorderID) {
        if (this._objectColors.hasOwnProperty(disorderID)) {
            return this._objectColors[disorderID];
        }

        // check special disorder prefixes
        for (var i = 0; i < this._specialDisordersRegexps.length; i++) {
            if (disorderID.match(this._specialDisordersRegexps[i]) !== null) {
                for (var disorder in this._objectColors) {
                    if (this._objectColors.hasOwnProperty(disorder)) {
                        if (disorder.match(this._specialDisordersRegexps[i]) !== null) return this._objectColors[disorder];
                    }
                }
                break;
            }
        }

        var usedColors = Object.values(this._objectColors);
        // [red/yellow]           prefColors = ["#FEE090", '#f8ebb7', '#eac080', '#bf6632', '#9a4500', '#a47841', '#c95555', '#ae6c57'];        
        // [original yellow/blue] 
        // var prefColors = ["#000000", "#FEE090", '#E0F8F8', '#8ebbd6', '#4575B4', '#fca860', '#9a4500', '#81a270'];
        // [green]                var prefColors = ['#81a270', '#c4e8c4', '#56a270', '#b3b16f', '#4a775a', '#65caa3'];
        var prefColors = ["#010101", "#92c0db", "#4575B4", "#E0F8F8", "#949ab8", "#FEE090", "#bf6632", "#fca860", "#9a4500", "#d12943", "#00a2bf"];

        usedColors.each(function (color) {
            prefColors = prefColors.without(color);
        });
        if (disorderID == "affected") {
            if (usedColors.indexOf("#FEE090") > -1) {
                return "#010101"; //"#dbad71";
            } else {
                return "#010101"; // "#FEE090";
            }
        }
        if (prefColors.length > 0) {
            return prefColors[0];
        } else {
            var randomColor = Raphael.getColor();
            while (randomColor == "#ffffff" || usedColors.indexOf(randomColor) != -1) {
                randomColor = "#" + ((1 << 24) * Math.random() | 0).toString(16);
            }
            return randomColor;
        }
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = DisorderLegend;

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(27)))

/***/ }),
/* 159 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_Effect) {if (Object.isUndefined(__webpack_provided_window_dot_Effect)) {
    throw "dragdrop.js requires including script.aculo.us' effects.js library";
}
const Droppables = {
    drops: [],
    remove: function (a) {
        this.drops = this.drops.reject(function (b) {
            return b.element == $(a);
        });
    },
    add: function (b) {
        b = $(b);
        var a = Object.extend({
            greedy: true,
            hoverclass: null,
            tree: false
        }, arguments[1] || {});
        if (a.containment) {
            a._containers = [];
            var c = a.containment;
            if (Object.isArray(c)) {
                c.each(function (d) {
                    a._containers.push($(d));
                });
            } else {
                a._containers.push($(c));
            }
        }
        if (a.accept) {
            a.accept = [a.accept].flatten();
        }
        Element.makePositioned(b);
        a.element = b;
        this.drops.push(a);
    },
    findDeepestChild: function (a) {
        var deepest = a[0];
        for (var i = 1; i < a.length; ++i) {
            if (Element.isParent(a[i].element, deepest.element)) {
                deepest = a[i];
            }
        }
        return deepest;
    },
    isContained: function (b, a) {
        var c;
        if (a.tree) {
            c = b.treeNode;
        } else {
            c = b.parentNode;
        }
        return a._containers.detect(function (d) {
            return c == d;
        });
    },
    isAffected: function (a, c, b) {
        return b.element != c && (!b._containers || this.isContained(c, b)) && (!b.accept || Element.classNames(c).detect(function (d) {
            return b.accept.include(d);
        })) && Position.within(b.element, a[0], a[1]);
    },
    deactivate: function (a) {
        if (a.hoverclass) {
            Element.removeClassName(a.element, a.hoverclass);
        }
        this.last_active = null;
    },
    activate: function (a) {
        if (a.hoverclass) {
            Element.addClassName(a.element, a.hoverclass);
        }
        this.last_active = a;
    },
    show: function (a, c) {
        if (!this.drops.length) {
            return;
        }
        var b,
            d = [];
        this.drops.each(function (e) {
            if (Droppables.isAffected(a, c, e)) {
                d.push(e);
            }
        });
        if (d.length > 0) {
            b = Droppables.findDeepestChild(d);
        }
        if (this.last_active && this.last_active != b) {
            this.deactivate(this.last_active);
        }
        if (b) {
            Position.within(b.element, a[0], a[1]);
            if (b.onHover) {
                b.onHover(c, b.element, Position.overlap(b.overlap, b.element));
            }
            if (b != this.last_active) {
                Droppables.activate(b);
            }
        }
    },
    fire: function (b, a) {
        if (!this.last_active) {
            return;
        }
        Position.prepare();
        if (this.isAffected([Event.pointerX(b), Event.pointerY(b)], a, this.last_active)) {
            if (this.last_active.onDrop) {
                this.last_active.onDrop(a, this.last_active.element, b);
                return true;
            }
        }
    },
    reset: function () {
        if (this.last_active) {
            this.deactivate(this.last_active);
        }
    }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = Droppables;

const Draggables = {
    drags: [],
    observers: [],
    register: function (a) {
        if (this.drags.length == 0) {
            this.eventMouseUp = this.endDrag.bindAsEventListener(this);
            this.eventMouseMove = this.updateDrag.bindAsEventListener(this);
            this.eventKeypress = this.keyPress.bindAsEventListener(this);
            Event.observe(document, "mouseup", this.eventMouseUp);
            Event.observe(document, "mousemove", this.eventMouseMove);
            Event.observe(document, "keypress", this.eventKeypress);
        }
        this.drags.push(a);
    },
    unregister: function (a) {
        this.drags = this.drags.reject(function (b) {
            return b == a;
        });
        if (this.drags.length == 0) {
            Event.stopObserving(document, "mouseup", this.eventMouseUp);
            Event.stopObserving(document, "mousemove", this.eventMouseMove);
            Event.stopObserving(document, "keypress", this.eventKeypress);
        }
    },
    activate: function (a) {
        if (a.options.delay) {
            this._timeout = setTimeout(function () {
                Draggables._timeout = null;
                window.focus();
                Draggables.activeDraggable = a;
            }.bind(this), a.options.delay);
        } else {
            window.focus();
            this.activeDraggable = a;
        }
    },
    deactivate: function () {
        this.activeDraggable = null;
    },
    updateDrag: function (a) {
        if (!this.activeDraggable) {
            return;
        }
        var b = [Event.pointerX(a), Event.pointerY(a)];
        if (this._lastPointer && this._lastPointer.inspect() == b.inspect()) {
            return;
        }
        this._lastPointer = b;
        this.activeDraggable.updateDrag(a, b);
    },
    endDrag: function (a) {
        if (this._timeout) {
            clearTimeout(this._timeout);
            this._timeout = null;
        }
        if (!this.activeDraggable) {
            return;
        }
        this._lastPointer = null;
        this.activeDraggable.endDrag(a);
        this.activeDraggable = null;
    },
    keyPress: function (a) {
        if (this.activeDraggable) {
            this.activeDraggable.keyPress(a);
        }
    },
    addObserver: function (a) {
        this.observers.push(a);
        this._cacheObserverCallbacks();
    },
    removeObserver: function (a) {
        this.observers = this.observers.reject(function (b) {
            return b.element == a;
        });
        this._cacheObserverCallbacks();
    },
    notify: function (b, a, c) {
        if (this[b + "Count"] > 0) {
            this.observers.each(function (d) {
                if (d[b]) {
                    d[b](b, a, c);
                }
            });
        }
        if (a.options[b]) {
            a.options[b](a, c);
        }
    },
    _cacheObserverCallbacks: function () {
        ["onStart", "onEnd", "onDrag"].each(function (a) {
            Draggables[a + "Count"] = Draggables.observers.select(function (b) {
                return b[a];
            }).length;
        });
    }
};
/* unused harmony export Draggables */

const Draggable = Class.create({
    initialize: function (b) {
        var c = {
            handle: false,
            reverteffect: function (f, e, d) {
                var g = Math.sqrt(Math.abs(e ^ 2) + Math.abs(d ^ 2)) * 0.02;
                new Effect.Move(f, {
                    x: -d,
                    y: -e,
                    duration: g,
                    queue: {
                        scope: "_draggable",
                        position: "end"
                    }
                });
            },
            endeffect: function (e) {
                var d = Object.isNumber(e._opacity) ? e._opacity : 1;
                new Effect.Opacity(e, {
                    duration: 0.2,
                    from: 0.7,
                    to: d,
                    queue: {
                        scope: "_draggable",
                        position: "end"
                    },
                    afterFinish: function () {
                        Draggable._dragging[e] = false;
                    }
                });
            },
            zindex: 1000,
            revert: false,
            quiet: false,
            scroll: false,
            scrollSensitivity: 20,
            scrollSpeed: 15,
            snap: false,
            delay: 0
        };
        if (!arguments[1] || Object.isUndefined(arguments[1].endeffect)) {
            Object.extend(c, {
                starteffect: function (d) {
                    d._opacity = Element.getOpacity(d);
                    Draggable._dragging[d] = true;
                    new Effect.Opacity(d, {
                        duration: 0.2,
                        from: d._opacity,
                        to: 0.7
                    });
                }
            });
        }
        var a = Object.extend(c, arguments[1] || {});
        this.element = $(b);
        if (a.handle && Object.isString(a.handle)) {
            this.handle = this.element.down("." + a.handle, 0);
        }
        if (!this.handle) {
            this.handle = $(a.handle);
        }
        if (!this.handle) {
            this.handle = this.element;
        }
        if (a.scroll && !a.scroll.scrollTo && !a.scroll.outerHTML) {
            a.scroll = $(a.scroll);
            this._isScrollChild = Element.childOf(this.element, a.scroll);
        }
        Element.makePositioned(this.element);
        this.options = a;
        this.dragging = false;
        this.eventMouseDown = this.initDrag.bindAsEventListener(this);
        Event.observe(this.handle, "mousedown", this.eventMouseDown);
        Draggables.register(this);
    },
    destroy: function () {
        Event.stopObserving(this.handle, "mousedown", this.eventMouseDown);
        Draggables.unregister(this);
    },
    currentDelta: function () {
        return [parseInt(Element.getStyle(this.element, "left") || "0"), parseInt(Element.getStyle(this.element, "top") || "0")];
    },
    initDrag: function (a) {
        if (!Object.isUndefined(Draggable._dragging[this.element]) && Draggable._dragging[this.element]) {
            return;
        }
        if (Event.isLeftClick(a)) {
            var c = Event.element(a);
            if ((tag_name = c.tagName.toUpperCase()) && (tag_name == "INPUT" || tag_name == "SELECT" || tag_name == "OPTION" || tag_name == "BUTTON" || tag_name == "TEXTAREA")) {
                return;
            }
            var b = [Event.pointerX(a), Event.pointerY(a)];
            var d = this.element.cumulativeOffset();
            this.offset = [0, 1].map(function (e) {
                return b[e] - d[e];
            });
            Draggables.activate(this);
            Event.stop(a);
        }
    },
    startDrag: function (b) {
        this.dragging = true;
        if (!this.delta) {
            this.delta = this.currentDelta();
        }
        if (this.options.zindex) {
            this.originalZ = parseInt(Element.getStyle(this.element, "z-index") || 0);
            this.element.style.zIndex = this.options.zindex;
        }
        if (this.options.ghosting) {
            this._clone = this.element.cloneNode(true);
            this._originallyAbsolute = this.element.getStyle("position") == "absolute";
            if (!this._originallyAbsolute) {
                Position.absolutize(this.element);
            }
            this.element.parentNode.insertBefore(this._clone, this.element);
        }
        if (this.options.scroll) {
            if (this.options.scroll == window) {
                var a = this._getWindowScroll(this.options.scroll);
                this.originalScrollLeft = a.left;
                this.originalScrollTop = a.top;
            } else {
                this.originalScrollLeft = this.options.scroll.scrollLeft;
                this.originalScrollTop = this.options.scroll.scrollTop;
            }
        }
        Draggables.notify("onStart", this, b);
        if (this.options.starteffect) {
            this.options.starteffect(this.element);
        }
    },
    updateDrag: function (event, pointer) {
        if (!this.dragging) {
            this.startDrag(event);
        }
        if (!this.options.quiet) {
            Position.prepare();
            Droppables.show(pointer, this.element);
        }
        Draggables.notify("onDrag", this, event);
        this.draw(pointer);
        if (this.options.change) {
            this.options.change(this);
        }
        if (this.options.scroll) {
            this.stopScrolling();
            var p;
            if (this.options.scroll == window) {
                const { left, width, top, height } = this._getWindowScroll(this.options.scroll);
                p = [left, top, left + width, top + height];
            } else {
                p = Position.page(this.options.scroll).toArray();
                p[0] += this.options.scroll.scrollLeft + Position.deltaX;
                p[1] += this.options.scroll.scrollTop + Position.deltaY;
                p.push(p[0] + this.options.scroll.offsetWidth);
                p.push(p[1] + this.options.scroll.offsetHeight);
            }
            var speed = [0, 0];
            if (pointer[0] < p[0] + this.options.scrollSensitivity) {
                speed[0] = pointer[0] - (p[0] + this.options.scrollSensitivity);
            }
            if (pointer[1] < p[1] + this.options.scrollSensitivity) {
                speed[1] = pointer[1] - (p[1] + this.options.scrollSensitivity);
            }
            if (pointer[0] > p[2] - this.options.scrollSensitivity) {
                speed[0] = pointer[0] - (p[2] - this.options.scrollSensitivity);
            }
            if (pointer[1] > p[3] - this.options.scrollSensitivity) {
                speed[1] = pointer[1] - (p[3] - this.options.scrollSensitivity);
            }
            this.startScrolling(speed);
        }
        // if (Prototype.Browser.WebKit) {
        //     window.scrollBy(0, 0);
        // }
        Event.stop(event);
    },
    finishDrag: function (b, f) {
        this.dragging = false;
        if (this.options.quiet) {
            Position.prepare();
            var e = [Event.pointerX(b), Event.pointerY(b)];
            Droppables.show(e, this.element);
        }
        if (this.options.ghosting) {
            if (!this._originallyAbsolute) {
                Position.relativize(this.element);
            }
            delete this._originallyAbsolute;
            Element.remove(this._clone);
            this._clone = null;
        }
        var g = false;
        if (f) {
            g = Droppables.fire(b, this.element);
            if (!g) {
                g = false;
            }
        }
        if (g && this.options.onDropped) {
            this.options.onDropped(this.element);
        }
        Draggables.notify("onEnd", this, b);
        var a = this.options.revert;
        if (a && Object.isFunction(a)) {
            a = a(this.element);
        }
        var c = this.currentDelta();
        if (a && this.options.reverteffect) {
            if (g == 0 || a != "failure") {
                this.options.reverteffect(this.element, c[1] - this.delta[1], c[0] - this.delta[0]);
            }
        } else {
            this.delta = c;
        }
        if (this.options.zindex) {
            this.element.style.zIndex = this.originalZ;
        }
        if (this.options.endeffect) {
            this.options.endeffect(this.element);
        }
        Draggables.deactivate(this);
        Droppables.reset();
    },
    keyPress: function (a) {
        if (a.keyCode != Event.KEY_ESC) {
            return;
        }
        this.finishDrag(a, false);
        Event.stop(a);
    },
    endDrag: function (a) {
        if (!this.dragging) {
            return;
        }
        this.stopScrolling();
        this.finishDrag(a, true);
        Event.stop(a);
    },
    draw: function (a) {
        var g = this.element.cumulativeOffset();
        if (this.options.ghosting) {
            var c = Position.realOffset(this.element);
            g[0] += c[0] - Position.deltaX;
            g[1] += c[1] - Position.deltaY;
        }
        var f = this.currentDelta();
        g[0] -= f[0];
        g[1] -= f[1];
        if (this.options.scroll && this.options.scroll != window && this._isScrollChild) {
            g[0] -= this.options.scroll.scrollLeft - this.originalScrollLeft;
            g[1] -= this.options.scroll.scrollTop - this.originalScrollTop;
        }
        var e = [0, 1].map(function (d) {
            return a[d] - g[d] - this.offset[d];
        }.bind(this));
        if (this.options.snap) {
            if (Object.isFunction(this.options.snap)) {
                e = this.options.snap(e[0], e[1], this);
            } else {
                if (Object.isArray(this.options.snap)) {
                    e = e.map(function (d, h) {
                        return (d / this.options.snap[h]).round() * this.options.snap[h];
                    }.bind(this));
                } else {
                    e = e.map(function (d) {
                        return (d / this.options.snap).round() * this.options.snap;
                    }.bind(this));
                }
            }
        }
        var b = this.element.style;
        if (!this.options.constraint || this.options.constraint == "horizontal") {
            b.left = e[0] + "px";
        }
        if (!this.options.constraint || this.options.constraint == "vertical") {
            b.top = e[1] + "px";
        }
        if (b.visibility == "hidden") {
            b.visibility = "";
        }
    },
    stopScrolling: function () {
        if (this.scrollInterval) {
            clearInterval(this.scrollInterval);
            this.scrollInterval = null;
            Draggables._lastScrollPointer = null;
        }
    },
    startScrolling: function (a) {
        if (!(a[0] || a[1])) {
            return;
        }
        this.scrollSpeed = [a[0] * this.options.scrollSpeed, a[1] * this.options.scrollSpeed];
        this.lastScrolled = new Date();
        this.scrollInterval = setInterval(this.scroll.bind(this), 10);
    },
    scroll: function () {
        var current = new Date();
        var delta = current - this.lastScrolled;
        this.lastScrolled = current;
        if (this.options.scroll == window) {
            const { left, top } = this._getWindowScroll(this.options.scroll);
            if (this.scrollSpeed[0] || this.scrollSpeed[1]) {
                var d = delta / 1000;
                this.options.scroll.scrollTo(left + d * this.scrollSpeed[0], top + d * this.scrollSpeed[1]);
            }
        } else {
            this.options.scroll.scrollLeft += this.scrollSpeed[0] * delta / 1000;
            this.options.scroll.scrollTop += this.scrollSpeed[1] * delta / 1000;
        }
        Position.prepare();
        Droppables.show(Draggables._lastPointer, this.element);
        Draggables.notify("onDrag", this);
        if (this._isScrollChild) {
            Draggables._lastScrollPointer = Draggables._lastScrollPointer || $A(Draggables._lastPointer);
            Draggables._lastScrollPointer[0] += this.scrollSpeed[0] * delta / 1000;
            Draggables._lastScrollPointer[1] += this.scrollSpeed[1] * delta / 1000;
            if (Draggables._lastScrollPointer[0] < 0) {
                Draggables._lastScrollPointer[0] = 0;
            }
            if (Draggables._lastScrollPointer[1] < 0) {
                Draggables._lastScrollPointer[1] = 0;
            }
            this.draw(Draggables._lastScrollPointer);
        }
        if (this.options.change) {
            this.options.change(this);
        }
    },
    _getWindowScroll: function (w) {
        var T, L, W, H;
        const { documentElement, body } = w.document;
        if (w.document.documentElement && documentElement.scrollTop) {
            T = documentElement.scrollTop;
            L = documentElement.scrollLeft;
        } else {
            if (w.document.body) {
                T = body.scrollTop;
                L = body.scrollLeft;
            }
        }
        if (w.innerWidth) {
            W = w.innerWidth;
            H = w.innerHeight;
        } else {
            if (w.document.documentElement && documentElement.clientWidth) {
                W = documentElement.clientWidth;
                H = documentElement.clientHeight;
            } else {
                W = body.offsetWidth;
                H = body.offsetHeight;
            }
        }
        return {
            top: T,
            left: L,
            width: W,
            height: H
        };
    }
});
/* harmony export (immutable) */ __webpack_exports__["b"] = Draggable;

Draggable._dragging = {};

const SortableObserver = Class.create({
    initialize: function (b, a) {
        this.element = $(b);
        this.observer = a;
        this.lastValue = Sortable.serialize(this.element);
    },
    onStart: function () {
        this.lastValue = Sortable.serialize(this.element);
    },
    onEnd: function () {
        Sortable.unmark();
        if (this.lastValue != Sortable.serialize(this.element)) {
            this.observer(this.element);
        }
    }
});
/* unused harmony export SortableObserver */


const Sortable = {
    SERIALIZE_RULE: /^[^_\-](?:[A-Za-z0-9\-\_]*)[_](.*)$/,
    sortables: {},
    _findRootElement: function (a) {
        while (a.tagName.toUpperCase() != "BODY") {
            if (a.id && Sortable.sortables[a.id]) {
                return a;
            }
            a = a.parentNode;
        }
    },
    options: function (a) {
        a = Sortable._findRootElement($(a));
        if (!a) {
            return;
        }
        return Sortable.sortables[a.id];
    },
    destroy: function (a) {
        a = $(a);
        var b = Sortable.sortables[a.id];
        if (b) {
            Draggables.removeObserver(b.element);
            b.droppables.each(function (c) {
                Droppables.remove(c);
            });
            b.draggables.invoke("destroy");
            delete Sortable.sortables[b.element.id];
        }
    },
    create: function (c) {
        c = $(c);
        var b = Object.extend({
            element: c,
            tag: "li",
            dropOnEmpty: false,
            tree: false,
            treeTag: "ul",
            overlap: "vertical",
            constraint: "vertical",
            containment: c,
            handle: false,
            only: false,
            delay: 0,
            hoverclass: null,
            ghosting: false,
            quiet: false,
            scroll: false,
            scrollSensitivity: 20,
            scrollSpeed: 15,
            format: this.SERIALIZE_RULE,
            elements: false,
            handles: false,
            onChange: () => {}, // Prototype.emptyFunction,
            onUpdate: () => {} }, arguments[1] || {});
        this.destroy(c);
        var a = {
            revert: true,
            quiet: b.quiet,
            scroll: b.scroll,
            scrollSpeed: b.scrollSpeed,
            scrollSensitivity: b.scrollSensitivity,
            delay: b.delay,
            ghosting: b.ghosting,
            constraint: b.constraint,
            handle: b.handle
        };
        if (b.starteffect) {
            a.starteffect = b.starteffect;
        }
        if (b.reverteffect) {
            a.reverteffect = b.reverteffect;
        } else {
            if (b.ghosting) {
                a.reverteffect = function (f) {
                    f.style.top = 0;
                    f.style.left = 0;
                };
            }
        }
        if (b.endeffect) {
            a.endeffect = b.endeffect;
        }
        if (b.zindex) {
            a.zindex = b.zindex;
        }
        var d = {
            overlap: b.overlap,
            containment: b.containment,
            tree: b.tree,
            hoverclass: b.hoverclass,
            onHover: Sortable.onHover
        };
        var e = {
            onHover: Sortable.onEmptyHover,
            overlap: b.overlap,
            containment: b.containment,
            hoverclass: b.hoverclass
        };
        Element.cleanWhitespace(c);
        b.draggables = [];
        b.droppables = [];
        if (b.dropOnEmpty || b.tree) {
            Droppables.add(c, e);
            b.droppables.push(c);
        }(b.elements || this.findElements(c, b) || []).each(function (h, f) {
            var g = b.handles ? $(b.handles[f]) : b.handle ? $(h).select("." + b.handle)[0] : h;
            b.draggables.push(new Draggable(h, Object.extend(a, {
                handle: g
            })));
            Droppables.add(h, d);
            if (b.tree) {
                h.treeNode = c;
            }
            b.droppables.push(h);
        });
        if (b.tree) {
            (Sortable.findTreeElements(c, b) || []).each(function (f) {
                Droppables.add(f, e);
                f.treeNode = c;
                b.droppables.push(f);
            });
        }
        this.sortables[c.identify()] = b;
        Draggables.addObserver(new SortableObserver(c, b.onUpdate));
    },
    findElements: function (b, a) {
        return Element.findChildren(b, a.only, a.tree ? true : false, a.tag);
    },
    findTreeElements: function (b, a) {
        return Element.findChildren(b, a.only, a.tree ? true : false, a.treeTag);
    },
    onHover: function (e, d, a) {
        if (Element.isParent(d, e)) {
            return;
        }
        if (a > 0.33 && a < 0.66 && Sortable.options(d).tree) {
            return;
        } else {
            if (a > 0.5) {
                Sortable.mark(d, "before");
                if (d.previousSibling != e) {
                    var b = e.parentNode;
                    e.style.visibility = "hidden";
                    d.parentNode.insertBefore(e, d);
                    if (d.parentNode != b) {
                        Sortable.options(b).onChange(e);
                    }
                    Sortable.options(d.parentNode).onChange(e);
                }
            } else {
                Sortable.mark(d, "after");
                var c = d.nextSibling || null;
                if (c != e) {
                    var b = e.parentNode;
                    e.style.visibility = "hidden";
                    d.parentNode.insertBefore(e, c);
                    if (d.parentNode != b) {
                        Sortable.options(b).onChange(e);
                    }
                    Sortable.options(d.parentNode).onChange(e);
                }
            }
        }
    },
    onEmptyHover: function (e, g, h) {
        var j = e.parentNode;
        var a = Sortable.options(g);
        if (!Element.isParent(g, e)) {
            var f;
            var c = Sortable.findElements(g, {
                tag: a.tag,
                only: a.only
            });
            var b = null;
            if (c) {
                var d = Element.offsetSize(g, a.overlap) * (1 - h);
                for (f = 0; f < c.length; f += 1) {
                    if (d - Element.offsetSize(c[f], a.overlap) >= 0) {
                        d -= Element.offsetSize(c[f], a.overlap);
                    } else {
                        if (d - Element.offsetSize(c[f], a.overlap) / 2 >= 0) {
                            b = f + 1 < c.length ? c[f + 1] : null;
                            break;
                        } else {
                            b = c[f];
                            break;
                        }
                    }
                }
            }
            g.insertBefore(e, b);
            Sortable.options(j).onChange(e);
            a.onChange(e);
        }
    },
    unmark: function () {
        if (Sortable._marker) {
            Sortable._marker.hide();
        }
    },
    mark: function (b, a) {
        var d = Sortable.options(b.parentNode);
        if (d && !d.ghosting) {
            return;
        }
        if (!Sortable._marker) {
            Sortable._marker = ($("dropmarker") || Element.extend(document.createElement("DIV"))).hide().addClassName("dropmarker").setStyle({
                position: "absolute"
            });
            document.getElementsByTagName("body").item(0).appendChild(Sortable._marker);
        }
        var c = b.cumulativeOffset();
        Sortable._marker.setStyle({
            left: c[0] + "px",
            top: c[1] + "px"
        });
        if (a == "after") {
            if (d.overlap == "horizontal") {
                Sortable._marker.setStyle({
                    left: c[0] + b.clientWidth + "px"
                });
            } else {
                Sortable._marker.setStyle({
                    top: c[1] + b.clientHeight + "px"
                });
            }
        }
        Sortable._marker.show();
    },
    _tree: function (e, b, f) {
        var d = Sortable.findElements(e, b) || [];
        for (var c = 0; c < d.length; ++c) {
            var a = d[c].id.match(b.format);
            if (!a) {
                continue;
            }
            var g = {
                id: encodeURIComponent(a ? a[1] : null),
                element: e,
                parent: f,
                children: [],
                position: f.children.length,
                container: $(d[c]).down(b.treeTag)
            };
            if (g.container) {
                this._tree(g.container, b, g);
            }
            f.children.push(g);
        }
        return f;
    },
    tree: function (d) {
        d = $(d);
        var c = this.options(d);
        var b = Object.extend({
            tag: c.tag,
            treeTag: c.treeTag,
            only: c.only,
            name: d.id,
            format: c.format
        }, arguments[1] || {});
        var a = {
            id: null,
            parent: null,
            children: [],
            container: d,
            position: 0
        };
        return Sortable._tree(d, b, a);
    },
    _constructIndex: function (b) {
        var a = "";
        do {
            if (b.id) {
                a = "[" + b.position + "]" + a;
            }
        } while ((b = b.parent) != null);
        return a;
    },
    sequence: function (b) {
        b = $(b);
        var a = Object.extend(this.options(b), arguments[1] || {});
        return $(this.findElements(b, a) || []).map(function (c) {
            return c.id.match(a.format) ? c.id.match(a.format)[1] : "";
        });
    },
    setSequence: function (b, c) {
        b = $(b);
        var a = Object.extend(this.options(b), arguments[2] || {});
        var d = {};
        this.findElements(b, a).each(function (e) {
            if (e.id.match(a.format)) {
                d[e.id.match(a.format)[1]] = [e, e.parentNode];
            }
            e.parentNode.removeChild(e);
        });
        c.each(function (e) {
            var f = d[e];
            if (f) {
                f[1].appendChild(f[0]);
                delete d[e];
            }
        });
    },
    serialize: function (c) {
        c = $(c);
        var b = Object.extend(Sortable.options(c), arguments[1] || {});
        var a = encodeURIComponent(arguments[1] && arguments[1].name ? arguments[1].name : c.id);
        if (b.tree) {
            return Sortable.tree(c, arguments[1]).children.map(function (d) {
                return [a + Sortable._constructIndex(d) + "[id]=" + encodeURIComponent(d.id)].concat(d.children.map(arguments.callee));
            }).flatten().join("&");
        } else {
            return Sortable.sequence(c, arguments[1]).map(function (d) {
                return a + "[]=" + encodeURIComponent(d);
            }).join("&");
        }
    }
};
/* unused harmony export Sortable */

Element.isParent = function (b, a) {
    if (!b.parentNode || b == a) {
        return false;
    }
    if (b.parentNode == a) {
        return true;
    }
    return Element.isParent(b.parentNode, a);
};
Element.findChildren = function (d, b, a, c) {
    if (!d.hasChildNodes()) {
        return null;
    }
    c = c.toUpperCase();
    if (b) {
        b = [b].flatten();
    }
    var e = [];
    $A(d.childNodes).each(function (g) {
        if (g.tagName && g.tagName.toUpperCase() == c && (!b || Element.classNames(g).detect(function (h) {
            return b.include(h);
        }))) {
            e.push(g);
        }
        if (a) {
            var f = Element.findChildren(g, b, a, c);
            if (f) {
                e.push(f);
            }
        }
    });
    return e.length > 0 ? e.flatten() : [];
};
Element.offsetSize = function (a, b) {
    return a["offset" + (b == "vertical" || b == "height" ? "Height" : "Width")];
};
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(154)))

/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__baseGraph__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__positionedGraph__ = __webpack_require__(174);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__heuristics__ = __webpack_require__(163);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__import__ = __webpack_require__(165);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__helpers__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__queues__ = __webpack_require__(44);
/* harmony export (immutable) */ __webpack_exports__["a"] = DynamicPositionedGraph;







// DynamicPositionedGraph adds support for online modifications and provides a convenient API for UI implementations

function DynamicPositionedGraph(drawGraph) {
    this.DG = drawGraph;

    this._heuristics = new __WEBPACK_IMPORTED_MODULE_2__heuristics__["a" /* Heuristics */](drawGraph); // heuristics & helper methods separated into a separate class

    this._heuristics.improvePositioning();

    this._onlyProbandGraph = [{ name: "proband" }];
}

DynamicPositionedGraph.makeEmpty = function (layoutRelativePersonWidth, layoutRelativeOtherWidth) {
    var baseG = new __WEBPACK_IMPORTED_MODULE_0__baseGraph__["a" /* BaseGraph */](layoutRelativePersonWidth, layoutRelativeOtherWidth);
    var positionedG = new __WEBPACK_IMPORTED_MODULE_1__positionedGraph__["a" /* PositionedGraph */](baseG);
    return new DynamicPositionedGraph(positionedG);
};

DynamicPositionedGraph.prototype = {

    isValidID: function (id) {
        if (id < 0 || id > this.DG.GG.getMaxRealVertexId()) return false;
        if (!this.DG.GG.isPerson(id) && !this.DG.GG.isRelationship(id)) return false;
        return true;
    },

    getMaxNodeId: function () {
        return this.DG.GG.getMaxRealVertexId();
    },

    isPersonGroup: function (id) {
        return this.getProperties(id).hasOwnProperty("numPersons");
    },

    isPerson: function (id) {
        return this.DG.GG.isPerson(id);
    },

    isRelationship: function (id) {
        return this.DG.GG.isRelationship(id);
    },

    isPlaceholder: function (id) {
        if (!this.isPerson(id)) return false;
        // TODO
        return false;
    },

    isAdopted: function (id) {
        if (!this.isPerson(id)) throw "Assertion failed: isAdopted() is applied to a non-person";
        return this.DG.GG.isAdopted(id);
    },

    getGeneration: function (id) {
        var minRank = Math.min.apply(null, this.DG.ranks);
        return (this.DG.ranks[id] - minRank) / 2 + 1;
    },

    getOrderWithinGeneration: function (id) {
        if (!this.isPerson(id)) throw "Assertion failed: getOrderWithinGeneration() is applied to a non-person";

        var order = 0;
        var rank = this.DG.ranks[id];
        for (var i = 0; i < this.DG.order.order[rank].length; i++) {
            var next = this.DG.order.order[rank][i];
            if (this.DG.GG.isPerson(next)) order++;
            if (next == id) break;
        }
        return order;
    },

    // returns null if person has no twins
    getTwinGroupId: function (id) {
        return this.DG.GG.getTwinGroupId(id);
    },

    // returns and array of twins, sorted by order left to right. Always contains at least "id" itself
    getAllTwinsSortedByOrder: function (id) {
        var twins = this.DG.GG.getAllTwinsOf(id);
        var vOrder = this.DG.order.vOrder;
        var byOrder = function (a, b) {
            return vOrder[a] - vOrder[b];
        };
        twins.sort(byOrder);
        return twins;
    },

    isChildless: function (id) {
        if (!this.getProperties(id).hasOwnProperty("childlessStatus")) return false;
        var res = this.getProperties(id)["childlessStatus"] !== null;
        //console.log("childless status of " + id + " : " + res);
        return res;
    },

    isConsangrRelationship: function (id) {
        if (!this.isRelationship(id)) throw "Assertion failed: isConsangrRelationship() is applied to a non-relationship";

        return this.DG.consangr.hasOwnProperty(id);
    },

    getProperties: function (id) {
        return this.DG.GG.properties[id];
    },

    setProperties: function (id, newSetOfProperties) {
        this.DG.GG.properties[id] = newSetOfProperties;
    },

    // returns false if this gender is incompatible with this pedigree; true otherwise
    setProbandData: function (firstName, lastName, gender) {
        this.DG.GG.properties[0].fName = firstName;
        this.DG.GG.properties[0].lName = lastName;

        var setGender = gender;
        var possibleGenders = this.getPossibleGenders(0);

        if (!possibleGenders.hasOwnProperty(gender) || !possibleGenders[gender]) setGender = "U";
        this.DG.GG.properties[0].gender = setGender;

        return gender == setGender;
    },

    getPosition: function (v) {
        // returns coordinates of node v
        var x = this.DG.positions[v];
        console.warn(x);

        var rank = this.DG.ranks[v];

        var vertLevel = this.DG.GG.isChildhub(v) ? this.DG.vertLevel.childEdgeLevel[v] : 1;

        var y = this.DG.computeNodeY(rank, vertLevel);

        if (this.DG.GG.isVirtual(v)) {
            var relId = this.DG.GG.downTheChainUntilNonVirtual(v);
            var personId = this.DG.GG.upTheChainUntilNonVirtual(v);

            var rankPerson = this.DG.ranks[personId];
            if (rank == rankPerson) {
                var level = this.DG.vertLevel.outEdgeVerticalLevel[personId][relId].verticalLevel;
                y = this.DG.computeRelLineY(rank, 0, level).relLineY;
            }

            var rankRelationship = this.DG.ranks[relId];
            if (rank == rankRelationship) {
                y = this.getPosition(relId).y;
            }
        } else if (this.isRelationship(v)) {
            var partners = this.DG.GG.getParents(v);
            var level1 = this.DG.vertLevel.outEdgeVerticalLevel[partners[0]].hasOwnProperty(v) ? this.DG.vertLevel.outEdgeVerticalLevel[partners[0]][v].verticalLevel : 0;
            var level2 = this.DG.vertLevel.outEdgeVerticalLevel[partners[1]].hasOwnProperty(v) ? this.DG.vertLevel.outEdgeVerticalLevel[partners[1]][v].verticalLevel : 0;
            var level = Math.min(level1, level2);
            var attach1 = this.DG.vertLevel.outEdgeVerticalLevel[partners[0]].hasOwnProperty(v) ? this.DG.vertLevel.outEdgeVerticalLevel[partners[0]][v].attachlevel : 0;
            var attach2 = this.DG.vertLevel.outEdgeVerticalLevel[partners[1]].hasOwnProperty(v) ? this.DG.vertLevel.outEdgeVerticalLevel[partners[1]][v].attachlevel : 0;
            var attach = Math.min(attach1, attach2);
            y = this.DG.computeRelLineY(rank, attach, level).relLineY;
        }

        return { "x": x, "y": y };
    },

    getRelationshipChildhubPosition: function (v) {
        if (!this.isRelationship(v)) throw "Assertion failed: getRelationshipChildhubPosition() is applied to a non-relationship";

        var childhubId = this.DG.GG.getRelationshipChildhub(v);

        return this.getPosition(childhubId);
    },

    getRelationshipLineInfo: function (relationship, person) {
        if (!this.isRelationship(relationship)) throw "Assertion failed: getRelationshipToPersonLinePosition() is applied to a non-relationship";
        if (!this.isPerson(person)) throw "Assertion failed: getRelationshipToPersonLinePosition() is applied to a non-person";

        var info = this.DG.vertLevel.outEdgeVerticalLevel[person].hasOwnProperty(relationship) ? this.DG.vertLevel.outEdgeVerticalLevel[person][relationship] : { attachlevel: 0, verticalLevel: 0, numAttachLevels: 1 };

        //console.log("Info: " +  stringifyObject(info));

        var verticalRelInfo = this.DG.computeRelLineY(this.DG.ranks[person], info.attachlevel, info.verticalLevel);

        var result = {
            "attachmentPort": info.attachlevel,
            "attachY": verticalRelInfo.attachY,
            "verticalLevel": info.verticalLevel,
            "verticalY": verticalRelInfo.relLineY,
            "numAttachPorts": info.numAttachLevels
        };

        //console.log("rel: " + relationship + ", person: " + person + " => " + stringifyObject(result));
        return result;
    },

    // returns all the children sorted by their order in the graph (left to right)
    getRelationshipChildrenSortedByOrder: function (v) {
        if (!this.isRelationship(v)) throw "Assertion failed: getRelationshipChildren() is applied to a non-relationship";

        var childhubId = this.DG.GG.getRelationshipChildhub(v);

        var children = this.DG.GG.getOutEdges(childhubId);

        var vOrder = this.DG.order.vOrder;
        var byOrder = function (a, b) {
            return vOrder[a] - vOrder[b];
        };
        children.sort(byOrder);

        return children;
    },

    getAllChildren: function (v) {
        if (!this.isPerson(v) && !this.isRelationship(v)) throw "Assertion failed: getAllChildren() is applied to a non-person non-relationship node";

        var rels = this.isRelationship(v) ? [v] : this.DG.GG.getAllRelationships(v);

        var allChildren = [];
        for (var i = 0; i < rels.length; i++) {
            var chhub = this.DG.GG.getOutEdges(rels[i])[0];
            var children = this.DG.GG.getOutEdges(chhub);

            allChildren = allChildren.concat(children);
        }
        return allChildren;
    },

    isChildOfProband: function (v) {
        var parents = this.DG.GG.getParents(v);
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["h" /* arrayContains */])(parents, 0)) return true;
        return false;
    },

    isPartnershipRelatedToProband: function (v) {
        var parents = this.DG.GG.getParents(v);
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["h" /* arrayContains */])(parents, 0)) return true;
        if (v == this.DG.GG.getProducingRelationship(0)) {
            return true;
        }
        return false;
    },

    // returns true iff node v is either a sibling, a child or a parent of proband node
    isRelatedToProband: function (v) {
        var probandRelatedRels = this.getAllRelatedRelationships(0);
        for (var i = 0; i < probandRelatedRels.length; i++) {
            var rel = probandRelatedRels[i];

            var parents = this.DG.GG.getParents(rel);
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["h" /* arrayContains */])(parents, v)) return true;

            var children = this.getAllChildren(rel);
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["h" /* arrayContains */])(children, v)) return true;
        }
        return false;
    },

    // returns all relationships of node v and its parent relationship, if any
    getAllRelatedRelationships: function (v) {
        var allRels = this.DG.GG.getAllRelationships(v);
        var parentRel = this.DG.GG.getProducingRelationship(v);
        if (parentRel != null) {
            allRels.push(parentRel);
        }
        return allRels;
    },

    hasNonPlaceholderNonAdoptedChildren: function (v) {
        if (this.isRelationship(v)) {
            var children = this.getRelationshipChildrenSortedByOrder(v);

            //console.log("Childtren: " + children);
            for (var i = 0; i < children.length; i++) {
                var child = children[i];
                if (!this.isPlaceholder(child) && !this.isAdopted(child)) {
                    //console.log("child: " + child + ", isAdopted: " + this.isAdopted(child));
                    return true;
                }
            }
        } else if (this.isPerson(v)) {
            //var children = ...
            //TODO
        }

        return false;
    },

    getParentRelationship: function (v) {
        if (!this.isPerson(v)) throw "Assertion failed: getParentRelationship() is applied to a non-person";

        return this.DG.GG.getProducingRelationship(v);
    },

    hasToBeAdopted: function (v) {
        if (!this.isPerson(v)) throw "Assertion failed: hasToBeAdopted() is applied to a non-person";

        var parentRel = this.getParentRelationship(v);
        if (parentRel !== null && this.isChildless(parentRel)) return true;
        return false;
    },

    hasRelationships: function (v) {
        if (!this.isPerson(v)) throw "Assertion failed: hasRelationships() is applied to a non-person";

        return this.DG.GG.v[v].length > 0; // if it had relationships it must have been alive at some point
    },

    getPossibleGenders: function (v) {
        var possible = { "M": true, "F": true, "U": true };
        // any if no partners or all partners are of unknown genders; opposite of the partner gender otherwise
        var partners = this.DG.GG.getAllPartners(v);

        var knownGenderPartner = undefined;
        for (var i = 0; i < partners.length; i++) {
            var partnerGender = this.getGender(partners[i]);
            if (partnerGender != "U") {
                possible[partnerGender] = false;
                break;
            }
        }

        //console.log("Possible genders for " + v + ": " + stringifyObject(possible));
        return possible;
    },

    getPossibleChildrenOf: function (v) {
        // all person nodes which are not ancestors of v and which do not already have parents
        var result = [];
        for (var i = 0; i <= this.DG.GG.getMaxRealVertexId(); i++) {
            if (!this.isPerson(i)) continue;
            if (this.DG.GG.inedges[i].length != 0) continue;
            if (this.DG.ancestors[v].hasOwnProperty(i)) continue;
            result.push(i);
        }
        return result;
    },

    getPossibleSiblingsOf: function (v) {
        // all person nodes which are not ancestors and not descendants
        // if v has parents only nodes without parents are returned
        var hasParents = this.getParentRelationship(v) !== null;
        var result = [];
        for (var i = 0; i <= this.DG.GG.getMaxRealVertexId(); i++) {
            if (!this.isPerson(i)) continue;
            if (this.DG.ancestors[v].hasOwnProperty(i)) continue;
            if (this.DG.ancestors[i].hasOwnProperty(v)) continue;
            if (hasParents && this.DG.GG.inedges[i].length != 0) continue;
            result.push(i);
        }
        return result;
    },

    getPossibleParentsOf: function (v) {
        // all person nodes which are not descendants of source node
        var result = [];
        //console.log("Ancestors: " + stringifyObject(this.DG.ancestors));
        for (var i = 0; i <= this.DG.GG.getMaxRealVertexId(); i++) {
            if (!this.isRelationship(i) && !this.isPerson(i)) continue;
            if (this.isPersonGroup(i)) continue;
            if (this.DG.ancestors[i].hasOwnProperty(v)) continue;
            result.push(i);
        }
        return result;
    },

    getPossiblePartnersOf: function (v) {
        // returns all person nodes of the other gender or unknown gender (who are not already partners)
        var oppositeGender = this.DG.GG.getOppositeGender(v);
        var validGendersSet = oppositeGender == "U" ? ["M", "F", "U"] : [oppositeGender, "U"];

        var result = this._getAllPersonsOfGenders(validGendersSet);

        var partners = this.DG.GG.getAllPartners(v);
        partners.push(v);
        for (var i = 0; i < partners.length; i++) __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["j" /* removeFirstOccurrenceByValue */])(result, partners[i]);

        return result;
    },

    getOppositeGender: function (v) {
        if (!this.isPerson(v)) throw "Assertion failed: getOppositeGender() is applied to a non-person";

        return this.DG.GG.getOppositeGender(v);
    },

    getGender: function (v) {
        if (!this.isPerson(v)) throw "Assertion failed: getGender() is applied to a non-person";

        return this.DG.GG.getGender(v);
    },

    getDisconnectedSetIfNodeRemoved: function (v) {
        var removedList = {};
        removedList[v] = true;

        if (this.isPerson(v)) {
            // special case: removing the only child also removes the relationship
            if (this.DG.GG.getInEdges(v).length != 0) {
                var chhub = this.DG.GG.getInEdges(v)[0];
                if (this.DG.GG.getOutEdges(chhub).length == 1) {
                    removedList[this.DG.GG.getInEdges(chhub)[0]] = true;
                }
            }

            // also remove all relationships by this person
            var allRels = this.DG.GG.getAllRelationships(v);
            for (var i = 0; i < allRels.length; i++) {
                removedList[allRels[i]] = true;
            }
        }

        // remove all childhubs of all relationships that need to be removed
        for (var node in removedList) {
            if (removedList.hasOwnProperty(node) && this.isRelationship(node)) {
                var chhubId = this.DG.GG.getOutEdges(node)[0];
                removedList[chhubId] = true;
            }
        }

        // go through all the edges in the tree starting from proband and disregarding any edges going to or from v
        var connected = {};

        var queue = new __WEBPACK_IMPORTED_MODULE_5__queues__["a" /* Queue */]();
        queue.push(0);

        while (queue.size() > 0) {
            var next = parseInt(queue.pop());

            if (connected.hasOwnProperty(next)) continue;
            connected[next] = true;

            var outEdges = this.DG.GG.getOutEdges(next);
            for (var i = 0; i < outEdges.length; i++) {
                if (!removedList.hasOwnProperty(outEdges[i])) queue.push(outEdges[i]);
            }
            var inEdges = this.DG.GG.getInEdges(next);
            for (var i = 0; i < inEdges.length; i++) {
                if (!removedList.hasOwnProperty(inEdges[i])) queue.push(inEdges[i]);
            }
        }
        console.log("Connected nodes: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["c" /* stringifyObject */])(connected));

        var affected = [];
        for (var i = 0; i < this.DG.GG.getNumVertices(); i++) {
            if (this.isPerson(i) || this.isRelationship(i)) {
                if (!connected.hasOwnProperty(i)) affected.push(i);
            }
        }

        console.log("Affected nodes: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["c" /* stringifyObject */])(affected));
        return affected;
    },

    _debugPrintAll: function (headerMessage) {
        console.log("========== " + headerMessage + " ==========");
        //console.log("== GG:");
        //console.log(stringifyObject(this.DG.GG));
        //console.log("== Ranks:");
        //console.log(stringifyObject(this.DG.ranks));
        //console.log("== Orders:");
        //console.log(stringifyObject(this.DG.order));
        //console.log("== Positions:");
        //console.log(stringifyObject(this.DG.positions));
        //console.log("== RankY:");
        //console.log(stringifyObject(this.DG.rankY));
    },

    updateAncestors: function () // sometimes have to do this after the "adopted" property change
    {
        var ancestors = this.DG.findAllAncestors();
        this.DG.ancestors = ancestors.ancestors;
        this.DG.consangr = ancestors.consangr;

        // after consang has changes a random set or relationships may become/no longer be a consangr. relationship
        var movedNodes = [];
        for (var i = 0; i <= this.DG.GG.getMaxRealVertexId(); i++) {
            if (!this.isRelationship(i)) continue;
            movedNodes.push(i);
        }

        return { "moved": movedNodes };
    },

    addNewChild: function (childhubId, properties, numTwins) {
        this._debugPrintAll("before");
        var timer = new __WEBPACK_IMPORTED_MODULE_4__helpers__["g" /* Timer */]();

        if (!this.DG.GG.isChildhub(childhubId)) {
            if (this.DG.GG.isRelationship(childhubId)) childhubId = this.DG.GG.getRelationshipChildhub(childhubId);else throw "Assertion failed: adding children to a non-childhub node";
        }

        var positionsBefore = this.DG.positions.slice(0);
        var ranksBefore = this.DG.ranks.slice(0);
        var vertLevelsBefore = this.DG.vertLevel.copy();
        var rankYBefore = this.DG.rankY.slice(0);
        var numNodesBefore = this.DG.GG.getMaxRealVertexId();

        if (!properties) properties = {};
        if (!numTwins) numTwins = 1;

        var insertRank = this.DG.ranks[childhubId] + 1;

        // find the best order to use for this new vertex: scan all orders on the rank, check number of crossed edges
        var insertOrder = this._findBestInsertPosition(insertRank, childhubId);

        // insert the vertex into the base graph and update ranks, orders & positions
        var newNodeId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, properties, 1.0, childhubId, null, insertRank, insertOrder);

        var newNodes = [newNodeId];
        for (var i = 0; i < numTwins - 1; i++) {
            var changeSet = this.addTwin(newNodeId, properties);
            newNodes.push(changeSet["new"][0]);
        }

        // validate: by now the graph should satisfy all assumptions
        this.DG.GG.validate();

        // fix common layout mistakes (e.g. relationship not right above the only child)
        // and update vertical positioning of all edges
        this._heuristics.improvePositioning(ranksBefore, rankYBefore);

        // update ancestors
        this.updateAncestors();

        timer.printSinceLast("=== AddChild runtime: ");
        this._debugPrintAll("after");

        var movedNodes = this._findMovedNodes(numNodesBefore, positionsBefore, ranksBefore, vertLevelsBefore, rankYBefore);
        var relationshipId = this.DG.GG.getInEdges(childhubId)[0];
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["h" /* arrayContains */])(movedNodes, relationshipId)) movedNodes.push(relationshipId);
        var animateNodes = this.DG.GG.getInEdges(relationshipId); // animate parents if they move. if not, nothing will be done with them
        return { "new": newNodes, "moved": movedNodes, "animate": animateNodes };
    },

    addNewParents: function (personId) {
        this._debugPrintAll("before");
        var timer = new __WEBPACK_IMPORTED_MODULE_4__helpers__["g" /* Timer */]();

        if (!this.DG.GG.isPerson(personId)) throw "Assertion failed: adding parents to a non-person node";

        if (this.DG.GG.getInEdges(personId).length > 0) throw "Assertion failed: adding parents to a person with parents";

        var positionsBefore = this.DG.positions.slice(0);
        var ranksBefore = this.DG.ranks.slice(0);
        var vertLevelsBefore = this.DG.vertLevel.copy();
        var rankYBefore = this.DG.rankY.slice(0);
        var numNodesBefore = this.DG.GG.getMaxRealVertexId();

        // a few special cases which involve not only insertions but also existing node rearrangements:
        this._heuristics.swapBeforeParentsToBringToSideIfPossible(personId);

        var insertChildhubRank = this.DG.ranks[personId] - 1;

        // find the best order to use for this new vertex: scan all orders on the rank, check number of crossed edges
        var insertChildhubOrder = this._findBestInsertPosition(insertChildhubRank, personId);

        // insert the vertex into the base graph and update ranks, orders & positions
        var newChildhubId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].CHILDHUB, {}, 1.0, null, personId, insertChildhubRank, insertChildhubOrder);

        var insertParentsRank = this.DG.ranks[newChildhubId] - 1; // note: rank may have changed since last insertion
        //       (iff childhub was insertion above all at rank 0 - which becomes rank1)

        // find the best order to use for this new vertex: scan all orders on the rank, check number of crossed edges
        var insertParentOrder = this._findBestInsertPosition(insertParentsRank, newChildhubId);

        var newRelationshipId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].RELATIONSHIP, {}, 1.0, null, newChildhubId, insertParentsRank, insertParentOrder);

        insertParentsRank = this.DG.ranks[newRelationshipId]; // note: rank may have changed since last insertion again
        //       (iff relationship was insertion above all at rank 0 - which becomes rank1)

        var newParent1Id = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, { "gender": "F" }, 1.0, null, newRelationshipId, insertParentsRank, insertParentOrder + 1);
        var newParent2Id = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, { "gender": "M" }, 1.0, null, newRelationshipId, insertParentsRank, insertParentOrder);

        // validate: by now the graph should satisfy all assumptions
        this.DG.GG.validate();

        // fix common layout mistakes (e.g. relationship not right above the only child)
        // and update vertical positioning of all edges
        this._heuristics.improvePositioning(ranksBefore, rankYBefore);

        // update ancestors
        this.updateAncestors();

        timer.printSinceLast("=== NewParents runtime: ");
        this._debugPrintAll("after");

        var animateNodes = this.DG.GG.getAllPartners(personId);
        if (animateNodes.length == 1) // only animate node partners if there is only one - ow it may get too confusing with a lot of stuff animating around
            animateNodes.push(personId);else animateNodes = [personId];
        var movedNodes = this._findMovedNodes(numNodesBefore, positionsBefore, ranksBefore, vertLevelsBefore, rankYBefore);
        var newNodes = [newRelationshipId, newParent1Id, newParent2Id];
        return { "new": newNodes, "moved": movedNodes, "highlight": [personId], "animate": animateNodes };
    },

    addNewRelationship: function (personId, childProperties, preferLeft, numTwins) {
        this._debugPrintAll("before");
        var timer = new __WEBPACK_IMPORTED_MODULE_4__helpers__["g" /* Timer */]();

        if (!this.DG.GG.isPerson(personId)) throw "Assertion failed: adding relationship to a non-person node";

        var positionsBefore = this.DG.positions.slice(0);
        var ranksBefore = this.DG.ranks.slice(0);
        var vertLevelsBefore = this.DG.vertLevel.copy();
        var rankYBefore = this.DG.rankY.slice(0);
        var consangrBefore = this.DG.consangr;
        var numNodesBefore = this.DG.GG.getMaxRealVertexId();

        if (!childProperties) childProperties = {};

        if (!numTwins) numTwins = 1;

        var partnerProperties = { "gender": this.DG.GG.getOppositeGender(personId) };

        var insertRank = this.DG.ranks[personId];
        var personOrder = this.DG.order.vOrder[personId];

        // a few special cases which involve not only insertions but also existing node rearrangements:
        this._heuristics.swapPartnerToBringToSideIfPossible(personId);
        this._heuristics.swapTwinsToBringToSideIfPossible(personId);

        // find the best order to use for this new vertex: scan all orders on the rank, check number of crossed edges
        var insertOrder = this._findBestInsertPosition(insertRank, personId, preferLeft);

        console.log("vOrder: " + personOrder + ", inserting @ " + insertOrder);
        console.log("Orders before: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["c" /* stringifyObject */])(this.DG.order.order[this.DG.ranks[personId]]));

        var newRelationshipId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].RELATIONSHIP, {}, 1.0, personId, null, insertRank, insertOrder);

        console.log("Orders after: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["c" /* stringifyObject */])(this.DG.order.order[this.DG.ranks[personId]]));

        var insertPersonOrder = insertOrder > personOrder ? insertOrder + 1 : insertOrder;

        var newPersonId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, partnerProperties, 1.0, null, newRelationshipId, insertRank, insertPersonOrder);

        var insertChildhubRank = insertRank + 1;
        var insertChildhubOrder = this._findBestInsertPosition(insertChildhubRank, newRelationshipId);
        var newChildhubId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].CHILDHUB, {}, 1.0, newRelationshipId, null, insertChildhubRank, insertChildhubOrder);

        var insertChildRank = insertChildhubRank + 1;
        var insertChildOrder = this._findBestInsertPosition(insertChildRank, newChildhubId);
        var newChildId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, childProperties, 1.0, newChildhubId, null, insertChildRank, insertChildOrder);

        var newNodes = [newRelationshipId, newPersonId, newChildId];
        for (var i = 0; i < numTwins - 1; i++) {
            var changeSet = this.addTwin(newChildId, childProperties);
            newNodes.push(changeSet["new"][0]);
        }

        console.log("Orders after all: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["c" /* stringifyObject */])(this.DG.order.order[this.DG.ranks[personId]]));

        // validate: by now the graph should satisfy all assumptions
        this.DG.GG.validate();

        //this._debugPrintAll("middle");

        // fix common layout mistakes (e.g. relationship not right above the only child)
        // and update vertical positioning of all edges
        this._heuristics.improvePositioning(ranksBefore, rankYBefore);

        // update ancestors
        this.updateAncestors();

        timer.printSinceLast("=== NewRelationship runtime: ");
        this._debugPrintAll("after");

        var movedNodes = this._findMovedNodes(numNodesBefore, positionsBefore, ranksBefore, vertLevelsBefore, rankYBefore, consangrBefore);
        return { "new": newNodes, "moved": movedNodes, "highlight": [personId] };
    },

    assignParent: function (parentId, childId) {
        if (this.isRelationship(parentId)) {
            var childHubId = this.DG.GG.getRelationshipChildhub(parentId);
            var rankChildHub = this.DG.ranks[childHubId];
            var rankChild = this.DG.ranks[childId];

            var weight = 1;
            this.DG.GG.addEdge(childHubId, childId, weight);

            var animateList = [childId];

            if (rankChildHub != rankChild - 1) {
                return this.redrawAll(animateList);
            }

            var positionsBefore = this.DG.positions.slice(0);
            var ranksBefore = this.DG.ranks.slice(0);
            var vertLevelsBefore = this.DG.vertLevel.copy();
            var rankYBefore = this.DG.rankY.slice(0);
            var consangrBefore = this.DG.consangr;
            var numNodesBefore = this.DG.GG.getMaxRealVertexId();

            // TODO: move vertex closer to other children, if possible?

            // validate: by now the graph should satisfy all assumptions
            this.DG.GG.validate();

            // update vertical separation for all nodes & compute ancestors
            this._updateauxiliaryStructures(ranksBefore, rankYBefore);

            positionsBefore[parentId] = Infinity; // so that it is added to the list of moved nodes
            var movedNodes = this._findMovedNodes(numNodesBefore, positionsBefore, ranksBefore, vertLevelsBefore, rankYBefore, consangrBefore);
            return { "moved": movedNodes, "animate": [childId] };
        } else {
            var rankParent = this.DG.ranks[parentId];
            var rankChild = this.DG.ranks[childId];

            var partnerProperties = { "gender": this.DG.GG.getOppositeGender(parentId) };

            //console.log("rankParent: " + rankParent + ", rankChild: " + rankChild );

            if (rankParent >= rankChild) {
                var ranksBefore = this.DG.ranks.slice(0);
                // need a complete redraw, since this violates the core layout rule. In this case insert orders do not matter
                var insertChildhubRank = rankChild - 1;
                var newChildhubId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].CHILDHUB, {}, 1.0, null, childId, insertChildhubRank, 0);
                var insertParentsRank = this.DG.ranks[newChildhubId] - 1; // note: rank may have changed since last insertion
                var newRelationshipId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].RELATIONSHIP, {}, 1.0, null, newChildhubId, insertParentsRank, 0);
                var newParentId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, partnerProperties, 1.0, null, newRelationshipId, insertParentsRank, 0);
                this.DG.GG.addEdge(parentId, newRelationshipId, 1);
                var animateList = [childId, parentId];
                var newList = [newRelationshipId, newParentId];
                return this.redrawAll(animateList, newList, ranksBefore);
            }

            // add new childhub     @ rank (rankChild - 1)
            // add new relationship @ rank (rankChild - 2)
            // add new parent       @ rank (rankChild - 2) right next to new relationship
            //                        (left or right depends on if the other parent is right or left)
            // depending on other parent rank either draw a multi-rank relationship edge or regular relationship edge

            this._debugPrintAll("before");
            var timer = new __WEBPACK_IMPORTED_MODULE_4__helpers__["g" /* Timer */]();

            var positionsBefore = this.DG.positions.slice(0);
            var ranksBefore = this.DG.ranks.slice(0);
            var vertLevelsBefore = this.DG.vertLevel.copy();
            var rankYBefore = this.DG.rankY.slice(0);
            var consangrBefore = this.DG.consangr;
            var numNodesBefore = this.DG.GG.getMaxRealVertexId();

            var x_parent = this.DG.positions[parentId];
            var x_child = this.DG.positions[childId];

            if (rankParent == rankChild - 2) {
                // the order of new node creation is then:
                // 1) new relationship node
                // 2) new partner
                // 3) new childhub
                var preferLeft = x_child < x_parent;

                // add same-rank relationship edge
                var insertRelatOrder = this._findBestInsertPosition(rankParent, parentId, preferLeft);
                var newRelationshipId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].RELATIONSHIP, {}, 1.0, parentId, null, rankParent, insertRelatOrder);

                var newParentOrder = this.DG.order.vOrder[parentId] > this.DG.order.vOrder[newRelationshipId] ? insertRelatOrder : insertRelatOrder + 1;
                var newParentId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, partnerProperties, 1.0, null, newRelationshipId, rankParent, newParentOrder);

                var insertChildhubRank = rankChild - 1;
                var insertChildhubOrder = this._findBestInsertPosition(insertChildhubRank, newRelationshipId);
                var newChildhubId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].CHILDHUB, {}, 1.0, newRelationshipId, null, insertChildhubRank, insertChildhubOrder);

                this.DG.GG.addEdge(newChildhubId, childId, 1);
            } else {
                // need to add a multi-rank edge: order of node creation is different:
                // 1) new childhub
                // 2) new relationship node
                // 3) new partner
                // 4) multi-rank edge
                // add a multi-rank relationship edge (e.g. a sequence of edges between virtual nodes on intermediate ranks)

                var insertChildhubRank = rankChild - 1;
                var insertChildhubOrder = this._findBestInsertPosition(insertChildhubRank, childId);
                var newChildhubId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].CHILDHUB, {}, 1.0, null, childId, insertChildhubRank, insertChildhubOrder);

                var insertParentsRank = rankChild - 2;

                var insertRelatOrder = this._findBestInsertPosition(insertParentsRank, newChildhubId);
                var newRelationshipId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].RELATIONSHIP, {}, 1.0, null, newChildhubId, insertParentsRank, insertRelatOrder);

                var newParentOrder = this.DG.positions[parentId] > this.DG.positions[newRelationshipId] ? insertRelatOrder : insertRelatOrder + 1;
                var newParentId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, partnerProperties, 1.0, null, newRelationshipId, insertParentsRank, newParentOrder);

                this._addMultiRankEdge(parentId, newRelationshipId);
            }

            // validate: by now the graph should satisfy all assumptions
            this.DG.GG.validate();

            // fix common layout mistakes (e.g. relationship not right above the only child)
            // and update vertical positioning of all edges
            this._heuristics.improvePositioning(ranksBefore, rankYBefore);

            // update ancestors
            this.updateAncestors();

            timer.printSinceLast("=== DragToParentOrChild runtime: ");
            this._debugPrintAll("after");

            if (this.DG.positions.length >= 31) console.log("position of node 32: " + this.DG.positions[32] + ", was: " + positionsBefore[32]);
            var movedNodes = this._findMovedNodes(numNodesBefore, positionsBefore, ranksBefore, vertLevelsBefore, rankYBefore, consangrBefore);
            var newNodes = [newRelationshipId, newParentId];
            return { "new": newNodes, "moved": movedNodes, "highlight": [parentId, newParentId, childId] };
        }
    },

    assignPartner: function (person1, person2, childProperties) {
        var positionsBefore = this.DG.positions.slice(0);
        var ranksBefore = this.DG.ranks.slice(0);
        var vertLevelsBefore = this.DG.vertLevel.copy();
        var rankYBefore = this.DG.rankY.slice(0);
        var consangrBefore = this.DG.consangr;
        var numNodesBefore = this.DG.GG.getMaxRealVertexId();

        var rankP1 = this.DG.ranks[person1];
        var rankP2 = this.DG.ranks[person2];

        if (rankP1 < rankP2 || rankP1 == rankP2 && this.DG.order.vOrder[person2] < this.DG.order.vOrder[person1]) {
            var tmpPerson = person2;
            person2 = person1;
            person1 = tmpPerson;

            rankP1 = rankP2;
            rankP2 = this.DG.ranks[person2];
        }

        var x_person1 = this.DG.positions[person1];
        var x_person2 = this.DG.positions[person2];

        var weight = 1;

        var preferLeft = x_person2 < x_person1;
        var insertRelatOrder = rankP1 == rankP2 ? this._findBestRelationshipPosition(person1, false, person2) : this._findBestRelationshipPosition(person1, preferLeft);
        var newRelationshipId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].RELATIONSHIP, {}, weight, person1, null, rankP1, insertRelatOrder);

        var insertChildhubRank = this.DG.ranks[newRelationshipId] + 1;
        var insertChildhubOrder = this._findBestInsertPosition(insertChildhubRank, newRelationshipId);
        var newChildhubId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].CHILDHUB, {}, 1.0, newRelationshipId, null, insertChildhubRank, insertChildhubOrder);

        var insertChildRank = insertChildhubRank + 1;
        var insertChildOrder = this._findBestInsertPosition(insertChildRank, newChildhubId);
        var newChildId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, childProperties, 1.0, newChildhubId, null, insertChildRank, insertChildOrder);

        if (rankP1 == rankP2) {
            this.DG.GG.addEdge(person2, newRelationshipId, weight);
        } else {
            this._addMultiRankEdge(person2, newRelationshipId);
        }

        // validate: by now the graph should satisfy all assumptions
        this.DG.GG.validate();

        // fix common layout mistakes (e.g. relationship not right above the only child)
        // and update vertical positioning of all edges
        this._heuristics.improvePositioning(ranksBefore, rankYBefore);

        // update ancestors
        this.updateAncestors();

        this._debugPrintAll("after");

        var movedNodes = this._findMovedNodes(numNodesBefore, positionsBefore, ranksBefore, vertLevelsBefore, rankYBefore, consangrBefore);
        var newNodes = [newRelationshipId, newChildId];
        return { "new": newNodes, "moved": movedNodes, "highlight": [person1, person2, newChildId] };
    },

    addTwin: function (personId, properties) {
        var positionsBefore = this.DG.positions.slice(0);
        var ranksBefore = this.DG.ranks.slice(0);
        var vertLevelsBefore = this.DG.vertLevel.copy();
        var rankYBefore = this.DG.rankY.slice(0);
        var numNodesBefore = this.DG.GG.getMaxRealVertexId();

        var parentRel = this.DG.GG.getProducingRelationship(personId);

        var twinGroupId = this.DG.GG.getTwinGroupId(personId);
        if (twinGroupId === null) {
            twinGroupId = this.DG.GG.getUnusedTwinGroupId(parentRel);
            console.log("new twin id: " + twinGroupId);
            this.DG.GG.properties[personId]["twinGroup"] = twinGroupId;
        }
        properties["twinGroup"] = twinGroupId;

        var insertRank = this.DG.ranks[personId];

        // find the best order to use for this new vertex: scan all orders on the rank, check number of crossed edges
        var insertOrder = this.DG.findBestTwinInsertPosition(personId, []);

        // insert the vertex into the base graph and update ranks, orders & positions
        var childhubId = this.DG.GG.getInEdges(personId)[0];
        var newNodeId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, properties, 1.0, childhubId, null, insertRank, insertOrder);

        // validate: by now the graph should satisfy all assumptions
        this.DG.GG.validate();

        // fix common layout mistakes (e.g. relationship not right above the only child)
        this._heuristics.improvePositioning(ranksBefore, rankYBefore);

        var movedNodes = this._findMovedNodes(numNodesBefore, positionsBefore, ranksBefore, vertLevelsBefore, rankYBefore);
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["h" /* arrayContains */])(movedNodes, parentRel)) movedNodes.push(parentRel);
        var animateNodes = this.DG.GG.getInEdges(parentRel).slice(0); // animate parents if they move. if not, nothing will be done with them
        animateNodes.push(personId);
        var newNodes = [newNodeId];
        return { "new": newNodes, "moved": movedNodes, "animate": animateNodes };
    },

    removeNodes: function (nodeList) {
        this._debugPrintAll("before");

        //var positionsBefore  = this.DG.positions.slice(0);
        //var ranksBefore      = this.DG.ranks.slice(0);
        //var vertLevelsBefore = this.DG.vertLevel.copy();
        //var rankYBefore      = this.DG.rankY.slice(0);
        //var consangrBefore   = this.DG.consangr;
        //var numNodesBefore   = this.DG.GG.getMaxRealVertexId();

        var removed = nodeList.slice(0);
        removed.sort();
        var moved = [];

        for (var i = 0; i < nodeList.length; i++) {
            if (this.isRelationship(nodeList[i])) {
                // also add its childhub
                var chHub = this.DG.GG.getOutEdges(nodeList[i])[0];
                nodeList.push(chHub);
                console.log("adding " + chHub + " to removal list (chhub of " + nodeList[i] + ")");

                // also add its long multi-rank edges
                var pathToParents = this.getPathToParents(nodeList[i]);
                for (var p = 0; p < pathToParents.length; p++) {
                    for (var j = 0; j < pathToParents[p].length; j++) if (this.DG.GG.isVirtual(pathToParents[p][j])) {
                        console.log("adding " + pathToParents[p][j] + " to removal list (virtual of " + nodeList[i] + ")");
                        nodeList.push(pathToParents[p][j]);
                    }
                }
            }
        }

        nodeList.sort(function (a, b) {
            return a - b;
        });

        //console.log("nodeList: " + stringifyObject(nodeList));

        for (var i = nodeList.length - 1; i >= 0; i--) {
            var v = nodeList[i];
            //console.log("removing: " + v);

            //// add person't relationship to the list of moved nodes
            //if (this.isPerson(v)) {
            //    var rel = this.DG.GG.getProducingRelationship(v);
            //    // rel may have been already removed
            //    if (rel !== null && !arrayContains(nodeList, rel))
            //        moved.push(rel);
            //}

            this.DG.GG.remove(v);
            //console.log("order before: " + stringifyObject(this.DG.order));
            this.DG.order.remove(v, this.DG.ranks[v]);
            //console.log("order after: " + stringifyObject(this.DG.order));
            this.DG.ranks.splice(v, 1);
            this.DG.positions.splice(v, 1);

            //// update moved IDs accordingly
            //for (var m = 0; m < moved.length; m++ ) {
            //    if (moved[m] > v)
            //        moved[m]--;
            //}
        }

        this.DG.maxRank = Math.max.apply(null, this.DG.ranks);

        this.DG.GG.validate();

        // note: do not update rankY, as we do not want to move anything (we know we don't need more Y space after a deletion)
        this.DG.vertLevel = this.DG.positionVertically();
        this.updateAncestors();

        // TODO: for now: redraw all relationships
        for (var i = 0; i <= this.getMaxNodeId(); i++) if (this.isRelationship(i)) moved.push(i);

        // note: _findMovedNodes() does not work when IDs have changed. TODO
        //var movedNodes = this._findMovedNodes( numNodesBefore, positionsBefore, ranksBefore, vertLevelsBefore, rankYBefore );
        //for (var i = 0; i < moved.length; i++)
        //    if (!arrayContains(movedNodes, moved[i]))
        //        movedNodes.push(moved[i]);

        // note: moved now has the correct IDs valid in the graph with all affected nodes removed
        return { "removed": removed, "removedInternally": nodeList, "moved": moved };
    },

    improvePosition: function () {
        //this.DG.positions = this.DG.position(this.DG.horizontalPersonSeparationDist, this.DG.horizontalRelSeparationDist);
        //var movedNodes = this._getAllNodes();
        //return {"moved": movedNodes};
        var positionsBefore = this.DG.positions.slice(0);
        var ranksBefore = this.DG.ranks.slice(0);
        var vertLevelsBefore = this.DG.vertLevel.copy();
        var rankYBefore = this.DG.rankY.slice(0);
        var numNodesBefore = this.DG.GG.getMaxRealVertexId();

        // fix common layout mistakes (e.g. relationship not right above the only child)
        this._heuristics.improvePositioning(ranksBefore, rankYBefore);

        var movedNodes = this._findMovedNodes(numNodesBefore, positionsBefore, ranksBefore, vertLevelsBefore, rankYBefore);

        return { "moved": movedNodes };
    },

    clearAll: function () {
        var removedNodes = this._getAllNodes(1); // all nodes from 1 and up

        var emptyGraph = this.DG.GG.getNumVertices() == 0;

        var node0properties = emptyGraph ? {} : this.getProperties(0);

        // it is easier to create abrand new graph transferirng node 0 propertie sthna to remove on-by-one
        // each time updating ranks, orders, etc

        var baseGraph = __WEBPACK_IMPORTED_MODULE_3__import__["a" /* PedigreeImport */].initFromPhenotipsInternal(this._onlyProbandGraph);

        this._recreateUsingBaseGraph(baseGraph);

        this.setProperties(0, node0properties);

        if (emptyGraph) return { "new": [0], "makevisible": [0] };

        return { "removed": removedNodes, "moved": [0], "makevisible": [0] };
    },

    redrawAll: function (animateList, newList, ranksBefore) {
        var ranksBefore = ranksBefore ? ranksBefore : this.DG.ranks.slice(0); // sometimes we want to use ranksbefore as they were before some stuff was added to the graph before a redraw

        this._debugPrintAll("before");

        var baseGraph = this.DG.GG.makeGWithCollapsedMultiRankEdges();

        // collect current node ranks so that the new layout can be made more similar to the current one
        var oldRanks = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["k" /* clone2DArray */])(this.DG.order.order);
        for (var i = oldRanks.length - 1; i >= 0; i--) {
            oldRanks[i] = oldRanks[i].filter(this.DG.GG.isPerson.bind(this.DG.GG));
            if (oldRanks[i].length == 0) oldRanks.splice(i, 1);
        }

        if (!this._recreateUsingBaseGraph(baseGraph, oldRanks)) return {}; // no changes

        var movedNodes = this._getAllNodes();

        var probandReRankSize = ranksBefore[0] - this.DG.ranks[0];
        var reRankedDiffFrom0 = [];
        var reRanked = [];
        for (var i = 0; i <= this.DG.GG.getMaxRealVertexId(); i++) {
            if (this.DG.GG.isPerson(i)) if (this.DG.ranks[i] != ranksBefore[i]) {
                reRanked.push(i);
            }
            if (ranksBefore[i] - this.DG.ranks[i] != probandReRankSize) {
                reRankedDiffFrom0.push(i);
            }
        }
        if (reRankedDiffFrom0.length < reRanked.length) {
            reRanked = reRankedDiffFrom0;
        }

        if (!animateList) animateList = [];

        if (!newList) newList = [];else {
            // nodes which are force-marked as new can't be in the "moved" list
            for (var i = 0; i < newList.length; i++) __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["j" /* removeFirstOccurrenceByValue */])(movedNodes, newList[i]);
        }

        this._debugPrintAll("after");

        return { "new": newList, "moved": movedNodes, "highlight": reRanked, "animate": animateList };
    },

    // remove empty-values optional properties, e.g. "fName: ''" or "disorders: []"
    stripUnusedProperties: function () {
        for (var i = 0; i <= this.DG.GG.getMaxRealVertexId(); i++) {
            if (this.isPerson(i)) {
                this.deleteEmptyProperty(i, "fName");
                this.deleteEmptyProperty(i, "lName");
                this.deleteEmptyProperty(i, "gestationAge");
                this.deleteEmptyProperty(i, "carrierStatus");
                this.deleteEmptyProperty(i, "comments");
                this.deleteEmptyProperty(i, "disorders");
            }
        }
    },

    deleteEmptyProperty: function (nodeID, propName) {
        if (this.DG.GG.properties[nodeID].hasOwnProperty(propName)) {
            if (Object.prototype.toString.call(this.DG.GG.properties[nodeID][propName]) === "[object Array]" && this.DG.GG.properties[nodeID][propName].length == 0) {
                delete this.DG.GG.properties[nodeID][propName];
            } else if (this.DG.GG.properties[nodeID][propName] == "") {
                delete this.DG.GG.properties[nodeID][propName];
            }
        }
    },

    toJSON: function () {
        this.stripUnusedProperties();

        //var timer = new Timer();
        var output = {};

        // note: when saving positioned graph, need to save the version of the graph which has virtual edge pieces
        output["GG"] = this.DG.GG.serialize();

        output["ranks"] = this.DG.ranks;
        output["order"] = this.DG.order.serialize();
        output["positions"] = this.DG.positions;

        // note: everything else can be recomputed based on the information above

        console.log("JSON represenation: " + JSON.stringify(output));
        //timer.printSinceLast("=== to JSON: ");

        return JSON.stringify(output);
    },

    fromJSON: function (serializedAsJSON) {
        var removedNodes = this._getAllNodes();

        var serializedData = JSON.parse(serializedAsJSON);

        //console.log("Got serialization object: " + stringifyObject(serializedData));

        this.DG.GG = __WEBPACK_IMPORTED_MODULE_3__import__["a" /* PedigreeImport */].initFromPhenotipsInternal(serializedData["GG"]);

        this.DG.ranks = serializedData["ranks"];

        this.DG.maxRank = Math.max.apply(null, this.DG.ranks);

        this.DG.order.deserialize(serializedData["order"]);

        this.DG.positions = serializedData["positions"];

        this._updateauxiliaryStructures();

        this.screenRankShift = 0;

        var newNodes = this._getAllNodes();

        return { "new": newNodes, "removed": removedNodes };
    },

    fromImport: function (importString, importType, importOptions) {
        var removedNodes = this._getAllNodes();

        //this._debugPrintAll("before");

        if (importType == "ped") {
            var baseGraph = __WEBPACK_IMPORTED_MODULE_3__import__["a" /* PedigreeImport */].initFromPED(importString, importOptions.acceptUnknownPhenotypes, importOptions.markEvaluated, importOptions.externalIdMark);
            if (!this._recreateUsingBaseGraph(baseGraph)) return null; // no changes
        } else if (importType == "BOADICEA") {
            var baseGraph = __WEBPACK_IMPORTED_MODULE_3__import__["a" /* PedigreeImport */].initFromBOADICEA(importString, importOptions.externalIdMark);
            if (!this._recreateUsingBaseGraph(baseGraph)) return null; // no changes
        } else if (importType == "gedcom") {
            var baseGraph = __WEBPACK_IMPORTED_MODULE_3__import__["a" /* PedigreeImport */].initFromGEDCOM(importString, importOptions.markEvaluated, importOptions.externalIdMark);
            if (!this._recreateUsingBaseGraph(baseGraph)) return null; // no changes
        } else if (importType == "simpleJSON") {
            var baseGraph = __WEBPACK_IMPORTED_MODULE_3__import__["a" /* PedigreeImport */].initFromSimpleJSON(importString);
            if (!this._recreateUsingBaseGraph(baseGraph)) return null; // no changes            
        } else if (importType == "phenotipsJSON") {}

        // TODO


        //this._debugPrintAll("after");

        var newNodes = this._getAllNodes();

        return { "new": newNodes, "removed": removedNodes };
    },

    getPathToParents: function (v) {
        // returns an array with two elements: path to parent1 (excluding v) and path to parent2 (excluding v):
        // [ [virtual_node_11, ..., virtual_node_1n, parent1], [virtual_node_21, ..., virtual_node_2n, parent21] ]
        return this.DG.GG.getPathToParents(v);
    },

    //=============================================================

    // suggestedRanks: when provided, attempt to use the suggested rank for all nodes,
    //                 in order to keep the new layout as close as possible to the previous layout
    _recreateUsingBaseGraph: function (baseGraph, suggestedRanks) {
        try {
            var newDG = new __WEBPACK_IMPORTED_MODULE_1__positionedGraph__["a" /* PositionedGraph */](baseGraph, this.DG.horizontalPersonSeparationDist, this.DG.horizontalRelSeparationDist, this.DG.maxInitOrderingBuckets, this.DG.maxOrderingIterations, this.DG.maxXcoordIterations, false, suggestedRanks);
        } catch (e) {
            console.trace(e);
            return false;
        }

        this.DG = newDG;
        this._heuristics = new __WEBPACK_IMPORTED_MODULE_2__heuristics__["a" /* Heuristics */](this.DG);

        //this._debugPrintAll("before improvement");
        this._heuristics.improvePositioning();
        //this._debugPrintAll("after improvement");

        return true;
    },

    _insertVertex: function (type, properties, edgeWeights, inedge, outedge, insertRank, insertOrder) {
        // all nodes are connected to some other node, so either inedge or outedge should be given
        if (inedge === null && outedge === null) throw "Assertion failed: each node should be connected to at least one other node";
        if (inedge !== null && outedge !== null) throw "Assertion failed: not clear which edge crossing to optimize, can only insert one edge";

        var inedges = inedge !== null ? [inedge] : [];
        var outedges = outedge !== null ? [outedge] : [];

        var newNodeId = this.DG.GG.insertVertex(type, properties, edgeWeights, inedges, outedges);

        // note: the graph may be inconsistent at this point, e.g. there may be childhubs with
        // no relationships or relationships without any people attached

        if (insertRank == 0) {
            for (var i = 0; i < this.DG.ranks.length; i++) this.DG.ranks[i]++;
            this.DG.maxRank++;

            this.DG.order.insertRank(1);

            insertRank = 1;
        } else if (insertRank > this.DG.maxRank) {
            this.DG.maxRank = insertRank;
            this.DG.order.insertRank(insertRank);
        }

        this.DG.ranks.splice(newNodeId, 0, insertRank);

        this.DG.order.insertAndShiftAllIdsAboveVByOne(newNodeId, insertRank, insertOrder);

        // update positions
        this.DG.positions.splice(newNodeId, 0, -Infinity); // temporary position: will move to the correct location and shift other nodes below

        var nodeToKeepEdgeStraightTo = inedge != null ? inedge : outedge;
        this._heuristics.moveToCorrectPositionAndMoveOtherNodesAsNecessary(newNodeId, nodeToKeepEdgeStraightTo);

        return newNodeId;
    },

    _updateauxiliaryStructures: function (ranksBefore, rankYBefore) {
        var timer = new __WEBPACK_IMPORTED_MODULE_4__helpers__["g" /* Timer */]();

        // update vertical levels
        this.DG.vertLevel = this.DG.positionVertically();
        this.DG.rankY = this.DG.computeRankY(ranksBefore, rankYBefore);

        // update ancestors
        this.updateAncestors();

        timer.printSinceLast("=== Vertical spacing + ancestors runtime: ");
    },

    _getAllNodes: function (minID, maxID) {
        var nodes = [];
        var minID = minID ? minID : 0;
        var maxID = maxID ? Math.min(maxID, this.DG.GG.getMaxRealVertexId()) : this.DG.GG.getMaxRealVertexId();
        for (var i = minID; i <= maxID; i++) {
            if (this.DG.GG.type[i] == __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON || this.DG.GG.type[i] == __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].RELATIONSHIP) nodes.push(i);
        }
        return nodes;
    },

    _findMovedNodes: function (maxOldID, positionsBefore, ranksBefore, vertLevelsBefore, rankYBefore, consangrBefore) {
        //console.log("Before: " + stringifyObject(vertLevelsBefore));
        //console.log("After:  " + stringifyObject(this.DG.vertLevel));
        //console.log("Before: " + stringifyObject(positionsBefore));
        //console.log("After: " + stringifyObject(this.DG.positions));

        // TODO: some heuristics cause this behaviour. Easy to fix by normalization, but better look into root cause later
        // normalize positions: if the leftmost coordinate is now greater than it was before
        // make the old leftmost node keep it's coordinate
        var oldMin = Math.min.apply(Math, positionsBefore);
        var newMin = Math.min.apply(Math, this.DG.positions);
        if (newMin > oldMin) {
            var oldMinNodeID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["l" /* arrayIndexOf */])(positionsBefore, oldMin);
            var newMinValue = this.DG.positions[oldMinNodeID];
            var shiftAmount = newMinValue - oldMin;

            for (var i = 0; i < this.DG.positions.length; i++) this.DG.positions[i] -= shiftAmount;
        }

        var result = {};
        for (var i = 0; i <= maxOldID; i++) {
            // this node was moved
            if (this.DG.GG.type[i] == __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].RELATIONSHIP || this.DG.GG.type[i] == __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON) {
                var rank = this.DG.ranks[i];
                //if (rank != ranksBefore[i]) {
                //    this._addNodeAndAssociatedRelationships(i, result, maxOldID);
                //    continue;
                //}
                if (rankYBefore && this.DG.rankY[rank] != rankYBefore[ranksBefore[i]]) {
                    this._addNodeAndAssociatedRelationships(i, result, maxOldID);
                    continue;
                }
                if (this.DG.positions[i] != positionsBefore[i]) {
                    this._addNodeAndAssociatedRelationships(i, result, maxOldID);
                    continue;
                }
                // or it is a relationship with a long edge - redraw just in case since long edges may have complicated curves around other nodes
                if (this.DG.GG.type[i] == __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].RELATIONSHIP) {
                    if (consangrBefore && !consangrBefore.hasOwnProperty(i) && this.DG.consangr.hasOwnProperty(i)) {
                        result[i] = true;
                        continue;
                    }
                    var inEdges = this.DG.GG.getInEdges(i);
                    if (inEdges[0] > this.DG.GG.maxRealVertexId || inEdges[1] > this.DG.GG.maxRealVertexId) {
                        result[i] = true;
                        continue;
                    }
                    // check vertical positioning changes
                    var parents = this.DG.GG.getParents(i);
                    if (vertLevelsBefore.outEdgeVerticalLevel[parents[0]] !== undefined && // vertical levels may be outdated if multiple nodes were created in one batch
                    vertLevelsBefore.outEdgeVerticalLevel[parents[1]] !== undefined) {
                        if (vertLevelsBefore.outEdgeVerticalLevel[parents[0]][i].verticalLevel != this.DG.vertLevel.outEdgeVerticalLevel[parents[0]][i].verticalLevel || vertLevelsBefore.outEdgeVerticalLevel[parents[1]][i].verticalLevel != this.DG.vertLevel.outEdgeVerticalLevel[parents[1]][i].verticalLevel) {
                            result[i] = true;
                            continue;
                        }
                    }

                    var childHub = this.DG.GG.getRelationshipChildhub(i);
                    if (vertLevelsBefore.childEdgeLevel[childHub] !== undefined && vertLevelsBefore.childEdgeLevel[childHub] != this.DG.vertLevel.childEdgeLevel[childHub]) {
                        result[i] = true;
                        continue;
                    }
                }
            }
        }

        var resultArray = [];
        for (var node in result) {
            if (result.hasOwnProperty(node)) {
                resultArray.push(parseInt(node));
            }
        }

        return resultArray;
    },

    _addNodeAndAssociatedRelationships: function (node, addToSet, maxOldID) {
        addToSet[node] = true;
        if (this.DG.GG.type[node] != __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON) return;

        var inEdges = this.DG.GG.getInEdges(node);
        if (inEdges.length > 0) {
            var parentChildhub = inEdges[0];
            var parentRelationship = this.DG.GG.getInEdges(parentChildhub)[0];
            if (parentRelationship <= maxOldID) addToSet[parentRelationship] = true;
        }

        var outEdges = this.DG.GG.getOutEdges(node);
        for (var i = 0; i < outEdges.length; i++) {
            if (outEdges[i] <= maxOldID) addToSet[outEdges[i]] = true;
        }
    },

    //=============================================================

    _addMultiRankEdge: function (personId, relationshipId, _weight) {
        var weight = _weight ? _weight : 1.0;

        var rankPerson = this.DG.ranks[personId];
        var rankRelationship = this.DG.ranks[relationshipId];

        if (rankPerson > rankRelationship - 2) throw "Assertion failed: attempt to make a multi-rank edge between non-multirank ranks";

        var otherpartner = this.DG.GG.getInEdges(relationshipId)[0];

        var order_person = this.DG.order.vOrder[personId];
        var order_rel = this.DG.order.vOrder[relationshipId];

        var x_person = this.DG.positions[otherpartner];
        var x_relationship = this.DG.positions[relationshipId];

        var prevPieceOrder = x_person < x_relationship ? order_rel + 1 : order_rel;
        var prevPieceId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].VIRTUALEDGE, {}, weight, null, relationshipId, rankRelationship, prevPieceOrder);

        // TODO: an algorithm which optimizes the entire edge placement globally (not one piece at a time)

        var rankNext = rankRelationship;
        while (--rankNext > rankPerson) {

            var prevNodeX = this.DG.positions[prevPieceId];
            var orderToMakeEdgeStraight = this.DG.order.order[rankNext].length;
            for (var o = 0; o < this.DG.order.order[rankNext].length; o++) if (this.DG.positions[this.DG.order.order[rankNext][o]] >= prevNodeX) {
                orderToMakeEdgeStraight = o;
                break;
            }

            console.log("adding piece @ rank: " + rankNext + " @ order " + orderToMakeEdgeStraight);

            prevPieceId = this._insertVertex(__WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].VIRTUALEDGE, {}, weight, null, prevPieceId, rankNext, orderToMakeEdgeStraight);
        }

        //connect last piece with personId
        this.DG.GG.addEdge(personId, prevPieceId, weight);
    },

    //=============================================================

    _findBestInsertPosition: function (rank, edgeToV, preferLeft, _fromOrder, _toOrder) {
        // note: does not assert that the graph satisfies all the assumptions in BaseGraph.validate()

        if (rank == 0 || rank > this.DG.maxRank) return 0;

        // find the order on rank 'rank' to insert a new vertex so that the edge connecting this new vertex
        // and vertex 'edgeToV' crosses the smallest number of edges.
        var edgeToRank = this.DG.ranks[edgeToV];
        var edgeToOrder = this.DG.order.vOrder[edgeToV];

        if (edgeToRank == rank && this.isPerson(edgeToV)) return this._findBestRelationshipPosition(edgeToV, preferLeft);

        var bestInsertOrder = 0;
        var bestCrossings = Infinity;
        var bestDistance = Infinity;

        var crossingChildhubEdgesPenalty = false;
        if (this.DG.GG.type[edgeToV] == __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].CHILDHUB) crossingChildhubEdgesPenalty = true;

        var desiredOrder = 0;

        var edgeToX = this.DG.positions[edgeToV];
        for (var o = 0; o < this.DG.order.order[rank].length; o++) {
            var uAtPos = this.DG.order.order[rank][o];
            var uX = this.DG.positions[uAtPos];
            if (uX < edgeToX) {
                desiredOrder = o + 1;
            } else {
                break;
            }
        }

        // when inserting children below childhubs: next to other children
        if (this.DG.GG.type[edgeToV] == __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].CHILDHUB && rank > edgeToRank && this.DG.GG.getOutEdges(edgeToV).length > 0) desiredOrder = this._findRightmostChildPosition(edgeToV) + 1;

        var fromOrder = _fromOrder ? Math.max(_fromOrder, 0) : 0;
        var toOrder = _toOrder ? Math.min(_toOrder, this.DG.order.order[rank].length) : this.DG.order.order[rank].length;
        for (var o = fromOrder; o <= toOrder; o++) {

            // make sure not inserting inbetween some twins
            if (o > 0 && o < this.DG.order.order[rank].length) {
                // skip virtual edges which may appear between twins
                var leftNodePos = o - 1;
                while (leftNodePos > 0 && this.DG.GG.isVirtual(this.DG.order.order[rank][leftNodePos])) leftNodePos--;
                rightNodePos = o;
                while (rightNodePos < this.DG.order.order[rank].length - 1 && this.DG.GG.isVirtual(this.DG.order.order[rank][rightNodePos])) rightNodePos--;
                var nodeToTheLeft = this.DG.order.order[rank][leftNodePos];
                var nodeToTheRight = this.DG.order.order[rank][rightNodePos];

                if (this.isPerson(nodeToTheLeft) && this.isPerson(nodeToTheRight)) {
                    var rel1 = this.DG.GG.getProducingRelationship(nodeToTheLeft);
                    var rel2 = this.DG.GG.getProducingRelationship(nodeToTheRight);
                    if (rel1 == rel2) {
                        var twinGroupId1 = this.DG.GG.getTwinGroupId(nodeToTheLeft);
                        var twinGroupId2 = this.DG.GG.getTwinGroupId(nodeToTheRight);
                        if (twinGroupId1 !== null && twinGroupId1 == twinGroupId2) continue;
                    }
                }
            }

            var numCrossings = this._edgeCrossingsByFutureEdge(rank, o - 0.5, edgeToRank, edgeToOrder, crossingChildhubEdgesPenalty, edgeToV);

            //console.log("position: " + o + ", numCross: " + numCrossings);

            if (numCrossings < bestCrossings || // less crossings
            numCrossings == bestCrossings && Math.abs(o - desiredOrder) <= bestDistance // closer to desired position
            ) {
                    bestInsertOrder = o;
                    bestCrossings = numCrossings;
                    bestDistance = Math.abs(o - desiredOrder);
                }
        }

        //console.log("inserting @ rank " + rank + " with edge from " + edgeToV + " --> " + bestInsertOrder);
        return bestInsertOrder;
    },

    _findRightmostChildPosition: function (vertex) {
        var childrenInfo = this._heuristics.analizeChildren(vertex);
        return childrenInfo.rightMostChildOrder;
    },

    _edgeCrossingsByFutureEdge: function (newVRank, newVOrder, existingURank, existingUOrder, crossingChildhubEdgesPenalty, existingU) {
        // Note: newVOrder is expected to be a number between two existing orders, or higher than all, or lower than all

        // counts how many existing edges a new edge from given rank&order to given rank&order would cross
        // if order is an integer, it is assumed it goes form an existing vertex
        // if order is inbetween two integers, it is assumed it is the position used for a new-to-be-inserted vertex

        // for simplicity (to know if we need to check outEdges or inEdges) get the edge in the correct direction
        // (i.e. from lower ranks to higher ranks)
        var rankFrom = Math.min(newVRank, existingURank);
        var rankTo = Math.max(newVRank, existingURank);
        var orderFrom = newVRank < existingURank ? newVOrder : existingUOrder;
        var orderTo = newVRank < existingURank ? existingUOrder : newVOrder;

        // for better penalty computation handle the special case of adding a new child to an existing childhub
        var vSibglingInfo = undefined;
        if (this.DG.GG.isChildhub(existingU) && newVRank > existingURank && this.DG.GG.getOutEdges(existingU).length > 0) {
            vSibglingInfo = this._heuristics.analizeChildren(existingU);

            if (vSibglingInfo.numWithTwoPartners < vSibglingInfo.orderedChildren.length) {
                // need to insert new node next to a sibling
                var okPosition = false;
                if (newVOrder > 0) {
                    // check left neighbour
                    var leftNeighbour = this.DG.order.order[newVRank][Math.floor(newVOrder)];
                    var neighbourInEdges = this.DG.GG.getInEdges(leftNeighbour);
                    if (neighbourInEdges.length == 1 && neighbourInEdges[0] == existingU) {
                        okPosition = true; // left neighbour is a sibling
                    }
                }
                if (newVOrder < this.DG.order.order[newVRank].length - 1) {
                    // check right neighbour
                    var rightNeighbour = this.DG.order.order[newVRank][Math.ceil(newVOrder)];
                    var neighbourInEdges = this.DG.GG.getInEdges(rightNeighbour);
                    if (neighbourInEdges.length == 1 && neighbourInEdges[0] == existingU) {
                        okPosition = true; // right neighbour is a sibling
                    }
                }
                if (!okPosition) {
                    return Infinity;
                }
            }
        }

        var crossings = 0;

        if (rankFrom == rankTo) throw "TODO: probably not needed";

        // For multi-rank edges, crossing occurs if either
        // 1) there is an edge going from rank[v]-ranked vertex with a smaller order
        //     than v to a rank[targetV]-ranked vertex with a larger order than targetV
        // 2) there is an edge going from rank[v]-ranked vertex with a larger order
        //     than v to a rank[targetV]-ranked vertex with a smaller order than targetV

        var verticesAtRankTo = this.DG.order.order[rankTo];

        for (var ord = 0; ord < verticesAtRankTo.length; ord++) {
            if (ord == orderTo) continue;

            var vertex = verticesAtRankTo[ord];

            var inEdges = this.DG.GG.getInEdges(vertex);
            var len = inEdges.length;

            for (var j = 0; j < len; j++) {
                var target = inEdges[j];

                var penalty = 1;
                if (crossingChildhubEdgesPenalty && this.DG.GG.isChildhub(target)) {
                    // don't want to insert a node inbetween siblings
                    penalty = 100000;
                    // ...unless siblings of the inserted node are already inbetween those siblings:
                    if (vSibglingInfo) {
                        var targetChildren = this._heuristics.analizeChildren(target);

                        if (targetChildren.leftMostChildOrder < vSibglingInfo.rightMostChildOrder && targetChildren.rightMostChildOrder > vSibglingInfo.leftMostChildOrder) {
                            penalty = 1;
                        }
                    }
                }

                var orderTarget = this.DG.order.vOrder[target];
                var rankTarget = this.DG.ranks[target];

                if (rankTarget == rankTo) {
                    if (ord < orderTo && orderTarget > orderTo || ord > orderTo && orderTarget < orderTo) crossings += 2;
                } else {
                    if (ord < orderTo && orderTarget > orderFrom || ord > orderTo && orderTarget < orderFrom) crossings += penalty;
                }
            }
        }

        // try not to insert between a node and it's relationship
        // (for that only need check edges on the insertion rank)
        var verticesAtNewRank = this.DG.order.order[newVRank];
        for (var ord = 0; ord < verticesAtNewRank.length; ord++) {
            if (ord == newVOrder) continue;

            var vertex = verticesAtNewRank[ord];

            var outEdges = this.DG.GG.getOutEdges(vertex);
            var len = outEdges.length;

            for (var j = 0; j < len; j++) {
                var target = outEdges[j];

                var orderTarget = this.DG.order.vOrder[target];
                var rankTarget = this.DG.ranks[target];

                if (rankTarget == newVRank) {
                    if (newVOrder < ord && newVOrder > orderTarget || newVOrder > ord && newVOrder < orderTarget) crossings += 0.1;
                }
            }
        }

        return crossings;
    },

    _findBestRelationshipPosition: function (v, preferLeft, u) {
        // Handles two different cases:
        // 1) both partners are given ("v" and "u"). Then need to insert between v and u
        // 2) only one partner is given ("v"). Then given the choice prefer the left side if "preferleft" is true

        var rank = this.DG.ranks[v];
        var orderR = this.DG.order.order[rank];
        var isTwin = this.DG.GG.getTwinGroupId(v) != null;
        var vOrder = this.DG.order.vOrder[v];

        var penaltyBelow = [];
        var penaltySameRank = [];
        for (var o = 0; o <= orderR.length; o++) {
            penaltyBelow[o] = 0;
            penaltySameRank[o] = 0;
        }

        // for each order on "rank" compute heuristic penalty for inserting a node before that order
        // based on the structure of nodes below
        for (var o = 0; o < orderR.length; o++) {
            var node = orderR[o];
            if (!this.isRelationship(node)) continue;
            var childrenInfo = this._heuristics.analizeChildren(node);

            // TODO: do a complete analysis without any heuristics
            if (childrenInfo.leftMostHasLParner) {
                penaltyBelow[o] += 1;penaltyBelow[o - 1] += 0.25;
            } // 0.25 is just a heuristic estimation of how busy the level below is.
            if (childrenInfo.rightMostHasRParner) {
                penaltyBelow[o + 1] += 1;penaltyBelow[o + 2] += 0.25;
            }
        }

        // for each order on "rank" compute heuristic penalty for inserting a node before that order
        // based on the edges on that rank
        for (var o = 0; o < orderR.length; o++) {
            var node = orderR[o];
            if (!this.isRelationship(node)) continue;

            var relOrder = this.DG.order.vOrder[node];

            var parents = this.DG.GG.getInEdges(node);

            for (var p = 0; p < parents.length; p++) {
                var parent = parents[p];
                if (parent != v && this.DG.ranks[parent] == rank && parent != u) {
                    var parentOrder = this.DG.order.vOrder[parent];

                    var from = parentOrder > relOrder ? relOrder + 1 : parentOrder + 1;
                    var to = parentOrder > relOrder ? parentOrder : relOrder;
                    for (var j = from; j <= to; j++) penaltySameRank[j] = Infinity;
                }
            }
        }

        // add penalties for crossing child-to-parent lines, and forbid inserting inbetween twin nodes
        for (var o = 0; o < orderR.length; o++) {
            if (o == vOrder) continue;

            var node = orderR[o];
            if (!this.isPerson(node)) continue;
            var allTwins = this.getAllTwinsSortedByOrder(node);

            // forbid inserting inbetween twins
            if (allTwins.length > 1) {
                var leftMostTwinOrder = this.DG.order.vOrder[allTwins[0]];
                var rightMostTwinOrder = this.DG.order.vOrder[allTwins[allTwins.length - 1]];
                for (var j = leftMostTwinOrder + 1; j <= rightMostTwinOrder; j++) penaltySameRank[j] = Infinity;
                o = rightMostTwinOrder; // skip thorugh all other twins in this group
            }

            // penalty for crossing peron-to-parent line
            if (this.DG.GG.getProducingRelationship(node) != null) {
                if (o < vOrder) {
                    for (var j = 0; j <= o; j++) penaltySameRank[j]++;
                } else {
                    for (var j = o + 1; j <= orderR.length; j++) penaltySameRank[j]++;
                }
            }
        }

        console.log("Insertion same rank penalties: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["c" /* stringifyObject */])(penaltySameRank));
        console.log("Insertion below penalties:     " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["c" /* stringifyObject */])(penaltyBelow));

        if (u === undefined) {
            if (preferLeft && vOrder == 0) return 0;

            var partnerInfo = this.DG._findLeftAndRightPartners(v);
            var numLeftOf = partnerInfo.leftPartners.length;
            var numRightOf = partnerInfo.rightPartners.length;

            // Note: given everything else being equal, prefer the right side - to move fewer nodes

            console.log("v: " + v + ", vOrder: " + vOrder + ", numL: " + numLeftOf + ", numR: " + numRightOf);

            if (!isTwin && numLeftOf == 0 && (preferLeft || numRightOf > 0)) return vOrder;
            if (!isTwin && numRightOf == 0) return vOrder + 1;

            var bestPosition = vOrder + 1;
            var bestPenalty = Infinity;
            for (var o = 0; o <= orderR.length; o++) {
                var penalty = penaltyBelow[o] + penaltySameRank[o];
                if (o <= vOrder) {
                    penalty += numLeftOf + (vOrder - o); // o == order     => insert immediately to the left of, distance penalty = 0
                    if (preferLeft) penalty -= 0.5; // preferLeft => given equal penalty prefer left (0.5 is less than penalty diff due to other factors)
                    else penalty += 0.5; //
                } else {
                    penalty += numRightOf + (o - vOrder - 1); // o == (order+1) => insert immediately to the right of, distance penalty = 0
                }

                //console.log("order: " + o + ", penalty: " + penalty);
                if (penalty < bestPenalty) {
                    bestPenalty = penalty;
                    bestPosition = o;
                }
            }
            return bestPosition;
        }

        // for simplicity, lets make sure v is to the left of u
        if (this.DG.order.vOrder[v] > this.DG.order.vOrder[u]) {
            var tmp = u;
            u = v;
            v = tmp;
        }

        var orderV = this.DG.order.vOrder[v];
        var orderU = this.DG.order.vOrder[u];

        var partnerInfoV = this.DG._findLeftAndRightPartners(v);
        var numRightOf = partnerInfoV.rightPartners.length;
        var partnerInfoU = this.DG._findLeftAndRightPartners(u);
        var numLeftOf = partnerInfoU.leftPartners.length;

        if (numRightOf == 0 && numLeftOf > 0) return orderV + 1;
        if (numRightOf > 0 && numLeftOf == 0) return orderU;

        var bestPosition = orderV + 1;
        var bestPenalty = Infinity;
        for (var o = orderV + 1; o <= orderU; o++) {
            var penalty = penaltyBelow[o] + penaltySameRank[o];

            for (var p = 0; p < partnerInfoV.rightPartners.length; p++) {
                var partner = partnerInfoV.rightPartners[p];
                if (o <= this.DG.order.vOrder[partner]) penalty++;
            }
            for (var p = 0; p < partnerInfoU.leftPartners.length; p++) {
                var partner = partnerInfoU.leftPartners[p];
                if (o > this.DG.order.vOrder[partner]) penalty++;
            }

            //console.log("order: " + o + ", penalty: " + penalty);

            if (penalty <= bestPenalty) {
                bestPenalty = penalty;
                bestPosition = o;
            }
        }
        return bestPosition;
    },

    //=============================================================

    _getAllPersonsOfGenders: function (validGendersSet) {
        // all person nodes whose gender matches one of genders in the validGendersSet array

        // validate input genders
        for (var i = 0; i < validGendersSet.length; i++) {
            validGendersSet[i] = validGendersSet[i].toLowerCase();
            if (validGendersSet[i] != "u" && validGendersSet[i] != "m" && validGendersSet[i] != "f") throw "Invalid gender: " + validGendersSet[i];
        }

        var result = [];

        for (var i = 0; i <= this.DG.GG.getMaxRealVertexId(); i++) {
            if (!this.isPerson(i)) continue;
            if (this.isPersonGroup(i)) continue;
            var gender = this.getProperties(i)["gender"].toLowerCase();
            //console.log("trying: " + i + ", gender: " + gender + ", validSet: " + stringifyObject(validGendersSet));
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__helpers__["h" /* arrayContains */])(validGendersSet, gender)) result.push(i);
        }

        return result;
    }
};

/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(5);
/* harmony export (immutable) */ __webpack_exports__["a"] = VerticalPosIntOptimizer;
/* unused harmony export Complonents */


// TODO: test performance improvement: this.pairScoreFunc() is called for all possible combinations of (i,j,level_i,level_j)
//                                     during computeCrosses(). Store the values and avoid calling the function again?
//                                     (may not make any difference since function computation is trivial)

function VerticalPosIntOptimizer(pairScoreFunc, initLevels, minLevels) {
    this.pairScoreFunc = pairScoreFunc; // function(u, v, uLev, vLev) - returns penalty for interaction between two edges u and v when u's level is uLev and v's level is vLev
    //                              (assumed to be symetrical, i.e. f(a,b,levA,levB) = f(b,a,levB,levA)

    this.initLevels = initLevels; // array[int]

    this.maxOfMinlevels = 1;
    if (minLevels) {
        this.maxOfMinlevels = Math.max.apply(null, minLevels);
        if (this.maxOfMinlevels > 1) this.minLevels = minLevels;
    }

    var precompute = this.computeComponents();
    //console.log("Precomputed: " + stringifyObject(precompute));
    this.components = precompute.components; // class             - mapping between edges and connected components; see Components class
    this.crosses = precompute.crosses; // array[array[int]] - for each edge the list of edges it directly intersects with (for performance optimization)
}

VerticalPosIntOptimizer.prototype = {

    // computes penalty ofr the number of levels used.
    // value: (0 <= numberOfLevelsPenalty < 1) => this affects the total penalty less than a single extra crossing,
    // i.e. we want to use as few levels as possible, but it is beter to use an extra level than to have more crossings
    numberOfLevelsPenalty: function (maxLevelUsed, minRequired, numEdges) {
        return (maxLevelUsed - minRequired) / (numEdges + 1); // 1 level => (penalty == 0), above 1 level => (0 < penalty < 1)
    },

    componentScoreFunc: function (levels, componentID) {
        //console.log("scoring: " + stringifyObject(levels));

        var penalty = 0;
        var maxLevelUsed = 0;
        var minRequired = 1;

        var component = this.components.getComponentEdges(componentID);

        for (var i = 0; i < component.length; i++) {
            var edge = component[i];
            if (levels[edge] > maxLevelUsed) maxLevelUsed = levels[edge];
            if (this.minLevels && this.minLevels[edge] > minRequired) minRequired = this.minLevels[edge];
            var crosses = this.crosses[edge];
            for (var j = 0; j < crosses.length; j++) {
                var intersects = crosses[j];
                if (intersects > edge) {
                    // because we want to only count each intersection only once, and score func is symmetrical
                    //console.log("[p] " + edge + " + " + intersects + " = " + this.pairScoreFunc( edge, intersects, levels[edge], levels[intersects] ));
                    penalty += this.pairScoreFunc(edge, intersects, levels[edge], levels[intersects], levels);
                    if (!isFinite(penalty)) return penalty;
                }
            }
        }

        // add penalty for the number of levels used: less levels is better given the same "crossing" score
        // (note: only care about max level used, as that affects the layout, we don't care if there are unused levels inbetween)
        var numLevelsPen = this.numberOfLevelsPenalty(maxLevelUsed, minRequired, component.length);
        penalty += numLevelsPen;
        //console.log("num levels penalty: " + numLevelsPen);

        //console.log("Score: " + penalty + " (numLevels: " + numLevelsPen + ")");
        return penalty;
    },

    computeComponents: function () {
        // find all connected components, for now - using plain (and likely non-optimal) O(n^2) algo
        // (as a side effect can compute minimum posible penalty score)

        var components = new Complonents(); // mapping between edges and connected components; see Components class

        var crosses = []; // for each edge the list of edges it directly intersects with

        var hasToBeAboveForPerfectScore = []; // used for heurisic computation of minimum number of levels required

        var numEdges = this.initLevels.length;
        for (var i = 0; i < numEdges; i++) {
            crosses[i] = [];
            hasToBeAboveForPerfectScore[i] = [];
        }

        for (var i = 0; i < numEdges - 1; i++) {
            for (var j = i + 1; j < numEdges; j++) {
                if (this.pairScoreFunc(i, j, 1, 1) == Infinity) {
                    // only happens when edges intersect and can't be at the same level
                    crosses[i].push(j);
                    crosses[j].push(i);

                    var componentI = components.getEdgeComponent(i);
                    var componentJ = components.getEdgeComponent(j);

                    if (componentI === undefined && componentJ === undefined) {
                        // both i and j are not in any component yet
                        components.addToNewComponent(i);
                        components.addToExistingComponent(j, components.getEdgeComponent(i));
                    } else if (componentI !== undefined) {
                        if (componentJ !== undefined) {
                            // both i and j are assigned to a component
                            if (componentI != componentJ) {
                                // ...to different components: merge (ow we are ok)
                                components.mergeComponents(componentI, componentJ);
                            }
                        } else {
                            // i has a component, j does not
                            components.addToExistingComponent(j, componentI);
                        }
                    } else {
                        // j has a component, i does not
                        components.addToExistingComponent(i, componentJ);
                    }

                    // if edges cross => the best arrangement of these two edges is either one above the other or v.v.
                    // in any case there may be some penalty associated for that, but can't do beter than the best
                    // of these two options. Compute it so that later once (if) minimum possible penalty is achieved
                    // the algorithm stop without wasting more time
                    var scoreAbove = this.pairScoreFunc(i, j, 1, 2);
                    var scoreBelow = this.pairScoreFunc(i, j, 2, 1);

                    var compID = components.getEdgeComponent(i);
                    components.addRequiredPenaltyToComponent(compID, Math.min(scoreAbove, scoreBelow));

                    if (scoreAbove < scoreBelow) {
                        hasToBeAboveForPerfectScore[i].push(j);
                    }
                    if (scoreAbove > scoreBelow) {
                        hasToBeAboveForPerfectScore[j].push(i);
                    }
                }
            }
        }

        // it is good to know best possible score so that algorithm may stops earlier if this score is
        // achieved; it is hard to compute precisely though, as that is equivalent to solving the problem.
        //
        // One posible heuristic is the size of the largest clique, but that is hard to compute (clique problem
        // is hard), and even if at most 2 edges overlap at the same time, may need many levels as they stack
        // below each other (e.g. in a stairs-like structure)
        //
        // So the following dumb heuristic is used to determine num levels needed for each component:
        //  - for each edge min level is max( minLevel given in the input, max(min levels of all edges it should be above) )

        for (var compID = 0; compID < components.getNumComponents(); compID++) {

            // if min penalty is above 0 it means at least one crossing => at least 2 levels are required
            var minNumLevels = 1;
            var minRequired = 1;
            var minMinLevel = Infinity;

            var component = components.getComponentEdges(compID);
            for (var i = 0; i < component.length; i++) {
                var edge = component[i];

                if (this.minLevels) {
                    if (this.minLevels[edge] > minRequired) minRequired = this.minLevels[edge];
                    if (this.minLevels[edge] < minMinLevel) minMinLevel = this.minLevels[edge];
                }

                var minForThisEdge = this.minLevels ? this.minLevels[edge] : 1;

                for (var j = 0; j < hasToBeAboveForPerfectScore[edge].length; j++) {
                    var needToBeAboveEdge = hasToBeAboveForPerfectScore[edge][j];
                    var minForOtherEdge = this.minLevels ? this.minLevels[edge] : 1;
                    // if the other edge also has to be above something and has min level
                    if (hasToBeAboveForPerfectScore[needToBeAboveEdge].length > 0 && minForOtherEdge == 1) minForOtherEdge++;
                    minForThisEdge = Math.max(minForThisEdge, minForOtherEdge + 1);
                }

                minNumLevels = Math.max(minNumLevels, minForThisEdge);
            }

            var needExtraLevelsAboveMin = components.getMinPossiblePenalty(compID) == 0 ? 0 : 1;
            if (!isFinite(minMinLevel)) minMinLevel = 1;
            minNumLevels = Math.max(minNumLevels, minMinLevel + needExtraLevelsAboveMin);

            // this penalty is guaranteed to be less than 1 => this affects the penalty less than a single extra crossing
            var penaltyForNumLevelsUsed = this.numberOfLevelsPenalty(minNumLevels, minRequired, component.length);
            components.addRequiredPenaltyToComponent(compID, penaltyForNumLevelsUsed);
        }

        //console.log("Components: " + stringifyObject(components));
        return { "crosses": crosses, "components": components };
    },

    computeVerticalPositions: function (maxFullSearchSize, maxSteps, seed) {
        // maxFullSearchSize - max number of edges in a cluster which can be searched fully via brute force; max time = C1 * maxFullSearchSize! per cluster
        // maxSteps          - max number of steps for a heuristic; max time = C2 * maxSteps per cluster
        //                     (where C2 > C1, and both include computing the penalty for a given arrangmenet, which is ~O(clusterSize^2)

        this.seed = seed ? seed : 1;

        var bestSoFar = this.initLevels;

        // fix component-by-component
        for (var compID = 0; compID < this.components.getNumComponents(); compID++) {

            //console.log("Optimizing next component [ID="+compID+"] with edges: " + stringifyObject(this.components.getComponentEdges(compID)));

            //console.log("CompID[" + compID + "]: MinPossiblePenalty: " + this.components.getMinPossiblePenalty(compID));
            //console.log("CompID[" + compID + "]: Initial Penalty:    " + this.componentScoreFunc(bestSoFar, compID));
            //console.log("CompID[" + compID + "]: Initial assignment: " + stringifyObject(bestSoFar));

            // problem size for exhaustiveSearch ~= numEdges!, can't afford to try all combinations for large problems
            if (this.components.getComponentEdges(compID).length <= maxFullSearchSize) bestSoFar = this.exhaustiveSearch(compID, bestSoFar);else bestSoFar = this.simulatedAnnellingOptimizer(compID, bestSoFar, maxSteps);

            //console.log("CompID[" + compID + "]: Final assignment: " + stringifyObject(bestSoFar));
            //console.log("CompID[" + compID + "]: Final Penalty:    " + this.componentScoreFunc(bestSoFar, compID));
        }

        //console.log("Final assignment: " + stringifyObject(bestSoFar));

        return bestSoFar;
    },

    //----------------------------------------------------------------------------------
    exhaustiveSearch: function (componentID, bestSoFar) {

        var initScore = this.componentScoreFunc(bestSoFar, componentID);

        //this.checkedNumber = 0; // TODO: debug
        //console.log("minPossiblePenalty: " + this.components.getMinPossiblePenalty(componentID));

        var result = this.recursiveExhaustiveSearch(componentID, bestSoFar.slice(0), 0, { "values": bestSoFar, "score": initScore });

        //console.log("[fsearch] CompID[" + componentID + "]: Tried " +  this.checkedNumber + " combinations"); // TODO: debug

        return result.values;
    },

    recursiveExhaustiveSearch: function (componentID, valuesSoFar, level, bestSoFar) {

        var component = this.components.getComponentEdges(componentID);

        // reached the end of the recursion
        if (level == component.length) {
            var score = this.componentScoreFunc(valuesSoFar, componentID);
            //console.log("SCORING: " + stringifyObject(valuesSoFar) + " -> Score: " + score );
            if (score < bestSoFar.score) {
                bestSoFar.values = valuesSoFar.slice(0);
                bestSoFar.score = score;
                //console.log("[fsearch] New best: " + stringifyObject(bestSoFar.values) + " (score: " + bestSoFar.score + ")");
            }
            //console.log("best value at enter [" + level + "]: " + stringifyObject(valuesSoFar));
            //this.checkedNumber++; // TODO: debug
            return bestSoFar;
        }

        var edge = component[level];

        // TODO: since we don't want any gaps in levels, a smarter search can be used which fills the gaps
        //       once it is known that if they are not filled now the arrangmenet will be incorrect

        // TODO: exclude assignments where two intersecting edges have the same level. Only consider edges
        //       with lover IDs since those are already assigned a value. Edges with higher ids haveno assignment yet

        var minValue = 1;
        var maxValue = component.length;

        if (this.minLevels) {
            minValue = this.minLevels[edge];
            maxValue += minValue - 1;
        }

        for (var i = minValue; i <= maxValue; i++) {
            valuesSoFar[edge] = i;

            bestSoFar = this.recursiveExhaustiveSearch(componentID, valuesSoFar, level + 1, bestSoFar);

            if (bestSoFar.score == this.components.getMinPossiblePenalty(componentID)) break;
        }
        //console.log("best value at exit [" + level + "]: " + stringifyObject(bestSoFar.values) + " (score: " + bestSoFar.score + ")");

        return bestSoFar;
    },
    //----------------------------------------------------------------------------------


    //--[ simulatedAnnelling() related ]------------------------------------------------
    makeBasicValidAssignment: function (initLevels, componentID) {
        var component = this.components.getComponentEdges(componentID);
        var value = 1;

        // give each edge that crosses a separate level - may not be optimal, but guaranteed to be "valid" with a penalty below Infinity
        var newAssignemnt = initLevels.slice(0);
        for (var i = 0; i < component.length; i++) {
            var edge = component[i];
            if (this.minLevels && value < this.minLevels[edge]) value = this.minLevels[edge];
            newAssignemnt[edge] = value;
            value++; // for next age to be different form this one
        }

        //console.log("[asearch] CompID[" + componentID + "]: Initial assignment:   " + stringifyObject(initLevels)    + ", score: " + this.componentScoreFunc(initLevels, componentID));
        //console.log("[asearch] CompID[" + componentID + "]: InitValid assignment: " + stringifyObject(newAssignemnt) + ", score: " + this.componentScoreFunc(newAssignemnt, componentID));
        return newAssignemnt;
    },

    computeNeighbour: function (currentState, componentID, step) {
        // general idea: assign some other "level" to one of the edges (where "some" and "one of" can be picked randomly/depending on the `step`).
        //               If that level is forbidden due to a crossing with some other edges assign the first OK level in the direction of change
        //               + normalize after the change (e.g. remove unused levels + shift to make smallest used levle to be level #1)

        // 1. pick random edge
        // 2. pick new random level for the edge (different form the old value)
        // 3. while (value is forbidden or unchanged) increment value (if new>old) or decrement value (if new<old)

        //console.log("computeNeighbour - current: " + stringifyObject(currentState));

        var component = this.components.getComponentEdges(componentID);

        var newState = currentState.slice(0);

        do {
            // pick a random edge in the component
            var edge = component[Math.floor(this.random() * component.length)];
            var oldLevel = newState[edge];
            var maxUsedLevel = oldLevel;

            // check random value and if it makes sense to increment or decrement it
            var isBelowAll = true;
            var isAboveAll = true;
            var forbidden = {};
            for (var i = 0; i < this.crosses[edge].length; i++) {
                var crossesWith = this.crosses[edge][i];
                var crossLevel = newState[crossesWith];
                if (crossLevel > maxUsedLevel) maxUsedLevel = crossLevel;
                forbidden[crossLevel] = true;
                if (crossLevel >= oldLevel) isAboveAll = false;
                if (crossLevel <= oldLevel) isBelowAll = false;
            }
            if (this.minLevels && oldLevel == this.minLevels[edge]) {
                isBelowAll = true; // if level == minLevel for the edge does not make sense to decrese the level
            }
        } while (isAboveAll && isBelowAll); // if both above all and below all no sense to play with the edge; need to pick another edge

        // pick new random level for the edge (different form the old value)
        var newLevel;
        do {
            // note: new level will be in the range = [0...maxUsedLevel+1]
            // note: 0 is not a valid "level" but lets the edge to be
            // positioned below any other (and later normalized to have proper minLevel)
            newLevel = Math.floor(this.random() * (maxUsedLevel + 2));
        } while (newLevel == oldLevel || isBelowAll && newLevel < oldLevel || isAboveAll && newLevel > oldLevel);

        if (forbidden.hasOwnProperty(newLevel)) {
            for (var i = 0; i < component.length; i++) {
                var e = component[i];
                if (newState[e] <= newLevel) {
                    newState[e]++;
                }
            }
        }
        newState[edge] = newLevel;
        //console.log("Edge: " + edge + ", oldLevel: " + oldLevel + ", newLevel: " + newLevel);

        this.normalize(newState, component);
        //console.log("computeNeighbour: " + stringifyObject(newState) + ", score: " + this.componentScoreFunc( newState, componentID ));

        return newState;
    },

    normalize: function (levels, component) {
        //console.log("pre-normalized levels: " + stringifyObject(levels));

        // 1. if there are gaps (e.g. 1,2,4,5) decrement all levels above each gap to fill the gap
        var usedLevels = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["q" /* filterUnique */])(levels).sort();
        for (var i = usedLevels.length - 1; i > 0; i--) {
            if (usedLevels[i] != usedLevels[i - 1] + 1) {
                // there may be only one gap so no need to implement a more robust algorithm
                for (var j = 0; j < component.length; j++) {
                    var e = component[j];
                    if (levels[e] >= usedLevels[i]) levels[e]--;
                }
                //console.log("found gap [" + usedLevels[i-1] + " - " + usedLevels[i] + "]");
                break;
            }
        }
        //console.log("post fill gap levels: " + stringifyObject(levels));

        // 2. make sure all edges satisfy their min levels (including fixing 0 level)
        for (var i = 0; i < component.length; i++) {
            var edge = component[i];

            var curLevel = levels[edge];
            var minLevel = this.minLevels ? this.minLevels[edge] : 1;

            if (curLevel < minLevel) {
                var adjust = minLevel - curLevel;
                for (var j = 0; j < component.length; j++) {
                    levels[component[j]] += adjust;
                }
            }
        }

        // 3. try to minimize the highest used level
        do {
            var changed = false;
            for (var i = 0; i < component.length; i++) {
                var edge = component[i];
                var curLevel = levels[edge];
                var minLevel = this.minLevels ? this.minLevels[edge] : 1;
                if (curLevel > minLevel) {
                    var highestBelow = 0;
                    for (var j = 0; j < this.crosses[edge].length; j++) {
                        var level = levels[this.crosses[edge][j]];
                        if (level < curLevel && level > highestBelow) highestBelow = levels[this.crosses[edge][j]];
                    }
                    if (highestBelow < curLevel - 1) {
                        levels[edge] = highestBelow + 1;
                    }
                }
            }
        } while (changed);

        //console.log("post normalization: " + stringifyObject(levels));
    },

    localOptimization: function (levels, currentScore, componentID, untilFirstImprovement) {
        /*
         * TODO: after improvements made to the main algorithm this heuristic may not be necessary,
         *       but leaving it here for now as a placeholder
         *
        // tries to find a better position for just one edge using complete search
        // (e.g. local not global optimization)
         var component = this.components.getComponentEdges(componentID);
        for (var e = 0; e < component.length; e++) {
            var edge     = component[e];
            var curLevel = levels[edge];
            var minLevel = this.minLevels ? this.minLevels[edge] : 1;
             var forbidden  = {};
            for (var i = 0; i < this.crosses[edge].length; i++) {
                var crossesWith = this.crosses[edge][i];
                var crossLevel  = levels[crossesWith];
                forbidden[crossLevel] = true;
            }
            // TODO
        }
        */
        return currentScore;
    },

    random: function () {
        // very crude but ok for the purpose of this algorithm in the context of vertical edge allocation
        // http://jsfiddle.net/bhrLT/3/
        var x = Math.sin(this.seed++) * 16;
        return x - Math.floor(x);
    },

    doSwitchDuringAnneling: function (oldScore, newScore, stepsSinceReset) {
        if (newScore <= oldScore) return true;

        var probability = Math.exp(-(newScore - oldScore) * Math.log((stepsSinceReset + 1) * 5));

        if (probability > this.random()) {
            //console.log("[debug] switch to worse score");
            return true;
        }
        return false;
    },

    simulatedAnnellingOptimizer: function (componentID, bestSoFar, maxSteps) {

        //console.log("[asearch] Starting simulatedAnnellingOptimizer");

        var bestScore = this.componentScoreFunc(bestSoFar, componentID);

        var bestState = isFinite(bestScore) ? bestSoFar : this.makeBasicValidAssignment(bestSoFar, componentID);
        var bestScore = isFinite(bestScore) ? bestScore : this.componentScoreFunc(bestState, componentID);
        var bestStep = maxSteps;

        var currentState = bestState;
        var currentScore = bestScore;

        //console.log("Component: " + stringifyObject(this.components.getComponentEdges(componentID)) +
        //            ", init score: " + bestScore + ", best possible score: " + this.components.getMinPossiblePenalty(componentID));

        // alogrithm (as in wiki):
        //-------------------------------------------
        // s ← s0; e ← E(s)                                  // Initial state, energy.
        // sbest ← s; ebest ← e                              // Initial "best" solution
        // k ← 0                                              // Energy evaluation count.
        // while k < kmax and e > emax                        // While time left & not good enough:
        //   T ← temperature(k/kmax)                          // Temperature calculation.
        //   snew ← neighbour(s)                              // Pick some neighbour.
        //   enew ← E(snew)                                   // Compute its energy.
        //   if P(e, enew, T) > random() then                 // Should we move to it?
        //     s ← snew; e ← enew                            // Yes, change state.
        //   if enew < ebest then                             // Is this a new best?
        //     sbest ← snew; ebest ← enew                    // Save 'new neighbour' to 'best found'.
        //   k ← k + 1                                       // One more evaluation done
        // return sbest                                      // Return the best solution found.

        var maxWrongDirection = maxSteps / 6;

        var step = maxSteps;
        while (bestScore > this.components.getMinPossiblePenalty(componentID) && step >= 0) {

            // reset once in the middle of the search (TODO: investigate if we need more resets or don't need resets at all)
            if (step < bestStep - maxWrongDirection) {
                currentState = bestState.slice(0);
                currentScore = this.localOptimization(currentState, bestScore, componentID, true); // restart from a slightly optimized last best point
                bestStep = step;
                console.log("[asearch] reset to: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(currentState) + ", score: " + currentScore + " (@ step = " + (maxSteps - step + 1) + ")");
            }

            var neighbourState = this.computeNeighbour(currentState, componentID, step);
            var neighbourScore = this.componentScoreFunc(neighbourState, componentID);

            if (this.doSwitchDuringAnneling(currentScore, neighbourScore, bestStep - step)) {
                currentState = neighbourState;
                currentScore = neighbourScore;
            }

            if (currentScore < bestScore) {
                console.log("[asearch] New best: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(currentState) + ", score: " + currentScore + " (@ step = " + (maxSteps - step + 1) + ")");
                bestState = currentState.slice(0);
                bestScore = currentScore;
                bestStep = step;
            }

            step--;
        }

        //bestState = [1, 2, 3, 5, 6, 7, 4, 6, 7, 4];
        //bestScore = this.componentScoreFunc( bestState, componentID );
        bestScore = this.localOptimization(bestState, bestScore, componentID);
        console.log("[asearch] Final optimized best: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(bestState) + ", score: " + bestScore);

        return bestState;
    }
    //-------------------------------------------------[ simulatedAnnelling() related ]--
};

function Complonents() {
    this.components = []; // arrat[arrat[int]] - for each component -> a list of edges
    this.minPossiblePenalty = []; // array[double]     - for each component min possible penalty per component

    // Note: data in edgeComponents can be derived from data in components (and v.v.),
    //       but both are stored for performance reasons
    this.edgeComponents = []; // array[int] - for each edge -> component ID
}

Complonents.prototype = {
    getNumComponents: function () {
        return this.components.length;
    },

    getComponentEdges: function (componentID) {
        return this.components[componentID];
    },

    // returns component ID of the edge
    getEdgeComponent: function (edge) {
        return this.edgeComponents[edge];
    },

    addToNewComponent: function (edge) {
        this.edgeComponents[edge] = this.components.length;
        this.components.push([edge]); // new component has just one edge
        this.minPossiblePenalty.push(0); // new component has 0 min penalty
    },

    addToExistingComponent: function (edge, componentID) {
        this.components[componentID].push(edge);
        this.edgeComponents[edge] = componentID;
    },

    // NOTE: may reassign some unrelated component IDs
    mergeComponents: function (component1, component2) {
        if (component1 == component2) return;
        var minID = Math.min(component1, component2);
        var maxID = Math.max(component1, component2);

        // move all edges in maxID to minID
        for (var i = 0; i < this.components[maxID].length; i++) {
            var edge = this.components[maxID][i];
            this.addToExistingComponent(edge, minID);
        }

        // add penalties
        this.minPossiblePenalty[minID] += this.minPossiblePenalty[maxID];

        // remove component maxID
        this.components.splice(maxID, 1);
        this.minPossiblePenalty.splice(maxID, 1);
    },

    addRequiredPenaltyToComponent: function (componentID, penalty) {
        this.minPossiblePenalty[componentID] += penalty;
    },

    // for performance reasons we want to stop as soon as we hit the best possible assignment;
    // while it is hard to compute the actual optimal score, we can estimate it from below,
    // such that if this low estimate is achieved we are guaranteed we have the best assignment
    getMinPossiblePenalty: function (componentID) {
        return this.minPossiblePenalty[componentID];
    }
};

/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Raphael) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__legend__ = __webpack_require__(65);


/**
 * Class responsible for keeping track of candidate genes.
 * This information is graphically displayed in a 'Legend' box.
 *
 * @class GeneLegend
 * @constructor
 */
const GeneLegend = Class.create(__WEBPACK_IMPORTED_MODULE_0__legend__["a" /* Legend */], {

    initialize: function ($super) {
        $super("Candidate Genes", true);
    },

    _getPrefix: function (id) {
        return "gene";
    },

    /**
     * Generate the element that will display information about the given disorder in the legend
     *
     * @method _generateElement
     * @param {String} geneID The id for the gene
     * @param {String} name The human-readable gene description
     * @return {HTMLLIElement} List element to be insert in the legend
     */
    _generateElement: function ($super, geneID, name) {
        if (!this._objectColors.hasOwnProperty(geneID)) {
            var color = this._generateColor(geneID);
            this._objectColors[geneID] = color;
            document.fire("gene:color", { "id": geneID, color: color });
        }

        return $super(geneID, name);
    },

    /**
     * Callback for dragging an object from the legend onto nodes
     *
     * @method _onDropGeneric
     * @param {Person} Person node
     * @param {String|Number} id ID of the gene being dropped
     */
    _onDropObject: function (node, geneID) {
        if (node.isPersonGroup()) {
            return;
        }
        var currentGenes = node.getGenes().slice(0);
        if (currentGenes.indexOf(geneID) == -1) {
            // only if the node does not have this gene yet
            currentGenes.push(geneID);
            editor.getView().unmarkAll();
            var properties = { "setGenes": currentGenes };
            var event = { "nodeID": node.getID(), "properties": properties };
            document.fire("pedigree:node:setproperty", event);
        } else {
            console.warn("This person already has the selected candidate gene");
        }
    },

    /**
     * Generates a CSS color.
     * Has preference for some predefined colors that can be distinguished in gray-scale
     * and are distint from disorder colors.
     *
     * @method generateColor
     * @return {String} CSS color
     */
    _generateColor: function (geneID) {
        if (this._objectColors.hasOwnProperty(geneID)) {
            return this._objectColors[geneID];
        }

        var usedColors = Object.values(this._objectColors),

        // green palette
        prefColors = ["#81a270", "#c4e8c4", "#56a270", "#b3b16f", "#4a775a", "#65caa3"];
        usedColors.each(function (color) {
            prefColors = prefColors.without(color);
        });
        if (prefColors.length > 0) {
            return prefColors[0];
        } else {
            var randomColor = Raphael.getColor();
            while (randomColor == "#ffffff" || usedColors.indexOf(randomColor) != -1) {
                randomColor = "#" + ((1 << 24) * Math.random() | 0).toString(16);
            }
            return randomColor;
        }
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = GeneLegend;

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(27)))

/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__xcoordclass__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__baseGraph__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__queues__ = __webpack_require__(44);
/* harmony export (immutable) */ __webpack_exports__["a"] = Heuristics;





function Heuristics(drawGraph) {
    this.DG = drawGraph;
}

Heuristics.prototype = {

    swapPartnerToBringToSideIfPossible: function (personId) {
        // attempts to swap this person with it's existing partner if the swap makes the not-yet-parnered
        // side of the person on the side which favours child insertion (e.g. the side where the child closest
        // to the side has no parners)

        if (this.DG.GG.getTwinGroupId(personId) !== null) return; // there is a separate heuristic for twin rearrangements

        var rank = this.DG.ranks[personId];
        var order = this.DG.order.vOrder[personId];

        if (order == 0 || order == this.DG.order.order[rank].length - 1) return; // node on one of the sides: can do well without nay swaps

        var parnetships = this.DG.GG.getAllRelationships(personId);
        if (parnetships.length != 1) return; // only if have exactly one parner
        var relationship = parnetships[0];
        var relOrder = this.DG.order.vOrder[relationship];

        var partners = this.DG.GG.getParents(relationship);
        var partnerId = partners[0] == personId ? partners[1] : partners[0]; // the only partner of personId
        var parnerOutEdges = this.DG.GG.getOutEdges(partnerId);
        if (parnerOutEdges.length != 1) return; // only if parner also has exactly one parner (which is personId)

        if (this.DG.ranks[personId] != this.DG.ranks[partnerId]) return; // different ranks, heuristic does not apply

        var partnerOrder = this.DG.order.vOrder[partnerId];
        if (partnerOrder != order - 2 && partnerOrder != order + 2) return; // only if next to each other

        // if both have parents do not swap so that parent edges are not crossed
        if (this.DG.GG.getInEdges(personId).length != 0 && this.DG.GG.getInEdges(partnerId).length != 0) return;

        var childhubId = this.DG.GG.getOutEdges(relationship)[0]; // <=> getRelationshipChildhub(relationship)
        var children = this.DG.GG.getOutEdges(childhubId);

        if (children.length == 0) return;

        // TODO: count how many edges will be crossed in each case and also swap if we save a few crossings?

        // idea:
        // if (to the left  of parner && leftmostChild  has parner to the left  && rightmostchid has no parner to the right) -> swap
        // if (to the right of parner && rightmostChild has parner to the right && leftmostchid  has no parner to the left) -> swap

        var toTheLeft = order < partnerOrder;

        var childrenPartners = this.analizeChildren(childhubId);

        if (toTheLeft && childrenPartners.leftMostHasLParner && !childrenPartners.rightMostHasRParner || !toTheLeft && childrenPartners.rightMostHasRParner && !childrenPartners.leftMostHasLParner || order == 2 && childrenPartners.rightMostHasRParner || order == this.DG.order.order[rank].length - 3 && childrenPartners.leftMostHasLParner) {
            this.swapPartners(personId, partnerId, relationship); // updates orders + positions
        }
    },

    swapTwinsToBringToSideIfPossible: function (personId) {
        var twinGroupId = this.DG.GG.getTwinGroupId(personId);
        if (twinGroupId === null) return;

        //TODO
    },

    analizeChildren: function (childhubId) {
        if (this.DG.GG.isRelationship(childhubId)) childhubId = this.DG.GG.getOutEdges(childhubId)[0];

        if (!this.DG.GG.isChildhub(childhubId)) throw "Assertion failed: applying analizeChildren() not to a childhub";

        var children = this.DG.GG.getOutEdges(childhubId);

        if (children.length == 0) return;

        var havePartners = {};
        var numWithPartners = 0;
        var numWithTwoPartners = 0;
        var leftMostChildId = undefined;
        var leftMostChildOrder = Infinity;
        var leftMostHasLParner = false;
        var rightMostChildId = undefined;
        var rightMostChildOrder = -Infinity;
        var rightMostHasRParner = false;
        for (var i = 0; i < children.length; i++) {
            var childId = children[i];
            var order = this.DG.order.vOrder[childId];

            if (order < leftMostChildOrder) {
                leftMostChildId = childId;
                leftMostChildOrder = order;
                leftMostHasLParner = this.hasParnerBetweenOrders(childId, 0, order - 1); // has partner to the left
            }
            if (order > rightMostChildOrder) {
                rightMostChildId = childId;
                rightMostChildOrder = order;
                rightMostHasRParner = this.hasParnerBetweenOrders(childId, order + 1, Infinity); // has partner to the right
            }
            if (this.DG.GG.getOutEdges(childId).length > 0) {
                havePartners[childId] = true;
                numWithPartners++;
                if (this.DG.GG.getOutEdges(childId).length > 1) {
                    numWithTwoPartners++;
                }
            }
        }

        var orderedChildren = this.DG.order.sortByOrder(children);
        //console.log("ordered ch: " + stringifyObject(orderedChildren));

        return { "leftMostHasLParner": leftMostHasLParner,
            "leftMostChildId": leftMostChildId,
            "leftMostChildOrder": leftMostChildOrder,
            "rightMostHasRParner": rightMostHasRParner,
            "rightMostChildId": rightMostChildId,
            "rightMostChildOrder": rightMostChildOrder,
            "withPartnerSet": havePartners,
            "numWithPartners": numWithPartners,
            "numWithTwoPartners": numWithTwoPartners,
            "orderedChildren": orderedChildren };
    },

    hasParnerBetweenOrders: function (personId, minOrder, maxOrder) {
        var rank = this.DG.ranks[personId];
        var order = this.DG.order.vOrder[personId];

        var outEdges = this.DG.GG.getOutEdges(personId);

        for (var i = 0; i < outEdges.length; i++) {
            var relationship = outEdges[i];
            var relRank = this.DG.ranks[relationship];
            if (relRank != rank) continue;

            var relOrder = this.DG.order.vOrder[relationship];
            if (relOrder >= minOrder && relOrder <= maxOrder) return true;
        }

        return false;
    },

    swapPartners: function (partner1, partner2, relationshipId) {
        var rank = this.DG.ranks[partner1];
        if (this.DG.ranks[partner2] != rank || this.DG.ranks[relationshipId] != rank) throw "Assertion failed: swapping nodes of different ranks";

        var order1 = this.DG.order.vOrder[partner1];
        var order2 = this.DG.order.vOrder[partner2];
        var orderRel = this.DG.order.vOrder[relationshipId];

        // normalize: partner1 always to the left pf partner2, relationship in the middle
        if (order1 > order2) {
            var tmpOrder = order1;
            var tmpId = partner1;
            order1 = order2;
            partner1 = partner2;
            order2 = tmpOrder;
            partner2 = tmpId;
        }

        if (order1 + 1 != orderRel || orderRel + 1 != order2) return;

        this.DG.order.exchange(rank, order1, order2);

        var widthDecrease = this.DG.GG.getVertexWidth(partner1) - this.DG.GG.getVertexWidth(partner2);

        var pos2 = this.DG.positions[partner2];
        this.DG.positions[partner2] = this.DG.positions[partner1];
        this.DG.positions[partner1] = pos2 - widthDecrease;
        this.DG.positions[relationshipId] -= widthDecrease;
    },

    moveSiblingPlusPartnerToOrder: function (personId, partnerId, partnershipId, newOrder) {
        // transforms this
        //   [partnerSibling1 @ newOrder] ... [partnerSiblingN] [person]--[*]--[partner]
        // into
        //   [person @ newOrder]--[*]--[partner] [partnerSibling1] ... [partnerCiblingN]
        //
        // assumes 1. there are no relationship nodes between partnershipId & newOrder
        //         2. when moving left, partner is the rightmost node of the 3 given,
        //            when moving right partner is the leftmost node of the 3 given

        var rank = this.DG.ranks[partnerId];
        var partnerOrder = this.DG.order.vOrder[partnerId];
        var personOrder = this.DG.order.vOrder[personId];
        var relOrder = this.DG.order.vOrder[partnershipId];

        var moveOrders = newOrder - personOrder;

        var moveDistance = this.DG.positions[this.DG.order.order[rank][newOrder]] - this.DG.positions[personId];

        var moveRight = newOrder > personOrder;
        var firstSibling = moveRight ? this.DG.order.order[rank][personOrder + 1] : this.DG.order.order[rank][personOrder - 1];
        var moveOtherDist = this.DG.positions[firstSibling] - this.DG.positions[partnerId];

        //console.log("before move: " + stringifyObject(this.DG.order));

        this.DG.order.move(rank, personOrder, moveOrders);
        this.DG.order.move(rank, relOrder, moveOrders);
        this.DG.order.move(rank, partnerOrder, moveOrders);

        //console.log("after move: " + stringifyObject(this.DG.order));

        this.DG.positions[personId] += moveDistance;
        this.DG.positions[partnerId] += moveDistance;
        this.DG.positions[partnershipId] += moveDistance;

        var minMovedOrder = moveRight ? partnerOrder : newOrder + 3;
        var maxMovedOrder = moveRight ? newOrder - 3 : partnerOrder;
        for (var o = minMovedOrder; o <= maxMovedOrder; o++) {
            var node = this.DG.order.order[rank][o];
            console.log("moving: " + node);
            this.DG.positions[node] -= moveOtherDist;
        }
    },

    swapBeforeParentsToBringToSideIfPossible: function (personId) {
        // used to swap this node AND its only partner to bring the two to the side to clear
        // space above for new parents of this node

        // 1. check that we have exactly one partner and it has parents - if not nothing to move
        var parnetships = this.DG.GG.getAllRelationships(personId);
        if (parnetships.length != 1) return;
        var relationshipId = parnetships[0];

        var partners = this.DG.GG.getParents(relationshipId);
        var partnerId = partners[0] == personId ? partners[1] : partners[0]; // the only partner of personId
        if (this.DG.GG.getInEdges(partnerId).length == 0) return; // partner has no parents!

        if (this.DG.ranks[personId] != this.DG.ranks[partnerId]) return; // different ranks, heuristic does not apply

        if (this.DG.GG.getOutEdges(partnerId).length > 1) return; // partner has multiple partnerships, too complicated

        var order = this.DG.order.vOrder[personId];
        var partnerOrder = this.DG.order.vOrder[partnerId];
        if (partnerOrder != order - 2 && partnerOrder != order + 2) return; // only if next to each other

        var toTheLeft = order < partnerOrder;

        // 2. check where the partner stands among its siblings
        var partnerChildhubId = this.DG.GG.getInEdges(partnerId)[0];
        var partnerSibglingInfo = this.analizeChildren(partnerChildhubId);

        //if (partnerSibglingInfo.orderedChildren.length == 1) return; // just one sibling, nothing to do
        if (partnerSibglingInfo.orderedChildren.length > 1) {
            // simple cases:  ...
            //                 |
            //       +---------+-----------|
            //       |                     |
            //   [sibling]--[personID]  [sibling]
            if (partnerSibglingInfo.leftMostChildId == partnerId) {
                if (!toTheLeft) this.swapPartners(personId, partnerId, relationshipId);
                return;
            }
            if (partnerSibglingInfo.rightMostChildId == partnerId) {
                if (toTheLeft) this.swapPartners(personId, partnerId, relationshipId);
                return;
            }
        }

        // ok, partner is in the middle => may need to move some nodes around to place personId in a
        //                                 position where parents can be inserted with least disturbance

        // 2. check how many partners partner's parents have. if both have more than one the case
        //    is too complicated and skip moving nodes around
        var partnerParents = this.DG.GG.getInEdges(this.DG.GG.getInEdges(partnerChildhubId)[0]);
        var order0 = this.DG.order.vOrder[partnerParents[0]];
        var order1 = this.DG.order.vOrder[partnerParents[1]];
        var leftParent = order0 > order1 ? partnerParents[1] : partnerParents[0];
        var rightParent = order0 > order1 ? partnerParents[0] : partnerParents[1];
        console.log("parents: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(partnerParents));
        var numLeftPartners = this.DG.GG.getOutEdges(leftParent).length;
        var numRightPartners = this.DG.GG.getOutEdges(rightParent).length;
        console.log("num left: " + numLeftPartners + ", numRight: " + numRightPartners);
        if (numLeftPartners > 1 && numRightPartners > 1) return;

        if (partnerSibglingInfo.orderedChildren.length == 1) {
            if (numLeftPartners == 1 && numRightPartners == 1) {
                // no need to move anything enywhere, we are fine as we are now
                return;
            }
            if (numLeftPartners == 1 && !toTheLeft) {
                this.swapPartners(personId, partnerId, relationshipId);
            }
            if (numRightPartners == 1 && toTheLeft) {
                this.swapPartners(personId, partnerId, relationshipId);
            }
            return; // the rest is for the case of multiple children
        }

        // 3. check how deep the tree below is.
        //    do nothing if any children have partners (too complicated for a heuristic)
        var childHubBelow = this.DG.GG.getRelationshipChildhub(relationshipId);
        var childrenInfo = this.analizeChildren(childHubBelow);
        if (childrenInfo.numWithPartners > 0) return; // too complicated for a heuristic

        // 4. ok, the tree below is not deep, partner is surrounded by siblings.
        //    check if we can move it right or left easily:
        //    move to the right iff: rightmostchild has no partners && rightParent has no partners
        //    move to the left iff: leftmostchild has no partners && leftParent has no partners
        if (numRightPartners == 1 && !partnerSibglingInfo.rightMostHasRParner) {
            for (var c = partnerSibglingInfo.orderedChildren.length - 1; c >= 0; c--) {
                var sibling = partnerSibglingInfo.orderedChildren[c];
                if (sibling == partnerId) {
                    if (toTheLeft) this.swapPartners(personId, partnerId, relationshipId);
                    this.moveSiblingPlusPartnerToOrder(personId, partnerId, relationshipId, partnerSibglingInfo.rightMostChildOrder);
                    return;
                }
                if (partnerSibglingInfo.withPartnerSet.hasOwnProperty(sibling)) break; // does not work on this side
            }
        }
        if (numLeftPartners == 1 && !partnerSibglingInfo.leftMostHasLParner) {
            for (var c = 0; c < partnerSibglingInfo.orderedChildren.length; c++) {
                var sibling = partnerSibglingInfo.orderedChildren[c];
                if (sibling == partnerId) {
                    if (!toTheLeft) this.swapPartners(personId, partnerId, relationshipId);
                    this.moveSiblingPlusPartnerToOrder(personId, partnerId, relationshipId, partnerSibglingInfo.leftMostChildOrder);
                    return;
                }
                if (partnerSibglingInfo.withPartnerSet.hasOwnProperty(sibling)) break; // does not work on this side
            }
        }
    },

    improvePositioning: function (ranksBefore, rankYBefore) {
        var timer = new __WEBPACK_IMPORTED_MODULE_0__helpers__["g" /* Timer */]();

        //console.log("pre-fix orders: " + stringifyObject(this.DG.order.order[2]));
        //var xcoord = new XCoord(this.DG.positions, this.DG);
        //this.DG.displayGraph(xcoord.xcoord, "pre-fix");

        //DEBUG: for testing how layout looks when multi-rank edges are not improved
        //this.DG.vertLevel = this.DG.positionVertically();
        //this.DG.rankY     = this.DG.computeRankY(ranksBefore, rankYBefore);
        //return;

        // given a finished positioned graph (asserts the graph is valid):
        //
        // 1. fix some display requirements, such as relationship lines always going to the right or left first before going down
        //
        // 2. fix some common layout imperfections, such as:
        //    A) the only relationship not right above the only child: can be fixed by
        //       a) moving the child, if possible without disturbiung other nodes
        //       b) moving relationship + one (or both, if possible) partners, if possible without disturbiung other nodes
        //    B) relationship not above one of it's children (preferably one in the middle) and not
        //       right in the midpoint between left and right child: can be fixed by
        //       a) moving relationship + both partners, if possible without disturbiung other nodes
        //    C) not nice long edge crossings (example pending) - TODO
        //    D) a relationship edge can be made shorter and bring two parts of the graph separated by the edge closer together
        //    E) after everything else try to center relationships between the partners (and move children accordingly)

        // 1) improve layout of multi-rank relationships:
        //    relationship lines should always going to the right or left first before going down
        var modified = false;
        for (var parent = 0; parent <= this.DG.GG.getMaxRealVertexId(); parent++) {
            if (!this.DG.GG.isPerson(parent)) continue;

            var rank = this.DG.ranks[parent];
            var order = this.DG.order.vOrder[parent];

            var outEdges = this.DG.GG.getOutEdges(parent);

            var sameRankToTheLeft = 0;
            var sameRankToTheRight = 0;

            var multiRankEdges = [];
            for (var i = 0; i < outEdges.length; i++) {
                var node = outEdges[i];
                if (this.DG.ranks[node] != rank) multiRankEdges.push(node);else {
                    if (this.DG.order.vOrder[node] < order) sameRankToTheLeft++;else sameRankToTheRight++;
                }
            }
            if (multiRankEdges.length == 0) continue;

            // sort all by their xcoordinate if to the left of parent, and in reverse order if to the right of parent
            var _this = this;
            var byXcoord = function (v1, v2) {
                var rel1 = _this.DG.GG.downTheChainUntilNonVirtual(v1);
                var rel2 = _this.DG.GG.downTheChainUntilNonVirtual(v2);
                var position1 = _this.DG.positions[rel1];
                var position2 = _this.DG.positions[rel2];
                var parentPos = _this.DG.positions[parent];
                //console.log("v1: " + v1 + ", pos: " + position1 + ", v2: " + v2 + ", pos: " + position2 + ", parPos: " + parentPos);
                if (position1 >= parentPos && position2 >= parentPos) return position1 < position2;else return position1 > position2;
            };
            multiRankEdges.sort(byXcoord);

            console.log("multi-rank edges: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(multiRankEdges));

            for (var p = 0; p < multiRankEdges.length; p++) {

                var firstOnPath = multiRankEdges[p];

                var relNode = this.DG.GG.downTheChainUntilNonVirtual(firstOnPath);

                // replace the edge from parent to firstOnPath by an edge from parent to newNodeId and
                // from newNodeId to firstOnPath
                var weight = this.DG.GG.removeEdge(parent, firstOnPath);

                var newNodeId = this.DG.GG.insertVertex(__WEBPACK_IMPORTED_MODULE_2__baseGraph__["b" /* TYPE */].VIRTUALEDGE, {}, weight, [parent], [firstOnPath]);

                this.DG.ranks.splice(newNodeId, 0, rank);

                var insertToTheRight = this.DG.positions[relNode] < this.DG.positions[parent] ? false : true;

                if (this.DG.positions[relNode] == this.DG.positions[parent]) {
                    if (sameRankToTheRight > 0 && sameRankToTheLeft == 0 && multiRankEdges.length == 1) {
                        insertToTheRight = false; // only one long edge and only one other edge: insert on the other side regardless of anything else
                    }
                }

                //console.log("inserting " + newNodeId + " (->" + firstOnPath + "), rightSide: " + insertToTheRight + " (pos[relNode]: " + this.DG.positions[relNode] + ", pos[parent]: " + this.DG.positions[parent]);

                var parentOrder = this.DG.order.vOrder[parent]; // may have changed form what it was before due to insertions

                var newOrder = insertToTheRight ? parentOrder + 1 : parentOrder;
                if (insertToTheRight) {
                    while (newOrder < this.DG.order.order[rank].length && this.DG.positions[firstOnPath] > this.DG.positions[this.DG.order.order[rank][newOrder]]) newOrder++;

                    // fix common imperfection when this edge will cross a node-relationship edge. Testcase 4e covers this case.
                    var toTheLeft = this.DG.order.order[rank][newOrder - 1];
                    var toTheRight = this.DG.order.order[rank][newOrder];
                    if (this.DG.GG.isRelationship(toTheLeft) && this.DG.GG.isPerson(toTheRight) && this.DG.GG.hasEdge(toTheRight, toTheLeft) && this.DG.GG.getOutEdges(toTheRight).length == 1) newOrder++;
                    if (this.DG.GG.isRelationship(toTheRight) && this.DG.GG.isPerson(toTheLeft) && this.DG.GG.hasEdge(toTheLeft, toTheRight) && this.DG.GG.getOutEdges(toTheLeft).length == 1) newOrder--;
                } else {
                    while (newOrder > 0 && this.DG.positions[firstOnPath] < this.DG.positions[this.DG.order.order[rank][newOrder - 1]]) newOrder--;

                    // fix common imprefetion when this edge will cross a node-relationship edge
                    var toTheLeft = this.DG.order.order[rank][newOrder - 1];
                    var toTheRight = this.DG.order.order[rank][newOrder];
                    if (this.DG.GG.isRelationship(toTheRight) && this.DG.GG.isPerson(toTheLeft) && this.DG.GG.hasEdge(toTheLeft, toTheRight) && this.DG.GG.getOutEdges(toTheLeft).length == 1) newOrder--;
                    if (this.DG.GG.isRelationship(toTheLeft) && this.DG.GG.isPerson(toTheRight) && this.DG.GG.hasEdge(toTheRight, toTheLeft) && this.DG.GG.getOutEdges(toTheRight).length == 1) newOrder++;
                }

                this.DG.order.insertAndShiftAllIdsAboveVByOne(newNodeId, rank, newOrder);

                // update positions
                this.DG.positions.splice(newNodeId, 0, -Infinity); // temporary position: will move to the correct location and shift other nodes below
                //this.DG.positions.splice( newNodeId, 0, 100 );

                var nodeToKeepEdgeStraightTo = firstOnPath;
                this.moveToCorrectPositionAndMoveOtherNodesAsNecessary(newNodeId, nodeToKeepEdgeStraightTo);

                modified = true;
            }
        }

        this.optimizeLongEdgePlacement();

        timer.printSinceLast("=== Long edge handling runtime: ");

        //DEBUG: for testing how layout looks without any improvements
        //this.DG.vertLevel = this.DG.positionVertically();
        //this.DG.rankY     = this.DG.computeRankY(ranksBefore, rankYBefore);
        //return;

        // 2) fix some common layout imperfections
        var xcoord = new __WEBPACK_IMPORTED_MODULE_1__xcoordclass__["b" /* XCoord */](this.DG.positions, this.DG);
        //this.DG.displayGraph(xcoord.xcoord, "after-long-edge-improvement");

        for (var v = 0; v <= this.DG.GG.getMaxRealVertexId(); v++) {
            if (!this.DG.GG.isRelationship(v)) continue;
            var childhub = this.DG.GG.getRelationshipChildhub(v);
            var relX = xcoord.xcoord[v];
            var childhubX = xcoord.xcoord[childhub];
            if (childhubX != relX) {
                improved = xcoord.moveNodeAsCloseToXAsPossible(childhub, relX);
            }
        }

        // search for gaps between children (which may happen due to deletions) and close them by moving children closer to each other
        for (var v = 0; v <= this.DG.GG.getMaxRealVertexId(); v++) {
            if (!this.DG.GG.isChildhub(v)) continue;
            var children = this.DG.GG.getOutEdges(v);
            if (children.length < 2) continue;

            var orderedChildren = this.DG.order.sortByOrder(children);

            // compress right-side children towards leftmost child, only moving childen withoout relationships
            for (var i = orderedChildren.length - 1; i >= 0; i--) {
                if (i == 0 || this.DG.GG.getOutEdges(orderedChildren[i]).length > 0) {
                    for (var j = i + 1; j < orderedChildren.length; j++) {
                        xcoord.shiftLeftOneVertex(orderedChildren[j], Infinity);
                    }
                    break;
                }
            }
            // compress left-side children towards rightmost child, only moving childen without relationships
            for (var i = 0; i < orderedChildren.length; i++) {
                if (i == orderedChildren.length - 1 || this.DG.GG.getOutEdges(orderedChildren[i]).length > 0) {
                    for (var j = i - 1; j >= 0; j--) {
                        xcoord.shiftRightOneVertex(orderedChildren[j], Infinity);
                    }
                    break;
                }
            }
        }

        //this.DG.displayGraph(xcoord.xcoord, "after-basic-improvement");

        this._compactGraph(xcoord, 5);

        //this.DG.displayGraph(xcoord.xcoord, "after-compact1");

        var orderedRelationships = this.DG.order.getLeftToRightTopToBottomOrdering(__WEBPACK_IMPORTED_MODULE_2__baseGraph__["b" /* TYPE */].RELATIONSHIP, this.DG.GG);
        //console.log("Ordered rels: " + stringifyObject(orderedRelationships));

        var iter = 0;
        var improved = true;
        while (improved && iter < 20) {
            improved = false;
            iter++;
            //console.log("iter: " + iter);

            // fix relative positioning of relationships to their children
            for (var k = 0; k < orderedRelationships.length; k++) {
                var v = orderedRelationships[k];

                var parents = this.DG.GG.getInEdges(v);
                var childhub = this.DG.GG.getRelationshipChildhub(v);

                var relX = xcoord.xcoord[v];
                var childhubX = xcoord.xcoord[childhub];

                var childInfo = this.analizeChildren(childhub);

                var misalignment = 0;

                // First try easy options: moving nodes without moving any other nodes (works in most cases and is fast)

                // relationship withone child: special case for performance reasons
                if (childInfo.orderedChildren.length == 1) {
                    var childId = childInfo.orderedChildren[0];
                    if (xcoord.xcoord[childId] == childhubX) continue;

                    improved = xcoord.moveNodeAsCloseToXAsPossible(childId, childhubX);
                    //console.log("moving " + childId + " to " + xcoord.xcoord[childId]);

                    if (xcoord.xcoord[childId] == childhubX) continue; // done

                    // ok, we can't move the child. Try to move the relationship & the parent(s)
                    misalignment = xcoord.xcoord[childId] - childhubX;
                }
                // relationships with many children: want to position in the "middle" inbetween the left and right child
                //  (for one of the two definitionsof middle: exact center betoween leftmost and rightmost, or
                //   right above the central child, e.g. 2nd of the 3)
                else {
                        var positionInfo = this._computeDesiredChildhubLocation(childInfo, xcoord);

                        // no need to move anything when parent line is either above the mid-point between the leftmost and rightmost child
                        // or above the middle child of the three
                        if (positionInfo.minPreferred <= childhubX && childhubX <= positionInfo.maxPreferred) continue;

                        // of the two "OK" points pick the one which requires less movement
                        var shiftToX = childhubX > positionInfo.maxPreferred ? positionInfo.maxPreferred : positionInfo.minPreferred;

                        var needToShift = childhubX - shiftToX;

                        if (childInfo.numWithPartners == 0) {
                            // can shift children easily
                            if (needToShift < 0) {
                                // need to shift children left
                                var leftMost = childInfo.leftMostChildId;
                                var leftSlack = xcoord.getSlackOnTheLeft(leftMost);
                                var haveSlack = Math.min(Math.abs(needToShift), leftSlack);
                                if (haveSlack > 0) {
                                    for (var i = 0; i < childInfo.orderedChildren.length; i++) xcoord.xcoord[childInfo.orderedChildren[i]] -= haveSlack;
                                    improved = true;
                                    needToShift += haveSlack;
                                }
                            } else {
                                // need to shift children right
                                var rightMost = childInfo.rightMostChildId;
                                var rightSlack = xcoord.getSlackOnTheRight(rightMost);
                                var haveSlack = Math.min(needToShift, rightSlack);
                                if (haveSlack > 0) {
                                    for (var i = 0; i < childInfo.orderedChildren.length; i++) xcoord.xcoord[childInfo.orderedChildren[i]] += haveSlack;
                                    improved = true;
                                    needToShift -= haveSlack;
                                }
                            }
                        }
                        misalignment = -needToShift;
                    }

                if (misalignment == 0) continue;

                // OK, harder case: either move the parents or the children (with whatever nodes are connected to them, in both cases).
                // (need to make sure we do not break what has already been good, or we may be stuck in an infinite improvement loop)

                // try to either shift the entire distance (misalignment) or (if that fails) at least
                // as far as parents can go without pushing other nodes

                //var id = id ? (id+1) : 1; // DEBUG

                var leftParent = xcoord.xcoord[parents[0]] < xcoord.xcoord[parents[1]] ? parents[0] : parents[1];
                var rightParent = xcoord.xcoord[parents[0]] < xcoord.xcoord[parents[1]] ? parents[1] : parents[0];

                var shiftList = [v, childhub];
                if (this.DG.order.vOrder[leftParent] == this.DG.order.vOrder[v] - 1 && !this.DG.GG.isVirtual(leftParent)) {
                    if (misalignment > 0 || xcoord.getSlackOnTheLeft(v) < -misalignment) shiftList.unshift(leftParent);
                }
                if (this.DG.order.vOrder[rightParent] == this.DG.order.vOrder[v] + 1 && !this.DG.GG.isVirtual(rightParent)) {
                    if (misalignment < 0 || xcoord.getSlackOnTheRight(v) < misalignment) shiftList.push(rightParent);
                }
                var noUpSet = {};
                noUpSet[v] = true;
                // findAffectedSet: function(v_list, dontmove_set, noUp_set, noDown_set, forbidden_set, shiftSize, xcoord, stopAtVirtual, minimizeMovement, stopAtPersons, stopAtRels)
                var affectedInfoParentShift = this._findAffectedSet(shiftList, {}, noUpSet, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["r" /* toObjectWithTrue */])(shiftList), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["r" /* toObjectWithTrue */])(childInfo.orderedChildren), misalignment, xcoord, true, false, 7, 3);
                //console.log("["+id+"] affectedInfoParentShift: " + stringifyObject(affectedInfoParentShift));

                var shiftList = childInfo.orderedChildren;
                var forbiddenList = [v, childhub];
                var affectedInfoChildShift = this._findAffectedSet(shiftList, {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["r" /* toObjectWithTrue */])(childInfo.orderedChildren), {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["r" /* toObjectWithTrue */])(forbiddenList), -misalignment, xcoord, true, false, 7, 3);

                var parentShiftAcceptable = this._isShiftSizeAcceptable(affectedInfoParentShift, false, 7, 3);
                var childShiftAcceptable = this._isShiftSizeAcceptable(affectedInfoChildShift, false, 7, 3);
                //console.log("Nodes to shift: " + stringifyObject(affectedInfoChildShift) + ", acceptable: " + childShiftAcceptable);

                if (parentShiftAcceptable || childShiftAcceptable) {

                    improved = true; // at least one of the shifts is OK

                    // pick which one to use
                    if (parentShiftAcceptable && (!childShiftAcceptable || this._isShiftBetter(affectedInfoParentShift, affectedInfoChildShift))) {
                        var nodes = affectedInfoParentShift.nodes;
                        //console.log("["+id+"] Shifting parents by [" + misalignment + "]: " + stringifyObject(nodes));
                        for (var i = 0; i < nodes.length; i++) xcoord.xcoord[nodes[i]] += misalignment;
                    } else {
                        var nodes = affectedInfoChildShift.nodes;
                        //console.log("["+id+"] Shifting children by [" + misalignment + "]: " + stringifyObject(nodes));
                        for (var i = 0; i < nodes.length; i++) xcoord.xcoord[nodes[i]] -= misalignment;
                    }

                    //xcoord.normalize();  // DEBUG
                    //this.DG.displayGraph(xcoord.xcoord, "shift-"+id);
                    continue;
                }

                // ok, can't move all the way: see if we can move parents at least a little in the desired direction
                if (misalignment < 0) {
                    var leftShiftingNode = this.DG.order.vOrder[leftParent] == this.DG.order.vOrder[v] - 1 ? leftParent : v;
                    var smallShift = Math.max(-xcoord.getSlackOnTheLeft(leftShiftingNode), misalignment);
                    if (smallShift == 0 || smallShift == misalignment) continue;
                } else {
                    var rightShiftingNode = this.DG.order.vOrder[rightParent] == this.DG.order.vOrder[v] + 1 ? rightParent : v;
                    var smallShift = Math.min(xcoord.getSlackOnTheLeft(rightShiftingNode), misalignment);
                    if (smallShift == 0 || smallShift == misalignment) continue;
                }

                var shiftList = [v, childhub];
                if (this.DG.order.vOrder[leftParent] == this.DG.order.vOrder[v] - 1 && !this.DG.GG.isVirtual(leftParent)) shiftList.unshift(leftParent);
                if (this.DG.order.vOrder[rightParent] == this.DG.order.vOrder[v] + 1 && !this.DG.GG.isVirtual(rightParent)) shiftList.push(rightParent);
                var noUpSet = {};
                noUpSet[v] = true;
                var affectedInfoParentShift = this._findAffectedSet(shiftList, {}, noUpSet, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["r" /* toObjectWithTrue */])(shiftList), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["r" /* toObjectWithTrue */])(childInfo.orderedChildren), smallShift, xcoord, true, false, 3, 2);

                if (this._isShiftSizeAcceptable(affectedInfoParentShift, false, 3, 2)) {
                    var nodes = affectedInfoParentShift.nodes;
                    //console.log("["+id+"] Small-shifting parents by [" + smallShift + "]: " + stringifyObject(nodes));
                    for (var i = 0; i < nodes.length; i++) xcoord.xcoord[nodes[i]] += smallShift;

                    //xcoord.normalize();  // DEBUG
                    //this.DG.displayGraph(xcoord.xcoord, "shift-"+id);
                    continue;
                }
                //----------------------------------------------------------------
            }
        }

        // 2D) check if there is any extra whitespace in the graph, e.g. if a subgraph can be
        //     moved closer to the rest of the graph by shortening some edges (this may be
        //     the case after some imperfect insertion heuristics move stuff too far).
        //     E.g. see Testcase 5g with/without compacting
        //this.DG.displayGraph(xcoord.xcoord, "before-compact2");

        this._compactGraph(xcoord);

        //this.DG.displayGraph(xcoord.xcoord, "after-compact2");

        // 2E) center relationships between partners. Only do it if children-to-relationship positioning does not get worse
        //     (e.g. if it was centrered then if children can be shifted to stay centered)
        var iter = 0;
        var improved = true;
        while (improved && iter < 20) {
            improved = false;
            iter++;
            for (var k = 0; k < orderedRelationships.length; k++) {
                var v = orderedRelationships[k];

                var parents = this.DG.GG.getInEdges(v);
                var orderedParents = this.DG.order.sortByOrder(parents);

                // only shift rel if partners are next to each other with only this relationship in between
                if (Math.abs(this.DG.order.vOrder[parents[0]] - this.DG.order.vOrder[parents[1]]) != 2) continue;

                var leftParentRightSide = xcoord.getRightEdge(orderedParents[0]);
                var rightParentLeftSide = xcoord.getLeftEdge(orderedParents[1]);

                var relX = xcoord.xcoord[v];
                var midX = Math.floor((leftParentRightSide + rightParentLeftSide) / 2);

                if (relX == midX) continue;

                //xcoord.normalize();  // DEBUG
                //this.DG.displayGraph(xcoord.xcoord, "pre-imnprove");

                var childhub = this.DG.GG.getRelationshipChildhub(v);

                var shiftSize = midX - relX;
                var shiftList = [v, childhub];
                var noUpSet = {};
                noUpSet[v] = true;
                var affectedInfo = this._findAffectedSet(shiftList, {}, noUpSet, {}, {}, shiftSize, xcoord, true, false, 5, 3, this.DG.ranks[v]);

                // need to check minAffectedRank to make sure we don't move relationships with lower ranks, which are supposedly well-positioned already
                if (this._isShiftSizeAcceptable(affectedInfo, false, 5, 3) && affectedInfo.minAffectedRank > this.DG.ranks[v]) {
                    var nodes = affectedInfo.nodes;
                    //console.log("Middle-positioning relationship by [" + shiftSize + "]: " + stringifyObject(nodes));
                    for (var i = 0; i < nodes.length; i++) xcoord.xcoord[nodes[i]] += shiftSize;
                    improved = true;
                }
            }
        }

        //xcoord.normalize();

        this.DG.positions = xcoord.xcoord;

        timer.printSinceLast("=== Improvement runtime: ");

        this.DG.vertLevel = this.DG.positionVertically();
        this.DG.rankY = this.DG.computeRankY(ranksBefore, rankYBefore);

        timer.printSinceLast("=== Vertical spacing runtime: ");
    },

    _compactGraph: function (xcoord, maxComponentSize) {
        // tries to shorten edges that can be shortened (thus compacting the graph)
        //
        // for each node checks if it has "slack" on the left and right, and iff slack > 0 computes
        // the disconnected components resulting from removal of all edges spanning the larger-than-necessary gap.
        // if components can be moved close to each other (because all nodes on the "edge" also have slack) does so.
        //
        // stops component computation when component size is greater than `maxComponentSize` (and does not move that component)
        // (for performance reasons: there is a small pass with a small value to fix minor imperfections before a lot
        // of other heuristics are applied, and then a pass with unlimited component size if performed at the end

        if (!maxComponentSize) maxComponentSize = Infinity;

        //console.log("---[maxCompSize: " + maxComponentSize  + "]---");

        var iter = 0;
        var improved = true;
        while (improved && iter < 20) {
            improved = false;
            iter++;

            // go rank-by-rank, node-by-node
            for (var rank = 1; rank < this.DG.order.order.length; rank++) {
                for (var order = 0; order < this.DG.order.order[rank].length - 1; order++) {
                    var v = this.DG.order.order[rank][order];

                    if (this.DG.GG.isChildhub(v)) break; // skip childhub level entirely

                    var slack = xcoord.getSlackOnTheRight(v);
                    //console.log("V = " + v + ", slack: " + slack);
                    if (slack == 0) continue;

                    // so, v has some slack on the right
                    // let see if we can shorten the distance between v and its right neighbour (by shortening
                    // all edges spanning the gap between v and its right neighbour - without bumping any nodes
                    // connected by all other edges into each other)

                    var DG = this.DG;
                    var excludeEdgesSpanningOrder = function (from, to) {
                        // filter to exclude all edges spanning the gap between v and its right neighbour
                        if (DG.ranks[from] == rank && DG.ranks[to] == rank) {
                            var orderFrom = DG.order.vOrder[from];
                            var orderTo = DG.order.vOrder[to];
                            if (orderFrom <= order && orderTo > order || orderTo <= order && orderFrom > order) {
                                return false;
                            }
                        }
                        return true;
                    };

                    var rightNeighbour = this.DG.order.order[rank][order + 1];

                    // either move V and nodes connected to V left, or rightNeighbour and nodes connected to it right
                    // (in both cases "connected" means "connected not using edges spanning V-rightNeighbour gap")
                    // If maxComponentSize is not limited, then no point to analize other component, since
                    var stopSet = {};
                    stopSet[rightNeighbour] = true;
                    var component = this.DG.findConnectedComponent(v, excludeEdgesSpanningOrder, stopSet, maxComponentSize);
                    var leftSide = true;

                    if (component.stopSetReached) continue; // can't shorten here: nodes are firmly connected via other edges

                    if (component.size > maxComponentSize) {
                        // can't move component on the left - it is too big. Check the right side
                        component = this.DG.findConnectedComponent(rightNeighbour, excludeEdgesSpanningOrder, {}, maxComponentSize);
                        if (component.size > maxComponentSize) continue; // can't move component on the right - too big as well
                        leftSide = false;
                    }

                    slack = leftSide ? xcoord.findVertexSetSlacks(component.component).rightSlack // slack on the right side of left component
                    : -xcoord.findVertexSetSlacks(component.component).leftSlack;

                    if (slack == 0) continue;
                    console.log("Moving: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(component.component) + " by " + slack);

                    improved = true;

                    for (var node in component.component) {
                        if (component.component.hasOwnProperty(node)) {
                            xcoord.xcoord[node] += slack;
                        }
                    }
                }
            }

            if (!isFinite(maxComponentSize)) {
                // after all other types of nodes have been moved check if childhub nodes need any movement as well
                // this is similar to relationship-to-children positioning but is done globally not locally
                for (var rank = 1; rank < this.DG.order.order.length; rank++) {
                    for (var order = 0; order < this.DG.order.order[rank].length; order++) {
                        var v = this.DG.order.order[rank][order];
                        if (this.DG.GG.isPerson(v)) break; // wrong rank
                        if (this.DG.GG.isRelationship(v)) break; // wrong rank
                        if (!this.DG.GG.isChildhub(v)) continue; // childhub rank may have long edges in addition to childhubs

                        var childhubX = xcoord.xcoord[v];

                        var childInfo = this.analizeChildren(v);
                        var childPositionInfo = this._computeDesiredChildhubLocation(childInfo, xcoord);
                        if (childhubX >= childPositionInfo.leftX && childhubX <= childPositionInfo.rightX) continue;

                        var shiftChhub = childhubX > childPositionInfo.maxPreferred ? childPositionInfo.maxPreferred - childhubX : childPositionInfo.minPreferred - childhubX;

                        // either move childhub and nodes connected to it towards the children, or children
                        // and nodes connected to it towards the childhub

                        var noChildEdges = function (from, to) {
                            if (from == v) return false;
                            return true;
                        };
                        var stopSet = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["r" /* toObjectWithTrue */])(this.DG.GG.getOutEdges(v));
                        var component = this.DG.findConnectedComponent(v, noChildEdges, stopSet, Infinity);
                        if (component.stopSetReached) continue; // can't shorten here: nodes are firmly connected via other edges

                        var slack = shiftChhub > 0 ? Math.min(shiftChhub, xcoord.findVertexSetSlacks(component.component).rightSlack) // slack on the right side of component
                        : Math.max(shiftChhub, -xcoord.findVertexSetSlacks(component.component).leftSlack);
                        if (slack == 0) continue;
                        console.log("Moving chhub: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(component.component) + " by " + slack);

                        improved = true;

                        for (var node in component.component) {
                            if (component.component.hasOwnProperty(node)) {
                                xcoord.xcoord[node] += slack;
                            }
                        }
                    }
                }
            }
        }
    },

    _findAffectedSet: function (v_list, dontmove_set, noUp_set, noDown_set, forbidden_set, shiftSize, xcoord, stopAtVirtual, minimizeMovement, stopAtPersons, stopAtRels, stopAtRank) {
        // Given a list of nodes (v_list) and how much we want to move them (same amount for all the nodes, shiftSize)
        // figure out how many nodes would have to be moved to accomodate the desired movement.
        //
        // dontmove_set: nodes which should not be moved unless their neighbours push them.
        //
        // noUp_set: in-edges of nodes in the set willnot be followed when propagaitng movement
        //
        // noDown_set: out-edges of nodes in the set willnot be followed when propagaitng movement
        //
        // forbidden_set: if a node in the set has to move (due to any reason, e..g pushed by a neighbour or
        //                due to movement propagation in some other way) propagation stops and
        //                `forbiddenMoved` key is set to true in the return value
        //
        // stopAtVirtual: if `true` once a virtual node is found movement propagation is stopped
        //
        // stopAtPersons, stopAtRels: movement propagation stops once more than the given number of
        //                            persons/relationships has been added to the move set
        //
        // minimizeMovement: minimal propagation is used, and all nodes on the same rank opposite to the
        //                   moveme nt direction are added to the dontmove_set

        var nodes = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["r" /* toObjectWithTrue */])(v_list);

        var initialNodes = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["r" /* toObjectWithTrue */])(v_list);

        // for each ignored node: add all nodes on the same rank which are to the left (if shifting right)
        // or to the right of (if shifting left) the node

        if (minimizeMovement) {
            for (var i = 0; i < v_list.length; i++) {
                noUp_set[v_list[i]] = true;
                noDown_set[v_list[i]] = true;
            }
            for (var node in dontmove_set) {
                if (dontmove_set.hasOwnProperty(node)) {
                    var rank = this.DG.ranks[node];
                    var order = this.DG.order.vOrder[node];

                    var from = shiftSize > 0 ? 0 : order + 1;
                    var to = shiftSize > 0 ? order : this.DG.order.order[rank].length;

                    for (var i = from; i < to; i++) {
                        var u = this.DG.order.order[rank][i];
                        dontmove_set[u] = true;
                        noUp_set[u] = true;
                        noDown_set[u] = true;
                    }
                }
            }
        }

        var numPersons = 0; // number of moved nodes (excluding nodes in the original list)
        var numRels = 0;
        var numVirtual = 0;
        var minRank = Infinity;
        var forbiddenMoved = false;

        var toMove = new __WEBPACK_IMPORTED_MODULE_3__queues__["a" /* Queue */]();
        toMove.setTo(v_list);

        while (toMove.size() > 0) {
            if (stopAtPersons && numPersons > stopAtPersons) break; // stop early and dont waste time if the caller already does not care
            if (stopAtRels && numRels > stopAtRels) break;

            var nextV = toMove.pop();

            if (forbidden_set && forbidden_set.hasOwnProperty(nextV)) {
                forbiddenMoved = true;
                break;
            }

            if (shiftSize > 0) {
                var slack = xcoord.getSlackOnTheRight(nextV);
                if (slack < shiftSize) {
                    var rightNeighbour = this.DG.order.getRightNeighbour(nextV, this.DG.ranks[nextV]);
                    if (!nodes.hasOwnProperty(rightNeighbour)) {
                        nodes[rightNeighbour] = true;
                        toMove.push(rightNeighbour);
                    }
                }
            } else {
                var slack = xcoord.getSlackOnTheLeft(nextV);
                if (slack < -shiftSize) {
                    var leftNeighbour = this.DG.order.getLeftNeighbour(nextV, this.DG.ranks[nextV]);
                    if (!nodes.hasOwnProperty(leftNeighbour)) {
                        nodes[leftNeighbour] = true;
                        toMove.push(leftNeighbour);
                    }
                }
            }

            // if we should ignore both in- and out-edges for the node - nothing else to do
            if (noUp_set.hasOwnProperty(nextV) && noDown_set.hasOwnProperty(nextV)) continue;

            if (this.DG.ranks[nextV] < minRank && !initialNodes.hasOwnProperty(nextV)) {
                minRank = this.DG.ranks[nextV];
                if (stopAtRank && minRank < stopAtRank) break;
            }

            if (this.DG.GG.isRelationship(nextV)) {
                if (!initialNodes.hasOwnProperty(nextV)) numRels++;

                var chhub = this.DG.GG.getOutEdges(nextV)[0];
                if (!nodes.hasOwnProperty(chhub)) {
                    nodes[chhub] = true;
                    toMove.push(chhub);
                }

                if (minimizeMovement || noUp_set.hasOwnProperty(nextV)) continue;

                var parents = this.DG.GG.getInEdges(nextV);
                for (var i = 0; i < parents.length; i++) {
                    if (!dontmove_set.hasOwnProperty(parents[i]) && !nodes.hasOwnProperty(parents[i])) {
                        if (this.DG.order.vOrder[parents[i]] == this.DG.order.vOrder[nextV] + 1 && shiftSize < 0 || // if shiftSize > 0 it will get pushed anyway
                        this.DG.order.vOrder[parents[i]] == this.DG.order.vOrder[nextV] - 1 && shiftSize > 0) {
                            nodes[parents[i]] = true;
                            toMove.push(parents[i]);
                        }
                    }
                }
            } else if (this.DG.GG.isChildhub(nextV)) {
                var rel = this.DG.GG.getInEdges(nextV)[0];
                if (!nodes.hasOwnProperty(rel)) {
                    nodes[rel] = true;
                    toMove.push(rel);
                }

                if (minimizeMovement || noDown_set.hasOwnProperty(nextV)) continue;

                // move children as not to break the supposedly nice layout
                var childInfo = this.analizeChildren(nextV);
                var positionInfo = this._computeDesiredChildhubLocation(childInfo, xcoord, nodes, shiftSize);

                // no need to move anything else when parent line is either above the mid-point between the leftmost and rightmost child
                // or above the middle child of the three
                var childhubX = xcoord.xcoord[nextV];
                var shiftedChildhubX = childhubX + shiftSize;
                if (shiftedChildhubX == positionInfo.minPreferredWithShift || shiftedChildhubX == positionInfo.maxPreferredWithShift) continue;

                // if we improve compared to what was before - also accept
                if (childhubX < positionInfo.minPreferredWithShift && shiftSize > 0 && shiftedChildhubX < positionInfo.minPreferredWithShift) continue;
                if (childhubX > positionInfo.maxPreferredWithShift && shiftSize < 0 && shiftedChildhubX > positionInfo.maxPreferredWithShift) continue;

                var children = this.DG.GG.getOutEdges(nextV);
                for (var j = 0; j < children.length; j++) {
                    if (!dontmove_set.hasOwnProperty(children[j]) && !nodes.hasOwnProperty(children[j])) {
                        nodes[children[j]] = true;
                        toMove.push(children[j]);
                    }
                }
            } else if (this.DG.GG.isPerson(nextV)) {
                if (!initialNodes.hasOwnProperty(nextV)) numPersons++;

                if (!noDown_set.hasOwnProperty(nextV)) {
                    var rels = this.DG.GG.getOutEdges(nextV);
                    for (var j = 0; j < rels.length; j++) {
                        if (!dontmove_set.hasOwnProperty(rels[j]) && !nodes.hasOwnProperty(rels[j])) {
                            if (this.DG.order.vOrder[rels[j]] == this.DG.order.vOrder[nextV] + 1 && shiftSize < 0 || // if shiftSize > 0 it will get pushed anyway
                            this.DG.order.vOrder[rels[j]] == this.DG.order.vOrder[nextV] - 1 && shiftSize > 0) {

                                // if there is already a long edge it is ok to make it longer. if not, try to keep stuff compact
                                if (shiftSize > 0 && xcoord.getSlackOnTheLeft(nextV) == 0 || shiftSize < 0 && xcoord.getSlackOnTheRight(nextV) == 0) {
                                    nodes[rels[j]] = true;
                                    toMove.push(rels[j]);
                                }
                            }
                        }
                    }
                }

                // move twins
                var twins = this.DG.GG.getAllTwinsOf(nextV);
                if (twins.length > 1) {
                    for (var t = 0; t < twins.length; t++) {
                        var twin = twins[t];
                        if (dontmove_set.hasOwnProperty(twin) || nodes.hasOwnProperty(twin)) continue;
                        toMove.push(twin);
                    }
                }

                if (noUp_set.hasOwnProperty(nextV)) continue;

                var inEdges = this.DG.GG.getInEdges(nextV);
                if (inEdges.length > 0) {
                    var chhub = inEdges[0];

                    // check if we should even try to move chhub
                    if (dontmove_set.hasOwnProperty(chhub) || nodes.hasOwnProperty(chhub)) continue;

                    var childInfo = this.analizeChildren(chhub);
                    var positionInfo = this._computeDesiredChildhubLocation(childInfo, xcoord, nodes, shiftSize);
                    var childhubX = xcoord.xcoord[chhub];
                    // if it will become OK - no move
                    if (childhubX == positionInfo.minPreferredWithShift || childhubX == positionInfo.maxPreferredWithShift) continue;
                    // if we improve compared to what was before - also accept
                    if (childhubX < positionInfo.minPreferred && shiftSize < 0 && childhubX < positionInfo.minPreferredWithShift) continue;
                    if (childhubX > positionInfo.maxPreferred && shiftSize > 0 && childhubX > positionInfo.maxPreferredWithShift) continue;

                    nodes[chhub] = true;
                    toMove.push(chhub);
                }
            } else if (this.DG.GG.isVirtual(nextV)) {
                if (!initialNodes.hasOwnProperty(nextV)) numVirtual++;

                if (stopAtVirtual && numVirtual > 0) break;

                if (!noUp_set.hasOwnProperty(nextV)) {
                    var v1 = this.DG.GG.getInEdges(nextV)[0];
                    if (!this.DG.GG.isPerson(v1) && !nodes.hasOwnProperty(v1) && !dontmove_set.hasOwnProperty(v1)) {
                        nodes[v1] = true;
                        toMove.push(v1);
                    }
                }
                if (!noDown_set.hasOwnProperty(nextV)) {
                    var v2 = this.DG.GG.getOutEdges(nextV)[0];
                    if (!this.DG.GG.isRelationship(v2) && !nodes.hasOwnProperty(v2) && !dontmove_set.hasOwnProperty(v2)) {
                        nodes[v2] = true;
                        toMove.push(v2);
                    }
                }
            }
        }

        var affectedNodes = [];
        for (var node in nodes) {
            if (nodes.hasOwnProperty(node)) {
                affectedNodes.push(node);
            }
        }
        return { "nodes": affectedNodes, "numPersons": numPersons, "numRelationships": numRels, "numVirtual": numVirtual,
            "minAffectedRank": minRank, "forbiddenMoved": forbiddenMoved };
    },

    _computeDesiredChildhubLocation: function (childInfo, xcoord, nodesThatShift, shiftSize) {
        var leftMost = childInfo.leftMostChildId;
        var rightMost = childInfo.rightMostChildId;

        var leftX = xcoord.xcoord[leftMost];
        var rightX = xcoord.xcoord[rightMost];
        var middle = (leftX + rightX) / 2;
        var median = childInfo.orderedChildren.length == 3 ? xcoord.xcoord[childInfo.orderedChildren[1]] : middle;
        var minIntervalX = Math.min(middle, median);
        var maxIntervalX = Math.max(middle, median);

        var result = { "leftX": leftX, "rightX": rightX, "middle": middle, "median": median,
            "minPreferred": minIntervalX, "maxPreferred": maxIntervalX };

        if (nodesThatShift) {
            var leftXShifted = leftX + (nodesThatShift.hasOwnProperty(leftMost) ? shiftSize : 0);
            var rightXShifted = rightX + (nodesThatShift.hasOwnProperty(rightMost) ? shiftSize : 0);
            var middleShifted = (leftXShifted + rightXShifted) / 2;
            var medianShifted = childInfo.orderedChildren.length == 3 ? xcoord.xcoord[childInfo.orderedChildren[1]] + (nodesThatShift.hasOwnProperty(childInfo.orderedChildren[1]) ? shiftSize : 0) : middleShifted;
            var minIntervalXShifted = Math.min(middleShifted, medianShifted);
            var maxIntervalXShifted = Math.max(middleShifted, medianShifted);

            result["minPreferredWithShift"] = minIntervalXShifted;
            result["maxPreferredWithShift"] = maxIntervalXShifted;
        }

        return result;
    },

    //=============================================================
    optimizeLongEdgePlacement: function () {
        // 1) decrease the number of crossed edges
        // TODO

        // 2) straighten long edges
        var xcoord = new __WEBPACK_IMPORTED_MODULE_1__xcoordclass__["b" /* XCoord */](this.DG.positions, this.DG);
        //this.DG.displayGraph(xcoord.xcoord, "pre-long-improve");

        var longEdges = this.DG.find_long_edges();
        this.DG.try_straighten_long_edges(longEdges, xcoord); // does so without moving other nodes

        var stillNotStraight = this.straighten_long_edges(longEdges, xcoord); // attempts to straigthen more agressively

        this.DG.try_straighten_long_edges(stillNotStraight, xcoord);

        //this.DG.displayGraph(xcoord.xcoord, "past-long-improve");
        this.DG.positions = xcoord.xcoord;
    },

    // Straigthen edges more agressively that DG.try_straighten_long_edges(), willing to move
    // some nodes to make long edges look better (as when they don't, it looks more ugly than a regular non-straight edge)
    straighten_long_edges: function (longEdges, xcoord) {
        var stillNotStraight = [];

        for (var e = 0; e < longEdges.length; e++) {
            var chain = longEdges[e];
            //this.DG.displayGraph(xcoord.xcoord, "pre-straighten-"+stringifyObject(chain));
            //console.log("trying to force-straighten edge " + stringifyObject(chain));

            //var person = this.DG.GG.getInEdges(chain[0])[0];
            do {
                var improved = false;
                var headCenter = xcoord.xcoord[chain[0]];
                // go over all nodes from head to tail looking for a bend
                for (var i = 1; i < chain.length; i++) {
                    var nextV = chain[i];
                    var nextCenter = xcoord.xcoord[nextV];
                    if (nextCenter != headCenter) {
                        // try to shift either the head or the tail of the edge, if the amount of movement is not too big
                        var head = chain.slice(0, i);
                        var tail = chain.slice(i);

                        var shiftHeadSize = nextCenter - headCenter;
                        var dontmove = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["r" /* toObjectWithTrue */])(tail);
                        var affectedInfoHeadShift = this._findAffectedSet(head, dontmove, {}, {}, {}, shiftHeadSize, xcoord, true, true, 5, 3);

                        var shiftTailSize = headCenter - nextCenter;
                        var dontmove = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["r" /* toObjectWithTrue */])(head);
                        var affectedInfoTailShift = this._findAffectedSet(tail, dontmove, {}, {}, {}, shiftTailSize, xcoord, true, true, 5, 3);

                        if (!this._isShiftSizeAcceptable(affectedInfoHeadShift, false, 5, 3) && !this._isShiftSizeAcceptable(affectedInfoTailShift, false, 5, 3)) {
                            stillNotStraight.push(chain);
                            break; // too much distortion and/or distorting other virtual edges
                        }

                        improved = true; // at least one of the shifts is OK

                        // ok, pick which one to use
                        if (this._isShiftBetter(affectedInfoTailShift, affectedInfoHeadShift)) {
                            // use tail shift
                            var nodes = affectedInfoTailShift.nodes;
                            for (var i = 0; i < nodes.length; i++) xcoord.xcoord[nodes[i]] += shiftTailSize;
                        } else {
                            // use head shift
                            var nodes = affectedInfoHeadShift.nodes;
                            for (var i = 0; i < nodes.length; i++) xcoord.xcoord[nodes[i]] += shiftHeadSize;
                        }
                        break;
                    }
                }
            } while (improved);
        }

        return stillNotStraight;
    },

    _isShiftSizeAcceptable: function (shiftInfo, allowShiftVirtual, maxPersonNodes, maxRelNodes) {
        if (shiftInfo.forbiddenMoved) return false;
        if (!allowShiftVirtual && shiftInfo.numVirtual > 0) return false;
        if (shiftInfo.numPersons > maxPersonNodes) return false;
        if (shiftInfo.numRelationships > maxRelNodes) return false;
        return true;
    },

    _isShiftBetter: function (shiftInfo1, shiftInfo2) {
        // the one shifting less virtual nodes is better
        if (shiftInfo2.numVirtual > shiftInfo1.numVirtual) return true;
        if (shiftInfo2.numVirtual < shiftInfo1.numVirtual) return false;

        // the one shifting fewer person nodes is better
        if (shiftInfo2.numPersons > shiftInfo1.numPersons) return true;
        if (shiftInfo2.numPersons < shiftInfo1.numPersons) return false;

        // the one shifting fewer rel nodes (and everything else being equal) is better
        if (shiftInfo2.numRelationships > shiftInfo1.numRelationships) return true;
        return false;
    },
    //=============================================================

    moveToCorrectPositionAndMoveOtherNodesAsNecessary: function (newNodeId, nodeToKeepEdgeStraightTo) {
        // Algorithm:
        //
        // Initially pick the new position for "newNodeId," which keeps the edge to node-"nodeToKeepEdgeStraightTo"
        // as straight as possible while not moving any nodes to the left of "newNodeId" in the current ordering.
        //
        // This new position may force the node next in the ordering to move further right to make space, in
        // which case that node is added to the queue and then the following heuristic is applied:
        //  while queue is not empty:
        //
        //  - pop a node form the queue and move it right just enough to have the desired spacing between the node
        //    and it's left neighbour. Check which nodes were affected because of this move:
        //    nodes to the right, parents & children. Shift those affected accordingly (see below) and add them to the queue.
        //
        //    The rules are:
        //    a) generally all shifted nodes will be shifted the same amount to keep the shape of
        //       the graph as unmodified as possible, with a few exception below
        //    b) all childhubs should stay right below their relationship nodes
        //    c) childhubs wont be shifted while they ramain between the leftmost and rightmost child
        //    d) when a part of the graph needs to be stretched prefer to strech relationship edges
        //       to the right of relationship node. Some of the heuristics below assume that this is the
        //       part that may have been stretched
        //
        // note: does not assert the graph satisfies all the assumptions in BaseGraph.validate(),
        //       in particular this can be called after a childhub was added but before it's relationship was added

        //console.log("Orders: " + stringifyObject(this.DG.order));
        console.log("========== PLACING " + newNodeId);

        var originalDisturbRank = this.DG.ranks[newNodeId];

        var xcoord = new __WEBPACK_IMPORTED_MODULE_1__xcoordclass__["b" /* XCoord */](this.DG.positions, this.DG);

        //console.log("Orders at insertion rank: " + stringifyObject(this.DG.order.order[this.DG.ranks[newNodeId]]));
        //console.log("Positions of nodes: " + stringifyObject(xcoord.xcoord));

        var leftBoundary = xcoord.getLeftMostNoDisturbPosition(newNodeId);
        var rightBoundary = xcoord.getRightMostNoDisturbPosition(newNodeId);

        var desiredPosition = this.DG.positions[nodeToKeepEdgeStraightTo]; // insert right above or right below

        if (nodeToKeepEdgeStraightTo != newNodeId) {
            if (this.DG.ranks[nodeToKeepEdgeStraightTo] == originalDisturbRank) {
                // insert on the same rank: then instead ot the left or to the right
                if (this.DG.order.vOrder[newNodeId] > this.DG.order.vOrder[nodeToKeepEdgeStraightTo]) desiredPosition = xcoord.getRightEdge(nodeToKeepEdgeStraightTo) + xcoord.getSeparation(newNodeId, nodeToKeepEdgeStraightTo) + xcoord.halfWidth[newNodeId];else {
                    desiredPosition = xcoord.getLeftEdge(nodeToKeepEdgeStraightTo) - xcoord.getSeparation(newNodeId, nodeToKeepEdgeStraightTo) - xcoord.halfWidth[newNodeId];
                    if (desiredPosition > rightBoundary) desiredPosition = rightBoundary;
                }
            } else if (this.DG.GG.isPerson(newNodeId) && desiredPosition > rightBoundary) desiredPosition = rightBoundary;
        }

        var insertPosition = desiredPosition < leftBoundary ? leftBoundary : desiredPosition;

        xcoord.xcoord[newNodeId] = insertPosition;

        var shiftAmount = 0;
        if (insertPosition > desiredPosition) shiftAmount = insertPosition - desiredPosition;

        // find which nodes we need to shift to accomodate this insertion via "domino effect"

        // each entry in the queue is a pair [node, moveAmount]. Once a node is popped from the queue
        // some of the linked nodes are moved the same amount to keep the existing shape of the graph.
        // That movement may in turn trigger anothe rmovement of the original node, so the same
        // node may appear more than once in the queue at the same itme, with different corresponding
        // move amounts. In theory there should be no circular dependencies (e.g. moving A requires moving B
        // which requires moving A again), but in case there is a mistake there is a check which terminates
        // the process after some time.
        var disturbedNodes = new __WEBPACK_IMPORTED_MODULE_3__queues__["a" /* Queue */]();
        disturbedNodes.push([newNodeId, shiftAmount]);

        var iterOuter = 0;
        var iter = 0;

        var doNotTouch = {};
        var ancestors = this.DG.GG.getAllAncestors(newNodeId);
        for (var node in ancestors) {
            doNotTouch[node] = true;
            var rank = this.DG.ranks[node];
            var order = this.DG.order.vOrder[node];
            for (var i = 0; i < order; i++) {
                var u = this.DG.order.order[rank][i];
                doNotTouch[u] = true;
            }
        }
        //console.log("V:" + newNodeId + " -> DoNotTouch: " + stringifyObject(doNotTouch));

        var totalMove = {}; // for each node: how much the node has been moved by this function

        // The movement algorithm is two-step:
        //  1) first nodes "firmly" linked to each other are moved in the inner while loop
        //  2) then some childhubs get moved depending on which of their children have been shifted -
        //     which may trigger move moves in the inner loop

        // Outer loop. Repeat at most 5 times, as more is likely a run-away algo due to some unexpected circular dependency
        while (disturbedNodes.size() > 0 && iterOuter < 5) {
            iterOuter++;

            var childrenMoved = {}; // for each childhub: which children have been moved (we only move a chldhub if all its children were moved)

            var numNodes = this.DG.ranks.length;
            var maxExpectedMovements = numNodes * 5;

            // inner loop: shift all vertices except childhubs, which only shift if all their children shift
            while (disturbedNodes.size() > 0 && iter < maxExpectedMovements) {
                iter++; // prevent unexpected run-away due to some weird circular dependency (should not happen but TODO: check)

                //console.log("Disturbed nodes: " + stringifyObject(disturbedNodes.data));

                var next = disturbedNodes.pop();
                var v = next[0];
                shiftAmount = next[1];

                //console.log("Processing: " + v + " @position = " + xcoord.xcoord[v]);

                var type = this.DG.GG.type[v];
                var vrank = this.DG.ranks[v];
                var vorder = this.DG.order.vOrder[v];

                var position = xcoord.xcoord[v];
                var rightMostOK = xcoord.getRightMostNoDisturbPosition(v);

                if (position > rightMostOK) {
                    // the node to the right was disturbed: shift it
                    var rightDisturbed = this.DG.order.order[vrank][vorder + 1];

                    var toMove = position - rightMostOK;

                    xcoord.xcoord[rightDisturbed] += toMove;
                    totalMove[rightDisturbed] = totalMove.hasOwnProperty(rightDisturbed) ? totalMove[rightDisturbed] + toMove : toMove;
                    disturbedNodes.push([rightDisturbed, toMove]);
                    //console.log("addRNK: " + rightDisturbed + " (toMove: " + toMove + " -> " + xcoord.xcoord[rightDisturbed] + ")");
                }

                if (v == newNodeId && type != __WEBPACK_IMPORTED_MODULE_2__baseGraph__["b" /* TYPE */].VIRTUALEDGE) continue;

                //if (type == TYPE.VIRTUALEDGE && rank > 2) continue; // TODO: DEBUG: remove - needed for testing of edge-straightening algo

                var inEdges = this.DG.GG.getInEdges(v);
                var outEdges = this.DG.GG.getOutEdges(v);

                // go though out- and in- edges and propagate the movement
                //---------
                var skipInEdges = false;
                if ((type == __WEBPACK_IMPORTED_MODULE_2__baseGraph__["b" /* TYPE */].PERSON || type == __WEBPACK_IMPORTED_MODULE_2__baseGraph__["b" /* TYPE */].VIRTUALEDGE) && v == newNodeId) {
                    skipInEdges = true;
                }
                if (type == __WEBPACK_IMPORTED_MODULE_2__baseGraph__["b" /* TYPE */].VIRTUALEDGE) {
                    var inEdgeV = inEdges[0];
                    if (this.DG.ranks[inEdgeV] == vrank) skipInEdges = true;
                }
                // if we need to strech something -> stretch relationship edges to the right of
                if (type == __WEBPACK_IMPORTED_MODULE_2__baseGraph__["b" /* TYPE */].RELATIONSHIP) {
                    skipInEdges = true;
                    // except the case when inedge comes from a vertex to the left with no other in- or out-edges (a node connected only to this reltionship)
                    if (inEdges.length == 2) {
                        var parent0 = inEdges[0];
                        var parent1 = inEdges[1];
                        var order0 = this.DG.order.vOrder[parent0];
                        var order1 = this.DG.order.vOrder[parent1];
                        if (order0 == vorder - 1 && this.DG.GG.getOutEdges(parent0).length == 1 && this.DG.GG.getInEdges(parent0).length == 0 && !doNotTouch.hasOwnProperty(parent0)) {
                            if (!totalMove.hasOwnProperty(parent0) || totalMove[parent0] < totalMove[v]) {
                                xcoord.xcoord[parent0] += shiftAmount; // note: we can avoid adding this node to any queues as it is only connected to v
                                totalMove[parent0] = totalMove.hasOwnProperty(parent0) ? totalMove[parent0] + shiftAmount : shiftAmount;
                            }
                        } else if (order1 == vorder - 1 && this.DG.GG.getOutEdges(parent1).length == 1 && this.DG.GG.getInEdges(parent1).length == 0 && !doNotTouch.hasOwnProperty(parent1)) {
                            if (!totalMove.hasOwnProperty(parent1) || totalMove[parent1] < totalMove[v]) {
                                xcoord.xcoord[parent1] += shiftAmount; // note: we can avoid adding this node to any queues as it is only connected to v
                                totalMove[parent1] = totalMove.hasOwnProperty(parent1) ? totalMove[parent1] + shiftAmount : shiftAmount;
                            }
                        }
                    }
                }

                if (!skipInEdges) {
                    for (var i = 0; i < inEdges.length; i++) {
                        var u = inEdges[i];
                        var typeU = this.DG.GG.type[u];

                        if (doNotTouch.hasOwnProperty(u)) continue;
                        if (totalMove.hasOwnProperty(u) && totalMove[u] >= totalMove[v]) continue;

                        if (type == __WEBPACK_IMPORTED_MODULE_2__baseGraph__["b" /* TYPE */].PERSON && typeU == __WEBPACK_IMPORTED_MODULE_2__baseGraph__["b" /* TYPE */].CHILDHUB) {
                            if (childrenMoved.hasOwnProperty(u)) {
                                childrenMoved[u]++;
                            } else {
                                childrenMoved[u] = 1;
                            }

                            continue;
                        }

                        if (typeU == __WEBPACK_IMPORTED_MODULE_2__baseGraph__["b" /* TYPE */].VIRTUALEDGE && xcoord.xcoord[u] == xcoord.xcoord[v]) continue;

                        var shiftU = totalMove.hasOwnProperty(u) ? Math.min(shiftAmount, Math.max(totalMove[v] - totalMove[u], 0)) : shiftAmount;

                        xcoord.xcoord[u] += shiftU;
                        totalMove[u] = totalMove.hasOwnProperty(u) ? totalMove[u] + shiftU : shiftU;
                        disturbedNodes.push([u, shiftU]);
                        //console.log("addINN: " + u + " (shift: " + shiftU + " -> " + xcoord.xcoord[u] + ")");
                    }
                }
                //---------

                //---------
                if (type == __WEBPACK_IMPORTED_MODULE_2__baseGraph__["b" /* TYPE */].CHILDHUB) {
                    var rightMostChildPos = 0;
                    for (var i = 0; i < outEdges.length; i++) {
                        var u = outEdges[i];
                        var pos = xcoord.xcoord[u];
                        if (pos > rightMostChildPos) rightMostChildPos = pos;
                    }
                    if (rightMostChildPos >= xcoord.xcoord[v]) continue; // do not shift children if we are not creating a "bend"
                }

                for (var i = 0; i < outEdges.length; i++) {
                    var u = outEdges[i];

                    var shiftU = totalMove.hasOwnProperty(u) ? Math.min(shiftAmount, Math.max(totalMove[v] - totalMove[u], 0)) : shiftAmount;

                    if (doNotTouch.hasOwnProperty(u)) continue;
                    if (totalMove.hasOwnProperty(u) && totalMove[u] >= totalMove[v]) continue;

                    if (this.DG.ranks[u] == vrank) continue; // vertices on the same rank will only be shifted if pushed on the right by left neighbours

                    if (type == __WEBPACK_IMPORTED_MODULE_2__baseGraph__["b" /* TYPE */].RELATIONSHIP || type == __WEBPACK_IMPORTED_MODULE_2__baseGraph__["b" /* TYPE */].VIRTUALEDGE) {
                        var diff = xcoord.xcoord[v] - xcoord.xcoord[u];
                        if (diff <= 0) continue;
                        if (diff < shiftU) shiftU = diff;
                    }

                    xcoord.xcoord[u] += shiftU;
                    totalMove[u] = totalMove.hasOwnProperty(u) ? totalMove[u] + shiftU : shiftU;
                    disturbedNodes.push([u, shiftU]);
                    //console.log("addOUT: " + u + " (shift: " + shiftU + " -> " + xcoord.xcoord[u] + ")");
                }
                //---------
            }

            // small loop 2: shift childhubs, if necessary
            for (var chhub in childrenMoved) {
                if (childrenMoved.hasOwnProperty(chhub)) {
                    chhub = parseInt(chhub);
                    if (doNotTouch.hasOwnProperty(chhub)) continue;
                    var children = this.DG.GG.getOutEdges(chhub);
                    if (children.length > 0 && children.length == childrenMoved[chhub]) {
                        var minShift = Infinity;
                        for (var j = 0; j < children.length; j++) {
                            if (totalMove[children[j]] < minShift) minShift = totalMove[children[j]];
                        }
                        if (totalMove.hasOwnProperty(chhub)) {
                            if (totalMove[chhub] > minShift) continue;
                            minShift -= totalMove[chhub];
                        }
                        xcoord.xcoord[chhub] += minShift;
                        totalMove[chhub] = totalMove.hasOwnProperty(chhub) ? totalMove[chhub] + minShift : minShift;
                        disturbedNodes.push([chhub, minShift]);
                        //console.log("childhub: " + chhub + " (shift: " + minShift + ")");
                    }
                }
            }
        } // big outer while()

        //this.DG.displayGraph(xcoord.xcoord, "after-insert-"+newNodeId);

        this.DG.positions = xcoord.xcoord;

        //console.log("Positions: 5-6-7: " + this.DG.positions[5] + " / " + this.DG.positions[6] + " / " + this.DG.positions[7]);
        console.log("PLACED/MOVED: " + newNodeId + " @ position " + this.DG.positions[newNodeId]);
    }
};

/***/ }),
/* 164 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__legend__ = __webpack_require__(65);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__hpoTerm__ = __webpack_require__(87);


/**
 * Class responsible for keeping track of HPO terms and their properties, and for
 * caching disorders data as loaded from the OMIM database.
 * This information is graphically displayed in a 'Legend' box
 *
 * @class HPOLegend
 * @constructor
 */
const HPOLegend = Class.create(__WEBPACK_IMPORTED_MODULE_0__legend__["a" /* Legend */], {

    initialize: function ($super) {
        $super("Phenotypes in family", true);

        this._termCache = {};
    },

    _getPrefix: function (id) {
        return "phenotype";
    },

    /**
     * Returns the HPOTerm object with the given ID. If object is not in cache yet
     * returns a newly created one which may have the term name & other attributes not loaded yet
     *
     * @method getTerm
     * @return {Object}
     */
    getTerm: function (hpoID) {
        hpoID = __WEBPACK_IMPORTED_MODULE_1__hpoTerm__["a" /* HPOTerm */].sanitizeID(hpoID);
        if (!this._termCache.hasOwnProperty(hpoID)) {
            var whenNameIsLoaded = function () {
                this._updateTermName(hpoID);
            };
            this._termCache[hpoID] = new __WEBPACK_IMPORTED_MODULE_1__hpoTerm__["a" /* HPOTerm */](hpoID, null, whenNameIsLoaded.bind(this));
        }
        return this._termCache[hpoID];
    },

    /**
     * Retrieve the color associated with the given object
     *
     * @method getObjectColor
     * @param {String|Number} id ID of the object
     * @return {String} CSS color value for that disorder
     */
    getObjectColor: function (id) {
        return "#CCCCCC";
    },

    /**
     * Registers an occurrence of a phenotype.
     *
     * @method addCase
     * @param {Number|String} id ID for this term taken from the HPO database
     * @param {String} name The description of the phenotype
     * @param {Number} nodeID ID of the Person who has this phenotype
     */
    addCase: function ($super, id, name, nodeID) {
        if (!this._termCache.hasOwnProperty(id)) this._termCache[id] = new __WEBPACK_IMPORTED_MODULE_1__hpoTerm__["a" /* HPOTerm */](id, name);

        $super(id, name, nodeID);
    },

    /**
     * Updates the displayed phenotype name for the given phenotype
     *
     * @method _updateTermName
     * @param {Number} id The identifier of the phenotype to update
     * @private
     */
    _updateTermName: function (id) {
        //console.log("updating phenotype display for " + id + ", name = " + this.getTerm(id).getName());
        var name = this._legendBox.down("li#" + this._getPrefix() + "-" + id + " .disorder-name");
        name.update(this.getTerm(id).getName());
    },

    /**
     * Callback for dragging an object from the legend onto nodes
     *
     * @method _onDropGeneric
     * @param {Person} Person node
     * @param {String|Number} id ID of the phenotype being dropped
     */
    _onDropObject: function (node, hpoID) {
        if (node.isPersonGroup()) {
            return;
        }
        var currentHPO = node.getHPO().slice(0);
        if (currentHPO.indexOf(hpoID) == -1) {
            currentHPO.push(hpoID);
            editor.getView().unmarkAll();
            var properties = { "setHPO": currentHPO };
            var event = { "nodeID": node.getID(), "properties": properties };
            document.fire("pedigree:node:setproperty", event);
        } else {
            console.warn("This person already has the selected phenotype");
        }
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = HPOLegend;


/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__baseGraph__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers__ = __webpack_require__(5);
/* harmony export (immutable) */ __webpack_exports__["a"] = PedigreeImport;



function PedigreeImport() {}

PedigreeImport.prototype = {};

/*PedigreeImport.SUPORTED_FORMATS = {
  PED:                    1,      // standard .PED format. Can only import family structure, gender and the affected status
  PHENOTIPS_GRAPH:        2,      // Phenotips pedigree format, whithout positioning information (needs to be laid out automaticaly)
  PHENOTIPS_INTERNAL_OLD: 3       // Phenotips internal format used during development and in test cases (to be replaced)
};

PedigreeImport.autodetectFormat = function(input) {

}*/

PedigreeImport.initFromPhenotipsInternal = function (inputG) {
    // note: serialize() produces the correct input for this function

    var newG = new __WEBPACK_IMPORTED_MODULE_0__baseGraph__["a" /* BaseGraph */]();

    var nameToId = {};

    var relationshipHasExplicitChHub = {};

    // first pass: add all vertices and assign vertex IDs
    for (var v = 0; v < inputG.length; v++) {

        if (!inputG[v].hasOwnProperty("name") && !inputG[v].hasOwnProperty("id")) throw "Invalid inpiut: a node without id and without name";

        var type = __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON;
        if (inputG[v].hasOwnProperty("relationship") || inputG[v].hasOwnProperty("rel")) {
            type = __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].RELATIONSHIP;
            // normally users wont specify childhubs explicitly - but save via JSON does
            if (inputG[v].hasOwnProperty("hub") || inputG[v].hasOwnProperty("haschhub")) relationshipHasExplicitChHub[v] = true;
        } else if (inputG[v].hasOwnProperty("chhub")) {
            type = __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].CHILDHUB;
        } else if (inputG[v].hasOwnProperty("virtual") || inputG[v].hasOwnProperty("virt")) {
            type = __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].VIRTUALEDGE;
        }

        var properties = {};
        if (inputG[v].hasOwnProperty("properties") || inputG[v].hasOwnProperty("prop")) properties = inputG[v].hasOwnProperty("properties") ? inputG[v]["properties"] : inputG[v]["prop"];

        if (type == __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON) {
            if (properties.hasOwnProperty("sex") && !properties.hasOwnProperty("gender")) {
                properties["gender"] = properties["sex"];
            }

            if (!properties.hasOwnProperty("gender")) properties["gender"] = "U";

            if (inputG[v].hasOwnProperty("gender")) {
                var genderString = inputG[v]["gender"].toLowerCase();
                if (genderString == "female" || genderString == "f") properties["gender"] = "F";else if (genderString == "male" || genderString == "m") properties["gender"] = "M";
            }
        }

        var width = inputG[v].hasOwnProperty("width") ? inputG[v].width : type == __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON ? newG.defaultPersonNodeWidth : newG.defaultNonPersonNodeWidth;

        var newID = newG._addVertex(null, type, properties, width); // "null" since id is not known yet

        if (inputG[v].hasOwnProperty("name")) {
            // note: this means using user input (not produced by this.serialize)
            if (nameToId[inputG[v].name]) throw "Invalid user input: multiple nodes with the same name";
            if (type == __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON) newG.properties[newID]["fName"] = inputG[v].name;
            nameToId[inputG[v].name] = newID;
        }

        // when entered by user manually allow users to skip childhub nodes (and create them automatically)
        // (but when saving/restoring from a JSON need to save/restore childhub nodes as they
        //  may have some properties assigned by the user which we need to save/restore)
        if (type == __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].RELATIONSHIP && !relationshipHasExplicitChHub.hasOwnProperty(v)) {
            var chHubId = newG._addVertex(null, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].CHILDHUB, null, width);
            nameToId["_chhub_" + newID] = chHubId;
        }
    }

    // second pass (once all vertex IDs are known): process edges
    for (var v = 0; v < inputG.length; v++) {
        var nextV = inputG[v];

        var vID = nextV.hasOwnProperty("id") ? nextV.id : nameToId[nextV.name];
        var origID = vID;

        var substitutedID = false;

        if (newG.type[vID] == __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].RELATIONSHIP && !relationshipHasExplicitChHub.hasOwnProperty(vID)) {
            // replace edges from rel node by edges from childhub node
            var childhubID = nameToId["_chhub_" + vID];
            vID = childhubID;
            substitutedID = true;
        }

        var maxChildEdgeWeight = 0;

        if (nextV.outedges) {
            for (var outE = 0; outE < nextV.outedges.length; outE++) {
                var target = nextV.outedges[outE].to;
                var targetID = nameToId[target] ? nameToId[target] : target; // can specify target either by name or ID

                if (!newG.isValidId(targetID)) throw "Invalid input: invalid edge target (" + target + ")";

                var weight = 1;
                if (nextV.outedges[outE].hasOwnProperty("weight")) weight = nextV.outedges[outE].weight;
                if (weight > maxChildEdgeWeight) maxChildEdgeWeight = weight;

                newG.addEdge(vID, targetID, weight);
            }
        }

        if (substitutedID) {
            newG.addEdge(origID, vID, maxChildEdgeWeight);
        }
    }

    newG.validate();

    return newG;
};

/* ===============================================================================================
 * 
 * Creates and returns a BaseGraph from a text string in the PED/LINKAGE format.
 * 
 * PED format:
 * (from http://pngu.mgh.harvard.edu/~purcell/plink/data.shtml#ped)
 *   Family ID
 *   Individual ID
 *   Paternal ID
 *   Maternal ID
 *   Sex (1=male; 2=female; other=unknown)
 *   Phenotype
 *
 *   Phenotype, by default, should be coded as:
 *      -9 missing
 *       0 missing
 *       1 unaffected
 *       2 affected
 *
 * =================
 *
 * LINKAGE format:
 * (from http://www.helsinki.fi/~tsjuntun/autogscan/pedigreefile.html)
 *
 *   Column 1:   Pedigree number
 *   Column 2:   Individual ID number
 *   Column 3:   ID of father
 *   Column 4:   ID of mother
 *   Column 5:   First offspring ID
 *   Column 6:   Next paternal sibling ID
 *   Column 7:   Next maternal sibling ID
 *   Column 8:   Sex
 *   Column 9:   Proband status (1=proband, higher numbers indicate doubled individuals formed
 *                               in breaking loops. All other individuals have a 0 in this field.)
 *   Column 10+: Disease and marker phenotypes (as in the original pedigree file)
 * ===============================================================================================
 */
PedigreeImport.initFromPED = function (inputText, acceptOtherPhenotypes, markEvaluated, saveIDAsExternalID, affectedCodeOne, disorderNames) {
    var inputLines = inputText.match(/[^\r\n]+/g);
    if (inputLines.length == 0) throw "Unable to import: no data";

    // autodetect if data is in pre-makeped or post-makeped format    
    var postMakeped = false;
    if (inputLines[0].indexOf("Ped:") > 0 && inputLines[0].indexOf("Per:") > 0) postMakeped = true;

    var familyPrefix = "";

    var newG = new __WEBPACK_IMPORTED_MODULE_0__baseGraph__["a" /* BaseGraph */]();

    var nameToId = {};

    var phenotypeValues = {}; // set of all posible valuesin the phenotype column

    var extendedPhenotypesFound = false;

    // support both automatic and user-defined assignment of proband
    var nextID = postMakeped ? 1 : 0;

    // first pass: add all vertices and assign vertex IDs
    for (var i = 0; i < inputLines.length; i++) {

        inputLines[i] = inputLines[i].replace(/[^a-zA-Z0-9_.\-\s*]/g, " ");
        inputLines[i] = inputLines[i].replace(/^\s+|\s+$/g, ""); // trim()

        var parts = inputLines[i].split(/\s+/);
        //console.log("Parts: " + stringifyObject(parts));

        if (parts.length < 6 || postMakeped && parts.length < 10) {
            throw "Input line has not enough columns: [" + inputLines[i] + "]";
        }

        if (familyPrefix == "") {
            familyPrefix = parts[0];
        } else {
            if (parts[0] != familyPrefix) {
                throw "Unsupported feature: multiple families detected within the same pedigree";
            }
        }

        var pedID = parts[1];
        if (nameToId.hasOwnProperty(pedID)) throw "Multiple persons with the same ID [" + pedID + "]";

        var genderValue = postMakeped ? parts[7] : parts[4];
        var gender = "U";
        if (genderValue == 1) gender = "M";else if (genderValue == 2) gender = "F";
        var properties = { "gender": gender };

        if (saveIDAsExternalID) properties["externalID"] = pedID;

        var useID = postMakeped && parts[8] == 1 ? 0 : nextID++;
        if (i == inputLines.length - 1 && newG.v[0] === undefined) {
            // last node and no node with id 0 yet
            useID = 0;
        }

        var pedigreeID = newG._addVertex(useID, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, properties, newG.defaultPersonNodeWidth);

        nameToId[pedID] = pedigreeID;

        var phenotype = postMakeped ? parts[9] : parts[5];
        phenotypeValues[phenotype] = true;
        if (acceptOtherPhenotypes && phenotype != "-9" && phenotype != "0" && phenotype != "1" && phenotype != "2") {
            extendedPhenotypesFound = true;
        }
    }

    // There are two popular schemes for the phenotype column (-9/0/1/2 or -9/0/1).
    // Use the "standard" by default, unless directed to use the other one by the user
    if (affectedCodeOne) {
        if (extendedPhenotypesFound || phenotypeValues.hasOwnProperty("2")) {
            throw "Phenotypes with codes other than 0 or 1 were found";
        }
        var affectedValues = { "1": true };
        var missingValues = { "-9": true };
        var unaffectedValues = { "0": true };
    } else {
        var affectedValues = { "2": true };
        var missingValues = { "0": true, "-9": true };
        var unaffectedValues = { "1": true };
    }

    if (!disorderNames) {
        disorderNames = {};
        if (extendedPhenotypesFound) {
            for (var phenotype in phenotypeValues) if (phenotypeValues.hasOwnProperty(phenotype)) {
                if (phenotype != "-9" && phenotype != "0" && phenotype != "1") {
                    disorderNames[phenotype] = "affected (phenotype " + phenotype + ")";
                    affectedValues[phenotype] = true;
                }
            }
        }
    }

    var defaultEdgeWeight = 1;

    var relationshipTracker = new RelationshipTracker(newG, defaultEdgeWeight);

    // second pass (once all vertex IDs are known): process edges
    for (var i = 0; i < inputLines.length; i++) {
        var parts = inputLines[i].split(/\s+/);

        var thisPersonName = parts[1];
        var id = nameToId[thisPersonName];

        var phenotype = postMakeped ? parts[9] : parts[5];
        if (affectedValues.hasOwnProperty(phenotype)) {
            var disorder = disorderNames.hasOwnProperty(phenotype) ? disorderNames[phenotype] : "affected";
            newG.properties[id]["carrierStatus"] = "affected";
            newG.properties[id]["disorders"] = [disorder];
            if (markEvaluated) newG.properties[id]["evaluated"] = true;
        } else if (unaffectedValues.hasOwnProperty(phenotype)) {
            newG.properties[id]["carrierStatus"] = "";
            if (markEvaluated) newG.properties[id]["evaluated"] = true;
        } else if (!missingValues.hasOwnProperty(phenotype)) {}
        //treat all unsupported values as "unknown/no evaluation"
        //throw "Individual with ID [" + thisPersonName + "] has unsupported phenotype value [" + phenotype + "]";


        // check if parents are given for this individual; if at least one parent is given,
        // check if the corresponding relationship has already been created. If not, create it. If yes,
        // add an edge from childhub to this person

        var fatherID = parts[2];
        var motherID = parts[3];

        if (fatherID == 0 && motherID == 0) continue;

        // .PED supports specifying only mohter of father. Pedigree editor requires both (for now).
        // So create a virtual parent in case one of the parents is missing
        if (fatherID == 0) {
            fatherID = newG._addVertex(null, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, { "gender": "M", "comments": "unknown" }, newG.defaultPersonNodeWidth);
        } else {
            fatherID = nameToId[fatherID];
            if (newG.properties[fatherID].gender == "F") throw "Unable to import pedigree: a person declared as female [id: " + fatherID + "] is also declared as being a father for [id: " + thisPersonName + "]";
        }
        if (motherID == 0) {
            motherID = newG._addVertex(null, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, { "gender": "F", "comments": "unknown" }, newG.defaultPersonNodeWidth);
        } else {
            motherID = nameToId[motherID];
            if (newG.properties[motherID].gender == "M") throw "Unable to import pedigree: a person declared as male [id: " + motherID + "] is also declared as being a mother for [id: " + thisPersonName + "]";
        }

        // both motherID and fatherID are now given and represent valid existing nodes in the pedigree

        // if there is a relationship between motherID and fatherID the corresponding childhub is returned
        // if there is no relationship, a new one is created together with the chldhub
        var chhubID = relationshipTracker.createOrGetChildhub(motherID, fatherID);

        newG.addEdge(chhubID, id, defaultEdgeWeight);
    }

    PedigreeImport.validateBaseGraph(newG);

    return newG;
};

/* ===============================================================================================
 *
 * Creates and returns a BaseGraph from a text string in the BOADICEA format.
 *
 *  BOADICEA format:
 *  (from https://pluto.srl.cam.ac.uk/bd3/v3/docs/BWA_v3_user_guide.pdf)
 *
 *  line1: BOADICEA import pedigree file format 2.0
 *  line2: column titles
 *  line3+: one patient per line, with values separated by spaces or tabs, as follows:
 *
 *   FamID: Family/pedigree ID, character string (maximum 13 characters)
 *   Name: First name/ID of the family member, character string (maximum 8 characters)
 *   Target: The family member for whom the BOADICEA risk calculation is made, 1 = target for BOADICEA risk calculation, 0 = other family members. There must only be one BOADICEA target individual.
 *   IndivID: Unique ID of the family member, character string (maximum 7 characters)
 *   FathID: Unique ID of their father, 0 = no father, or character string (maximum 7 characters)
 *   MothID: Unique ID of their mother, 0 = unspecified, or character string (maximum 7 characters)
 *   Sex: M or F
 *   Twin: Identical twins, 0 = no identical twin, any non-zero character = twin.
 *   Dead: The current status of the family member, 0 = alive, 1 = dead
 *   Age: Age at last follow up, 0 = unspecified, integer = age at last follow up
 *   Yob: Year of birth, 0 = unspecified, or integer (consistent with Age if the person is alive)
 *   1BrCa: Age at first breast cancer diagnosis, 0 = unaffected, integer = age at diagnosis, AU = unknown age at diagnosis (affected unknown)
 *   2BrCa: Age at contralateral breast cancer diagnosis, 0 = unaffected, integer = age at diagnosis, AU = unknown age at diagnosis (affected unknown)
 *   OvCa: Age at ovarian cancer diagnosis, 0 = unaffected, integer = age at diagnosis, AU = unknown age at diagnosis (affected unknown)
 *   ProCa: Age at prostate cancer diagnosis 0 = unaffected, integer = age at diagnosis, AU = unknown age at diagnosis (affected unknown)
 *   PanCa: Age at pancreatic cancer diagnosis 0 = unaffected, integer = age at diagnosis, AU = unknown age at diagnosis (affected unknown)
 *   Gtest: Genetic test status, 0 = untested, S = mutation search, T = direct gene test
 *   Mutn: 0 = untested, N = no mutation, 1 = BRCA1 positive, 2 = BRCA2 positive, 3 = BRCA1 and BRCA2 positive
 *   Ashkn: 0 = not Ashkenazi, 1 = Ashkenazi
 *   ER: Estrogen receptor status, 0 = unspecified, N = negative, P = positive
 *   PR: Progestrogen receptor status, 0 = unspecified, N = negative, P = positive
 *   HER2: Human epidermal growth factor receptor 2 status, 0 = unspecified, N = negative, P = positive
 *   CK14: Cytokeratin 14 status, 0 = unspecified, N = negative, P = positive
 *   CK56: Cytokeratin 56 status, 0 = unspecified, N = negative, P = positive
 * ===============================================================================================
 */
PedigreeImport.initFromBOADICEA = function (inputText, saveIDAsExternalID) {
    var inputLines = inputText.match(/[^\r\n]+/g);

    if (inputLines.length <= 2) {
        throw "Unable to import: no data";
    }
    if (inputLines[0].match(/^BOADICEA import pedigree file format 2/i) === null) {
        throw "Unable to import: unsupported version of the BOADICEA format";
    }
    inputLines.splice(0, 2); // remove 2 header lines

    var familyPrefix = "";

    var newG = new __WEBPACK_IMPORTED_MODULE_0__baseGraph__["a" /* BaseGraph */]();

    var nameToId = {};

    var nextID = 1;

    // first pass: add all vertices and assign vertex IDs
    for (var i = 0; i < inputLines.length; i++) {

        inputLines[i] = inputLines[i].replace(/[^a-zA-Z0-9_.\-\s*]/g, " ");
        inputLines[i] = inputLines[i].replace(/^\s+|\s+$/g, ""); // trim()

        var parts = inputLines[i].split(/\s+/);
        //console.log("Parts: " + stringifyObject(parts));

        if (parts.length < 24) {
            throw "Input line has not enough columns: [" + inputLines[i] + "]";
        }

        if (familyPrefix == "") {
            familyPrefix = parts[0];
        } else {
            if (parts[0] != familyPrefix) {
                throw "Unsupported feature: multiple families detected within the same pedigree";
            }
        }

        var extID = parts[3];
        if (nameToId.hasOwnProperty(extID)) throw "Multiple persons with the same ID [" + extID + "]";

        var genderValue = parts[6];
        var gender = "M";
        if (genderValue == "F") {
            gender = "F";
        }
        var name = parts[1];
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["i" /* isInt */])(name)) {
            name = "";
        }
        var properties = { "gender": gender, "fName": name };

        if (saveIDAsExternalID) {
            properties["externalID"] = extID;
        }

        var deadStatus = parts[8];
        if (deadStatus == "1") {
            properties["lifeStatus"] = "deceased";
        }

        var yob = parts[10];
        if (yob != "0") {
            var dob = yob + "-01-01T00:00:00.000Z";
            properties["dob"] = dob;
        }

        // TODO: handle all the columns and proper cancer handling
        //
        // 11: 1BrCa: Age at first breast cancer diagnosis, 0 = unaffected, integer = age at diagnosis, AU = unknown age at diagnosis (affected unknown)
        // 12: 2BrCa: Age at contralateral breast cancer diagnosis, 0 = unaffected, integer = age at diagnosis, AU = unknown age at diagnosis (affected unknown)
        // 13: OvCa:  Age at ovarian cancer diagnosis, 0 = unaffected, integer = age at diagnosis, AU = unknown age at diagnosis (affected unknown)
        // 14: ProCa: Age at prostate cancer diagnosis 0 = unaffected, integer = age at diagnosis, AU = unknown age at diagnosis (affected unknown)
        // 15: PanCa: Age at pancreatic cancer diagnosis 0 = unaffected, integer = age at diagnosis, AU = unknown age at diagnosis (affected unknown)
        var cancers = [{ "column": 11, "label": "Breast cancer", "disorder": "1BrCa" }, { "column": 12, "label": "Contralateral breast c.", "disorder": "2BrCa" }, { "column": 13, "label": "Ovarian cancer", "disorder": "OvCa" }, { "column": 14, "label": "Prostate cancer", "disorder": "ProCa" }, { "column": 15, "label": "Pancreatic cancer", "disorder": "PanCa" }];

        for (var c = 0; c < cancers.length; c++) {
            var cancer = cancers[c];
            if (parts[cancer["column"]].toUpperCase() != "AU") {
                if (!properties.hasOwnProperty("comments")) {
                    properties["comments"] = "";
                } else {
                    properties["comments"] += "\n";
                }

                if (parts[cancer["column"]] == "0") {
                    properties["comments"] += "[-] " + cancer["label"] + ": unaffected";
                } else {
                    properties["comments"] += "[+] " + cancer["label"] + ": at age " + parts[cancer["column"]];
                    if (!properties.hasOwnProperty("disorders")) {
                        properties["disorders"] = [];
                    }
                    properties["disorders"].push(cancer["disorder"]);
                }
            }
        }

        var ashkenazi = parts[18];
        if (ashkenazi != "0") {
            properties["ethnicities"] = ["Ashkenazi Jews"];
        }

        var proband = parts[2] == 1;
        var useID = proband ? 0 : nextID++;
        if (i == inputLines.length - 1 && newG.v[0] === undefined) {
            // last node and no proband yet
            useID = 0;
        }

        var pedigreeID = newG._addVertex(useID, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, properties, newG.defaultPersonNodeWidth);

        nameToId[extID] = pedigreeID;
    }

    var defaultEdgeWeight = 1;

    var relationshipTracker = new RelationshipTracker(newG, defaultEdgeWeight);

    // second pass (once all vertex IDs are known): process edges
    for (var i = 0; i < inputLines.length; i++) {
        var parts = inputLines[i].split(/\s+/);

        var extID = parts[3];
        var id = nameToId[extID];

        // check if parents are given for this individual; if at least one parent is given,
        // check if the corresponding relationship has already been created. If not, create it. If yes,
        // add an edge from childhub to this person

        var fatherID = parts[4];
        var motherID = parts[5];

        if (fatherID == 0 && motherID == 0) {
            continue;
        }

        // .PED supports specifying only mother or father. Pedigree editor requires both (for now).
        // So create a virtual parent in case one of the parents is missing
        if (fatherID == 0) {
            fatherID = newG._addVertex(null, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, { "gender": "M", "comments": "unknown" }, newG.defaultPersonNodeWidth);
        } else {
            fatherID = nameToId[fatherID];
            if (newG.properties[fatherID].gender == "F") {
                throw "Unable to import pedigree: a person declared as female [id: " + fatherID + "] is also declared as being a father for [id: " + extID + "]";
            }
        }
        if (motherID == 0) {
            motherID = newG._addVertex(null, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, { "gender": "F", "comments": "unknown" }, newG.defaultPersonNodeWidth);
        } else {
            motherID = nameToId[motherID];
            if (newG.properties[motherID].gender == "M") {
                throw "Unable to import pedigree: a person declared as male [id: " + motherID + "] is also declared as being a mother for [id: " + extID + "]";
            }
        }

        // both motherID and fatherID are now given and represent valid existing nodes in the pedigree

        // if there is a relationship between motherID and fatherID the corresponding childhub is returned
        // if there is no relationship, a new one is created together with the childhub
        var chhubID = relationshipTracker.createOrGetChildhub(motherID, fatherID);

        newG.addEdge(chhubID, id, defaultEdgeWeight);
    }

    PedigreeImport.validateBaseGraph(newG);

    return newG;
};

/* ===============================================================================================
 * 
 * Validates the generated basegraph and throws one of the following exceptions:
 * 
 *  1) "Unsupported pedigree: some components of the imported pedigree are disconnected from each other"
 *  2) "Unable to import pedigree"
 * 
 * The method is a wrapper around the internal vlaidate method, which may throw many exceptions
 * which change form version to version
 * 
 * ===============================================================================================
 */
PedigreeImport.validateBaseGraph = function (newG) {
    try {
        newG.validate();
    } catch (err) {
        if (err.indexOf("disconnected component")) {
            throw "Unsupported pedigree: some components of the imported pedigree are disconnected from each other";
        } else {
            throw "Unable to import pedigree";
        }
    }
};

/* ===============================================================================================
 * 
 * Creates and returns a BaseGraph from a text string in the "simple JSON" format.
 * 
 *  Simple JSON format: an array of objects, each object representing one person, e.g.:
 *
 *    [ { "name": "f11", "sex": "female", "lifeStatus": "deceased" },
 *      { "name": "m11", "sex": "male" },
 *      { "name": "f12", "sex": "female", "disorders": [603235, "142763", "custom disorder"] },
 *      { "name": "m12", "sex": "male" },
 *      { "name": "m21", "sex": "male", "mother": "f11", "father": "m11" },
 *      { "name": "f21", "sex": "female", "mother": "f12", "father": "m12" },
 *      { "name": "ch1", "sex": "female", "mother": "f21", "father": "m21", "disorders": [603235], "proband": true } ]
 * 
 *  Supported properties:
 *   - "id": string or number (default: none). If two nodes with the same ID are found an error is reported.
 *           If present, this id is used only for the purpose of linking nodes to each other and is not recorded
 *           in the imported pedigree. Use "externalId" if an ID should be stored
 *   - "proband": boolean (default: true for the first object, false for all other objects. If another object
 *                                  is explicitly indicated as a proband, the firs tobject also defaults to false.
 *                                  If more than one node is indicated as a proband only the first one is considered ot be one) 
 *   - "name" or "firstName": string (default: none). if both are defined "firstName" is used as "first name" and name is used for mother/father reference checks only
 *   - "lastName": string (default: none)
 *   - "lastNameAtBirth": string (default: none)
 *   - "comments": string (default: none)
 *   - "externalId": string (default: none)
 *   - "sex": one of "male" or "m", "female" or "f", "unknown" or "u" (default: "unknown")
 *   - "twinGroup": integer. All children of the sam eparents with the same twin group are considered twins. (fefault: none)
 *   - "monozygotic": boolean. (only applicable for twins)
 *   - "adoptedIn": boolean (default: false)
 *   - "evaluated": boolean (default: false)
 *   - "birthDate": string (default: none)
 *   - "deathDate": string (default: none)
 *   - "nodeNumber": string (default: none) pedigree node number as of last renumbering
 *   - "lostContact": boolean (default: false) "false" if proband lost contact with the given individual
 *   - "numPersons": integer. When present and not 0 this individual is treated as a "person group"
 *   - "lifeStatus": one of {"alive", "deceased", "aborted", "miscarriage", "stillborn", "unborn"}.
 *                   (default: "alive". If death date is given status defaults to "deceased" and overwrites
 *                             the explicitly given status if it were "alive")   
 *   - "disorders": array of strings or integers (a string representing an integer is considered to be an integer), integers treated as OMIM IDs. (default: none)
 *   - "carrierStatus": one of {'', 'carrier', 'affected', 'presymptomatic'}
 *                      (default: if a disorder is given, default is 'affected', otherwise: none.
 *                       also, if a disorder is given and status is explicitly '', it is automatically changed to 'affected')
 *   - "mother" and "father": string, a reference to another node given in the JSON.
 *                            First a match versus an existing ID is checked, if not found a check against "externalId",
 *                            if not found a check against "name" and finally "firstName".
 *                            If one of the parents is given and the other one is not a virtual new node is created
 *
 *   Each node should have at least one of {"id", "externalId", "name", "firstName"} defined.
 * ===============================================================================================
 */
PedigreeImport.initFromSimpleJSON = function (inputText) {
    try {
        var inputArray = JSON.parse(inputText);
    } catch (err) {
        throw "Unable to import pedigree: input is not a valid JSON string " + err;
    }

    if (typeof inputArray != "object" || Object.prototype.toString.call(inputArray) !== "[object Array]") {
        throw "Unable to import pedigree: JSON does not represent an array of objects";
    }
    if (inputArray.length == 0) {
        throw "Unable to import pedigree: input is empty";
    }

    var newG = new __WEBPACK_IMPORTED_MODULE_0__baseGraph__["a" /* BaseGraph */]();

    var nameToID = {};
    var externalIDToID = {};
    var ambiguousReferences = {};
    var hasID = {};

    // first pass: add all vertices and assign vertex IDs
    for (var i = 0; i < inputArray.length; i++) {
        var nextPerson = inputArray[i];

        if (typeof nextPerson != "object") {
            throw "Unable to import pedigree: JSON does not represent an array of objects";
        }

        if (!nextPerson.hasOwnProperty("id") && !nextPerson.hasOwnProperty("name") && !nextPerson.hasOwnProperty("firstName") && !nextPerson.hasOwnProperty("externalId")) {
            throw "Unable to import pedigree: a node with no ID or name is found";
        }

        var pedigreeID = newG._addVertex(null, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, {}, newG.defaultPersonNodeWidth);

        var properties = {};
        properties["gender"] = "U"; // each person should have some gender set 

        for (var property in nextPerson) {
            if (nextPerson.hasOwnProperty(property)) {
                var value = nextPerson[property];
                var property = property.toLowerCase();

                if (property == "mother" || property == "father") // those are processed on the second pass
                    continue;

                if (property == "sex") {
                    var genderString = value.toLowerCase();
                    if (genderString == "female" || genderString == "f") properties["gender"] = "F";else if (genderString == "male" || genderString == "m") properties["gender"] = "M";
                } else if (property == "id") {
                    if (externalIDToID.hasOwnProperty(value)) {
                        throw "Unable to import pedigree: multiple persons with the same ID [" + value + "]";
                    }
                    if (nameToID.hasOwnProperty(value) && nameToID[value] != pedigreeID) {
                        delete nameToID[value];
                        ambiguousReferences[value] = true;
                    } else {
                        externalIDToID[value] = pedigreeID;
                        hasID[pedigreeID] = true;
                    }
                } else if (property == "name" || property == "firstname") {
                    properties["fName"] = value;
                    if (nameToID.hasOwnProperty(value) && nameToID[value] != pedigreeID) {
                        // multiple nodes have this first name
                        delete nameToID[value];
                        ambiguousReferences[value] = true;
                    } else if (externalIDToID.hasOwnProperty(value) && externalIDToID[value] != pedigreeID) {
                        // some other node has this name as an ID
                        delete externalIDToID[value];
                        ambiguousReferences[value] = true;
                    } else {
                        nameToID[value] = pedigreeID;
                    }
                } else {
                    var processed = PedigreeImport.convertProperty(property, value);
                    if (processed !== null) {
                        // supported property
                        properties[processed.propertyName] = processed.value;
                    }
                }
            }
        }

        // only use externalID if id is not present
        if (nextPerson.hasOwnProperty("externalId") && !hasID.hasOwnProperty(pedigreeID)) {
            externalIDToID[nextPerson.externalId] = pedigreeID;
            hasID[pedigreeID] = true;
        }

        newG.properties[pedigreeID] = properties;
    }

    var getPersonID = function (person) {
        if (person.hasOwnProperty("id")) return externalIDToID[person.id];

        if (person.hasOwnProperty("firstName")) return nameToID[person.firstName];

        if (person.hasOwnProperty("name")) return nameToID[person.name];
    };

    var findReferencedPerson = function (reference, refType) {
        if (ambiguousReferences.hasOwnProperty(reference)) throw "Unable to import pedigree: ambiguous reference to [" + reference + "]";

        if (externalIDToID.hasOwnProperty(reference)) return externalIDToID[reference];

        if (nameToID.hasOwnProperty(reference)) return nameToID[reference];

        throw "Unable to import pedigree: [" + reference + "] is not a valid " + refType + " reference (does not correspond to a name or an ID of another person)";
    };

    var defaultEdgeWeight = 1;

    var relationshipTracker = new RelationshipTracker(newG, defaultEdgeWeight);

    // second pass (once all vertex IDs are known): process parents/children & add edges
    for (var i = 0; i < inputArray.length; i++) {
        var nextPerson = inputArray[i];

        var personID = getPersonID(nextPerson);

        var motherLink = nextPerson.hasOwnProperty("mother") ? nextPerson["mother"] : null;
        var fatherLink = nextPerson.hasOwnProperty("father") ? nextPerson["father"] : null;

        if (motherLink == null && fatherLink == null) continue;

        // create a virtual parent in case one of the parents is missing       
        if (fatherLink == null) {
            var fatherID = newG._addVertex(null, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, { "gender": "M", "comments": "unknown" }, newG.defaultPersonNodeWidth);
        } else {
            var fatherID = findReferencedPerson(fatherLink, "father");
            if (newG.properties[fatherID].gender == "F") throw "Unable to import pedigree: a person declared as female is also declared as being a father (" + fatherLink + ")";
        }
        if (motherLink == null) {
            var motherID = newG._addVertex(null, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, { "gender": "F", "comments": "unknown" }, newG.defaultPersonNodeWidth);
        } else {
            var motherID = findReferencedPerson(motherLink, "mother");
            if (newG.properties[motherID].gender == "M") throw "Unable to import pedigree: a person declared as male is also declared as being a mother (" + motherLink + ")";
        }

        if (fatherID == personID || motherID == personID) throw "Unable to import pedigree: a person is declared to be his or hew own parent";

        // both motherID and fatherID are now given and represent valid existing nodes in the pedigree

        // if there is a relationship between motherID and fatherID the corresponding childhub is returned
        // if there is no relationship, a new one is created together with the chldhub
        var chhubID = relationshipTracker.createOrGetChildhub(motherID, fatherID);

        newG.addEdge(chhubID, personID, defaultEdgeWeight);
    }

    PedigreeImport.validateBaseGraph(newG);

    return newG;
};

/* ===============================================================================================
 * 
 * GEDCOM file format: http://en.wikipedia.org/wiki/GEDCOM
 * 
 * Supported individual (INDI) properties: NAME, SEX, NOTE, ADOP, BIRT, DEAT and DATE
 *  - Non-standard "_GENSTAT" is partially supported (for compatibility with Cyrillic v3)
 *  - Non-standard "_MAIDEN", "_INFO" and "_COMMENT" are supported (for compatibility with Cyrillic v3)
 *  - FAMS is ignored, instead 0-level FAM families are parsed/processed
 *  - only the first instance is used if the same property is given multiple times (e.g. multiple BIRT records) 
 * 
 * Suported family (FAM) properties: HUSB, WIFE, CHIL
 * 
 * Note: reverse-engineered _GENSTAT values: the following symbols, in any position, mean:
 *   Disorder status:
 *    AFFECTED:  "O"
 *    HEARSAY:   "¬"  (hearsay graphic == pre-symptomatic graphic)  
 *    UNTESTED:  "E"
 *    "carrier" and "examined" does not seem to be exported to GEDCOM or CSV
 *   Other:
 *    PROBAND:   "C"  (may be more than one)  
 *    STILLBORN: "K"
 *    INFERTILE: "M"    
 * ===============================================================================================
 */
PedigreeImport.initFromGEDCOM = function (inputText, markEvaluated, saveIDAsExternalID) {
    var inputLines = inputText.match(/[^\r\n]+/g);
    if (inputLines.length == 0) throw "Unable to import: no data";

    var convertToObject = function (inputLines) {
        /* converts GEDCOM text into an object, where 0-level items are stored as "header", "individuals" and "families"
         * properties, and all items below are arrays of objects, e.g. an array of objects representing each individual.
         * 
         * Each next-level keyword is a key in the object, and the associated value is an array of objects, each
         * object representing one encountered instance of the keyword (designed this way as ther emay be more than one
         * keyword with the same nem, e.g. multiple alternative DATEs for an event, or multiple CHILdren in a family)
         *  
         * The value of the keyword itself (if any) is stored under the "value" key. In the example below the
         * all "DATA" keywords have no values, while all TEXT and DATE have some values assigned, and only some
         * EVEN keywords have a value. 
         * 
         * 0 @I1@ INDI
         *  1 EVEN AAA
         *   2 DATE 10 JAN 1800
         *   2 SOUR @S1@
         *    3 DATA
         *     4 TEXT ABC
         *    3 DATA
         *     4 TEXT DEF
         *    3 NOTE DEF
         *    3 ZZZZ 2
         *    3 ZZZZ 3    
         *  1 EVEN
         *   2 DATE 1800
         *   2 SOUR @S2@
         *  1 EVEN BBB
         *   2 DATE 1900
         * 0 @I2@ INDI
         *  1 ...
         *   
         * is stranslated to:
         *  // level
         *  //  1       2       3        4
         *  [{id: '@I1@'
         *    EVEN: [
         *           {value: 'AAA',
         *            DATE:  [{value: '10 JAN 1800'}],
         *            SOUR:  [{value: '@S1@',
         *                     DATA:  [{TEXT: [{value: 'ABC'}]}, {TEXT: [{value: 'DEF'}]}],
         *                     NOTE:  [{value: 'DEF'}],
         *                     ZZZZ:  [{value: '2'}, {value: '3'}]
         *                    }
         *                   ]
         *           },
         *           {DATE:  [{value: '1800'}],
         *            SOUR:  [{value: '@S2@'}]
         *           },
         *           {value: 'BBB',
         *            DATE:  [{value: '1900'}]
         *           }
         *          ]
         *   },
         *   {id: '@I2@' ...}
         *  ]
         */
        var obj = { "header": {}, "individuals": [], "families": [] };

        var currentObject = [];

        for (var i = 0; i < inputLines.length; i++) {
            var nextLine = inputLines[i].replace(/[^a-zA-Z0-9.\@\/\-\s*]/g, " ").replace(/^\s+|\s+$/g, ""); // sanitize + trim          

            var words = inputLines[i].split(/\s+/);
            var parts = words.splice(0, 2);
            parts.push(words.join(" "));

            // now parts[0] = level, parts[1] = record type, parts[2] = value, if any

            var level = parseInt(parts[0]);

            currentObject.splice(level);

            if (level == 0) {
                if (parts[1] == "HEAD") {
                    currentObject[0] = obj.header;
                } else if (parts[1][0] == "@" && parts[2] == "INDI") {
                    obj.individuals.push({});
                    currentObject[0] = obj.individuals[obj.individuals.length - 1];
                    currentObject[0]["id"] = parts[1];
                } else if (parts[1][0] == "@" && parts[2] == "FAM") {
                    obj.families.push({});
                    currentObject[0] = obj.families[obj.families.length - 1];
                    currentObject[0]["id"] = parts[1];
                } else {
                    currentObject[0] = {};
                }
            } else {
                if (currentObject.length < level - 1) {
                    throw "Unable to import GEDCOM: a multi-level jump detected in line: [" + inputLines[i] + "]";
                }

                if (!currentObject[level - 1].hasOwnProperty(parts[1])) currentObject[level - 1][parts[1]] = []; // array of values

                if (currentObject.length < level + 1) {
                    currentObject[level] = {};
                    currentObject[level - 1][parts[1]].push(currentObject[level]);
                }

                if (parts[2] != "") {
                    currentObject[level]["value"] = parts[2];
                }
            }
            currentLevel = parts[0];
        }

        return obj;
    };

    var gedcom = convertToObject(inputLines);
    console.log("GEDCOM object: " + stringifyObject(gedcom));

    if (gedcom.header.hasOwnProperty("GEDC")) {
        if (gedcom.header.GEDC.hasOwnProperty("VERS")) {
            if (gedcom.header.GEDC.VERS != "5.5" && gedcom.header.GEDC.VERS != "5.5.1") {
                console.warn("Unsupported GEDCOM version detected: [" + gedcom.header.GEDC.VERS + "]. " + "Import will continue but the correctness is not guaranteed. Supportede versions are 5.5 and 5.5.1");
            }
        }
    }

    if (gedcom.individuals.length == 0) {
        throw "Unable to create a pedigree from GEDCOM: no individuals are defined in the import data";
    }

    var newG = new __WEBPACK_IMPORTED_MODULE_0__baseGraph__["a" /* BaseGraph */]();

    var externalIDToID = {};

    // first pass: add all vertices and assign vertex IDs
    for (var i = 0; i < gedcom.individuals.length; i++) {
        var nextPerson = gedcom.individuals[i];

        var pedigreeID = newG._addVertex(null, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, {}, newG.defaultPersonNodeWidth);

        externalIDToID[nextPerson.id] = pedigreeID;

        var cleanedID = nextPerson.id.replace(/@/g, "");
        var properties = saveIDAsExternalID ? { "externalID": cleanedID } : {};

        properties["gender"] = "U"; // each person should have some gender set 

        var getFirstValue = function (obj) {
            //if (Object.prototype.toString.call(obj) === '[object Array]')
            return obj[0].value;
        };

        var parseDate = function (gedcomDate) {
            gedcomDate = gedcomDate[0].value;

            // treat possible date modifiers
            //  "ABT" - "about"
            //  "EST" - "estimated"
            //  "BEF" - "before"
            //  "AFT" - "after"
            //  "BET ... AND ..." = "between ... and ..."
            // for all of the above the date itself is used as the date; for the "between" the first date is used.           
            gedcomDate = gedcomDate.replace(/^(\s*)ABT(\s*)/, "");
            gedcomDate = gedcomDate.replace(/^(\s*)EST(\s*)/, "");
            gedcomDate = gedcomDate.replace(/^(\s*)BEF(\s*)/, "");
            gedcomDate = gedcomDate.replace(/^(\s*)AFT(\s*)/, "");
            var getBetweenDate = /^\s*BET\s+(.+)\s+AND.*/;
            var match = getBetweenDate.exec(gedcomDate);
            if (match != null) {
                gedcomDate = match[1];
            }

            if (gedcomDate == "?") return null;

            var timestamp = Date.parse(gedcomDate);
            if (isNaN(timestamp) == false) {
                return new Date(timestamp);
            }
            return null;
        };

        for (var property in nextPerson) {
            if (nextPerson.hasOwnProperty(property)) {
                if (property == "SEX") {
                    var genderString = getFirstValue(nextPerson[property])[0].toLowerCase(); // use first character only
                    if (genderString == "female" || genderString == "f") properties["gender"] = "F";else if (genderString == "male" || genderString == "m") properties["gender"] = "M";
                } else if (property == "BIRT") {
                    if (nextPerson[property][0].hasOwnProperty("DATE")) {
                        var date = parseDate(nextPerson[property][0]["DATE"]);
                        if (date !== null) {
                            properties["dob"] = date;
                        }
                    }
                } else if (property == "DEAT") {
                    if (properties.hasOwnProperty("lifeStatus") && properties["lifeStatus"] == "stillborn") continue;
                    properties["lifeStatus"] = "deceased";
                    if (nextPerson[property][0].hasOwnProperty("DATE")) {
                        var date = parseDate(nextPerson[property][0]["DATE"]);
                        if (date !== null) {
                            properties["dod"] = date;
                        }
                    }
                } else if (property == "ADOP") {
                    properties["isAdopted"] = true;
                } else if (property == "_INFO") {
                    if (!properties.hasOwnProperty("comments")) properties["comments"] = "";
                    properties["comments"] += "(Info: " + getFirstValue(nextPerson[property]) + ")\n";
                } else if (property == "NOTE" || property == "_COMMENT") {
                    if (!properties.hasOwnProperty("comments")) properties["comments"] = "";
                    properties["comments"] += getFirstValue(nextPerson[property]) + "\n";
                    if (nextPerson[property][0].hasOwnProperty("CONT")) {
                        var more = nextPerson[property][0]["CONT"];
                        for (var cc = 0; cc < more.length; cc++) {
                            properties["comments"] += more[cc].value + "\n";
                        }
                    }
                } else if (property == "NAME") {
                    var nameParts = getFirstValue(nextPerson[property]).split("/");
                    var firstName = nameParts[0].replace(/^\s+|\s+$/g, "");
                    var lastName = nameParts.length > 1 ? nameParts[1].replace(/^\s+|\s+$/g, "") : "";
                    properties["fName"] = firstName;
                    if (lastName != "") properties["lName"] = lastName;
                } else if (property == "_MAIDEN") {
                    var nameParts = getFirstValue(nextPerson[property]).split("/");
                    var firstName = nameParts[0].replace(/^\s+|\s+$/g, "");
                    var lastName = nameParts.length > 1 ? nameParts[1].replace(/^\s+|\s+$/g, "") : "";
                    properties["lNameAtB"] = firstName;
                    if (lastName != "") properties["lNameAtB"] += " " + lastName;
                } else if (property == "_GENSTAT") {
                    var props = getFirstValue(nextPerson[property]).split("");
                    for (var p = 0; p < props.length; p++) {
                        var value = props[p];
                        if (value.charCodeAt(0) == 65533 || value.charCodeAt(0) == 172) {
                            // one value is obtained via copy-paste, another via file upload
                            value = "HEARSAY";
                        }
                        switch (value) {
                            case "O":
                                properties["carrierStatus"] = "affected";
                                properties["disorders"] = ["affected"];
                                if (markEvaluated) properties["evaluated"] = true;
                                break;
                            case "HEARSAY":
                                properties["carrierStatus"] = "presymptomatic"; // the closest graphic to cyrillic's "hearsay"
                                if (markEvaluated) properties["evaluated"] = true;
                                break;
                            case "K":
                                properties["lifeStatus"] = "stillborn";
                                break;
                            case "M":
                                properties["childlessStatus"] = "infertile";
                                break;
                            case "E":
                                if (!properties.hasOwnProperty("comments")) {
                                    properties["comments"] = "(untested)";
                                } else {
                                    properties["comments"] = "(untested)\n" + properties["comments"];
                                }
                                break;
                            case "O":
                                // TODO: proband
                                break;
                        }
                    }
                }
            }
        }
        if (properties.hasOwnProperty("comments")) {
            // remove trailing newlines and/or empty comments
            properties.comments = properties.comments.replace(/^\s+|\s+$/g, "");
            if (properties.comments == "") delete properties.comments;
        }
        newG.properties[pedigreeID] = properties;
    }

    var defaultEdgeWeight = 1;

    var relationshipTracker = new RelationshipTracker(newG, defaultEdgeWeight);

    var noChildFamilies = [];

    // second pass (once all vertex IDs are known): process families & add edges
    for (var i = 0; i < gedcom.families.length; i++) {
        var nextFamily = gedcom.families[i];

        var motherLink = nextFamily.hasOwnProperty("WIFE") ? getFirstValue(nextFamily["WIFE"]) : null;
        var fatherLink = nextFamily.hasOwnProperty("HUSB") ? getFirstValue(nextFamily["HUSB"]) : null;

        // create a virtual parent in case one of the parents is missing       
        if (fatherLink == null) {
            var fatherID = newG._addVertex(null, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, { "gender": "M", "comments": "unknown" }, newG.defaultPersonNodeWidth);
        } else {
            var fatherID = externalIDToID[fatherLink];
            if (newG.properties[fatherID].gender == "F") throw "Unable to import pedigree: a person declared as female is also declared as being a father (" + fatherLink + ")";
        }
        if (motherLink == null) {
            var motherID = newG._addVertex(null, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, { "gender": "F", "comments": "unknown" }, newG.defaultPersonNodeWidth);
        } else {
            var motherID = externalIDToID[motherLink];
            if (newG.properties[motherID].gender == "M") throw "Unable to import pedigree: a person declared as male is also declared as being a mother (" + motherLink + ")";
        }

        // both motherID and fatherID are now given and represent valid existing nodes in the pedigree

        // if there is a relationship between motherID and fatherID the corresponding childhub is returned
        // if there is no relationship, a new one is created together with the chldhub
        var chhubID = relationshipTracker.createOrGetChildhub(motherID, fatherID);

        var children = nextFamily.hasOwnProperty("CHIL") ? nextFamily["CHIL"] : null;

        if (children == null) {
            // create a virtual child
            var childID = newG._addVertex(null, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].PERSON, { "gender": "U", "comments": "unknown" }, newG.defaultPersonNodeWidth);
            noChildFamilies.push(nextFamily.id);
            externalIDToID[childID] = childID;
            children = [{ "value": childID }];
        }

        for (var j = 0; j < children.length; j++) {
            var externalID = children[j].value;

            var childID = externalIDToID.hasOwnProperty(externalID) ? externalIDToID[externalID] : null;

            if (childID == null) {
                throw "Unable to import pedigree: child link does not point to an existing individual: [" + externalID + "]";
            }

            newG.addEdge(chhubID, childID, defaultEdgeWeight);
        }
    }

    if (noChildFamilies.length > 0) {
        // stringifyObject(noChildFamilies)
        console.warn("Some families with no children were found in the imported pedigree: this is not supported at the moment, so a child was added to each childless family");
    }

    PedigreeImport.validateBaseGraph(newG);

    return newG;
};

// ===============================================================================================


// TODO: convert internal properties to match public names and rename this to "supportedProperties"
PedigreeImport.JSONToInternalPropertyMapping = {
    "proband": "isProband",
    "lastname": "lName",
    "lastnameatbirth": "lNameAtB",
    "comments": "comments",
    "twingroup": "twinGroup",
    "monozygotic": "monozygotic",
    "adoptedin": "isAdopted",
    "evaluated": "evaluated",
    "birthdate": "dob",
    "deathdate": "dod",
    "gestationage": "gestationAge",
    "lifestatus": "lifeStatus",
    "disorders": "disorders",
    "hpoterms": "hpoTerms",
    "candidategenes": "candidateGenes",
    "ethnicities": "ethnicities",
    "carrierstatus": "carrierStatus",
    "externalid": "externalID",
    "numpersons": "numPersons",
    "lostcontact": "lostContact",
    "nodenumber": "nodeNumber",
    "externalidhref": "externalIDHref",
    "focused": "focused"
};

/*
 * Converts property name from external JSON format to internal - also helps to
 * support aliases for some terms and weed out unsupported terms.
 */
PedigreeImport.convertProperty = function (externalPropertyName, value) {

    if (!PedigreeImport.JSONToInternalPropertyMapping.hasOwnProperty(externalPropertyName)) return null;

    var internalPropertyName = PedigreeImport.JSONToInternalPropertyMapping[externalPropertyName];

    return { "propertyName": internalPropertyName, "value": value };
};

//===============================================================================================

/*
 * Helper class which keeps track of relationships already seen in pedigree being imported
 */
const RelationshipTracker = function (newG, defaultEdgeWeight) {
    this.newG = newG;

    this.defaultEdgeWeight = defaultEdgeWeight;

    this.relationships = {};
    this.relChildHubs = {};
};
/* unused harmony export RelationshipTracker */


RelationshipTracker.prototype = {

    // if there is a relationship between motherID and fatherID the corresponding childhub is returned
    // if there is no relationship, a new one is created together with the chldhub
    createOrGetChildhub: function (motherID, fatherID) {
        // both motherID and fatherID are now given. Check if there is a relationship between the two of them
        if (this.relationships.hasOwnProperty(motherID) && this.relationships[motherID].hasOwnProperty(fatherID)) {
            var relID = this.relationships[motherID][fatherID];
            var chhubID = this.relChildHubs[relID];
        } else {
            if (this.relationships[motherID] === undefined) this.relationships[motherID] = {};
            if (this.relationships[fatherID] === undefined) this.relationships[fatherID] = {};

            var relID = this.newG._addVertex(null, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].RELATIONSHIP, {}, this.newG.defaultNonPersonNodeWidth);
            var chhubID = this.newG._addVertex(null, __WEBPACK_IMPORTED_MODULE_0__baseGraph__["b" /* TYPE */].CHILDHUB, {}, this.newG.defaultNonPersonNodeWidth);

            this.newG.addEdge(relID, chhubID, this.defaultEdgeWeight);
            this.newG.addEdge(motherID, relID, this.defaultEdgeWeight);
            this.newG.addEdge(fatherID, relID, this.defaultEdgeWeight);

            this.relationships[motherID][fatherID] = relID;
            this.relationships[fatherID][motherID] = relID;
            this.relChildHubs[relID] = chhubID;
        }

        return chhubID;
    }
};

/***/ }),
/* 166 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * LineSet is used to track existing lines in the graph and simplify line-crossing-line tracking
 *
 * @class LineSet
 * @constructor
 */
const LineSet = Class.create({
    initialize: function () {
        this._lineCrossings = {}; // { owner: {set of owners of lines crossing its lines} }
        this._lines = []; // array of sets {owner, x1, y1, x2, y2}
    },

    replaceIDs: function (changedIdsSet) {
        var newLineCrossings = {};
        for (var oldOwnerID in this._lineCrossings) if (this._lineCrossings.hasOwnProperty(oldOwnerID)) {
            var crosses = this._lineCrossings[oldOwnerID];
            var newCrosses = {};

            for (var oldID in crosses) if (crosses.hasOwnProperty(oldID)) {
                var newID = changedIdsSet.hasOwnProperty(oldID) ? changedIdsSet[oldID] : oldID;
                newCrosses[newID] = true;
            }

            var newOwnerID = changedIdsSet.hasOwnProperty(oldOwnerID) ? changedIdsSet[oldOwnerID] : oldOwnerID;
            newLineCrossings[newOwnerID] = newCrosses;
        }
        this._lineCrossings = newLineCrossings;

        for (var i = 0; i < this._lines.length; i++) {
            var oldID = this._lines[i].owner;
            var newID = changedIdsSet.hasOwnProperty(oldID) ? changedIdsSet[oldID] : oldID;
            this._lines[i].owner = newID;
        }
    },

    addLine: function (owner, x1, y1, x2, y2) {
        // returns: list of crossings [ {x,y} ... {x, y} ]

        // TODO: improve performance by ordering by y or x coordinate -> not critical for now

        if (!this._lineCrossings.hasOwnProperty(owner)) this._lineCrossings[owner] = {};

        var bendPoints = [];

        var thisLine = { "owner": owner, "x1": x1, "y1": y1, "x2": x2, "y2": y2 };

        // scan through all vertical lines
        for (var i = 0; i < this._lines.length; i++) {
            var line = this._lines[i];
            if (line.owner == owner) continue;

            var crossingPoint = this._getLineCrossing(thisLine, line);
            if (crossingPoint) {
                this._lineCrossings[line.owner][owner] = true; // that line affects this one
                bendPoints.push(crossingPoint);
            }
        }

        this._lines.push(thisLine);

        return bendPoints;
    },

    removeAllLinesByOwner: function (owner) {
        //console.log("removing all lines by " + owner);

        if (!this._lineCrossings.hasOwnProperty(owner)) return {};

        for (var i = this._lines.length - 1; i >= 0; i--) {
            var line = this._lines[i];
            if (line.owner == owner) this._lines.splice(i, 1);
        }

        var affectedOwners = this._lineCrossings[owner];
        delete this._lineCrossings[owner];

        for (var ownerID in this._lineCrossings) if (this._lineCrossings.hasOwnProperty(ownerID)) {
            var crosses = this._lineCrossings[ownerID];
            if (crosses.hasOwnProperty(owner)) {
                delete crosses[owner];
            }
        }

        //console.log("Removing " + owner + ", affected: " + stringifyObject(affectedOwners));
        return affectedOwners;
    },

    removeAllLinesAffectedByOwnerMovement: function (owner) {
        var returnNewAffected = [];

        var processed = {};
        processed[owner] = true;

        var affected = [owner];

        while (affected.length > 0) {
            var next = affected.pop();

            var newAffected = this.removeAllLinesByOwner(next);

            for (var o in newAffected) {
                if (newAffected.hasOwnProperty(o)) {
                    if (!processed.hasOwnProperty(o)) {
                        affected.push(parseInt(o));
                        returnNewAffected.push(parseInt(o));
                        processed[o] = true;
                    }
                }
            }
        }

        //console.log("affected: " + stringifyObject(returnNewAffected));
        //console.log("this: " + stringifyObject(this));
        return returnNewAffected;
    },

    _getLineCrossing: function (line1, line2) {
        // Return the coordinates of a point of intersection of the given two line segments.
        // Return null if the line segments are parallel 9even if they cross) or do not intersect
        // (note: ignores intersection at segment ends)
        //
        // The two linesin parametric form:
        //   l1(t) = (x1, y1) + (x2-x1, y2-y1)*t
        //   l2(s) = (u1, v1) + (u2-u1, v2-v1)*s
        //
        //   Intersection, i.e. l1(t) = l2(s) implies two scalar equations:
        //
        //      x1 + (x2-x1)*t = u1 + (u2-u1)*s
        //      y1 + (y2-y1)*t = v1 + (v2-v1)*s
        //
        //      (x2-x1)*t - (u2-u1)*s = u1-x1
        //      (y2-y1)*t - (v2-v1)*s = v1-y1
        //
        //  | a b | | t |  =  | e |
        //  | c d | | s |     | f |

        var a = line1.x2 - line1.x1;
        var b = line2.x1 - line2.x2;
        var c = line1.y2 - line1.y1;
        var d = line2.y1 - line2.y2;
        var e = line2.x1 - line1.x1;
        var f = line2.y1 - line1.y1;

        var denom = a * d - b * c;

        if (Math.abs(denom) <= 0.001) return null; // determinant is ~0, parallel

        var t = (e * d - b * f) / denom;
        var s = (a * f - e * c) / denom;

        if (t <= 0 || t >= 1 || s <= 0 || s >= 1) // lines intersect but line segments do not, parameters outside of [0,1]
            return 0; // (or intersection is at the edge, when t == 0 or t == 1 or s == 0 or s == 1

        var px = line1.x1 + t * (line1.x2 - line1.x1);
        var py = line1.y1 + t * (line1.y2 - line1.y1);

        return { "x": px, "y": py };
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = LineSet;


/***/ }),
/* 167 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(5);
/* harmony export (immutable) */ __webpack_exports__["a"] = Ordering;


function Ordering(order, vOrder) {
    this.order = order; // 1D array of 1D arrays - for each rank list of vertices in order
    this.vOrder = vOrder; // 1D array - for each v vOrder[v] = order within rank

    // TODO: verify validity?
}

Ordering.prototype = {

    serialize: function () {
        return this.order;
    },

    deserialize: function (data) {
        this.order = data;
        this.vOrder = [];
        //console.log("Order deserialization: [" + stringifyObject(this.order) + "]");

        // recompute vOrders
        for (var r = 0; r < this.order.length; r++) {
            var ordersAtRank = this.order[r];
            for (var i = 0; i < ordersAtRank.length; i++) {
                this.vOrder[ordersAtRank[i]] = i;
            }
        }
    },

    insert: function (rank, insertOrder, vertex) {
        this.order[rank].splice(insertOrder, 0, vertex);
        this.vOrder[vertex] = insertOrder;
        for (var next = insertOrder + 1; next < this.order[rank].length; ++next) this.vOrder[this.order[rank][next]]++;
    },

    exchange: function (rank, index1, index2) {
        // exchanges vertices at two given indices within the same given rank

        var v1 = this.order[rank][index1];
        var v2 = this.order[rank][index2];

        this.order[rank][index2] = v1;
        this.order[rank][index1] = v2;

        this.vOrder[v1] = index2;
        this.vOrder[v2] = index1;
    },

    canMove: function (rank, index, amount) {
        var newIndex = index + amount;
        if (newIndex < 0) return false;
        if (newIndex > this.order[rank].length - 1) return false;
        return true;
    },

    move: function (rank, index, amount) {
        // changes vertex order within the same rank. Moves "amount" positions to the right or to the left
        if (amount == 0) return true;

        var newIndex = index + amount;
        if (newIndex < 0) return false;

        var ord = this.order[rank];
        if (newIndex > ord.length - 1) return false;

        var v = ord[index];

        if (newIndex > index) {
            for (var i = index; i < newIndex; ++i) {
                var vv = ord[i + 1];
                ord[i] = vv;
                this.vOrder[vv] = i;
            }
        } else {
            for (var i = index; i > newIndex; --i) {
                var vv = ord[i - 1];
                ord[i] = vv;
                this.vOrder[vv] = i;
            }
        }

        ord[newIndex] = v;
        this.vOrder[v] = newIndex;

        return true;
    },

    copy: function () {
        // returns a deep copy
        return new Ordering(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["k" /* clone2DArray */])(this.order), this.vOrder.slice());
    },

    moveVertexToRankAndOrder: function (oldRank, oldOrder, newRank, newOrder) {
        // changes vertex rank and order. Insertion happens right before the node currently occupying the newOrder position on rank newRank
        var v = this.order[oldRank][oldOrder];

        this.order[oldRank].splice(oldOrder, 1);

        this.order[newRank].splice(newOrder, 0, v);

        this.vOrder[v] = newOrder;
        for (var i = newOrder + 1; i < this.order[newRank].length; ++i) {
            var nextV = this.order[newRank][i];
            this.vOrder[nextV]++;
        }
        for (var i = oldOrder; i < this.order[oldRank].length; ++i) {
            var nextV = this.order[oldRank][i];
            this.vOrder[nextV]--;
        }
    },

    moveVertexToOrder: function (rank, oldOrder, newOrder) {
        // changes vertex order within the same rank. Insertion happens right before the node currently occupying the newOrder position
        // (i.e. changing order form 3 to 4 does nothing, as before position 4 is still position 3)
        var shiftAmount = newOrder <= oldOrder ? newOrder - oldOrder : newOrder - oldOrder - 1;
        this.move(rank, oldOrder, shiftAmount);
    },

    removeUnplugged: function () {
        var result = this.order[0].slice(0); //copy of original unplugged IDs

        for (var u = 0; u < this.order[0].length; ++u) {
            var unplugged = this.order[0][u];

            for (var i = 0; i < this.order.length; ++i) for (var j = 0; j < this.order[i].length; ++j) {
                if (this.order[i][j] > unplugged) this.order[i][j]--;
            }

            this.vOrder.splice(unplugged, 1);
        }

        this.order[0] = [];

        return result;
    },

    remove: function (v, rank) {
        var order = this.vOrder[v];
        this.moveVertexToRankAndOrder(rank, order, 0, 0);
        this.removeUnplugged();
    },

    insertAndShiftAllIdsAboveVByOne: function (v, rank, newOrder) {
        // used when when a new vertex is inserted into the graph, which increases all IDs above v by one
        // so need to modify the data for all existing vertices first, and then insert the new vertex

        for (var i = this.vOrder.length; i > v; --i) {
            this.vOrder[i] = this.vOrder[i - 1];
        }

        for (var i = 0; i < this.order.length; ++i) for (var j = 0; j < this.order[i].length; ++j) {
            if (this.order[i][j] >= v) this.order[i][j]++;
        }

        this.insert(rank, newOrder, v);
    },

    insertRank: function (insertBeforeRank) {
        this.order.splice(insertBeforeRank, 0, []);
    },

    getRightNeighbour: function (v, rank) {
        var order = this.vOrder[v];
        if (order < this.order[rank].length - 1) return this.order[rank][order + 1];
        return null;
    },

    getLeftNeighbour: function (v, rank) {
        var order = this.vOrder[v];
        if (order > 0) return this.order[rank][order - 1];
        return null;
    },

    sortByOrder: function (v_list) {
        var vorders = this.vOrder;
        var result = v_list.slice(0);
        result.sort(function (x, y) {
            return vorders[x] > vorders[y];
        });
        return result;
    },

    // returns all vertices ordered from left-to-right and from top-to-bottom
    getLeftToRightTopToBottomOrdering: function (onlyType, GG) {
        var result = [];
        for (var i = 1; i < this.order.length; ++i) {
            for (var j = 0; j < this.order[i].length; ++j) {
                var v = this.order[i][j];
                if (!onlyType || GG.type[v] == onlyType) result.push(this.order[i][j]);
            }
        }
        return result;
    }
};

/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__partnershipVisuals__ = __webpack_require__(170);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__abstractNode__ = __webpack_require__(64);



/**
 * Partnership is a class that represents the relationship between two AbstractNodes
 * and their children.
 *
 * @class Partnership
 * @constructor
 * @extends AbstractNode
 * @param x the x coordinate at which the partnership junction will be placed
 * @param y the y coordinate at which the partnership junction will be placed
 * @param partner1 an AbstractPerson who's one of the partners in the relationship.
 * @param partner2 an AbstractPerson who's the other partner in the relationship. The order of partners is irrelevant.
 * @id the unique ID number of this node
 */

const Partnership = Class.create(__WEBPACK_IMPORTED_MODULE_1__abstractNode__["b" /* AbstractNode */], {

    initialize: function ($super, x, y, id, properties) {
        //console.log("partnership");
        this._childlessStatus = null;
        this._childlessReason = "";
        this._type = "Partnership";

        this._broken = false;
        this._consangrMode = "A"; //  Can be either "A" (autodetect), "Y" (always consider consangr.) or "N" (never)
        // "Autodetect": derived from the current pedigree                                    

        // assign some properties before drawing so that relationship lines are drawn properly
        this.setBrokenStatus(properties["broken"]);
        this.setConsanguinity(properties["consangr"]);

        $super(x, y, id);

        this.assignProperties(properties);
        //console.log("partnership end");       
    },

    /**
     * Generates and returns an instance of PartnershipVisuals
     *
     * @method _generateGraphics
     * @param {Number} x X coordinate of this partnership
     * @param {Number} y Y coordinate of this partnership
     * @return {PartnershipVisuals}
     * @private
     */
    _generateGraphics: function (x, y) {
        return new __WEBPACK_IMPORTED_MODULE_0__partnershipVisuals__["a" /* PartnershipVisuals */](this, x, y);
    },

    /**
     * Changes the status of this partnership. Nullifies the status if the given status is not
     * "childless" or "infertile".
     *
     * @method setChildlessStatus
     * @param {String} status Can be "childless", "infertile" or null
     */
    setChildlessStatus: function (status) {
        if (!this.isValidChildlessStatus(status)) status = null;

        if (status != this.getChildlessStatus()) {
            this._childlessStatus = status;
            this.setChildlessReason(null);
            this.getGraphics().updateChildlessShapes();
            this.getGraphics().updateChildhubConnection();
            this.getGraphics().getHoverBox().regenerateHandles();
        }

        return this.getChildlessStatus();
    },

    /**
     * Sets the consanguinity setting of this relationship. Valid inputs are "A" (automatic"), "Y" (yes) and "N" (no)
     *
     * @method setConsanguinity
     */
    setConsanguinity: function (value) {
        if (value != "A" && value != "N" && value != "Y") value = "A";
        if (this._consangrMode != value) {
            this._consangrMode = value;
        }
        this.getGraphics() && this.getGraphics().getHoverBox().regenerateButtons();
    },

    /**
     * Returns the consanguinity setting of this relationship: "A" (automatic"), "Y" (yes) or "N" (no)
     *
     * @method getConsanguinity
     */
    getConsanguinity: function () {
        return this._consangrMode;
    },

    /**
     * Sets relationship as either broken or not
     *
     * @method getBrokenStatus
     */
    setBrokenStatus: function (value) {
        if (value === undefined) value = false;
        if (this._broken != value) {
            this._broken = value;
        }
    },

    /**
     * Returns the status of this relationship (broken or not)
     *
     * @method getBrokenStatus
     */
    getBrokenStatus: function () {
        return this._broken;
    },

    /**
     * Returns an object (to be accepted by the menu) with information about this Partnership
     *
     * @method getSummary
     * @return {Object}
     */
    getSummary: function () {
        var childlessInactive = editor.getGraph().hasNonPlaceholderNonAdoptedChildren(this.getID());
        return {
            identifier: { value: this.getID() },
            childlessSelect: { value: this.getChildlessStatus() ? this.getChildlessStatus() : "none", inactive: childlessInactive },
            childlessText: { value: this.getChildlessReason() ? this.getChildlessReason() : "none", inactive: childlessInactive },
            consangr: { value: this._consangrMode, inactive: false },
            broken: { value: this.getBrokenStatus(), inactive: false }
        };
    },

    /**
     * Returns an object containing all the properties of this node
     * except id, x, y & type
     *
     * @method getProperties
     * @return {Object} in the form
     *
     */
    getProperties: function ($super) {
        var info = $super();
        if (this.getChildlessStatus() != null) {
            info["childlessStatus"] = this.getChildlessStatus();
            info["childlessReason"] = this.getChildlessReason();
        }
        if (this.getConsanguinity() != "A") {
            info["consangr"] = this.getConsanguinity();
        }
        if (this.getBrokenStatus()) {
            info["broken"] = this.getBrokenStatus();
        }
        return info;
    },

    /**
     * Applies the properties found in info to this node.
     *
     * @method assignProperties
     * @param properties Object
     * @return {Boolean} True if info was successfully assigned
     */
    assignProperties: function ($super, info) {
        if ($super(info)) {
            if (info.childlessStatus && info.childlessStatus != this.getChildlessStatus()) {
                this.setChildlessStatus(info.childlessStatus);
            }
            if (info.childlessReason && info.childlessReason != this.getChildlessReason()) {
                this.setChildlessReason(info.childlessReason);
            }
            if (info.consangr && info.consangr != this.getConsanguinity()) {
                this.setConsanguinity(info.consangr);
            }
            if (info.broken && info.broken != this.getBrokenStatus()) {
                this.setBrokenStatus(info.broken);
            }
            return true;
        }
        return false;
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = Partnership;


//ATTACH CHILDLESS BEHAVIOR METHODS TO PARTNERSHIP OBJECTS
Partnership.addMethods(__WEBPACK_IMPORTED_MODULE_1__abstractNode__["a" /* ChildlessBehavior */]);

/***/ }),
/* 169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__abstractHoverbox__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__ = __webpack_require__(12);



/**
 * PartnershipHoverbox is a class for all the UI elements and graphics surrounding a Partnership node and
 * its labels. This includes the box that appears around the node when it's hovered by a mouse, as
 * well as the handles used for creating connections and creating new nodes.
 *
 * @class PartnershipHoverbox
 * @extends AbstractHoverbox
 * @constructor
 * @param {Partnership} partnership The Partnership for which the hoverbox is drawn
 * @param {Number} junctionX The x coordinate around which the partnership bubble is centered
 * @param {Number} junctionY The y coordinate around which the partnership bubble is centered
 * @param {Raphael.st} shapes Raphaël set containing the graphical elements that make up the node
 */

const PartnershipHoverbox = Class.create(__WEBPACK_IMPORTED_MODULE_0__abstractHoverbox__["a" /* AbstractHoverbox */], {

    initialize: function ($super, partnership, junctionX, junctionY, nodeShapes) {
        var radius = __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius;
        $super(partnership, -radius * 0.65, -radius * 0.8, radius * 1.3, radius * 2.3, junctionX, junctionY, nodeShapes);
        this._isMenuToggled = false;
    },

    /**
     * Creates the handles used in this hoverbox
     *
     * @method generateHandles
     * @return {Raphael.st} A set of handles
     */
    generateHandles: function ($super) {
        if (this._currentHandles !== null) return;
        $super();

        if (this.getNode().getChildlessStatus() !== null) return;

        var x = this.getNodeX();
        var y = this.getNodeY();
        var strokeWidth = editor.getWorkspace().getSizeNormalizedToDefaultZoom(__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].handleStrokeWidth);

        editor.getPaper().setStart();
        //static part (going right below the node)            
        var path = [["M", x, y], ["L", x, y + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipHandleBreakY]];
        editor.getPaper().path(path).attr({ "stroke-width": strokeWidth, stroke: "gray" }).insertBefore(this.getNode().getGraphics().getJunctionShape());
        this.generateHandle("child", x, y + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipHandleBreakY, x, y + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipHandleLength);

        this._currentHandles.push(editor.getPaper().setFinish());
    },

    /**
     * Creates the buttons used in this hoverbox
     *
     * @method generateButtons
     */
    generateButtons: function ($super) {
        if (this._currentButtons !== null) return;
        $super();
        this.generateDeleteBtn();
        this.generateMenuBtn();
    },

    /**
     * Creates a node-shaped show-menu button
     *
     * @method generateMenuBtn
     * @return {Raphael.st} The generated button
     */
    generateMenuBtn: function () {
        var me = this;
        var action = function () {
            me.toggleMenu(!me.isMenuToggled());
        };
        var junctionShapedButton = this.getNode().getGraphics().getJunctionShape().clone();
        junctionShapedButton.attr(__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].nodeShapeMenuOffPartner);
        junctionShapedButton.click(action);
        junctionShapedButton.hover(function () {
            junctionShapedButton.attr(__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].nodeShapeMenuOnPartner);
        }, function () {
            junctionShapedButton.attr(__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].nodeShapeMenuOffPartner);
        });
        junctionShapedButton.attr("cursor", "pointer");
        this._currentButtons.push(junctionShapedButton);
        this.disable();
        this.getFrontElements().push(junctionShapedButton);
        this.enable();
    },

    /**
     * Returns true if the menu is toggled for this partnership node
     *
     * @method isMenuToggled
     * @return {Boolean}
     */
    isMenuToggled: function () {
        return this._isMenuToggled;
    },

    /**
     * Shows/hides the menu for this partnership node
     *
     * @method toggleMenu
     * @param {Boolean} isMenuToggled Set to True to make the menu visible
     */
    toggleMenu: function (isMenuToggled) {
        if (this._justClosedMenu) return;
        this._isMenuToggled = isMenuToggled;
        if (isMenuToggled) {
            var optBBox = this.getBoxOnHover().getBBox();
            var x = optBBox.x2;
            var y = optBBox.y;
            var position = editor.getWorkspace().canvasToDiv(x + 5, y);
            editor.getPartnershipMenu().show(this.getNode(), position.x, position.y);
        }
    },

    /**
     * Hides the hoverbox with a fade out animation
     *
     * @method animateHideHoverZone
     */
    animateHideHoverZone: function ($super) {
        this._hidden = true;
        if (!this.isMenuToggled()) {
            $super();
        }
    },

    /**
     * Displays the hoverbox with a fade in animation
     *
     * @method animateDrawHoverZone
     */
    animateDrawHoverZone: function ($super) {
        this._hidden = false;
        if (!this.isMenuToggled()) {
            $super();
        }
    },

    /**
     * Performs the appropriate action for clicking on the handle of type handleType
     *
     * @method handleAction
     * @param {String} handleType Can be either "child", "partner" or "parent"
     * @param {Boolean} isDrag Set to True if the handle is being dragged at the time of the action
     */
    handleAction: function (handleType, isDrag, curHoveredId) {
        if (isDrag && curHoveredId) {
            if (handleType == "child") {
                var event = { "personID": curHoveredId, "parentID": this.getNode().getID() };
                document.fire("pedigree:person:drag:newparent", event);
            }
        } else if (!isDrag && handleType == "child") {
            var position = editor.getWorkspace().canvasToDiv(this.getNodeX(), this.getNodeY() + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipHandleLength + 15);
            var canBeChildless = !editor.getGraph().hasNonPlaceholderNonAdoptedChildren(this.getNode().getID());
            if (canBeChildless) editor.getNodetypeSelectionBubble().show(this.getNode(), position.x, position.y);else editor.getSiblingSelectionBubble().show(this.getNode(), position.x, position.y);
            // if user selects anything the bubble will fire an even on its own
        }
        this.animateHideHoverZone();
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = PartnershipHoverbox;


/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Raphael) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__abstractNodeVisuals__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__readonlyHoverbox__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__partnershipHoverbox__ = __webpack_require__(169);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__graphicHelpers__ = __webpack_require__(43);






/**
 * Class for visualizing partnerships and organizing the graphical elements.
 *
 * @class PartnershipVisuals
 * @extends AbstractNodeVisuals
 * @constructor
 * @param {Partnership} node The node for which the graphics are handled
 * @param {Number} x The x coordinate on the canvas
 * @param {Number} y The y coordinate on the canvas
 */
const PartnershipVisuals = Class.create(__WEBPACK_IMPORTED_MODULE_0__abstractNodeVisuals__["a" /* AbstractNodeVisuals */], {

    initialize: function ($super, partnership, x, y) {
        //console.log("partnership visuals");
        $super(partnership, x, y);
        this._childlessShape = null;
        this._childlessStatusLabel = null;
        this._junctionShape = editor.getPaper().circle(x, y, __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipRadius).attr(__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipNode);

        if (editor.isReadOnlyMode()) {
            this._hoverBox = new __WEBPACK_IMPORTED_MODULE_2__readonlyHoverbox__["a" /* ReadOnlyHoverbox */](partnership, x, y, this.getShapes());
        } else {
            this._hoverBox = new __WEBPACK_IMPORTED_MODULE_3__partnershipHoverbox__["a" /* PartnershipHoverbox */](partnership, x, y, this.getShapes());
        }
        this.updateIDLabel();

        this._childhubConnection = null;
        this._partnerConnections = null;

        this.updatePartnerConnections();
        this.updateChildhubConnection();
        //console.log("partnership visuals end");
    },

    updateIDLabel: function () {
        var x = this.getX();
        var y = this.getY();
        this._idLabel && this._idLabel.remove();
        this._idLabel = editor.getPaper().text(x, y - 20, editor.DEBUG_MODE ? this.getNode().getID() : "").attr(__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].dragMeLabel).insertAfter(this._junctionShape.flatten());
    },

    /**
     * Updates whatever needs to change when node id changes (e.g. id label) 
     *
     * @method onSetID
     */
    onSetID: function ($super, id) {
        $super(id);
        this.updateIDLabel();
    },

    /**
     * Expands the partnership circle
     *
     * @method grow
     */
    grow: function () {
        if (this.area) return;
        this.area = this.getJunctionShape().clone().flatten().insertBefore(this.getJunctionShape().flatten());
        this.area.attr({ "fill": "green", stroke: "none" });
        this.area.ot = this.area.transform();
        this.area.animate(Raphael.animation({ transform: "...S2" }, 400, "bounce"));
    },

    /**
     * Shrinks node graphics to the original size
     *
     * @method shrink
     */
    shrink: function () {
        this.area && this.area.remove();
        delete this.area;
    },

    /**
     * Marks the node in a way different from glow
     *
     * @method grow
     */
    markPregnancy: function () {
        // TODO: maybe mark pregnancy bubble?
        if (this.mark) return;
        this.mark = this.getJunctionShape().glow({ width: 10, fill: true, opacity: 0.3, color: "blue" }).insertBefore(this.getJunctionShape().flatten());
    },

    /**
     * Unmarks the node
     *
     * @method unmark
     */
    unmarkPregnancy: function () {
        this.mark && this.mark.remove();
        delete this.mark;
    },

    markPermanently: function () {
        if (this.mark2) return;
        this.mark2 = this.getJunctionShape().glow({ width: 18, fill: true, opacity: 0.4, color: "#ee8d00" }).insertBefore(this.getJunctionShape().flatten());
    },
    unmark: function () {
        this.mark2 && this.mark2.remove();
        delete this.mark2;
    },

    /**
     * Returns the circle that joins connections
     *
     * @method getJunctionShape
     * @return {Raphael.st}
     */
    getJunctionShape: function () {
        return this._junctionShape;
    },

    /**
     * Returns the Y coordinate of the lowest part of this node's graphic on the canvas
     *
     * @method getY
     * @return {Number} The y coordinate
     */
    getBottomY: function () {
        return this._absoluteY + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipRadius + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].childlessLength;
    },

    /**
     * Updates the path of all connections to all partners
     *
     * @method updatePartnerConnections
     */
    updatePartnerConnections: function () {
        this._partnerConnections && this._partnerConnections.remove();

        editor.getPaper().setStart();

        var positionedGraph = editor.getGraph();

        var id = this.getNode().getID();

        var consangr = positionedGraph.isConsangrRelationship(id);
        var nodeConsangrPreference = this.getNode().getConsanguinity();
        if (nodeConsangrPreference == "N") consangr = false;
        if (nodeConsangrPreference == "Y") consangr = true;

        var lineAttr = consangr ? __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].consangrPartnershipLines : __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipLines;

        var partnerPaths = positionedGraph.getPathToParents(id); // partnerPaths = [ [virtual_node_11, ..., virtual_node_1n, parent1], [virtual_node_21, ..., virtual_node_2n, parent21] ]

        // TODO: a better curve algo for the entire curve at once?
        var smoothCorners = true;
        var cornerRadius = __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].curvedLinesCornerRadius;

        for (var p = 0; p < partnerPaths.length; p++) {
            var path = partnerPaths[p];

            // for the last piece which attaches to the person:
            // need to consider which attachment point to use, and may have to do a bended curve from current Y to the attachment point Y
            var person = path[path.length - 1];
            var finalSegmentInfo = editor.getGraph().getRelationshipLineInfo(id, person);

            var nodePos = editor.getGraph().getPosition(person);
            var finalPosition = editor.convertGraphCoordToCanvasCoord(nodePos.x, nodePos.y);
            var finalYTo = editor.convertGraphCoordToCanvasCoord(0, finalSegmentInfo.attachY).y;
            var yTop = editor.convertGraphCoordToCanvasCoord(0, finalSegmentInfo.verticalY).y;
            var lastBend = finalYTo == yTop && yTop < this.getY() && finalSegmentInfo.attachmentPort == 1 ? Infinity : finalSegmentInfo.numAttachPorts > 1 ? __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius * (1.8 + finalSegmentInfo.numAttachPorts * 0.1 - finalSegmentInfo.attachmentPort * 0.35) : __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius * 1.6;
            //console.log("Rel: " + id + ", Y: " + this.getY() + ", Attach/FinalY: " +finalYTo + ", yTOP: " + yTop + ", lastbend: " + lastBend + ", finalPos: " + stringifyObject(finalPosition));

            var goesLeft = false; // indicates if the current step fo the path is right-to-left or left-to-right            
            var xFrom = this.getX(); // always the X of the end of the previous segment of the curve
            var yFrom = this.getY(); // always the Y of the end of the previous segment of the curve
            var xTo = xFrom;
            var yTo = yFrom;
            var prevY = yFrom; // y-coordinate of the previous node: used to determine vertical vs horizontal segments
            var prevX = xFrom;
            var vertical = false; // direction of the previous segment
            var wasAngle = false;

            //console.log("Path: " + stringifyObject(path));

            for (var i = 0; i < path.length; i++) {
                var nextNodeOnPath = path[i];

                var nodePos = editor.getGraph().getPosition(nextNodeOnPath);
                var position = editor.convertGraphCoordToCanvasCoord(nodePos.x, nodePos.y);
                //console.log("NextNode: " + nextNodeOnPath + ", nodePos: " + stringifyObject(nodePos) + ", position: " + stringifyObject(position) );

                if (position.x < xFrom) // depending on curve direction upper/lower curves of  adouble-line are shifted in different directions
                    goesLeft = true;else if (position.x > xFrom) goesLeft = false;

                var newVertical = prevY != position.y;

                var angled = prevX != position.x && prevY != position.y;

                var changesDirection = vertical && !newVertical || !vertical && newVertical || angled;

                if (i == path.length - 1 && prevY == yTop) {
                    angled = false;
                    changesDirection = xFrom != xTo || yFrom != yTo;
                    newVertical = false;
                }

                // if necessary, mark first segment on the left as broken
                if (i == 0 && goesLeft && this.getNode().getBrokenStatus()) {
                    editor.getView().drawLineWithCrossings(id, xFrom, yFrom, xFrom - 16, yFrom, lineAttr, consangr, goesLeft);
                    editor.getPaper().path("M " + (xFrom - 29) + " " + (yFrom + 9) + " L " + (xFrom - 15) + " " + (yFrom - 9)).attr(lineAttr).toBack();
                    editor.getPaper().path("M " + (xFrom - 24) + " " + (yFrom + 9) + " L " + (xFrom - 10) + " " + (yFrom - 9)).attr(lineAttr).toBack();
                    xFrom -= 23;
                }

                //console.log("angled: " + angled + ", changes: " + changesDirection);

                if (changesDirection) {
                    // finish drawing the current segment
                    editor.getView().drawLineWithCrossings(id, xFrom, yFrom, xTo, yTo, lineAttr, consangr, goesLeft);
                    xFrom = xTo;
                    yFrom = yTo;
                }

                xTo = position.x;
                yTo = i >= path.length - 2 ? yTop : position.y;
                prevY = position.y;
                prevX = position.x;

                //------------------
                // note: assume that we always draw bottom to top, as relationship nodes are always at or below partner level                

                if (smoothCorners && (!wasAngle && !angled || i >= path.length - 2 && path.length > 1)) {
                    //console.log("corner from " + xFrom + "," + yFrom + ", newVert: " + newVertical );
                    if (newVertical && !vertical) {
                        // was horizontal, now vertical - draw the smooth corner Horiz->Vert (curve bends down)
                        if (xTo < xFrom) {
                            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__graphicHelpers__["a" /* drawCornerCurve */])(xFrom, yFrom, xFrom - cornerRadius, yFrom - cornerRadius, true, lineAttr, consangr, +2.5, -2.5, -2.5, +2.5);
                            xFrom -= cornerRadius;
                            yFrom -= cornerRadius;
                        } else {
                            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__graphicHelpers__["a" /* drawCornerCurve */])(xFrom, yFrom, xFrom + cornerRadius, yFrom - cornerRadius, true, lineAttr, consangr, +2.5, 2.5, -2.5, -2.5);
                            xFrom += cornerRadius;
                            yFrom -= cornerRadius;
                        }
                    } else if (!newVertical && vertical) {
                        // was vertical, now vertical - draw the smooth corner Vert->Horiz (curve bends up)
                        if (xTo < xFrom) {
                            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__graphicHelpers__["a" /* drawCornerCurve */])(xFrom, yFrom, xFrom - cornerRadius, yFrom - cornerRadius, false, lineAttr, consangr, -2.5, 2.5, 2.5, -2.5);
                            xFrom -= cornerRadius;
                            yFrom -= cornerRadius;
                        } else {
                            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__graphicHelpers__["a" /* drawCornerCurve */])(xFrom, yFrom, xFrom + cornerRadius, yFrom - cornerRadius, false, lineAttr, consangr, 2.5, 2.5, -2.5, -2.5);
                            xFrom += cornerRadius;
                            yFrom -= cornerRadius;
                        }
                    } else if (!newVertical) {
                        // horizontal: stop the line a bit earlier so that we can draw a smooth corner
                        if (i != path.length - 1) {
                            if (position.x > xFrom) xTo -= cornerRadius; // going right: stop a bit to the right
                            else xTo += cornerRadius; // going left: stop a bit to the left
                        }
                    } else {
                        // vertical: stop the line a bit earlier so that we can draw a smooth corner
                        yTo += cornerRadius; // always going up, so stop a bit below
                    }
                }
                //------------------

                vertical = newVertical;
                wasAngle = angled;
            }

            if (yFrom >= finalPosition.y + cornerRadius * 2) {
                editor.getView().drawLineWithCrossings(id, xFrom, yFrom, xTo, finalYTo, lineAttr, consangr, false);
            } else {
                // draw a line/curve from (xFrom, yFrom) trough (..., yTop) to (xTo, yTo).
                // It may be a line if all y are the same, a line with one bend or a line with two bends
                editor.getView().drawCurvedLineWithCrossings(id, xFrom, yFrom, yTop, xTo, finalYTo, lastBend, lineAttr, consangr, goesLeft);
            }

            var lostContact = !editor.getView().getNode(person).isProband() && editor.getView().getNode(person).getLostContact() && editor.getGraph().isPartnershipRelatedToProband(id);
            if (lostContact) {
                var xCross = goesLeft ? this.getX() - 20 : this.getX() + 20;
                var lineSize = __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].notInContactLineSize;
                editor.getPaper().path("M " + xCross + " " + (this.getY() - lineSize) + " L " + xCross + " " + (this.getY() + lineSize)).attr(__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].noContactLines).toBack();
            }
        }

        this._partnerConnections = editor.getPaper().setFinish().toBack();
        if (this.getNode().getGraphics()) {
            this.getHoverBox().regenerateHandles();
            this.getHoverBox().regenerateButtons();
        }
    },

    /**
     * Updates the path of the connection for the given pregnancy or creates a new
     * connection if it doesn't exist.
     *
     * @method updateChildhubConnection
     */
    updateChildhubConnection: function () {
        this._childhubConnection && this._childhubConnection.remove();

        var twinCommonVerticalPieceLength = __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].twinCommonVerticalLength;

        var positionedGraph = editor.getGraph();

        var id = this.getNode().getID();

        editor.getPaper().setStart();

        var childlinePos = positionedGraph.getRelationshipChildhubPosition(id);
        var childlineY = editor.convertGraphCoordToCanvasCoord(childlinePos.x, childlinePos.y).y;

        // draw child edges from childhub
        var children = positionedGraph.getRelationshipChildrenSortedByOrder(id);

        var leftmostX = this.getX();
        var rightmostX = this.getX();

        var currentTwinGroup = null;
        var currentTwinGroupCenterX = null;
        var currentIsMonozygothic = false;

        var numPregnancies = 0;

        for (var j = 0; j < children.length; j++) {
            var child = children[j];

            var twinGroupId = positionedGraph.getTwinGroupId(child);

            if (twinGroupId != currentTwinGroup) {
                numPregnancies++;

                currentTwinGroup = twinGroupId;

                var allTwins = positionedGraph.getAllTwinsSortedByOrder(child);
                var positionL = editor.getView().getNode(allTwins[0]).getX();
                var positionR = editor.getView().getNode(allTwins[allTwins.length - 1]).getX();
                var positionY = editor.getView().getNode(allTwins[0]).getY();
                currentTwinGroupCenterX = (positionL + positionR) / 2;
                if (allTwins.length == 3) currentTwinGroupCenterX = editor.getView().getNode(allTwins[1]).getX();
                editor.getView().drawLineWithCrossings(id, currentTwinGroupCenterX, childlineY, currentTwinGroupCenterX, childlineY + twinCommonVerticalPieceLength, __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipLines);

                currentIsMonozygothic = editor.getView().getNode(allTwins[0]).getMonozygotic();

                // draw the monozygothinc line, if necessary
                if (currentIsMonozygothic) {
                    var twinlineY = childlineY + __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].twinMonozygothicLineShiftY;
                    var xIntercept1 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__graphicHelpers__["f" /* findXInterceptGivenLineAndY */])(twinlineY, currentTwinGroupCenterX, childlineY + twinCommonVerticalPieceLength, positionL, positionY);
                    var xIntercept2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__graphicHelpers__["f" /* findXInterceptGivenLineAndY */])(twinlineY, currentTwinGroupCenterX, childlineY + twinCommonVerticalPieceLength, positionR, positionY);
                    editor.getView().drawLineWithCrossings(id, xIntercept1, twinlineY, xIntercept2, twinlineY, __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipLines);
                }
            } else if (twinGroupId == null) {
                numPregnancies++;
                currentIsMonozygothic = false;
            }

            var childX = editor.getView().getNode(child).getX();
            var childY = editor.getView().getNode(child).getY();

            var topLineX = currentTwinGroup === null ? childX : currentTwinGroupCenterX;
            var topLineY = currentTwinGroup === null ? childlineY : childlineY + twinCommonVerticalPieceLength;

            if (topLineX > rightmostX) rightmostX = topLineX;
            if (topLineX < leftmostX) leftmostX = topLineX;

            // draw regular child line - for all nodes which are not monozygothic twins and for the
            // rightmost and leftmost monozygothic twin
            if (!currentIsMonozygothic || childX == positionL || childX == positionR) {
                editor.getView().drawLineWithCrossings(id, topLineX, topLineY, childX, childY, __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipLines);
            } else {
                var xIntercept = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__graphicHelpers__["f" /* findXInterceptGivenLineAndY */])(twinlineY, currentTwinGroupCenterX, childlineY + twinCommonVerticalPieceLength, childX, childY);
                editor.getView().drawLineWithCrossings(id, xIntercept, twinlineY, childX, childY, __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipLines);
            }

            var lostContact = editor.getGraph().isChildOfProband(child) && editor.getView().getNode(child).getLostContact();
            if (lostContact) {
                if (twinGroupId == null) {
                    var lineSize = __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].notInContactLineSize;
                    editor.getPaper().path("M " + (topLineX - lineSize) + " " + (topLineY + 20) + " L " + (topLineX + lineSize) + " " + (topLineY + 20)).attr(__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].noContactLines).toBack();
                } else {}
            }
        }

        editor.getView().drawLineWithCrossings(id, leftmostX, childlineY, rightmostX, childlineY, __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipLines);
        editor.getView().drawLineWithCrossings(id, this.getX(), this.getY(), this.getX(), childlineY, __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipLines);

        //draw small non-functional childhub junction orb
        if (numPregnancies > 1) editor.getPaper().circle(this.getX(), childlineY, __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].partnershipRadius / 2).attr({ fill: "#666666", stroke: "#888888", "stroke-width": 1, "opacity": 1 });

        this._childhubConnection = editor.getPaper().setFinish();
    },

    /**
     * Changes the position of the junction to the coordinate (x,y) and updates all surrounding connections.
     *
     * @method setPos
     * @param {Number} x X coordinate relative to the Raphael canvas
     * @param {Number} y Y coordinate relative to the Raphael canvas
     * @param {Boolean} animate Set to True to animate the transition
     * @param {Function} callback Executed at the end of the animation
     */
    setPos: function ($super, x, y, animate, callback) {

        this.getHoverBox().removeHandles();
        this.getHoverBox().removeButtons();

        if (animate) {
            throw "Can't animate a partnership node";
        }

        this.mark && this.mark.remove();
        this.mark2 && this.mark2.remove();

        this.getAllGraphics().transform("t " + (x - this.getX()) + "," + (y - this.getY()) + "...");
        $super(x, y, animate, callback);

        this.updatePartnerConnections();
        this.updateChildhubConnection();
        this.updateChildlessStatusLabel();
    },

    /**
     * Removes all the graphical elements of this partnership from the canvas
     *
     * @method remove
     */
    remove: function () {
        this.getJunctionShape().remove();
        this.getHoverBox().remove();
        this._idLabel && this._idLabel.remove();
        this.getChildlessShape() && this.getChildlessShape().remove();
        this.getChildlessStatusLabel() && this.getChildlessStatusLabel().remove();
        this._childhubConnection && this._childhubConnection.remove();
        this._partnerConnections && this._partnerConnections.remove();
        this.area && this.area.remove();
        this.mark && this.mark.remove();
        this.mark2 && this.mark2.remove();
    },

    /**
     * Returns a Raphael set of graphic elements of which the icon of the Partnership consists. Does not
     * include hoverbox elements and labels.
     *
     * @method getShapes
     * @return {Raphael.st}
     */
    getShapes: function ($super) {
        return $super().push(this.getJunctionShape());
    },

    /**
     * Returns a Raphael set of all the graphics and labels associated with this Partnership. Includes the hoverbox
     * elements and labels
     *
     * @method getAllGraphics
     * @return {Raphael.st}
     */
    getAllGraphics: function ($super) {
        return editor.getPaper().set(this.getHoverBox().getBackElements(), this._idLabel, this._childlessShape).concat($super()).push(this.getHoverBox().getFrontElements());
    },

    /**
     * Displays all the appropriate labels for this Partnership in the correct layering order
     *
     * @method drawLabels
     */
    drawLabels: function () {
        // if need to add some - see PersonVisuals.drawLabels()
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = PartnershipVisuals;


//ATTACH CHILDLESS BEHAVIOR METHODS TO PARTNERSHIP
PartnershipVisuals.addMethods(__WEBPACK_IMPORTED_MODULE_0__abstractNodeVisuals__["b" /* ChildlessBehaviorVisuals */]);
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(27)))

/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__person__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__personGroupVisuals__ = __webpack_require__(173);



/**
 * PersonGroup is node that represents a grouping of an unknown number of nodes ("n"). This type of
 * node is usually used to indicate the existence of relatives without providing any other information.
 * Therefore the options for this node are limited.
 *
 * @class PersonGroup
 * @constructor
 * @extends AbstractPerson
 * @param {Number} x The x coordinate on the Raphael canvas at which the node drawing will be centered
 * @param {Number} y The y coordinate on the Raphael canvas at which the node drawing will be centered
 * @param {String} gender Either 'M', 'F' or 'U' depending on the gender
 * @param {Number} id Unique ID number
 */
const PersonGroup = Class.create(__WEBPACK_IMPORTED_MODULE_0__person__["a" /* Person */], {

    initialize: function ($super, x, y, id, properties) {
        this._numPersons = 1;
        this._comment = "";
        this._type = "PersonGroup";
        $super(x, y, id, properties);
        // already done as the last step in super():
        // this.assignProperties(properties);  
    },

    /**
     * Initializes the object responsible for creating graphics for this PersonGroup
     *
     * @method _generateGraphics
     * @param {Number} x The x coordinate of hte PersonGroup Node
     * @param {Number} y The y coordinate of hte PersonGroup Node
     * @return {PersonGroupVisuals}
     */
    _generateGraphics: function (x, y) {
        return new __WEBPACK_IMPORTED_MODULE_1__personGroupVisuals__["a" /* PersonGroupVisuals */](this, x, y);
    },

    /**
     * Always returns False - needed for compatibility with personHowerBox which uses this
     *
     * @method isProband
     */
    isProband: function () {
        return false;
    },

    /**
     * Changes the number of people who are in this PersonGroup
     *
     * @method setNumPersons
     * @param {Number} numPersons The number of people in this grouping
     */
    setNumPersons: function (numPersons) {
        this._numPersons = numPersons;
        this.getGraphics().setNumPersons(numPersons);
    },

    /**
     * Returns the number of people who are in this PersonGroup
     *
     * @method getNumPersons
     * @return {Number}
     */
    getNumPersons: function () {
        return this._numPersons;
    },

    /**
     * Changes the life status of this Person to newStatus
     *
     * @method setLifeStatus
     * @param {String} newStatus "alive", "deceased", "stillborn", "unborn", "aborted" or "miscarriage"
     */
    setLifeStatus: function ($super, newStatus) {
        $super(newStatus);
        this.getGraphics().setNumPersons(this._numPersons); // force-redraw of the "N" symbol on top of the new shape
    },

    /**
     * Returns an object containing all the properties of this node
     * except id, x, y & type 
     *
     * @method getProperties
     * @return {Object} in the form
     *
     {
       property: value
     }
     */
    getProperties: function ($super) {
        var info = $super();
        info["numPersons"] = this.getNumPersons();
        return info;
    },

    /**
     * Applies the properties found in info to this node.
     *
     * @method loadProperties
     * @param properties Object
     * @return {Boolean} True if info was successfully assigned
     */
    assignProperties: function ($super, info) {
        if ($super(info) && info.numPersons) {
            if (this.getNumPersons() != info.numPersons) {
                this.setNumPersons(info.numPersons);
            }
            return true;
        }
        return false;
    },

    /**
     * Returns an object (to be accepted by the menu) with information about this Person
     *
     * @method getSummary
     * @return {Object} Summary object for the menu
     */
    getSummary: function () {
        var disorders = [];
        this.getDisorders().forEach(function (disorder) {
            var disorderName = editor.getDisorderLegend().getDisorder(disorder).getName();
            disorders.push({ id: disorder, value: disorderName });
        });

        var cantChangeAdopted = this.isFetus() || editor.getGraph().hasToBeAdopted(this.getID());

        return {
            identifier: { value: this.getID() },
            comment: { value: this.getFirstName() },
            gender: { value: this.getGender() },
            external_ids: { value: this.getExternalID() },
            disorders: { value: disorders },
            ethnicity: { value: this.getEthnicities() },
            adopted: { value: this.isAdopted(), inactive: cantChangeAdopted },
            comments: { value: this.getComments(), inactive: false },
            state: { value: this.getLifeStatus() },
            numInGroup: { value: this.getNumPersons() },
            evaluatedGrp: { value: this.getEvaluated() }
        };
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = PersonGroup;


/***/ }),
/* 172 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__personHoverbox__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__ = __webpack_require__(12);



/**
 * PersonGroupHoverbox is a class for all the UI elements and graphics surrounding a PersonGroup node and
 * its labels. This includes the box that appears around the node when it's hovered by a mouse.
 *
 * @class GroupHoverbox
 * @extends AbstractHoverbox
 * @constructor
 * @param {PersonGroup} node The node PersonGroup for which the hoverbox is drawn
 * @param {Number} centerX The x coordinate for the hoverbox
 * @param {Number} centerY The y coordinate for the hoverbox
 * @param {Raphael.st} nodeShapes Raphaël set containing the graphical elements that make up the node
 */

const PersonGroupHoverbox = Class.create(__WEBPACK_IMPORTED_MODULE_0__personHoverbox__["a" /* PersonHoverbox */], {
    initialize: function ($super, personNode, centerX, centerY, nodeShapes) {
        var radius = __WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].radius * 2;
        $super(personNode, centerX, centerY, nodeShapes);
    },

    /**
    * Creates the handles used in this hoverbox - overriden to generate no handles 
    *
    * @method generateHandles
    * @return {Raphael.st} A set of handles
    */
    generateHandles: function ($super) {
        if (this._currentHandles !== null) return;

        if (__WEBPACK_IMPORTED_MODULE_1__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].newHandles) {}
        // TODO: singling handle for person groups?

        // else: no handles
    },

    /**
     * Creates the buttons used in this hoverbox
     *
     * @method generateButtons
     */
    generateButtons: function ($super) {
        if (this._currentButtons !== null) return;
        $super();

        // note: no call to super as we don't want default person buttons
        this.generateMenuBtn();
        this.generateDeleteBtn();
    },

    /**
     * Returns true if the menu for this node is open
     *
     * @method isMenuToggled
     * @return {Boolean}
     */
    isMenuToggled: function () {
        return this._isMenuToggled;
    },

    /**
     * Shows/hides the menu for this node
     *
     * @method toggleMenu
     */
    toggleMenu: function (isMenuToggled) {
        if (this._justClosedMenu) return;
        this._isMenuToggled = isMenuToggled;
        if (isMenuToggled) {
            this.getNode().getGraphics().unmark();
            var optBBox = this.getBoxOnHover().getBBox();
            var x = optBBox.x2;
            var y = optBBox.y;
            var position = editor.getWorkspace().canvasToDiv(x + 5, y);
            editor.getNodeGroupMenu().show(this.getNode(), position.x, position.y);
        }
    },

    /**
     * Hides the hoverbox with a fade out animation
     *
     * @method animateHideHoverZone
     */
    animateHideHoverZone: function ($super) {
        this._hidden = true;
        if (!this.isMenuToggled()) {
            var parentPartnershipNode = editor.getGraph().getParentRelationship(this.getNode().getID());
            //console.log("Node: " + this.getNode().getID() + ", parentPartnershipNode: " + parentPartnershipNode);            
            if (parentPartnershipNode && editor.getNode(parentPartnershipNode)) editor.getNode(parentPartnershipNode).getGraphics().unmarkPregnancy();
            $super();
        }
    },

    /**
     * Displays the hoverbox with a fade in animation
     *
     * @method animateDrawHoverZone
     */
    animateDrawHoverZone: function ($super) {
        this._hidden = false;
        if (!this.isMenuToggled()) {
            var parentPartnershipNode = editor.getGraph().getParentRelationship(this.getNode().getID());
            if (parentPartnershipNode && editor.getNode(parentPartnershipNode)) editor.getNode(parentPartnershipNode).getGraphics().markPregnancy();
            $super();
        }
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = PersonGroupHoverbox;


/***/ }),
/* 173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__personVisuals__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__readonlyHoverbox__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__personGroupHoverbox__ = __webpack_require__(172);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__ = __webpack_require__(12);





/**
 * Class for organizing graphics for PersonGroup nodes.
 *
 * @class PersonGroupVisuals
 * @constructor
 * @extends AbstractPersonVisuals
 * @param {PersonGroup} node The node for which this graphics are handled
 * @param {Number} x The x coordinate on the canvas
 * @param {Number} y The y coordinate on the canvas
 */

const PersonGroupVisuals = Class.create(__WEBPACK_IMPORTED_MODULE_0__personVisuals__["a" /* PersonVisuals */], {

    initialize: function ($super, node, x, y) {
        $super(node, x, y);
        this.setNumPersons(node.getNumPersons());
    },

    generateHoverbox: function (x, y) {
        if (editor.isReadOnlyMode()) {
            return new __WEBPACK_IMPORTED_MODULE_1__readonlyHoverbox__["a" /* ReadOnlyHoverbox */](this.getNode(), x, y, this.getGenderGraphics());
        } else {
            return new __WEBPACK_IMPORTED_MODULE_2__personGroupHoverbox__["a" /* PersonGroupHoverbox */](this.getNode(), x, y, this.getGenderGraphics());
        }
    },

    /**
     * Returns all the graphics associated with this PersonGroup
     *
     * @method getAllGraphics
     * @param [$super]
     * @return {Raphael.st} Raphael set containing graphics elements
     */
    getAllGraphics: function ($super) {
        return $super().push(this._label);
    },

    /**
     * Changes the label for the number of people in this group
     *
     * @method setNumPersons
     * @param {Number} numPersons The number of people in this group
     */
    setNumPersons: function (numPersons) {
        this._label && this._label.remove();
        var text = numPersons && numPersons > 1 ? String(numPersons) : "n";
        var y = this.getNode().getLifeStatus() == "aborted" || this.getNode().getLifeStatus() == "miscarriage" ? this.getY() - 12 : this.getY();
        var x = this.getNode().getLifeStatus() == "aborted" ? this.getX() + 8 : this.getX();
        this._label = editor.getPaper().text(x, y, text).attr(__WEBPACK_IMPORTED_MODULE_3__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].descendantGroupLabel);
        this._label.node.setAttribute("class", "no-mouse-interaction");
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = PersonGroupVisuals;


/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ordering__ = __webpack_require__(167);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__xcoordclass__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__queues__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__edgeOptimization__ = __webpack_require__(161);
/* harmony export (immutable) */ __webpack_exports__["a"] = PositionedGraph;






// PositionedGraph represents the pedigree tree projected to a 2D surface,
//                 i.e. both the underlying graph and node & edge X and Y coordinates

function PositionedGraph(baseG, // mandatory, BaseGraph
horizontalPersonSeparationDist, // mandatory, int
horizontalRelSeparationDist, // mandatory, int
maxInitOrderingBuckets, // optional,  int
maxOrderingIterations, // optional,  int
maxXcoordIterations, // optional,  int
performVerticalPositioning, // optional,  bool  (DynamicGraph does its own vertical positioning, so can save some time)
suggestedRanks) // optional,  array[int] - ranks suggested for all nodes
{
    this.GG = undefined; // graph without any positioning info (of type BaseGraph);
    // same as baseG, but with multi-rank edges replaced by virtual vertices/edges

    this.ranks = undefined; // 1D array: index = vertex id, value = rank
    this.maxRank = undefined; // integer:  max rank in the above array (maintained for performance reasons)

    this.order = undefined; // class: Ordering

    this.positions = undefined; // 1D array: index = vertex id, value = x-coordinate

    this.vertLevel = undefined; // class: VerticalLevels
    this.rankY = undefined; // 1D aray: index = rank, value = y-coordinate

    this.ancestors = undefined; // {}: for each node contains a set of all its ancestors and the closest relationship distance
    this.consangr = undefined; // {}: for each node a set of consanguineous relationship IDs

    this.initialize(baseG, horizontalPersonSeparationDist, horizontalRelSeparationDist, maxInitOrderingBuckets, maxOrderingIterations, maxXcoordIterations, performVerticalPositioning, suggestedRanks);
}

PositionedGraph.prototype = {

    maxInitOrderingBuckets: 5, // it may take up to ~factorial_of_this_number iterations to generate initial ordering
    maxOrderingIterations: 24, // up to so many iterations are spent optimizing initial ordering
    maxXcoordIterations: 4,
    xCoordEdgeWeightValue: true, // when optimizing edge length/curvature take
    // edge weight into account or not
    horizontalPersonSeparationDist: 10,
    horizontalTwinSeparationDist: 8,
    horizontalRelSeparationDist: 6,
    yDistanceNodeToChildhub: 20,
    yDistanceChildhubToNode: 14,
    yExtraPerHorizontalLine: 4,
    yAttachPortHeight: 1.5,

    initialize: function (baseG, horizontalPersonSeparationDist, horizontalRelSeparationDist, maxInitOrderingBuckets, maxOrderingIterations, maxXcoordIterations, performVerticalPositioning, suggestedRanks) {
        if (horizontalPersonSeparationDist) this.horizontalPersonSeparationDist = horizontalPersonSeparationDist;
        if (horizontalRelSeparationDist) this.horizontalRelSeparationDist = horizontalRelSeparationDist;
        if (maxInitOrderingBuckets) this.maxInitOrderingBuckets = maxInitOrderingBuckets;
        if (maxOrderingIterations) this.maxOrderingIterations = maxOrderingIterations;
        if (maxXcoordIterations) this.maxXcoordIterations = maxXcoordIterations;

        if (this.maxInitOrderingBuckets > 8) throw "Too many ordering buckets: number of permutations (" + this.maxInitOrderingBuckets.toString() + "!) is too big";

        var timer = new __WEBPACK_IMPORTED_MODULE_0__helpers__["g" /* Timer */]();

        // 1)
        this.ranks = this.rank(baseG, suggestedRanks);

        this.maxRank = Math.max.apply(null, this.ranks);

        timer.printSinceLast("=== Ranking runtime: ");

        // 1.1)
        // ordering algorithms needs all edges to connect nodes on neighbouring ranks only;
        // to accomodate that multi-rank edges are split into a chain of edges between new
        // "virtual" nodes on intermediate ranks, and the resulting graph is use in all
        // further algorithms
        this.GG = baseG.makeGWithSplitMultiRankEdges(this.ranks);

        //printObject( this.GG );

        // 1.2)
        // twins should always be next to each other. The easiest and fastest way to accomodate that is by
        // conbining all twins in each group into one node, connected to all the nodes all of the twins in
        // the group connect to. This reduces the size of the graph and keeps twins together
        var disconnectedTwins = this.disconnectTwins();

        // 2)
        timer.restart();

        this.order = this.ordering(this.maxInitOrderingBuckets, this.maxOrderingIterations, disconnectedTwins);

        timer.printSinceLast("=== Ordering runtime: ");

        // 2.1)
        // once ordering is known need to re-rank relationship nodes to be on the same level as the
        // lower ranked parent. Attempt to place next to one of the parents; having ordering info
        // helps to pick the parent in case parents are on the same level and not next to each other
        this.reRankRelationships();

        // once all ordering and ranking is done twins in each twin group need to be separated back into separate nodes
        this.reconnectTwins(disconnectedTwins);

        // 2.2)
        var ancestors = this.findAllAncestors();

        this.ancestors = ancestors.ancestors;
        this.consangr = ancestors.consangr;

        timer.printSinceLast("=== Ancestors + re-ranking runtime: ");

        // 3)
        this.positions = this.position();

        timer.printSinceLast("=== Positioning runtime: ");

        // 4)
        if (performVerticalPositioning) {
            this.vertLevel = this.positionVertically();
            this.rankY = this.computeRankY();
            timer.printSinceLast("=== Vertical spacing runtime: ");
        }
    },

    //=[rank]============================================================================
    rank: function (baseG, suggestedRanks) {
        // use the suggested ranks, if available.
        // Note: even if present, using suggested ranks may fail if inconsistencies are found
        //       e.g. if a user drew a new "child" edge from a node to a node with a higher or equal rank
        if (suggestedRanks) {
            var ranks = this.init_rank(baseG, suggestedRanks);
            if (ranks) {
                return ranks; // if suggested ranks are valid. if not ranks would be null
            }
        }

        // initial ranking via a spanning tree. Minimum rank == 1.
        var ranks = this.init_rank(baseG);

        // re-rank all nodes as far down the tree as possible (e.g. people with no
        // parents in the tree should be on the same level as their first documented
        // relationship partner)
        this.lower_ranks(baseG, ranks);

        return ranks;
    },

    // init ranks by computing a spanning tree over the directed graph, starting from the nodes with no parents
    init_rank: function (baseG, suggestedRanks) {
        //   Algorithm: nodes are placed in the queue when they have no unscanned in-edges.
        //   As nodes are taken off the queue, they are assigned the least rank
        //   that satisfies their in-edges, and their out-edges are marked as scanned.
        //
        //   [precondition] graph must be acyclic.

        if (baseG.v.length == 0) return [];

        var initRank = 1;

        var ranks = []; // index == vertexID, ranks[v] == rank assigned to v
        var numRankedParents = []; // index == vertexID, numRanked[v] == number of nodes which have
        //                    edges to v which were already assigned a rank

        for (var i = 0; i < baseG.getNumVertices(); i++) {
            ranks.push(-1);
            numRankedParents.push(0);
        }

        var queue = new __WEBPACK_IMPORTED_MODULE_3__queues__["a" /* Queue */](); // holds non-ranked nodes which have all their parents already ranked

        if (suggestedRanks) {
            for (var i = 0; i < suggestedRanks.length; i++) {
                var nodesAtRank = suggestedRanks[i];
                for (var j = 0; j < nodesAtRank.length; j++) {
                    ranks[nodesAtRank[j]] = i * 3 + 1;
                }
            }

            for (var v = 0; v < baseG.getNumVertices(); v++) {
                if (baseG.isPerson(v) && ranks[v] == -1) {
                    // a person node is without a rank => suggestedRanksa re bad
                    return null;
                }
                if (baseG.isRelationship(v)) {
                    queue.push(v);
                }
            }
        } else {
            var parentlessNodes = baseG.getLeafAndParentlessNodes().parentlessNodes;
            queue.setTo(parentlessNodes);
        }

        while (queue.size() > 0) {
            var nextNode = queue.pop();

            // ...assign the least rank satisfying nextParent's in-edges (which is max(parent_ranks) + 1)
            var inEdges = baseG.getInEdges(nextNode);
            var useRank = initRank;
            for (var i = 0; i < inEdges.length; i++) {
                var v = inEdges[i];
                if (ranks[v] >= useRank) useRank = ranks[v] + 1;
            }

            ranks[nextNode] = useRank;

            // add edge to spanning tree (if we need the tree):
            //  parent[nextNode] = useParent;
            //
            //  if (useParent !== undefined)
            //      spanTreeEdges[useParent].push(nextNode);

            // ...mark out-edges as scanned
            var outEdges = baseG.getOutEdges(nextNode);

            for (var u = 0; u < outEdges.length; u++) {
                var vertex = outEdges[u];

                if (suggestedRanks && ranks[vertex] != -1) {
                    if (ranks[vertex] <= ranks[nextNode]) {
                        // suggested ranks are inconsistent
                        return null;
                    }
                }

                numRankedParents[vertex]++;

                var numVertexInEdges = baseG.getInEdges(vertex).length;

                if (numRankedParents[vertex] == numVertexInEdges) {
                    queue.push(vertex); // all potential parents are ranked, now we can rank the vertex itself
                }
            }
        }

        return ranks;
    },

    lower_ranks: function (baseG, ranks) {
        if (ranks.length <= 1) return; // no nodes or only 1 node

        // re-ranks all nodes as far down the tree as possible (e.g. people with no
        // parents in the tree should be on the same level as their first documented
        // relationship partner, or as low as possible given their children relationships)

        // Algorithm:
        // 1. find disconnected components when multi-rank edges are removed (using "flood fill")
        // 2. for each component find the incoming or outgoing milti-rank edge of minimum length
        //    note1: sometimes a component may have both incoming and outgoing muti-rank edges;
        //           only one of those can be shortened and the choice is made based on edge weight
        //    note2: we can only keep track of outgoing edges as for each incoming edge there is an
        //           outgoing edge in another component, and we only shorten one edge per re-ranking iteration
        // 3. reduce all ranks by that edge's length minus 1
        // 4. once any two components are merged need to redo the entire process because the new
        //    resuting component may have other minimum in/out multi-rnak edges

        console.log("Re-ranking ranks before: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(ranks));

        while (true) {
            var nodeColor = []; // for each node which component it belongs to
            var component = []; // for each component list of vertices in the component
            var minOutEdgeInfo = []; // for each component length & weight of the shortest outgoing multi-rank edge

            for (var v = 0; v < baseG.getNumVertices(); v++) {
                nodeColor.push(null);
            }

            var currentComponentColor = 0;
            for (var v = 0; v < baseG.getNumVertices(); v++) {

                if (nodeColor[v] == null) {
                    // This node will be the first node of the next component, which
                    // includes all nodes reachable using non-multi-rank edges (any direction).
                    // All nodes in the component will be colored as "maxComponentColor"

                    var thisComponent = [];

                    var potentialLongEdges = {};

                    var queue = new __WEBPACK_IMPORTED_MODULE_3__queues__["a" /* Queue */]();
                    queue.push(v);

                    while (queue.size() > 0) {
                        var nextV = queue.pop();

                        //console.log("processing: " + nextV);
                        if (nodeColor[nextV] != null) continue;

                        nodeColor[nextV] = currentComponentColor;
                        thisComponent.push(nextV);

                        var rankV = ranks[nextV];

                        var allEdges = baseG.getAllEdgesWithWeights(nextV);
                        for (var vv in allEdges) {
                            if (allEdges.hasOwnProperty(vv) && nodeColor[vv] != currentComponentColor) {
                                var edgeLength = Math.abs(rankV - ranks[vv]);
                                if (edgeLength == 1) {
                                    // using only edges between neighbouring ranks
                                    if (nodeColor[vv] == null) queue.push(vv); // add nodes not in any component to this one
                                } else {
                                    // save all long edges into a separate list, and check it once component is fully computed
                                    if (allEdges[vv].out) {
                                        potentialLongEdges[vv] = { "length": edgeLength, "weight": allEdges[vv].weight };
                                    }
                                }
                            }
                        }
                    }

                    component[currentComponentColor] = thisComponent;
                    minOutEdgeInfo[currentComponentColor] = { "length": Infinity, "weight": 0 };

                    // go over all long edges originating from nodes in the component,
                    // and find the shortest long edge which goes out of component                    
                    for (var vv in potentialLongEdges) {
                        if (potentialLongEdges.hasOwnProperty(vv)) {
                            if (nodeColor[vv] == currentComponentColor) continue; // ignore nodes which are now in the same component

                            var nextEdge = potentialLongEdges[vv];

                            if (nextEdge.length < minOutEdgeInfo[currentComponentColor].length || nextEdge.length == minOutEdgeInfo[currentComponentColor].length && nextEdge.weight > minOutEdgeInfo[currentComponentColor].weight) {
                                minOutEdgeInfo[currentComponentColor] = nextEdge;
                            }
                        }
                    }

                    currentComponentColor++;
                }
            }

            //console.log("components: " + stringifyObject(component));
            if (currentComponentColor == 1) return; // only one component - done re-ranking

            // for each component we should either increase the rank (to shorten out edges) or
            // decrease it (to shorten in-edges. If only in- (or only out-) edges are present there
            // is no choice, if there are both pick the direction where minimum length edge has higher
            // weight (TODO: alternatively can pick the one which reduces total edge len*weight more,
            // but the way pedigrees are entered by the user the two methods are probably equivalent in practice)

            // However we do not want negative ranks, and we can accomodate this by always increasing
            // the rank (as for each decrease there is an equivalent increase in the other component).

            // so we find the heaviest out edge and increase the rank of the source component
            // - in case of a tie use the shortest of the heaviest edges
            var minComponent = 0;
            for (var i = 1; i < component.length; i++) {
                if (minOutEdgeInfo[i].weight > minOutEdgeInfo[minComponent].weight || minOutEdgeInfo[i].weight == minOutEdgeInfo[minComponent].weight && minOutEdgeInfo[i].length < minOutEdgeInfo[minComponent].length) {
                    minComponent = i;
                }
            }

            //console.log("MinLen: " + stringifyObject(minOutEdgeLength));

            // reduce rank of all nodes in component "minComponent" by minEdgeLength[minComponent] - 1
            for (var v = 0; v < component[minComponent].length; v++) {
                ranks[component[minComponent][v]] += minOutEdgeInfo[minComponent].length - 1;
            }

            //console.log("Re-ranking ranks update: " + stringifyObject(ranks));
        }

        console.log("Ranks after re-ranking: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(ranks));
    },
    //============================================================================[rank]=


    //=[ordering]========================================================================
    ordering: function (maxInitOrderingBuckets, maxOrderingIterations, disconnectedTwins) {
        if (this.GG.v.length == 0) return new __WEBPACK_IMPORTED_MODULE_1__ordering__["a" /* Ordering */]([], []); // empty graph

        var best = undefined;
        var bestCrossings = Infinity;

        // we find leaf nodes and rootless nodes because removing some of them improves both speed and quality of ordering algorithms
        // (e.g. we know that leaf siblings should be placed together, so might as well just leave one in the graph for ordering purposes;
        //  similarly if there is apartner with no parents and no other partnerships it is easy to position that person next to his or her
        //  partner once everything else is positioned, and removing nodes speed all the graph-traversal & edge-cross-computation algorithms)
        var leafAndRootlessInfo = this.GG.getLeafAndParentlessNodes();

        var rootlessPartners = this.findAllRootlessPartners(leafAndRootlessInfo);
        this.disconnectRootlessPartners(rootlessPartners);

        var leafSiblings = this.findLeafSiblings(leafAndRootlessInfo);
        this.disconnectLeafSiblings(leafSiblings);

        var permutationsRoots = this.computePossibleParentlessNodePermutations(maxInitOrderingBuckets, leafAndRootlessInfo, rootlessPartners);
        var permutationsLeafs = this.computePossibleLeafNodePermutations(maxInitOrderingBuckets, leafAndRootlessInfo, leafSiblings, disconnectedTwins);

        var initOrderIterTotal = 0; // just for reporting

        var useStack = false;

        var timer = new __WEBPACK_IMPORTED_MODULE_0__helpers__["g" /* Timer */]();

        //permutationsRoots = [[27, 0, 5, 4, 8, 9, 1, 28]];
        //useStack = true;

        while (true) {
            //var timer2 = new Timer();
            for (var initOrderIter = 0; initOrderIter < permutationsRoots.length; initOrderIter++) {
                initOrderIterTotal++;

                order = this.init_order_top_to_bottom(permutationsRoots[initOrderIter], useStack);

                this.transpose(order, false, bestCrossings * 4 + 5); // fix locally-fixable edge crossings,
                // but do not bother doing minor optimizations (for performance reasons)

                var numCrossings = this.edge_crossing(order);

                if (numCrossings < bestCrossings) {
                    best = order.copy();
                    bestCrossings = numCrossings;
                    //console.log("UsingP: " + stringifyObject(permutationsRoots[initOrderIter]) + " " + useStack.toString() + "  SCORE: " + numCrossings);
                    if (numCrossings == 0) break;
                }
            }
            //timer2.printSinceLast("Top-to-bottom: ");

            if (bestCrossings == 0) break;
            for (var initOrderIter2 = 0; initOrderIter2 < permutationsLeafs.length; initOrderIter2++) {
                initOrderIterTotal++;

                order = this.init_order_bottom_to_top(permutationsLeafs[initOrderIter2], useStack);

                this.transpose(order, false, bestCrossings * 4 + 5); // fix locally-fixable edge crossings

                var numCrossings = this.edge_crossing(order);

                if (numCrossings < bestCrossings) {
                    best = order.copy();
                    bestCrossings = numCrossings;
                    //console.log("UsingL: " + stringifyObject(permutationsLeafs[initOrderIter2]) + " " + useStack.toString() + "  SCORE: " + numCrossings);
                    if (numCrossings == 0) break;
                }
            }
            //timer2.printSinceLast("Bottom-to-top: ");

            if (bestCrossings == 0) break;
            if (useStack) break;
            useStack = true;
        }

        timer.printSinceLast("Initial ordering: ");
        var bestEdgeLengthScore = this.edge_length_score(best);

        console.log("Initial ordering: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(best.order));
        console.log("Initial ordering:  numCrossings= " + bestCrossings + ",  edhgeLengthScore= " + bestEdgeLengthScore);

        //this.reconnectRootlessPartners(best, rootlessPartners);
        //this.reconnectLeafSiblings(best, leafSiblings);
        //return best;

        var noChangeIterations = 0;

        var order = best.copy();

        for (var i = 0; i < maxOrderingIterations; i++) {
            //if (bestCrossings == 0) break;   // still want to optimize for edge lengths

            // try to optimize based on a heuristic: just do it without checking if the result
            // is good or not. The layout may be not as good rigth away but better after a few
            // iterations
            var changed = this.wmedian(order, i);

            //console.log("median: " + stringifyObject(order.order));

            // try to optimize locally (fix easily-fixable edge crossings, put children
            // and partners closer to each other) checking if each step is useful and
            // discarding bad adjustments (i.e. guaranteed to either improve or leave as is)
            this.transpose(order, true);

            //console.log("transpose: " + stringifyObject(order.order));

            var numCrossings = this.edge_crossing(order);

            var edgeLengthScore = this.edge_length_score(order);

            if (numCrossings < bestCrossings || numCrossings == bestCrossings && edgeLengthScore < bestEdgeLengthScore) {
                console.log("ordering: new better one selected (" + numCrossings + " crossings, " + edgeLengthScore + " edgeLengthScore)");

                best = order.copy();
                bestCrossings = numCrossings;
                bestEdgeLengthScore = edgeLengthScore;
                noChangeIterations = 0;
            } else {
                if (!changed) noChangeIterations++;
                if (noChangeIterations == 6) break;
            }
        }

        this.transpose(best, true);

        this.reconnectRootlessPartners(best, rootlessPartners);
        this.transpose(best, true);

        this.reconnectLeafSiblings(best, leafSiblings);
        //this.transpose(best, true);

        timer.restart();

        //console.log("-----> " + stringifyObject(this.GG));

        // try to optimize long edge placement (bad adjustments are discarded)
        var newBestCrossings = this.transposeLongEdges(best, bestCrossings);

        timer.printSinceLast("Ordering long edges: ");

        console.log("Ordering stats:  initOrderIter= " + initOrderIterTotal + ",  reOrderingIter= " + i + ",  noChangeIterations= " + noChangeIterations);
        console.log("Final ordering: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(best.order));
        console.log("Final ordering:  numCrossings= " + newBestCrossings);

        return best;
    },

    findAllRootlessPartners: function (leafAndRootlessInfo) {
        // finds all people without parents which are only connected to one non-rootless node.
        // we know it should be placed right next to that partner in any optimal ordering

        var rootlessPartners = {};

        for (var i = 0; i < leafAndRootlessInfo.parentlessNodes.length; i++) {
            var v = leafAndRootlessInfo.parentlessNodes[i];

            if (this.GG.getOutEdges(v).length == 1 && this.GG.getOutEdges(v).length > 0) {
                var relationShipNode = this.GG.getOutEdges(v)[0];

                var parents = this.GG.getInEdges(relationShipNode);

                var otherParent = parents[0] == v ? parents[1] : parents[0];

                //if (this.GG.getInEdges(otherParent).length > 0 || v > otherParent || this.GG.getOutEdges(otherParent).length > 1) {
                if (this.GG.getInEdges(otherParent).length > 0) {
                    if (rootlessPartners[otherParent]) rootlessPartners[otherParent].push(v);else rootlessPartners[otherParent] = [v];
                }
            }
        }

        //console.log("Found rootless partners: " + stringifyObject(rootlessPartners));
        return rootlessPartners;
    },

    disconnectRootlessPartners: function (rootlessPartners) {
        for (var p in rootlessPartners) {
            if (rootlessPartners.hasOwnProperty(p)) {
                var rootless = rootlessPartners[p];
                for (var i = 0; i < rootless.length; i++) {
                    var v = rootless[i];
                    var outEdges = this.GG.getOutEdges(v);
                    var relNode = outEdges[0];

                    // remove edge v->relNode from the graph. Only remove the in-edge, as outedge will never be scanned
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["j" /* removeFirstOccurrenceByValue */])(this.GG.inedges[relNode], v); // was [p,v], becomes [p]
                }
            }
        }
    },

    reconnectRootlessPartners: function (order, rootlessPartners) {
        //console.log("Order before reconnect rootless: " + stringifyObject(order));

        for (var p in rootlessPartners) {
            if (rootlessPartners.hasOwnProperty(p)) {

                // now check all rootless partners of p. Will place them next to p in the ordering

                var partnersToTheLeft = 0;
                var partnersToTheRight = 0;
                var pOrder = order.vOrder[p];
                var rank = this.ranks[p];

                var pRelationships = this.GG.getOutEdges(p);
                for (var j = 0; j < pRelationships.length; j++) {
                    if (this.GG.isRelationship(pRelationships[j])) {
                        // ignore long edges
                        var parents = this.GG.getInEdges(pRelationships[j]);
                        if (parents.length == 2) {
                            // e.g. skip relationships with removed parents
                            var partner = parents[0] == p ? parents[1] : parents[0];
                            if (order.vOrder[partner] > pOrder) partnersToTheRight++;else partnersToTheLeft++;
                        }
                    }
                }

                var rootless = rootlessPartners[p];
                for (var i = 0; i < rootless.length; i++) {
                    var v = rootless[i];
                    var outEdges = this.GG.getOutEdges(v);
                    var relNode = outEdges[0];

                    // add back the v->relNode edge
                    this.GG.inedges[relNode].push(v); // was [p], becomes [p,v]

                    // insert v into ordering: insert on the side with less partners.
                    // ideally we should insert according to the relationship node order, but that will be auto-fixed by transpose()

                    if (partnersToTheRight <= partnersToTheLeft) {
                        partnersToTheRight++;
                        order.insert(rank, pOrder + 1, v);
                    } else {
                        partnersToTheLeft++;
                        order.insert(rank, pOrder, v);
                    }
                }
            }
        }

        //console.log("Order after reconnect rootless: " + stringifyObject(order));
    },

    findLeafSiblings: function (leafAndRootlessInfo) {
        // finds all siblings of non-leaf people which are leaves

        var leafSiblings = {};

        for (var i = 0; i < leafAndRootlessInfo.leafNodes.length; i++) {
            var v = leafAndRootlessInfo.leafNodes[i];

            var childHubNode = this.GG.getInEdges(v)[0];

            if (leafSiblings.hasOwnProperty(childHubNode)) continue; // we've already processed children of this childhub

            var children = this.GG.getOutEdges(childHubNode);

            if (children.length > 1) {
                leafSiblings[childHubNode] = [];

                var keepChild = v; // need to keep at least one leaf per childhub so that
                // bottom-to-top ordering has an option of juggling with this leaf/childhub

                for (var j = 0; j < children.length; j++) {
                    var child = children[j];
                    var outNum = this.GG.getOutEdges(child).length;

                    if (child != keepChild && outNum == 0) leafSiblings[childHubNode].push(child);
                }
            }
        }

        //console.log("Found leaf siblings: " + stringifyObject(leafSiblings));
        return leafSiblings;
    },

    disconnectLeafSiblings: function (leafSiblings) {
        for (var p in leafSiblings) {
            if (leafSiblings.hasOwnProperty(p)) {
                var leaves = leafSiblings[p];
                for (var i = 0; i < leaves.length; i++) {
                    var l = leaves[i];

                    // remove edge p->l from the graph
                    // (don't bother about the weight, and ignore in-edge as it wil never be scanned before re-connection)

                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["j" /* removeFirstOccurrenceByValue */])(this.GG.v[p], l);
                }
            }
        }
    },

    reconnectLeafSiblings: function (order, leafSiblings) {
        //console.log("Order before reconnect leaves: " + stringifyObject(order));

        for (var p in leafSiblings) {
            if (leafSiblings.hasOwnProperty(p)) {
                var leaves = leafSiblings[p];
                for (var i = 0; i < leaves.length; i++) {
                    var l = leaves[i];

                    //console.log("inserting: " + l);

                    // add back the p->l edge
                    this.GG.v[p].push(l);

                    var rank = this.ranks[l];

                    order.insert(rank, 0, l);

                    var bestO = 0;
                    var bestCross = this.edge_crossing(order, rank);
                    var bestScore = this.edge_length_score(order, rank);

                    // insert l at the best possible order
                    for (var o = 0; o < order.order[rank].length - 1; o++) {

                        order.exchange(rank, o, o + 1);

                        var newEdgeCrossings = this.edge_crossing(order, rank);
                        var newLengthScore = this.edge_length_score(order, rank);

                        //console.log("order: " + order.vOrder[l] + ", cross: " + newEdgeCrossings);

                        if (newEdgeCrossings < bestCross || newEdgeCrossings == bestCross && newLengthScore < bestScore) {
                            bestO = o + 1;
                            bestCross = newEdgeCrossings;
                            bestScore = newLengthScore;
                        }
                    }

                    order.moveVertexToOrder(rank, order.vOrder[l], bestO);

                    //console.log("inserted at: " + order.vOrder[l]);
                }
            }
        }
        //console.log("Order after reconnect leaves: " + stringifyObject(order));
    },

    disconnectTwins: function () {
        var disconnectedTwins = {};

        var handled = {};
        for (var v = 0; v <= this.GG.getMaxRealVertexId(); v++) {
            if (handled[v]) continue;
            if (!this.GG.isPerson(v)) continue;
            var twinGroupId = this.GG.getTwinGroupId(v);
            if (twinGroupId == null) continue;

            disconnectedTwins[v] = [];

            var childhub = this.GG.getInEdges(v)[0];
            var allTwins = this.GG.getAllTwinsOf(v);
            for (var i = 0; i < allTwins.length; i++) {
                var twin = allTwins[i];
                if (twin == v) continue;

                // 1) remove connection from childhub to twin
                // 2) replace in-edges for all nodes twin connects to by an inedge from v
                // 3) add all twin's outedges to v
                // 4) add twin to the backup list of twins of v

                // 1
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["j" /* removeFirstOccurrenceByValue */])(this.GG.v[childhub], twin);
                // 2 + 3
                var outEdges = this.GG.getOutEdges(twin);
                for (var j = 0; j < outEdges.length; j++) {
                    var rel = outEdges[j];
                    replaceInArray(this.GG.inedges[rel], twin, v);
                    this.GG.v[v].push(rel);
                    // need to keep in mind the special case of two twins in a relationship
                    if (this.GG.weights[v].hasOwnProperty(rel)) this.GG.weights[v][rel] += this.GG.weights[twin][rel]; // sum the weights
                    else this.GG.weights[v][rel] = this.GG.weights[twin][rel]; // use the other twin's weight
                }
                // 4
                disconnectedTwins[v].push(twin);

                handled[twin] = true;

                //console.log("REMOVED TWIN " + twin);
            }
        }

        return disconnectedTwins;
    },

    reconnectTwins: function (disconnectedTwins) {
        for (var v in disconnectedTwins) {
            if (disconnectedTwins.hasOwnProperty(v)) {

                var rank = this.ranks[v];

                var childhub = this.GG.getInEdges(v)[0];

                var allDisconnectedTwins = disconnectedTwins[v];

                // sort twins by number of reationships, so that twins with no relationships are inserted last
                var GG = this.GG;
                var byNumberOfRelationships = function (a, b) {
                    var an = GG.getOutEdges(a).length;
                    var bn = GG.getOutEdges(b).length;
                    return bn - an;
                };
                allDisconnectedTwins.sort(byNumberOfRelationships);

                for (var i = 0; i < allDisconnectedTwins.length; i++) {
                    var twin = allDisconnectedTwins[i];

                    // 1) remove outedges which actually belong to twin from v (needed for next step)
                    // 2) find the position to reinsert the twin & insert it
                    // 3) restore connection from childhub to twin
                    // 4) restore in-edges for all nodes twin connects to to twin

                    //1
                    var outEdges = this.GG.getOutEdges(twin);
                    for (var j = 0; j < outEdges.length; j++) {
                        var rel = outEdges[j];
                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["j" /* removeFirstOccurrenceByValue */])(this.GG.inedges[rel], v);
                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["j" /* removeFirstOccurrenceByValue */])(this.GG.v[v], rel);

                        // need to keep in mind the spcial case of two twins in a relationship; if
                        // there is no relationship => weight[v][rel] == weight[twin][rel]
                        if (this.GG.weights[v][rel] == this.GG.weights[twin][rel]) delete this.GG.weights[v][rel];else
                            // otherwise it is twice as big and need to cut in half to get back to original value
                            this.GG.weights[v][rel] -= this.GG.weights[twin][rel];

                        this.GG.inedges[rel].push(twin);
                    }
                    //2
                    var insertOrder = this.findBestTwinInsertPosition(twin, this.GG.getOutEdges(twin), this.order);
                    this.order.insert(rank, insertOrder, twin);
                    //3 + 4
                    this.GG.v[childhub].push(twin);

                    // handle special case of a relationship between two twins - best handle it after all twins have been reinserted
                    // tested by Testcase "3c"
                    var groupID = this.GG.getTwinGroupId(twin);
                    var outEdges = this.GG.getOutEdges(twin);
                    for (var j = 0; j < outEdges.length; j++) {
                        var rel = outEdges[j];
                        if (this.GG.isVirtual(rel)) continue;
                        var parents = this.GG.getInEdges(rel);
                        var otherParent = parents[0] == twin ? parents[1] : parents[0];
                        if (this.GG.getTwinGroupId(otherParent) == groupID && // the other partner is this twin's twin
                        this.GG.hasEdge(childhub, otherParent)) {
                            // and both twins have been re-inserted already
                            // the twin just re-inserted has a relationship with another twin (which has been re-inserted as well)
                            //console.log("RELAT between " + twin + " and " + otherParent);
                            // TODO: can do a smarter thing and rearrange twins based on other relationships.
                            //       but since this is a rare case for now just do the simple improvement
                            var orderRel = this.order.vOrder[rel];
                            var orderTwin1 = this.order.vOrder[twin];
                            var orderTwin2 = this.order.vOrder[otherParent];
                            if (Math.abs(orderTwin1 - orderTwin2) != 1) {
                                if (this.GG.getOutEdges(twin).length == 1) {
                                    if (orderTwin1 < orderTwin2) this.order.moveVertexToOrder(rank, orderTwin1, orderTwin2);else this.order.moveVertexToOrder(rank, orderTwin1, orderTwin2 + 1);
                                } else if (this.GG.getOutEdges(otherParent).length == 1) {
                                    if (orderTwin2 < orderTwin1) this.order.moveVertexToOrder(rank, orderTwin2, orderTwin1);else this.order.moveVertexToOrder(rank, orderTwin2, orderTwin1 + 1);
                                } else continue; // twins are not next to each other and both have multiple relationships: TODO

                                // update orders after possible re-arrangement of nodes
                                orderRel = this.order.vOrder[rel];
                                orderTwin1 = this.order.vOrder[twin];
                                orderTwin2 = this.order.vOrder[otherParent];
                            }
                            // insert rel inbetween the twins (e.g. after leftmost of the twins and before rightmost
                            //console.log("order rel: " + orderRel + ", Twin1: " + orderTwin1 + ", Twin2: " + orderTwin2);
                            if (orderTwin1 < orderTwin2) this.order.moveVertexToOrder(rank, orderRel, orderTwin2);else this.order.moveVertexToOrder(rank, orderRel, orderTwin1);
                        }
                    }
                }
            }
        }
    },

    computePossibleParentlessNodePermutations: function (maxInitOrderingBuckets, leafAndRootlessInfo, rootlessPartners) {
        // 1) split all parentless nodes into at most maxInitOrderingBuckets groups/buckets
        // 2) compute all possible permutations of these groups discarding mirror copies (e.g. [1,2,3] and [3,2,1])
        // 3) return the list of permutations, with the default ordering first in the list

        var buckets = [];
        // 1) detect mini-groups: if two parentless nodes are connected by a relationship and not
        //    connected to anything else treat them as one node (they should be close to each other)
        // 2) split all nodes into at most maxInitOrderingBuckets buckets.
        //    note: if there are less nodes (counting a sub-group from #1 as one node) than max ##
        //           of buckets it is ok, if there are more then have to space them evenly into the buckets.
        // note: each bucket should be an array of node IDs, even if there is only one ID

        console.log("maxInitOrderingBuckets: " + maxInitOrderingBuckets);

        var handled = {};

        for (var p in rootlessPartners) {
            if (rootlessPartners.hasOwnProperty(p)) {
                var rootless = rootlessPartners[p];
                for (var i = 0; i < rootless.length; i++) handled[rootless[i]] = true; // those nodes will be automatically added at correct ordering later
            }
        }

        for (var i = 0; i < leafAndRootlessInfo.parentlessNodes.length; i++) {
            var v = leafAndRootlessInfo.parentlessNodes[i];

            if (handled.hasOwnProperty(v)) continue;

            var nextBucket = [];

            nextBucket.push(v);
            handled[v] = true;

            // essy grouping: place parents which are only connected to the same relationship in the same bucket
            if (this.GG.getOutEdges(v).length == 1) {
                var rel = this.GG.getOutEdges(v)[0];
                var parents = this.GG.getInEdges(rel);

                var otherPartner = parents[0] == v ? parents[1] : parents[0];

                if (!handled.hasOwnProperty(otherPartner) && this.GG.getInEdges(otherPartner).length == 0 && this.GG.getOutEdges(otherPartner).length == 1) {
                    // the other partner has no parents && only this relationhsip
                    nextBucket.push(otherPartner);
                    handled[otherPartner] = true;
                }
            }

            buckets.push(nextBucket);
        }

        // if number of buckets is large, merge some (closely related) buckets
        // until the number of buckets is no more than the specified maximum
        if (buckets.length > maxInitOrderingBuckets) this.mergeBucketsUntilNoMoreThanGivenLeft(buckets, maxInitOrderingBuckets);

        var permutations = [];

        // Now compute all possible permutations of the buckets
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["n" /* permute2DArrayInFirstDimension */])(permutations, buckets, 0);

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["o" /* printObject */])(buckets);
        //printObject(permutations);
        //permutations = [ leafAndRootlessInfo.parentlessNodes ];  //DEBUG: no permutations
        //permutations = [[5,4,0,1,2,9]];

        console.log("Found " + permutations.length + " permutations of parentless nodes");

        return permutations;
    },

    computePossibleLeafNodePermutations: function (maxInitOrderingBuckets, leafAndRootlessInfo, leafSiblings, disconnectedTwins) {
        // see computePossibleParentlessNodePermutations

        var buckets = [];
        // 1) detect mini-groups: if two leaf nodes are connected to a childhub and not
        //    connected to anything else treat them as one node (they should be close to each other)
        // 2) split all nodes into at most maxInitOrderingBuckets buckets.

        var handled = {};
        for (var p in leafSiblings) {
            if (leafSiblings.hasOwnProperty(p)) {
                var leaves = leafSiblings[p];
                for (var i = 0; i < leaves.length; i++) handled[leaves[i]] = true; // these nodes (leaves) will be automatically added at correct ordering later
            }
        }
        for (var p in disconnectedTwins) {
            if (disconnectedTwins.hasOwnProperty(p)) {
                var twins = disconnectedTwins[p];
                for (var i = 0; i < twins.length; i++) handled[twins[i]] = true; // these nodes (twis) will be automatically added at correct ordering later
            }
        }

        var nextBucket = 0;
        for (var i = 0; i < leafAndRootlessInfo.leafNodes.length; i++) {
            var v = leafAndRootlessInfo.leafNodes[i];

            if (handled.hasOwnProperty(v)) continue;

            var nextBucket = [];

            nextBucket.push(v);
            handled[v] = true;

            if (this.GG.getInEdges(v).length != 1) throw "Assertion failed: only one in edge into a leaf node";
            var childhubNode = this.GG.getInEdges(v)[0];

            // find all nodes which are only connected to V's childhub
            for (var j = i + 1; j < leafAndRootlessInfo.leafNodes.length; j++) {
                var u = leafAndRootlessInfo.leafNodes[j];
                if (handled.hasOwnProperty(u)) continue;

                var childhubNodeU = this.GG.getInEdges(u)[0];

                if (childhubNode == childhubNodeU) {
                    nextBucket.push(u);
                    handled[u] = true;
                }
            }

            buckets.push(nextBucket);
        }

        // if number of buckets is large, merge some (closely related) buckets
        // until the number of buckets is no more than the specified maximum
        if (buckets.length > maxInitOrderingBuckets) this.mergeBucketsUntilNoMoreThanGivenLeft(buckets, maxInitOrderingBuckets, true /* use in-edges when computing closeness */);

        var permutations = [];

        // Now compute all possible permutations of the buckets
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["n" /* permute2DArrayInFirstDimension */])(permutations, buckets, 0);

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["o" /* printObject */])(buckets);
        console.log("Found " + permutations.length + " permutations of leaf nodes");

        return permutations;
    },

    mergeBucketsUntilNoMoreThanGivenLeft: function (buckets, maxInitOrderingBuckets, useInEdges) {
        console.log("original buckets: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(buckets));

        while (buckets.length > maxInitOrderingBuckets && this.mergeMostRelatedBuckets(buckets, useInEdges));

        console.log("merged buckets: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(buckets));
    },

    mergeMostRelatedBuckets: function (buckets, useInEdges) {
        // 1. find two most related buckets
        // 2. merge the buckets

        //console.log("original buckets: " + stringifyObject(buckets));

        var minDistance = Infinity;
        var bucket1 = 0;
        var bucket2 = 1;

        //var timer = new Timer();

        for (var i = 0; i < buckets.length - 1; i++) for (var j = i + 1; j < buckets.length; j++) {
            var dist = this.findDistanceBetweenBuckets(buckets[i], buckets[j], useInEdges);

            //console.log("distance between buckets " + i + " and " + j + " is " + dist);

            // pick most closely related buckets for merging. Break ties by bucket size (prefer smaller resulting buckets)
            if (dist < minDistance || dist == minDistance && buckets[i].length + buckets[j].length < buckets[bucket1].length + buckets[bucket2].length) {
                minDistance = dist;
                bucket1 = i;
                bucket2 = j;
            }
        }

        //timer.printSinceLast("Compute distance between buckets: ");

        if (minDistance == Infinity) {
            throw "Assumption failed: unrelated buckets";
        }

        // merge all items from bucket1 into bucket2
        for (var i = 0; i < buckets[bucket2].length; i++) {
            buckets[bucket1].push(buckets[bucket2][i]);
        }

        buckets.splice(bucket2, 1); // remove bucket2

        //console.log("merged buckets: " + stringifyObject(buckets));

        return true; // was able to merge some buckets
    },

    findDistanceBetweenBuckets: function (bucket1nodes, bucket2nodes, useInEdges) {
        // only looks for common relatives in one direction: using inEdges iff useInEdges and outEdges otherwise
        var distance = [];

        for (var i = 0; i < bucket1nodes.length; i++) distance[bucket1nodes[i]] = 1;
        for (var i = 0; i < bucket2nodes.length; i++) distance[bucket2nodes[i]] = -1;

        var queue1 = new __WEBPACK_IMPORTED_MODULE_3__queues__["a" /* Queue */]();
        queue1.setTo(bucket1nodes);

        var queue2 = new __WEBPACK_IMPORTED_MODULE_3__queues__["a" /* Queue */]();
        queue2.setTo(bucket2nodes);

        var iter = 0; // safeguard against infinite loop
        while (iter < 100) {
            iter++;

            if (queue1.size() == 0 && queue2.size() == 0) return Infinity; // buckets are not related/not mergeable

            var nextQueue1 = new __WEBPACK_IMPORTED_MODULE_3__queues__["a" /* Queue */]();
            while (queue1.size() > 0) {
                var nextNode = queue1.pop();

                var dist = distance[nextNode];

                var edges = useInEdges ? this.GG.getInEdges(nextNode) : this.GG.getOutEdges(nextNode);

                for (var j = 0; j < edges.length; j++) {
                    var nextV = edges[j];
                    if (distance[nextV] < 0) return -distance[nextV] + dist; // actually distance is (return_value - 1), but it does not matter for this algorithm
                    distance[nextV] = dist + 1;
                    nextQueue1.push(nextV);
                }
            }
            queue1 = nextQueue1;

            var nextQueue2 = new __WEBPACK_IMPORTED_MODULE_3__queues__["a" /* Queue */]();
            while (queue2.size() > 0) {
                var nextNode = queue2.pop();

                var dist = distance[nextNode]; // a negative number for nodes in queue2

                var edges = useInEdges ? this.GG.getInEdges(nextNode) : this.GG.getOutEdges(nextNode);

                for (var j = 0; j < edges.length; j++) {
                    var nextV = edges[j];
                    if (distance[nextV] > 0) return distance[nextV] - dist;
                    distance[nextV] = dist - 1;
                    nextQueue2.push(nextV);
                }
            }
            queue2 = nextQueue2;
        }

        throw "Assertion failed: possible loop detected";
    },

    init_order_top_to_bottom: function (parentlessNodes, useStack) {
        // initially orders the nodes in each rank by a depth-first or breadth-first
        // searches starting with vertices of minimum rank. Vertices are assigned positions
        // in their ranks in left-to-right order as the search progresses.

        var order = []; // array of arrays - for each rank list of vertices in order
        var vOrder = []; // array - for each v vOrder[v] = order within rank

        for (var r = 0; r <= this.maxRank; r++) order[r] = [];

        for (var i = 0; i < this.GG.getNumVertices(); i++) vOrder[i] = undefined;

        // Use BFS -----------------------------
        var queue = useStack ? new Stack() : new __WEBPACK_IMPORTED_MODULE_3__queues__["a" /* Queue */]();
        queue.setTo(parentlessNodes);

        //console.log("Use stacK: " + useStack + ", parentless: " + stringifyObject(parentlessNodes));

        while (queue.size() > 0) {
            var next = queue.pop();
            // we may have already assigned this vertex a rank
            if (vOrder[next] != undefined) continue;

            // assign next available order at next's rank
            var rank = this.ranks[next];

            var nextOrder = order[rank].length;
            vOrder[next] = nextOrder;
            order[rank].push(next);

            // add all children to the queue
            var outEdges = this.GG.getOutEdges(next);

            //alreadyOrderedSortFunc = function(a,b){return b-a};
            //outEdges.sort(alreadyOrderedSortFunc);

            for (var u = 0; u < outEdges.length; u++) queue.push(outEdges[u]);
        }
        //--------------------------------------

        //var o = new Ordering(order, vOrder);
        //printObject(o);
        //return o;
        return new __WEBPACK_IMPORTED_MODULE_1__ordering__["a" /* Ordering */](order, vOrder);
    },

    init_order_bottom_to_top: function (leafNodes, useStack) {
        // initially orders the nodes in each rank using depth-first or breadth-first
        // searches starting with he leaf vertices. Vertices are assigned positions in
        // their ranks in left-to-right order as the search progresses.

        var order = []; // array of arrays - for each rank list of vertices in order
        var vOrder = []; // array - for each v vOrder[v] = order within rank

        for (var r = 0; r <= this.maxRank; r++) order[r] = [];

        for (var i = 0; i < this.GG.getNumVertices(); i++) vOrder[i] = undefined;

        var queue = useStack ? new Stack() : new __WEBPACK_IMPORTED_MODULE_3__queues__["a" /* Queue */]();
        queue.setTo(leafNodes);

        while (queue.size() > 0) {
            var next = queue.pop();
            // we may have already assigned this vertex a rank
            if (vOrder[next] != undefined) continue;

            // assign next available order at next's rank
            var rank = this.ranks[next];

            var nextOrder = order[rank].length;
            vOrder[next] = nextOrder;
            order[rank].push(next);

            // add all children to the queue
            var inEdges = this.GG.getInEdges(next);

            for (var u = 0; u < inEdges.length; u++) queue.push(inEdges[u]);
        }

        return new __WEBPACK_IMPORTED_MODULE_1__ordering__["a" /* Ordering */](order, vOrder);
    },

    edge_length_score: function (order, onlyRank) {
        // Returns the penalty score that penalizes:
        //   higher priority: people in a relationship being far from each other
        //                    (higher penalty for greater distance)
        //   lower priority:  children of the same relationship not being close to each other
        //                    (higher penalty for greater distance between leftmost and rightmost child)
        //   lowest priority: father not being on the left, mother notbeing on the right
        //                    (constant penalty for each case)

        var totalEdgeLengthInPositions = 0;
        var totalEdgeLengthInChildren = 0;
        var totalPenaltyForFatherOnRight = 0; // penalty for not having father on the left/mother on the right
        var totalPenaltyForChildAgeOrder = 0; // penalty for not having children ordered by age

        for (var i = 0; i < this.GG.getNumVertices(); i++) {

            if (onlyRank) {
                var rank = this.ranks[i];
                if (rank < onlyRank - 1 || rank > onlyRank + 1) continue;
            }

            if (this.GG.isRelationship(i)) {
                var parents = this.GG.getInEdges(i);

                if (parents.length == 2) {
                    // while each relationship has 2 parents, during ordering some parents may be "unplugged" to simplify the graph
                    // only if parents have the same rank
                    if (this.ranks[parents[0]] != this.ranks[parents[1]]) continue;

                    var order1 = order.vOrder[parents[0]];
                    var order2 = order.vOrder[parents[1]];

                    totalEdgeLengthInPositions += Math.abs(order1 - order2);

                    // penalty, if any, for father on the left, mother on the right
                    var leftParent = order1 < order2 ? parents[0] : parents[1];
                    var genderOfLeft = this.GG.properties[leftParent]["gender"];
                    if (genderOfLeft == "F") totalPenaltyForFatherOnRight++;
                }
            }

            if (this.GG.isChildhub(i)) {
                // get the distance between the rightmost and leftmost child
                var children = this.GG.getOutEdges(i);
                if (children.length > 1) {
                    var orderedChildren = order.sortByOrder(children);

                    var minOrder = order.vOrder[orderedChildren[0]];
                    var maxOrder = order.vOrder[orderedChildren[orderedChildren.length - 1]];
                    totalEdgeLengthInChildren += maxOrder - minOrder;

                    var leftChildDOB = this.GG.properties[orderedChildren[0]].hasOwnProperty("dob") ? new Date(this.GG.properties[orderedChildren[0]]["dob"]) : null;
                    for (var j = 1; j < orderedChildren.length; j++) {
                        var thisChildDOB = this.GG.properties[orderedChildren[j]].hasOwnProperty("dob") ? new Date(this.GG.properties[orderedChildren[j]]["dob"]) : null;

                        if (thisChildDOB != null) {
                            if (leftChildDOB == null) {
                                // prefer all without date of birth to be on the right, i.e. penalty for no date on the left
                                totalPenaltyForChildAgeOrder++;
                            } else {
                                // both are not null: compare dates
                                if (leftChildDOB.getTime() > thisChildDOB.getTime()) {
                                    // penalty for older child on the right
                                    totalPenaltyForChildAgeOrder++;
                                }
                            }
                        }
                        leftChildDOB = thisChildDOB;
                    }
                }
            }
        }

        //console.log("r = " + onlyRank + ", edgeLength = " + totalEdgeLengthInPositions + ", childLen = " + totalEdgeLengthInChildren);
        return totalEdgeLengthInPositions * 100000 + totalEdgeLengthInChildren * 1000 + totalPenaltyForFatherOnRight * 5 + totalPenaltyForChildAgeOrder;
    },

    edge_crossing: function (order, onlyRank, dontUseApproximationForRelationshipEdges) {
        // Counts edge crossings in the graph accoring to given node ordering.
        //
        // Iff onlyRank is defined, only counts edge crossings affected by re-ordering of
        // nodes on given rank.
        //
        // Assumes that edges always go from lower ranks to higher ranks or
        // between nodes of the same rank

        var numCrossings = 0.0;

        var rankFrom = onlyRank ? Math.max(1, onlyRank - 1) : 1;
        var rankTo = onlyRank ? onlyRank : this.maxRank;

        //printObject(order);
        for (var r = rankFrom; r <= rankTo; ++r) {
            var numVert = order.order[r].length;

            // TODO: investigate about person nodes at the last position, and not counting crossings due to its relationship
            //       when "-1" is removed testcase "abraham" incorrectly places "rachel" on the other side of twins
            for (var i = 0; i < numVert - 1; ++i) {
                // -1 because we only check crossings of edges going out of vertices of higher orders
                var v = order.order[r][i];

                var isChhub = this.GG.isChildhub(v);
                var outEdges = this.GG.getOutEdges(v);
                var len = outEdges.length;

                for (var j = 0; j < len; ++j) {
                    var targetV = outEdges[j];

                    // special considerations: after ordering is done all relationship nodes will be
                    // re-ranked one level higher. In most cases the number of edge crossings is the
                    // same, however it may not be. For most cases the following heuristic results
                    // in optimal arrangement:
                    // for each relationship node add the number of crossings equal to the number of
                    // nodes on the parent rank between it's parents according to current ordering
                    if (!dontUseApproximationForRelationshipEdges && this.GG.isRelationship(targetV)) {
                        var parents = this.GG.getInEdges(targetV);
                        if (parents.length == 2) {
                            var order1 = order.vOrder[parents[0]];
                            var order2 = order.vOrder[parents[1]];
                            var crossings = this.numNodesWithParentsInBetween(order, r, order1, order2);
                            numCrossings += crossings / 2; // only assign it half a crossing because most will be fixed by transpose()
                            // - and if "1" is assigned transpose wont fix certain local cases
                        }
                        //if (i == numVert-1) continue;
                    }

                    // so we have an edge v->targetV. Have to check how many edges
                    // between rank[v] and rank[targetV] this particular edge corsses.
                    var crossings = this._edge_crossing_crossingsByOneEdge(order, v, targetV);

                    // special case: count edges from parents to twins twice
                    // (since all twins are combined into one, and this edge actually represents multiple parent-child edges)
                    //var twinCoeff = (isChhub && this.GG.isParentToTwinEdge(v, targetV)) ? 2.0 : 1.0;
                    var twinCoeff = isChhub && this.GG.getTwinGroupId(targetV) != null ? 2.0 : 1.0;

                    numCrossings += crossings * twinCoeff;
                }
            }
        }

        //if (!onlyRank)
        //    console.log("crossings: " + numCrossings);

        return numCrossings;
    },

    _edge_crossing_crossingsByOneEdge: function (order, v, targetV) {
        // Crossing occurs if either
        // 1) there is an edge going from rank[v]-ranked vertex with a smaller order
        //     than v to a rank[targetV]-ranked vertex with a larger order than targetV
        // 2) there is an edge going from rank[v]-ranked vertex with a larger order
        //     than v to a rank[targetV]-ranked vertex with a smaller order than targetV
        //
        // However we don't want to count each crossing twice (once for each edge), so
        // here we only count crossings in the 2nd case. The first case will be counted
        // when we process that other vertex

        var rankV = this.ranks[v];
        var rankT = this.ranks[targetV];

        var orderV = order.vOrder[v];
        var orderT = order.vOrder[targetV];

        if (rankV == rankT) {
            return this.numNodesWithParentsInBetween(order, rankV, orderV, orderT);
        }

        var crossings = 0;

        var verticesAtRankV = order.order[rankV]; // all vertices at rank V

        // edges from rankV to rankT: only those after v (orderV+1)
        for (var ord = orderV + 1; ord < verticesAtRankV.length; ++ord) {
            var vertex = verticesAtRankV[ord];

            var isChhub = this.GG.isChildhub(vertex);
            var outEdges = this.GG.getOutEdges(vertex);
            var len = outEdges.length;

            for (var j = 0; j < len; ++j) {
                var target = outEdges[j];

                if (order.vOrder[target] < orderT) {
                    crossings++;

                    // special case: count edges from parents to twins twice
                    // (since all twins are combined into one, and this edge actually represents multiple parent-child edges)
                    //if (isChhub && this.GG.isParentToTwinEdge(vertex, target))
                    if (isChhub && this.GG.getTwinGroupId(target) != null) crossings++;
                }
            }
        }

        // prefer long edges to cross other edges at the point they originate from, since
        // this generaly results in better long edge placement once head segment on the same
        // rank with person is added
        if (crossings > 0 && this.GG.isPerson(v) && this.GG.isVirtual(targetV)) crossings -= 0.1;

        return crossings;
    },

    numNodesWithParentsInBetween: function (order, rank, order1, order2) {
        // TODO: while this function correctly computes what its name suggests, it is
        //       actually used to compute number of crossings for same-rank edges. And for that
        //       need not only to sompute nodes with parents, but correctly compute crossings of
        //       other same-rank edges (relationship edges). The difference is:
        //       - even if a node between order1 and order2 has an in-edge, that in-edge may not cross the
        //         edge from order1 to order2 because both source and target are between order1 & order2
        //       - it may be an out-edge instead of an in-edge, but still crosses as source is inside,
        //         but target is outside [order1, order2]

        var numNodes = 0;
        var fromBetween = Math.min(order1, order2) + 1;
        var toBetween = Math.max(order1, order2) - 1;
        for (var o = fromBetween; o <= toBetween; o++) {
            var b = order.order[rank][o];

            if (this.GG.getInEdges(b).length > 0) {
                // 1. edges which come from higher ranks create a crosing
                // 2. edges that come from the same rank outside the order1-order2 interval create a crossing
                for (var i = 0; i < this.GG.getInEdges(b).length; i++) {
                    var u = this.GG.getInEdges(b)[i];

                    if (this.ranks[u] != rank) {
                        numNodes++; // 1. u is of higher rank
                    } else {
                        var orderOther = order.vOrder[u];
                        if (orderOther < fromBetween - 1 || orderOther > toBetween + 1) // +1 to skip vertex itself, e.g. multiple relationships
                            numNodes++; // 2. same rank from outside [order1,order2];
                    }
                }
                //numNodes++;
            }

            if (this.GG.isPerson(b)) {
                // count crossing twin's parental edge as a multiple crossing
                // (since all twins are combined into one, and this one parent edge actually represents multiple edges)
                var twinGroupId = this.GG.getTwinGroupId(b);
                if (twinGroupId != null) {
                    numNodes++;
                }
            }
        }
        return numNodes;
    },

    //-[wmedian]-------------------------------------------------------------------------
    wmedian: function (order, iter) {
        // The weighted median heuristic: depending on the parity of the current iteration number,
        // the ranks are traversed from top to bottom or from bottom to top.

        var changed = false;

        if (iter % 2 == 0) {
            for (var r = 2; r <= this.maxRank; r++) {
                if (order.order[r].length <= 1 || // no need to re-order 1 vertex
                order.order[r - 1].length <= 1) continue; // if only one same parent for all V:
                // all V will have equivalen median[]
                var median = [];
                var len = order.order[r].length;
                for (var i = 0; i < len; i++) {
                    var v = order.order[r][i];
                    median[v] = this.median_value(order, v, r - 1);
                }
                changed != this.sort_orders(order, r, median);
            }
        } else {
            for (var r = this.maxRank - 1; r >= 1; r--) {
                if (order.order[r].length <= 1 || // no need to re-order 1 vertex
                order.order[r + 1].length <= 1) continue; // if only one same child for all V

                var median = [];
                var len = order.order[r].length;
                for (var i = 0; i < len; i++) {
                    var v = order.order[r][i];
                    median[v] = this.median_value(order, v, r + 1);
                }
                changed != this.sort_orders(order, r, median);
            }
        }

        return changed;
    },

    median_value: function (order, v, adj_rank) {
        var P = this.adj_position(order, v, adj_rank);

        if (P.length == 0) return -1.0;

        var m = Math.floor(P.length / 2);

        if (P.length % 2 == 1) return P[m];

        if (P.length == 2) return (P[0] + P[1]) / 2;

        var left = P[m - 1] - P[0];
        var right = P[P.length - 1] - P[m];

        return (P[m - 1] * right + P[m] * left) / (left + right);
    },

    adj_position: function (order, v, adj_rank) {
        // returns an ordered array of the present positions of the nodes
        // adjacent to v in the given adjacent rank.
        var result = [];

        var verticesAtRankAdj = order.order[adj_rank]; // all vertices at rank adj_rank

        var len = verticesAtRankAdj.length;
        for (var j = 0; j < len; j++) {
            var adjV = verticesAtRankAdj[j];
            if (this.GG.hasEdge(adjV, v) || this.GG.hasEdge(v, adjV)) {
                result.push(j); // add order
            }
        }

        return result;
    },

    sort_orders: function (order, rank, weightToUseForThisRank) {

        var sortfunc = function (a, b) {
            return weightToUseForThisRank[a] - weightToUseForThisRank[b];
        };

        // re-order vertices within a rank according to weightToUseForThisRank
        order.order[rank].sort(sortfunc);

        var changed = false;

        // update order.vOrder[] accordingly, based on how we just sorted order.order[]
        for (var i = 0; i < order.order[rank].length; i++) {
            var v = order.order[rank][i];
            if (order.vOrder[v] != i) // if it is not already at what it is
                {
                    order.vOrder[v] = i;
                    changed = true;
                }
        }

        return changed;
    },
    //-------------------------------------------------------------------------[wmedian]-

    isChhubsOrderOK: function (rank, order) {
        for (var i = 0; i < order.order[rank].length - 1; i++) {
            var v = order.order[rank][i];
            if (!this.GG.isChildhub(v)) continue;

            // take the next childhub to the right: skip all virtual edge pieces
            for (var next = i + 1; next < order.order[rank].length; next++) {
                if (this.GG.isChildhub(order.order[rank][next])) break;
            }
            var u = order.order[rank][next];
            if (!this.GG.isChildhub(u)) continue;

            var aboveV = this.GG.getInEdges(v)[0];
            var aboveU = this.GG.getInEdges(u)[0];

            if (order.vOrder[aboveV] > order.vOrder[aboveU]) return false;
        }
        return true;
    },

    placeChhubsInCorrectOrder: function (rank, order) {
        var GG = this.GG;
        var byRelOrder = function (a, b) {
            var above1 = GG.getInEdges(a)[0];
            var above2 = GG.getInEdges(b)[0];
            if (above1 == above2) {
                // keep existing order of pieces of virtual edges as well
                return order.vOrder[a] - order.vOrder[b];
            }
            return order.vOrder[above1] - order.vOrder[above2];
        };
        order.order[rank].sort(byRelOrder);

        for (var i = 0; i < order.order[rank].length; i++) order.vOrder[order.order[rank][i]] = i;
    },

    transpose: function (order, doMinorImprovements, stopIfMoreThanCrossings) {
        // for each rank: goes over all vertices in the rank and tries to switch orders of two
        //                adjacent vertices. If numCrossings is improved keeps the new order.
        //                repeats for each rank, and if there was an improvementg tries again.
        var improved = true;

        //if (doMinorImprovements) printObject(order);

        var totalEdgeCrossings = this.edge_crossing(order);
        if (stopIfMoreThanCrossings && totalEdgeCrossings > stopIfMoreThanCrossings) return;

        var iter = 0;
        while (improved) {
            iter++;
            if (!doMinorImprovements && iter > 4) break;
            if (iter > 100) {
                console.log("Assertion failed: too many iterations in transpose(), NumIter == " + iter);break;
            }

            improved = false;

            for (var r = 1; r <= this.maxRank; r++) {
                if (r % 3 == 0) {
                    // just place all childhubs in the same order as their relationships
                    // (..and keep existing order of pieces of virtual edges at this rank)
                    this.placeChhubsInCorrectOrder(r, order);
                    continue;
                }

                var numEdgeCrossings = this.edge_crossing(order, r);

                if (!doMinorImprovements && numEdgeCrossings == 0) continue;

                var edgeLengthScore = doMinorImprovements ? this.edge_length_score(order, r) : 0;

                var rankImproved = false;

                var maxIndex = order.order[r].length - 1;
                for (var i = 0; i < maxIndex; ++i) {

                    order.exchange(r, i, i + 1);

                    var newEdgeCrossings = this.edge_crossing(order, r);
                    var newLengthScore = doMinorImprovements ? this.edge_length_score(order, r) : 0;

                    //if (doMinorImprovements)
                    //    console.log("trying: " + v1 + "  <-> " + v2);
                    //if ( v1 == 8 || v1 == 9 )  {
                    //    console.log("v = " + v1 + ", u = " + v2 + ", newScore= " + newEdgeCrossings +
                    //                ", lenScore= " + newLengthScore + ", oldScore= " + numEdgeCrossings +
                    //                ", oldLenScore= " + edgeLengthScore);
                    //}

                    if (newEdgeCrossings < numEdgeCrossings || newEdgeCrossings == numEdgeCrossings && newLengthScore < edgeLengthScore) {
                        // this was a good exchange, apply it to the current real ordering
                        improved = true;
                        rankImproved = true;
                        var improvement = numEdgeCrossings - newEdgeCrossings;
                        totalEdgeCrossings -= improvement;
                        numEdgeCrossings = newEdgeCrossings;
                        edgeLengthScore = newLengthScore;
                        //console.log("exchanged "+ v1 + " <-> " + v2);
                        if (!doMinorImprovements) {
                            if (totalEdgeCrossings == 0) return; // still want to optimize for edge lengths
                            if (numEdgeCrossings == 0) break; // for this rank
                        }
                    } else {
                        // exchange back
                        order.exchange(r, i, i + 1);
                    }
                }

                if (rankImproved) r--; // repeat again for the same rank
            }
        }
        //if (doMinorImprovements) printObject(order);
    },

    transposeLongEdges: function (order, numCrossings, postReRanking) {
        if (numCrossings == 0) return numCrossings;

        var maxRealId = this.GG.getMaxRealVertexId();
        var numVert = this.GG.getNumVertices();

        var checked = [];
        for (var v = maxRealId + 1; v < numVert; v++) checked[v] = false;

        for (var v = maxRealId + 1; v < numVert; v++) {

            if (checked[v] || this.ranks[v] == 0) continue;

            // find a long edge - an edge connecting real nodes of non-neighbouring ranks,
            // consisting of virtual vertices on intermediate ranks (plus source/target)

            // start from head node - the first virtual node
            var head = v;
            while (this.GG.isVirtual(this.GG.getInEdges(head)[0])) head = this.GG.getInEdges(head)[0];

            var chain = [];
            var next = head;

            // go towards the tail through out-edges
            do {
                checked[next] = true;
                chain.push(next);
                next = this.GG.getOutEdges(next)[0];
            } while (this.GG.isVirtual(next));
            chain.push(next);

            var bestScore = numCrossings;
            var bestOrder = undefined;

            console.log("Optimizing long edge placement: chain " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(chain));

            // try to find best placement: brute force, try to reposition up to 3 pieces at a time simultaneously
            // checking all possible positions for the pieces in question up to 4 positions to the left or right
            if (chain.length <= 10) {
                var beforeChainEnd = 2;
                if (postReRanking) beforeChainEnd = 4;
                for (var i = 0; i < chain.length - beforeChainEnd; i++) {

                    var piece1 = chain[i];
                    var piece2 = chain[i + 1];
                    var piece3 = chain[i + 2];

                    var rank1 = this.ranks[piece1];
                    var rank2 = this.ranks[piece2];
                    var rank3 = this.ranks[piece3];

                    var ord1 = order.vOrder[piece1];
                    var ord2 = order.vOrder[piece2];
                    var ord3 = order.vOrder[piece3];

                    //console.log("chain piece " + piece1 + ", " + piece2 + ", " + piece3);

                    for (var move1 = -4; move1 <= 4; move1++) {
                        if (!order.canMove(rank1, ord1, move1)) continue;
                        for (var move2 = -4; move2 <= 4; move2++) {
                            if (!order.canMove(rank2, ord2, move2)) continue;
                            for (var move3 = -4; move3 <= 4; move3++) {
                                if (move1 == 0 && move2 == 0 && move3 == 0) continue;
                                if (!order.canMove(rank3, ord3, move3)) continue;

                                var newOrder = order.copy();
                                newOrder.move(rank1, ord1, move1);
                                newOrder.move(rank2, ord2, move2);
                                newOrder.move(rank3, ord3, move3);

                                // TODO: performance: only count crossings caused by the long edge itself?
                                var newCross = this.edge_crossing(newOrder, false, postReRanking);
                                if (newCross < bestScore) {
                                    //console.log("+");
                                    bestScore = newCross;
                                    bestOrder = [rank1, ord1, move1, rank2, ord2, move2, rank3, ord3, move3];
                                }

                                //if (move1 == 1 && move2 == 0 && move3 == 0)
                                //    console.log("New Score: " + newCross + ", best: " + bestScore );
                            }
                        }
                    }
                }
            }

            if (bestScore < numCrossings) {
                order.move(bestOrder[0], bestOrder[1], bestOrder[2]);
                order.move(bestOrder[3], bestOrder[4], bestOrder[5]);
                order.move(bestOrder[6], bestOrder[7], bestOrder[8]);
                numCrossings = bestScore;
            }

            if (numCrossings == 0) break;
        }

        return numCrossings;
    },
    //========================================================================[ordering]=

    //=====================================================================[re-ordering]=
    reRankRelationships: function () {
        // re-rank all relationship nodes to be on the same level as the lower ranked
        // parent. Attempt to place the re-ranked node next to one of the parents;
        // having ordering info helps to pick the parent & the location.
        // Note1: we may not be able to place a relationship node right next to a
        //        parent (because both parents already have a relationship node on the
        //        requested side), but we can always place it next to another
        //        relationship by the same parent.
        // Note2: also need to shorten incoming multi-rank edges by one node
        //        (see removeRelationshipRanks())

        //console.log("GG: "  + stringifyObject(this.GG));
        //console.log("Orders: " + stringifyObject(this.order));

        if (this.maxRank === undefined || this.GG.v.length == 0) return;

        var handled = {};

        var initialOrdering = this.order.copy();

        for (var r = 2; r <= this.maxRank; r += 3) {

            // pass1: simple cases: parents are next to each other.
            //        looks better when all such cases are processed before more complicated cases
            //        (otherwise in case of say 3 relationship nodes may end up with two
            //         ugly placements (#2 and #3) instead of only one (#2) when #2 becomes ugly)
            for (var oo = 0; oo < initialOrdering.order[r].length; oo++) {
                var i = initialOrdering.order[r][oo]; // i is the relationship ID
                if (this.GG.isVirtual(i)) continue;
                if (!this.GG.isRelationship(i)) throw "[1] Unexpected node " + i + " at rank " + r;

                //console.log("==> [1] Handling: " + i);

                var parents = this.GG.getInEdges(i);

                // note: each "relationship" node is guaranteed to have exactly two "parent" nodes (validate() checks that)

                if (this.ranks[parent[0]] != this.ranks[parent[1]]) throw "Assertion failed: edges betwen neighbouring ranks only";

                var order1 = this.order.vOrder[parents[0]];
                var order2 = this.order.vOrder[parents[1]];

                var minOrder = Math.min(order1, order2);
                var maxOrder = Math.max(order1, order2);

                // if parents are next to each other in the ordering
                if (maxOrder == minOrder + 1) {
                    //console.log("=== is relationship: " + i + ", minOrder: " + minOrder + ", maxOrder: " + maxOrder );
                    this.moveVertexToRankAndOrder(i, this.ranks[parents[0]], maxOrder);
                    handled[i] = true;
                }
            }

            // pass2: parents are not next to each other on the same rank
            for (var oo = 0; oo < initialOrdering.order[r].length; oo++) {
                var i = initialOrdering.order[r][oo]; // i is the relationship ID
                if (this.GG.isVirtual(i)) continue;
                if (!this.GG.isRelationship(i)) throw "[2] Unexpected node " + i + " at rank " + r;

                if (handled.hasOwnProperty(i)) continue; // this node has already been handled

                //console.log("==> [2] Handling: " + i);

                var parents = this.GG.getInEdges(i);

                // rearrange so that parent0 is on the left - for simplicity in further logic
                if (this.order.vOrder[parents[0]] > this.order.vOrder[parents[1]]) parents.reverse();

                //console.log("NEED TO re-rank relatioship " + i + ", parents=" + stringifyObject(parents));

                var rank = this.ranks[parents[0]];

                // 1. for each parent pick which side of the parent to use
                // 2. pick which parent is a better target:
                //    - prefer parent with no relationship node on the corect side
                //    - somewhere in the middle if both parents have other nodes on the preferred side:
                //      - try not to get inbetween well-placed relationships
                //      - count edge crossings (TODO)

                var order1 = this.order.vOrder[parents[0]];
                var order2 = this.order.vOrder[parents[1]];

                if (order2 == order1 + 1) throw "Assertion failed: all relationship with parents next to each other are already handled (for parents: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(parents) + ")";

                var insertOrder = order1 + 1; // set some default in case all other heuroistics fail

                var rightOfParent0 = this.order.order[rank][order1 + 1];
                var leftOfParent1 = this.order.order[rank][order2 - 1];
                //console.log("o1: " + order1 + ", o2: " + order2 + ", rp0: " + rightOfParent0 + ", lp1: " + leftOfParent1 );
                var p0busy = false;
                var p1busy = false;
                if (this.GG.hasEdge(parents[0], rightOfParent0)) p0busy = true;
                if (this.GG.hasEdge(parents[1], leftOfParent1)) p1busy = true;
                //console.log("p0busy: " + p0busy + ", p1busy: " + p1busy);

                if (p1busy && p0busy) {
                    // TODO: testcase 5K, relationship with ID=15 is inserted not optimaly
                    // both busy: find position which does not disturb "nice" relationship nodes
                    for (var o = order1 + 2; o <= order2 - 1; o++) {
                        var next = this.order.order[rank][o];
                        if (!this.GG.hasEdge(parents[0], next)) {
                            insertOrder = o;
                            break;
                        }
                    }
                    if (insertOrder == null) {
                        var parentsOfLeft = this.GG.getInEdges(leftOfParent1);
                        var otherP1 = parentsOfLeft[0] != parents[1] ? parentsOfLeft[0] : parentsOfLeft[1];
                        var orderP1 = this.order.vOrder[otherP1];
                        if (orderP1 < order1) insertOrder = order2;else insertOrder = order1 + 1;
                    }
                } else if (p1busy) {
                    // p0 is free, p1 already has a relationship node next to it
                    insertOrder = order1 + 1;
                } else if (p0busy) {
                    // p1 is free, p0 already has a relationship node next to it
                    insertOrder = order2;
                } else {
                    // both p0 and p1 can have the relationship node right next to them
                    // for now arbitrarily pick p1
                    // TODO: try both pick the one with less crossed edges. Need a testcase
                    insertOrder = order2;
                }

                //console.log("==> inserting: " + i + " on order " + insertOrder + " (after " + this.order.order[rank][insertOrder-1] + " and before " + this.order.order[rank][insertOrder] + ")");
                this.moveVertexToRankAndOrder(i, rank, insertOrder);

                //-----
                // fix the problem described in issue #664
                var oldOrder = initialOrdering.vOrder[i];
                if (oldOrder > 0) {
                    var oldNeighbourLeft = initialOrdering.order[r][oldOrder - 1];
                    if (this.GG.isRelationship(oldNeighbourLeft) && this.order.vOrder[oldNeighbourLeft] > this.order.vOrder[i] && this.ranks[oldNeighbourLeft] == this.ranks[i]) {
                        //console.log("L: " + oldNeighbourLeft);
                        // fix the case when two relationships switched order during re-ranking - we may want to change the order of children as well
                        this.swapChildrenIfAllAToTheLeftOfB(oldNeighbourLeft, i);

                        // TODO: remove
                        // Also make sure childhubs are in the correct order
                        var chHubL = this.GG.getOutEdges(oldNeighbourLeft)[0];
                        var chHubR = this.GG.getOutEdges(i)[0];
                        if (this.order.vOrder[chHubL] < this.order.vOrder[chHubR]) this.order.exchange(this.ranks[chHubL], this.order.vOrder[chHubL], this.order.vOrder[chHubR]);
                    }
                }
                if (oldOrder < initialOrdering.order[rank + 1].length - 1) {
                    var oldNeighbourRight = initialOrdering.order[r][oldOrder + 1];
                    if (this.GG.isRelationship(oldNeighbourRight) && this.order.vOrder[oldNeighbourRight] < this.order.vOrder[i] && this.ranks[oldNeighbourRight] == this.ranks[i]) {
                        //console.log("R: " + oldNeighbourRight);
                        // same as above, but switch right-to-left instead of left-to-right
                        this.swapChildrenIfAllAToTheLeftOfB(i, oldNeighbourRight);

                        // TODO: remove
                        // Also make sure childhubs are in the correct order
                        var chHubL = this.GG.getOutEdges(i)[0];
                        var chHubR = this.GG.getOutEdges(oldNeighbourRight)[0];
                        if (this.order.vOrder[chHubL] < this.order.vOrder[chHubR]) this.order.exchange(this.ranks[chHubL], this.order.vOrder[chHubL], this.order.vOrder[chHubR]);
                    }
                }
                //-----
            }
        }

        this.removeRelationshipRanks();

        // Fix ordering mistakes introduced by the re-ranking algorithm. It is easier to fix post-factum
        // than to order correctly rigth away (e.g. generally the above algo is doing the same thing, but
        // in some special cases can do better once everything is complete)
        this.improveOrdering();

        // after re-ordering long edges are shorter, try to improve long edge placement again
        var edgeCrossings = this.edge_crossing(this.order, false, true);
        this.transposeLongEdges(this.order, edgeCrossings, true);

        console.log("Final re-ordering: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(this.order.order));
        console.log("Final ranks: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(this.ranks));
    },

    moveVertexToRankAndOrder: function (v, newRank, newOrder) {
        var oldRank = this.ranks[v];
        var oldOrder = this.order.vOrder[v];

        this.order.moveVertexToRankAndOrder(oldRank, oldOrder, newRank, newOrder);
        this.ranks[v] = newRank;
    },

    swapChildrenIfAllAToTheLeftOfB: function (leftRel, rightRel) {
        // we assume that during re-ordering relationship `leftRel` which used ot be to the left or relationship `rightRel`
        // is now to the right of `rightRel`. This may have introduced some unnecessary crossed edges. Fix those by swapping
        // the order of relationship children as well, if it clearly wont break other things, e.g.
        // - if there are no nodes which are not children of `leftRel` of `rightRel` between the leftmost and rightmost child of either leftR or rightR
        // - all children of `leftRel` are to the left of all children of `rightRel`
        // - there are no relationships between `leftRel` children and any nodes to the left of `leftRel` OR on any other rank
        // - there are no relationships between `rightRel` children and any nodes to the right of `rightRel` OR on any other rank
        console.log("Attempting to swap children of " + leftRel + " and " + rightRel + " (due to change of order during re-ranking)");

        var chHubL = this.GG.getOutEdges(leftRel)[0];
        var chHubR = this.GG.getOutEdges(rightRel)[0];

        var childrenL = this.GG.getOutEdges(chHubL);
        var childrenR = this.GG.getOutEdges(chHubR);
        var allChildren = childrenL.concat(childrenR);

        var order = this.order;
        var byOrder = function (a, b) {
            return order.vOrder[a] - order.vOrder[b];
        };
        allChildren.sort(byOrder);
        //console.log("all children sorted by order: " + stringifyObject(allChildren));

        var childRank = this.ranks[allChildren[0]];

        var leftMostOrder = order.vOrder[allChildren[0]];
        var rightMostOrder = order.vOrder[allChildren[allChildren.length - 1]];
        // we only swap orders if there are no other nodes inbetween the children of leftRel and rightRel
        if (rightMostOrder - leftMostOrder + 1 != childrenL.length + childrenR.length) return;

        for (var i = 0; i < allChildren.length; i++) {
            var nextInOrder = allChildren[i];

            var shouldBeLeftRelChild = i < childrenL.length;

            if (shouldBeLeftRelChild && this.GG.getInEdges(nextInOrder)[0] != chHubL) // a child of `rightRel` must be to the left of one of the children of `leftRel` => quit
                return;

            // make sure there are no relationships which will result in extra edge crossings if we swap order of children
            var outEdges = this.GG.getOutEdges(nextInOrder);
            if (outEdges.length > 0) {
                for (var j = 0; j < outEdges.length; j++) {
                    var rel = outEdges[j];
                    if (this.GG.isVirtual(rel)) return; // do not touch long edges (TODO: can improve, see tescase HUGE1 and nodes with IDs 23 & 4)

                    var parents = this.GG.getParents(rel);

                    for (var k = 0; k < parents.length; k++) {
                        if (this.ranks[parents[k]] != childRank) return; // relationship with a node on another rank - no swaps

                        if (shouldBeLeftRelChild && order.vOrder[parents[k]] < leftMostOrder) return; // leftRel children in relationship with nodes to the left
                        // ->after swap there will be many crossed edges
                        if (!shouldBeLeftRelChild && order.vOrder[parents[k]] > rightMostOrder) return; // rightRel children in rel. with nodes to the right
                    }
                }
            }
        }

        // swap by inverting the order
        //console.log("Performing swap");
        var middle = Math.floor((leftMostOrder + rightMostOrder) / 2);

        for (var i = leftMostOrder; i <= middle; i++) {
            var tmp = this.order.order[childRank][i];
            this.order.order[childRank][i] = this.order.order[childRank][leftMostOrder + rightMostOrder - i];
            this.order.order[childRank][leftMostOrder + rightMostOrder - i] = tmp;

            this.order.vOrder[this.order.order[childRank][i]] = i;
            this.order.vOrder[this.order.order[childRank][leftMostOrder + rightMostOrder - i]] = leftMostOrder + rightMostOrder - i;
        }
    },

    removeRelationshipRanks: function () {
        // removes ranks previously occupied by relationship nodes (which is every 3rd rank)
        // (these ranks have either no nodes at all or only virtual nodes
        // from multi-rank edges passing through)
        for (var r = 2; r <= this.maxRank; r += 2) {
            // r+=2 because each 3rd rank is a relationship rank, but once this rank is removed it becomes r+2 not r+3

            if (this.order.order[r].length > 0) {
                // there are some virtual nodes left
                for (var i = 0; i < this.order.order[r].length; i++) {
                    var v = this.order.order[r][i];
                    // it takes a lot of work to completely remove a vertex from a graph.
                    // however it is easy to disconnect and place it into rank 0 which is ignored when drawing/assigning coordinates
                    this.GG.unplugVirtualVertex(v);
                    this.ranks[v] = 0;
                    this.order.vOrder[v] = this.order.order[0].length;
                    this.order.order[0].push(v);
                }
            }

            this.order.order.splice(r, 1);

            for (var v = 0; v < this.ranks.length; v++) {
                if (this.ranks[v] > r) this.ranks[v]--;
            }

            this.maxRank--;
        }

        // remove all unplugged vertices
        var unplugged = this.order.removeUnplugged().sort(function (a, b) {
            return a - b;
        });
        console.log("Removing unnecessary long edge pieces: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(unplugged));
        for (var i = 0; i < unplugged.length; i++) {
            var removedID = unplugged[i] - i; // "-i" because after each splice array size decreases by one and item N is going to be at location N-1, then N-2, etc
            this.ranks.splice(removedID, 1);
            this.GG.remove(removedID);
        }
    },

    improveOrdering: function () {
        // 1) fix re-ranking mistakes:
        //
        //    A) in a case like the one below "partner1" can be placed right next to "relationship1"
        //                           /--------------\ /--------------- ...  ---[partner1]
        //               -----------/---\            X
        //      [person]/----[rel1]/     \--[rel2]--/ \____[partner1]
        //
        for (var r = 1; r <= this.maxRank; r += 1) {
            for (var oo = 0; oo < this.order.order[r].length; oo++) {
                var v = this.order.order[r][oo];
                if (!this.GG.isPerson(v)) continue;

                if (this.GG.getInEdges(v).length != 0) continue; // skip nodes with parents

                var relationships = this.GG.getOutEdges(v);
                if (relationships.length != 1) continue; // only when one and only one relationship

                var rel = relationships[0];
                if (this.ranks[rel] != r) continue; // only when relationship is on the same rank

                var orderV = this.order.vOrder[v];
                var orderRel = this.order.vOrder[rel];

                if (Math.abs(orderRel - orderV) != 1) {
                    // not next to each other
                    if (orderRel > orderV) {
                        this.order.move(r, orderV, orderRel - orderV - 1);
                    } else {
                        this.order.move(r, orderV, orderRel - orderV + 1);
                    }
                }
            }
        }

        // 2) TODO: come up with heuristics which can be applied at this point
        //          (on a need-to-improve basis once an imperfection is discovered):
        // after re-ranking there may be some orderings which are equivalent in terms
        // of the number of edge crossings, but more or less visually pleasing
        // depending on what kinds of edges are crossing.
        // Until re-ordering is done it is computationally harder to make these tests,
        // but once reordering is complete it is easier in some cases
        // (e.g: testcase 5A, relationship with both a parent and parent's child)

        // 3) make sure chhubs are ordered in the same way their relationships are
        for (var r = 2; r <= this.maxRank; r += 2) {
            // place all childhubs in the same order as their relationships
            // (..and keep existing order of pieces of virtual edges at this rank)

            // check if we need to do that: if they are already OK it is usually better not to mess with orders
            // as chhubs will be OK anyway, but virtual edge pieces may get screwed
            if (!this.isChhubsOrderOK(r, this.order)) {
                //console.log("Fixing chhub order @ rank " + r);
                this.placeChhubsInCorrectOrder(r, this.order);
            }
        }
    },

    //=====================================================================[re-ordering]=

    findConnectedComponent: function (v, edgeIncludedFunc, stopSet, maxSize) {
        // computes connected component which includes vertex v (or all vertice sin array v)
        // and all vertices reachable from v not using edges which do not pass the `edgeIncludedFunc()` test
        //
        // stops when a vertex from the `stopSet` set is found and includes `reachedStopSet` key in the response
        // stops when component size exceeds `maxSize`

        var component = {};
        var size = 0;
        var stopFound = false;

        // if v is not an arrya make it an array with one element
        if (Object.prototype.toString.call(v) !== "[object Array]") {
            v = [v];
        }

        var q = new __WEBPACK_IMPORTED_MODULE_3__queues__["a" /* Queue */]();
        for (var i = 0; i < v.length; i++) {
            q.push(v[i]);
            component[v[i]] = true;
        }

        while (q.size() > 0) {
            var nextV = q.pop();

            var allConnected = this.GG.getAllEdgesWithWeights(nextV);
            for (var u in allConnected) {
                if (!allConnected.hasOwnProperty(u)) continue;

                var from = allConnected[u].out ? nextV : u;
                var to = allConnected[u].out ? u : nextV;

                if (edgeIncludedFunc(from, to) && !component.hasOwnProperty(u)) {
                    component[u] = true;
                    q.push(u);
                    size++;

                    if (stopSet.hasOwnProperty(u)) {
                        stopFound = true;
                        break;
                    }
                }

                if (size > maxSize) {
                    q.clear();
                    break;
                }
            }
        }
        return { "component": component, "size": size, "stopSetReached": stopFound };
    },

    //=[ancestors]=======================================================================
    findAllAncestors: function () {
        var ancestors = {};
        var consangr = {};

        // got from low ranks to high ranks. For each node merge ancestors of its parents
        for (var r = 1; r <= this.maxRank; r++) {
            var nextRank = this.order.order[r];

            for (var i = 0; i < nextRank.length; i++) {
                var v = this.order.order[r][i];
                if (!this.GG.isPerson(v)) continue;
                ancestors[v] = {};
                ancestors[v][v] = 0;
                if (this.GG.isAdopted(v)) continue; // TODO: assume adopted have no known parents
                var parents = this.GG.getParents(v);
                //console.log("v: " + v + ", parents: " + stringifyObject(parents));
                for (var j = 0; j < parents.length; j++) {
                    var familyBranch = ancestors[parents[j]];

                    for (var u in familyBranch) {
                        if (familyBranch.hasOwnProperty(u)) {
                            if (ancestors[v].hasOwnProperty(u)) {
                                // parents are relatives: pick the shortest path to that relative
                                ancestors[v][u] = Math.min(familyBranch[u] + 1, ancestors[v][u]);
                            } else ancestors[v][u] = familyBranch[u] + 1;
                        }
                    }
                }
            }
        }

        // repeat the same for relationship nodes. Note that this second pas sis required because we need to make sure both
        // parents got their relatives computed before the relationship ancestors canbe updated.
        // Could do all in one pass iff relationship nodes were ranked below person nodes, but while they are
        // twins could nto be inserted correctly. So need to re-rank first, re-insert twins, compute ancestors for all including twins
        for (var r = 1; r <= this.maxRank; r++) {
            var nextRank = this.order.order[r];

            for (var i = 0; i < nextRank.length; i++) {
                var v = this.order.order[r][i];
                if (!this.GG.isRelationship(v)) continue;
                ancestors[v] = {};
                ancestors[v][v] = 0;
                var parents = this.GG.getParents(v);
                for (var j = 0; j < parents.length; j++) {
                    var familyBranch = ancestors[parents[j]];
                    for (var u in familyBranch) {
                        if (familyBranch.hasOwnProperty(u)) {
                            if (ancestors[v].hasOwnProperty(u)) {
                                // parents are relatives
                                consangr[v] = true;
                                ancestors[v][u] = Math.min(familyBranch[u] + 1, ancestors[v][u]);
                            } else ancestors[v][u] = familyBranch[u] + 1;
                        }
                    }
                }
            }
        }

        //console.log("Ancestors: " + stringifyObject(ancestors));
        //console.log("Consangr:  " + stringifyObject(consangr));

        return { ancestors: ancestors, consangr: consangr };
    },
    //=======================================================================[ancestors]=

    //=[vertical separation for horizontal edges]========================================
    positionVertically: function () {
        /*// debug: very useful debug case, which is very hard to reproduce without fiddling with
          //        a normally-processed MS_004 graph. TODO: remove
          if (this.positions.length > 60) {
          this.positions[50] = 80;
          this.positions[51] = 193;
          this.positions[53] = 217;
          this.positions[60] = 440;
          this.order.vOrder[45] = this.order.vOrder[50];
          this.order.vOrder[50] = 0;
        }*/

        var verticalLevels = new __WEBPACK_IMPORTED_MODULE_2__xcoordclass__["a" /* VerticalLevels */]();

        // for all ranks:
        //
        // 1) if rank has childhub nodes:
        //    pick vertical position (within the rank, as a discrete integer "level") for the horizontal part of the child edge
        //    (in a way which minimizes crossings between vertical and horizontal parts of different relationship-to-child lines)
        //
        // 2) if rank has person nodes:
        //    for all person which has a relationship vertically position all outgoing relationship edges
        //    (within the rank, as a discrete integer "level") in a way to avoid overlaps between different relationship edges

        var _startRank = 2;
        var _rankStep = 2;
        /*
        // TODO: DEBUG: computations below are to accomodate debugging when reRankRelationships() may be omitted
        for (var i = 0; i<this.order.order[_startRank].length; i++)
            if ( !this.GG.isVirtual(this.order.order[_startRank][i]) && !this.GG.isChildhub( this.order.order[_startRank][i] ) )
            {
                _startRank = 3;
                _rankStep  = 3;
                break;
            }*/

        for (var r = 1; r <= this.maxRank; r += 1) verticalLevels.rankVerticalLevels[r] = 1; // number of "vertical levels" (i.e. parallel horizontal edges) between rank r and r+1. Start with 1 for all ranks

        if (this.GG.v.length <= 1) return verticalLevels;

        //console.log("GG: " + stringifyObject(this.GG));
        //console.log("Order: " + stringifyObject(this.order));

        // 1) go over childnode ranks.
        //    a) for each vertex on the rank, in the ordering order
        //    b) check if any edges cross any edges of the vertices earlier in the order
        //    c) if yes, add that level to the set of forbidden levels
        //    d) pick minimum level which is not forbidden
        for (var r = _startRank; r <= this.maxRank; r += _rankStep) {

            var initLevels = [];
            var edgeInfo = [];

            var len = this.order.order[r].length;
            for (var i = 0; i < len; i++) {
                var v = this.order.order[r][i];

                if (this.GG.isVirtual(v)) continue;
                if (!this.GG.isChildhub(v)) throw "Assertion failed: childhub nodes at every other rank (" + v + ")";

                var realationship = this.GG.getInEdges(v)[0];
                var top_x = this.positions[realationship]; // x cooordinate of the line going up
                var left_x = top_x; // the leftmost edge of the horizontal part
                var right_x = top_x; // the rightmost edge of the horizontal part
                var childCoords = [];

                var outEdges = this.GG.getOutEdges(v);

                for (var j = 0; j < outEdges.length; j++) {
                    var child_x = this.positions[outEdges[j]];
                    childCoords.push(child_x);

                    left_x = Math.min(left_x, child_x);
                    right_x = Math.max(right_x, child_x);
                }

                if (left_x == right_x) {
                    // no horizontal part, just  astraight line - no need to optimize anything
                    verticalLevels.childEdgeLevel[v] = 0;
                } else {
                    // special case improvement: single child which is leftmost on the rank and its parent is to the right of it
                    // (this may not produce less edge crossings, but is more visually pleasing)
                    var needTopmost = outEdges.length == 1 && (this.order.vOrder[outEdges[0]] == 0 && top_x > this.positions[outEdges[0]] || this.order.vOrder[outEdges[0]] == this.order.vOrder.length - 1 && top_x < this.positions[outEdges[0]]);
                    edgeInfo.push({ "childhub": v, "top_x": top_x, "left_x": left_x, "right_x": right_x, "childCoords": childCoords, "needTopmost": needTopmost });
                    initLevels.push(1);
                }
            }
            //console.log("EdgeInfo: " + stringifyObject(edgeInfo));

            // compose the "crossing score" function which, given edgeInfo + which horizontal line is higher,
            // can tell the number of crossings between two childhub-to-children sets of edges
            var pairScoreFunc = function (edge1, edge2, edge1level, edge2level) {
                //
                // general form of a displayed edges is like:
                //                                                             relationship_a    relationship_b
                //              top_x                                                       |    |
                //                |                                                         |    +-----+-------+---+   <--- level1
                //  left_x   +----+-----+   right_x , multiple edges may be arranged like:  +------+---|---+   |   |   <--- level2
                //           |  |    |  |                                                          |   |   |   |   |
                //        (one or more childX)                                                    a1  b1  a2  b2  b3
                //
                // This function computes the number of intersections of two shapes like the ones
                // draw above given their vertical "levels", i.e. which one is above the other.

                if (edgeInfo[edge1].right_x < edgeInfo[edge2].left_x || edgeInfo[edge1].left_x > edgeInfo[edge2].right_x) return 0; // edges do not intersect/overlap => no penalty for any level assignment

                if (edge1level == edge2level) return Infinity; // intersect and at the same level => forbidden => (penalty == Infinity)

                if (edge1level > edge2level) {
                    var tmpEdge = edge1;
                    var tmpLevel = edge1level;
                    edge1 = edge2;
                    edge1level = edge2level;
                    edge2 = tmpEdge;
                    edge2level = tmpLevel;
                }

                // compute number of intersections
                var intersections = 0;
                // potentially childhub-to-horizontal segment of edge2 may cross horizontal segment of edge1
                if (edgeInfo[edge2].top_x >= edgeInfo[edge1].left_x && edgeInfo[edge2].top_x <= edgeInfo[edge1].right_x) intersections++;
                // potentially horizontal-to-child vertical lines of edge1 may cross horizontal segment of edge2
                for (var j = 0; j < edgeInfo[edge1].childCoords.length; j++) {
                    var childX = edgeInfo[edge1].childCoords[j];
                    if (childX >= edgeInfo[edge2].left_x && childX <= edgeInfo[edge2].right_x) intersections++;
                }
                if (edgeInfo[edge2].needTopmost) // single leftmost child should be topmost
                    return intersections += 0.1;
                return intersections;
            };

            var optimizer = new __WEBPACK_IMPORTED_MODULE_4__edgeOptimization__["a" /* VerticalPosIntOptimizer */](pairScoreFunc, initLevels);

            // - full exhaustive search when up to 5 edges cross other edges on this rank
            // - heuristic with up to 600 steps is used otherwise
            //
            //   max full search running time: ~                 f(numEdgesThatCross) * scoreFuncTime  (*)
            //   max heuristic running time:   ~  bigC * numEdgesThatCross * numSteps * scoreFuncTime
            //
            //   (*) where f(numEdgesThatCross) is (currently) numEdgesThatCross^numEdgesThatCross, e.g. f(5) = 3125
            var edgeLevels = optimizer.computeVerticalPositions(5, 600);

            //console.log("[rank " + r + "] Final vertical childedge levels: " +  stringifyObject(edgeLevels));

            for (var v = 0; v < edgeInfo.length; v++) {
                verticalLevels.childEdgeLevel[edgeInfo[v]["childhub"]] = edgeLevels[v];
                if (edgeLevels[v] > verticalLevels.rankVerticalLevels[r]) verticalLevels.rankVerticalLevels[r] = edgeLevels[v];
            }
        }

        // 2) vertical positioning of person-relationship edges:
        for (var r = 1; r <= this.maxRank; r++) {

            var numLevels = 1;

            var initLevels = [];
            var edgeInfo = [];
            var relEdges = {};

            var len = this.order.order[r].length;
            for (var i = 0; i < len; i++) {
                var v = this.order.order[r][i];

                if (this.GG.isPerson(v)) {
                    var outEdges = this.GG.getOutEdges(v);
                    if (outEdges.length <= 0) continue;

                    var v_x = this.positions[v];

                    verticalLevels.outEdgeVerticalLevel[v] = {};

                    //console.log("Vert Positioning rel edges from person " + v);
                    //console.log("leftEdges: " + stringifyObject(leftEdges));
                    //console.log("rightEdges: " + stringifyObject(rightEdges));

                    var vOrder = this.order.vOrder;

                    var positionEdgesOnOneSide = function (edges) {
                        var nextAttachPort = 0; // attachment point of the line connecting the node and it's relationship
                        var nextVerticalLevel = 0; // vertical level of the line
                        for (var k = 0; k < edges.length; k++) {
                            var u = this.GG.downTheChainUntilNonVirtual(edges[k]); // final destination for the edge - possibly at another rank
                            var dest = edges[k]; // immediate target - on the same rank

                            // check what lies between V and DEST. Need to raise the edge by different amounts depending on what lies there
                            // (nothing, relationship nodes, real nodes)
                            var minOrder = Math.min(vOrder[dest], vOrder[v]) + 1;
                            var maxOrder = Math.max(vOrder[dest], vOrder[v]);
                            var minLevel = minOrder == maxOrder ? 0 : 1; // 0 if next to each other, 1 if at least anything inbetween
                            //console.log("v: " + v + "(" + vOrder[v] + "),  dest: " + dest +  "(" + vOrder[dest] + "), minOrder: " + minOrder + ", maxOrder: " + maxOrder);
                            var otherVirtualEdge = false;
                            var goesOver = [];
                            for (var o = minOrder; o < maxOrder; o++) {
                                var w = this.order.order[r][o];
                                if (this.GG.isRelationship(w)) {
                                    minLevel = Math.max(minLevel, 2);
                                }
                                if (this.GG.isPerson(w)) {
                                    minLevel = Math.max(minLevel, 3);
                                }
                                if (this.GG.isVirtual(w) && this.GG.getInEdges(w)[0] != v) {
                                    otherVirtualEdge = true;
                                }
                                goesOver.push(w);
                            }
                            nextVerticalLevel = Math.max(nextVerticalLevel, minLevel);
                            //console.log("attaching ->" + dest + "(" + u + ") at attach port " + nextAttachPort + " and level " + nextVerticalLevel);
                            verticalLevels.outEdgeVerticalLevel[v][u] = { attachlevel: nextAttachPort, verticalLevel: nextVerticalLevel, numAttachLevels: edges.length };

                            //------------------------------
                            if (minLevel >= 2 || minLevel == 1 && otherVirtualEdge) {
                                // potentially crossing some other relatioship edges: add to the set of edges to be optimized

                                var left_x = Math.min(v_x, this.positions[dest]);
                                var right_x = Math.max(v_x, this.positions[dest]);
                                var down_x = this.positions[dest];

                                // if the edge is going upwards need to take that into account when positioning edges
                                // on this rank, not on the rank of the other parent
                                var top_x = Infinity;
                                if (dest == u) {
                                    // same as !this.GG.isVirtual(u)
                                    var parents = this.GG.getInEdges(u);
                                    var otherParent = parents[0] == v ? parents[1] : parents[0];
                                    if (this.GG.isVirtual(otherParent)) {
                                        // can only be if the edge goes upwards since relationship nodes
                                        top_x = this.positions[otherParent]; //  are always ranked at the rank of the lower-ranked partner
                                        if (top_x > right_x) right_x = top_x;
                                        if (top_x < left_x) left_x = top_x;
                                    }
                                }

                                edgeInfo.push({ "v": v, "u": u, "v_x": v_x, "left_x": left_x, "right_x": right_x, "down_x": down_x, "top_x": top_x, "over": goesOver });
                                initLevels.push(nextVerticalLevel);
                                if (!relEdges.hasOwnProperty(u)) relEdges[u] = [];
                                relEdges[u].push(edgeInfo.length - 1);
                            }
                            //------------------------------

                            nextAttachPort++;
                            nextVerticalLevel++;
                        }

                        return nextVerticalLevel - 1;
                    }.bind(this);

                    var partnerInfo = this._findLeftAndRightPartners(v);
                    //console.log("Asigning left edges");
                    var maxLeftLevel = positionEdgesOnOneSide(partnerInfo.leftPartners);
                    //console.log("Asigning right edges");
                    var maxRightLevel = positionEdgesOnOneSide(partnerInfo.rightPartners);

                    numLevels = Math.max(numLevels, Math.max(maxLeftLevel, maxRightLevel));
                }
            }

            if (edgeInfo.length > 1) {
                // if at most one edge crosses other vertices - we know everything is already laid out perfectly

                for (var e = 0; e < edgeInfo.length; e++) {
                    if (!edgeInfo[e].hasOwnProperty("edgeComplement")) {
                        var nextRel = edgeInfo[e].u;
                        var nextEdges = relEdges[nextRel];
                        if (nextEdges.length > 1) {
                            var otherEdge = nextEdges[0] == e ? nextEdges[1] : nextEdges[0];
                            edgeInfo[e]["edgeComplement"] = otherEdge;
                            edgeInfo[otherEdge]["edgeComplement"] = e;
                        }
                    }
                }

                // compose the "crossing score" function which, given edgeInfo + which horizontal line is higher,
                // can tell the number of crossings between two node-to-relationship edges
                var pairScoreFunc = function (edge1, edge2, edge1level, edge2level, levels) {
                    //
                    // general form of a displayed edges is one of:
                    // (where the solid line is part of the edge and the dotted part is treated as a separate edge related to the other partner or some other node)
                    //
                    // a)             ___________                           .....                   <-- level 2   \
                    //            ___/           \                         .     .                                 }  <--- between rank R and R-1
                    //     [node1]......[other]   \_____[relationship]..../       \....[node2]      <-- level 1   /
                    //                    .                   |
                    //                    .                   |
                    //       ^                                ^
                    //     left_x & v_x               right_x & down_x      (no top_x)
                    //
                    // b)                                                    ........[node2]                          <--- on some other rank
                    //                _________                              |
                    //               /         \                             |
                    //     [node1]__/   [...]   \_____[relationship]_____[virtual]        <--- this virtual node is the "otherParent" of relationship
                    //                                      |
                    //                                      |
                    //       ^                              ^                ^
                    //     left_x & v_x                  down_x       right_x & top_x
                    //
                    // c)            _________
                    //              /         \
                    //     [node]__/   [...]   \__[virtual]
                    //                               |
                    //                               |
                    //                               .......[relationship].....[node2]                                <--- on some other rank
                    //       ^                       ^
                    //     left_x & v_x      right_x & down_x     (no top_x)

                    if (edgeInfo[edge1].right_x <= edgeInfo[edge2].left_x || edgeInfo[edge1].left_x >= edgeInfo[edge2].right_x) return 0; // edges do not overlap => no penalty for any level assignment

                    if (edge1level == edge2level) return Infinity; // intersect and at the same level => forbidden => (penalty == Infinity)

                    if (edge2level > edge1level) {
                        var tmpEdge = edge1;
                        var tmpLevel = edge1level;
                        edge1 = edge2;
                        edge1level = edge2level;
                        edge2 = tmpEdge;
                        edge2level = tmpLevel;
                    }

                    // edge1 is the upper edge by now

                    if (edgeInfo[edge1].v == edgeInfo[edge2].v && edgeInfo[edge1].direction == edgeInfo[edge2].direction && edgeInfo[edge1].attachLevel < edgeInfo[edge2].attachLevel) {
                        return Infinity; // edges originating from the same vertex in the same direction
                        // should keep their relative positioning, period
                    }

                    // edge1 completely overlaps edge2 and is above - this is optimal, penalty = 0
                    if (edgeInfo[edge1].left_x <= edgeInfo[edge2].left_x && edgeInfo[edge1].right_x >= edgeInfo[edge2].right_x) return 0;
                    // should overlap but instead is below - 2 unnecessary intersections
                    if (edgeInfo[edge1].left_x >= edgeInfo[edge2].left_x && edgeInfo[edge1].right_x <= edgeInfo[edge2].right_x) return 2;

                    var extraIntersections = 1.0;

                    // edges cross: if lower edge has top_x and it crosses the other edge -> report 1 unnecessary crossing
                    if (edgeInfo[edge2].top_x >= edgeInfo[edge1].left_x && edgeInfo[edge2].top_x <= edgeInfo[edge1].right_x) extraIntersections++;

                    // [edge1] ------\           /- - - - - [edge1-complement]
                    //               |           |
                    // [edge2] ------1-----------2-------
                    //               |           |
                    //               \___[rel]_ _/
                    //                     |
                    //
                    // in a case like this, [rel] will be moved to a position above [edge2] and instead of
                    // two intersection {1,2} there will be only one intersection of downward egge with edge2.
                    // So if a case like this is detected we subtract 0.4 crossings from intersections 1 and 2
                    // (and from minimum score as well) - as long as there is [edge1-complement]
                    //
                    if (edgeInfo[edge1].hasOwnProperty("edgeComplement") && (!levels || levels[edgeInfo[edge1].edgeComplement] > edge2level)) {
                        if (edgeInfo[edge1].down_x >= edgeInfo[edge2].left_x && edgeInfo[edge1].down_x <= edgeInfo[edge2].right_x) extraIntersections -= 0.4;
                    }

                    return extraIntersections;
                };

                //console.log("[rank " + r + "] Init vertical relatioship levels: " +  stringifyObject(initLevels));

                var optimizer = new __WEBPACK_IMPORTED_MODULE_4__edgeOptimization__["a" /* VerticalPosIntOptimizer */](pairScoreFunc, initLevels, initLevels); // init level == min level

                var relEdgeLevels = optimizer.computeVerticalPositions(5, 500);

                //console.log("[rank " + r + "] Final vertical relatioship levels: " +  stringifyObject(relEdgeLevels));

                numLevels = 0;
                // place computed levels where they ultimately belong
                for (var i = 0; i < edgeInfo.length; i++) {
                    verticalLevels.outEdgeVerticalLevel[edgeInfo[i].v][edgeInfo[i].u].verticalLevel = relEdgeLevels[i];
                    if (relEdgeLevels[i] > numLevels) numLevels = relEdgeLevels[i];
                }

                // optimize cases where an edge has rank > 1 because it supposedly goes over a relationship, but all
                // relationships it goes over are raised because all their edges have higher levels.
                // In such a case it looks beter when the edge in question is re-ranked back to rank 1
                for (var i = 0; i < edgeInfo.length; i++) {
                    // optimize cases where an edge has rank 2 (because it goes over a relationship), but all
                    // relationships it goes over are raised => re-rank to rank 1
                    var level = relEdgeLevels[i];
                    if (level > 1) {
                        var lowerLevel = true;
                        for (var e = 0; e < edgeInfo[i].over.length; e++) {
                            var w = edgeInfo[i].over[e];
                            if (!this.GG.isRelationship(w)) {
                                lowerLevel = false;
                                break;
                            }
                            var parents = this.GG.getParents(w);
                            if (verticalLevels.outEdgeVerticalLevel[parents[0]][w].verticalLevel <= level || verticalLevels.outEdgeVerticalLevel[parents[1]][w].verticalLevel <= level) {
                                lowerLevel = false;
                                break;
                            }
                        }
                        if (lowerLevel) verticalLevels.outEdgeVerticalLevel[edgeInfo[i].v][edgeInfo[i].u].verticalLevel = 1;
                    }
                }
            }

            verticalLevels.rankVerticalLevels[r - 1] += Math.max(0, numLevels - 2);
        }

        //console.log("Vert child:         " + stringifyObject(verticalLevels.childEdgeLevel));
        //console.log("Vert relationships: " + stringifyObject(verticalLevels.outEdgeVerticalLevel));
        //console.log("Vert levels:        " + stringifyObject(verticalLevels.rankVerticalLevels));

        return verticalLevels;
    },

    _findLeftAndRightPartners: function (v, useOrdering) {
        var ordering = useOrdering ? useOrdering.vOrder : this.order.vOrder; // useOrdering is passed when thi sis called from the initial ordering procedure

        var rank = this.ranks[v];
        var orderV = ordering[v];
        var outEdges = this.GG.getOutEdges(v);

        var leftEdges = [];
        var rightEdges = [];

        for (var j = 0; j < outEdges.length; j++) {
            var rel = outEdges[j];
            if (this.ranks[rel] != rank) continue;
            if (ordering[rel] < orderV) leftEdges.push(rel);else rightEdges.push(rel);
        }

        var byDistToV = function (a, b) {
            var dist1 = Math.abs(ordering[a] - orderV);
            var dist2 = Math.abs(ordering[b] - orderV);
            return dist1 - dist2;
        };
        leftEdges.sort(byDistToV);
        rightEdges.sort(byDistToV);

        //console.log("v: " + v + ", leftP: " + stringifyObject(leftEdges) + ", rightP: " + stringifyObject(rightEdges));
        return { "leftPartners": leftEdges, "rightPartners": rightEdges };
    },

    // finds the bes tposition to insert a new twin of v which has the given set of relationships
    findBestTwinInsertPosition: function (v, insertedTwinRelationships, useOrdering) {
        // useOrdering is passed when this is called from the initial ordering procedure
        var allTwins = this.GG.getAllTwinsOf(v);

        var rank = this.ranks[v];
        var rankOrder = useOrdering ? useOrdering.order[rank] : this.order.order[rank];
        var vOrder = useOrdering ? useOrdering.vOrder : this.order.vOrder;

        var byOrder = function (a, b) {
            return vOrder[a] - vOrder[b];
        };
        allTwins.sort(byOrder);

        // for each position [left of leftmost twin, ... ,right of rightmost twin] the total number
        // of partnership edges originating form all twins right of position going left of position
        // plus all edges from left of position going right of position
        // plus number of crossings due to edges to nodes in "insertedTwinRelationships" crossing other twins
        var numEdgesAcross = [];
        for (var i = 0; i <= allTwins.length; i++) numEdgesAcross[i] = 0;

        //console.log("edges across: " + stringifyObject(numEdgesAcross));

        // for each position compute number of edge crossings due to new twin edges
        var leftMostTwinOrder = vOrder[allTwins[0]];
        for (var i = 0; i < insertedTwinRelationships.length; i++) {
            var rel = insertedTwinRelationships[i];
            var relOrder = vOrder[rel];

            if (relOrder < leftMostTwinOrder) for (var j = 1; j <= allTwins.length; j++) // if we insert the twin at any position other then leftmost new edges will cross all twins to the left
            numEdgesAcross[j] += j;else for (var j = 0; j < allTwins.length; j++) // if we insert the twin at any position other then rightmost new edges will cross all twins to the right
            numEdgesAcross[j] += allTwins.length - j;
        }

        //console.log("after self edges - edges across: " + stringifyObject(numEdgesAcross));

        // for each position compute number of edge crossings due to existing twin edges
        for (var i = 0; i < allTwins.length; i++) {
            var partnerInfo = this._findLeftAndRightPartners(allTwins[i], useOrdering);
            var numLeftOf = partnerInfo.leftPartners.length;
            var numRightOf = partnerInfo.rightPartners.length;

            // TODO: can improve a bit when two of the twins are in a relationship and there are other twins
            for (var j = 0; j <= i; j++) numEdgesAcross[j] += numLeftOf;
            for (var j = i + 1; j <= allTwins.length; j++) numEdgesAcross[j] += numRightOf;

            //console.log("after twin " + allTwins[i] + " (leftOf: " + numLeftOf + ", rightOf: " + numRightOf + ") -> edges across: " + stringifyObject(numEdgesAcross));
        }

        //console.log("twin penalties: " + stringifyObject(numEdgesAcross));
        var orderOfLeftMostTwin = vOrder[allTwins[0]];
        var minEdgeCrossLocation = indexOfLastMinElementInArray(numEdgesAcross); // (index == 0) => "insert before leftmost" => (order := orderOfLeftMostTwin)

        var order = orderOfLeftMostTwin + minEdgeCrossLocation;
        // increment the order by the number of relaitonship nodes found inbetween the twins,
        // so that minEdgeCrossLocation corresponds to the gap between the expected two twins
        for (var i = orderOfLeftMostTwin + 1; i < order; i++) {
            var nodeID = rankOrder[i];
            if (this.GG.isRelationship(nodeID)) order++;
        }

        //console.log("edges across: " + stringifyObject(numEdgesAcross));
        //console.log("BEST INSERT POSITION for a twin of " + v + " with edges to " + stringifyObject(insertedTwinRelationships) + " is " + order);
        return order;
    },

    computeRankY: function (oldRanks, oldRankY) {
        var rankY = [0, 0]; // rank 0 is virtual, rank 1 starts at relative 0

        for (var r = 2; r <= this.maxRank; r++) {
            var yDistance = this.GG.isChildhub(this.order.order[r][0]) ? this.yDistanceNodeToChildhub : this.yDistanceChildhubToNode;

            // note: yExtraPerHorizontalLine * vertLevel.rankVerticalLevels[r] part comes from the idea that if there are many
            //       horizontal lines (childlines & relationship lines) between two ranks it is good to separate those ranks vertically
            //       more than ranks with less horizontal lines between them
            rankY[r] = rankY[r - 1] + yDistance + this.yExtraPerHorizontalLine * (Math.max(this.vertLevel.rankVerticalLevels[r - 1], 1) - 1);
        }

        if (oldRanks && oldRankY) {
            // attempt to keep the old Y coordinate for the node with ID == 0 to minimize UI redraws
            var oldRank = oldRanks[0];
            var newRank = this.ranks[0];
            var oldY = oldRankY[oldRank];
            var newY = rankY[newRank];
            var shiftAmount = newY - oldY;
            for (var r = 0; r <= this.maxRank; r++) {
                rankY[r] -= shiftAmount;
            }
        }

        return rankY;
    },

    computeNodeY: function (rank, level) {
        return this.rankY[rank] + (level - 1) * this.yExtraPerHorizontalLine;
    },

    computeRelLineY: function (rank, attachLevel, verticalLevel) {
        var attachY = this.rankY[rank] - attachLevel * this.yAttachPortHeight;

        var relLineY = this.rankY[rank];

        if (verticalLevel == 1) {
            // going above another line
            relLineY -= attachLevel * this.yAttachPortHeight;
        } else if (verticalLevel == 2) {
            // going above relationship node
            relLineY -= this.yExtraPerHorizontalLine * 1.25;
        } else {
            relLineY -= verticalLevel * this.yExtraPerHorizontalLine;
        }

        return { "attachY": attachY, "relLineY": relLineY };
    },
    //========================================[vertical separation for horizontal edges]=

    //=[position]========================================================================

    displayGraph: function (xcoord, message) {
        TIME_DRAWING_DEBUG = 0;
        if (!DISPLAY_POSITIONING_DEBUG) return;

        var debugTimer = new __WEBPACK_IMPORTED_MODULE_0__helpers__["g" /* Timer */]();

        var renderPackage = { convertedG: this.GG,
            ranks: this.ranks,
            ordering: this.order,
            positions: xcoord,
            consangr: this.consangr };

        debug_display_processed_graph(renderPackage, "output", true, message);

        TIME_DRAWING_DEBUG = debugTimer.report();
    },

    position: function () {
        var longEdges = this.find_long_edges(); // pre-find long edges for performance reasons

        var xcoord = new __WEBPACK_IMPORTED_MODULE_2__xcoordclass__["b" /* XCoord */](null, this);
        //printObject(xcoord.xcoord);

        //this.displayGraph(xcoord.xcoord, 'init');

        this.try_shift_right(xcoord, true, false);
        this.try_shift_right(xcoord, false, true);
        xcoord.normalize();

        //this.displayGraph(xcoord.xcoord, 'firstAdj');
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["o" /* printObject */])(xcoord.xcoord);

        var xbest = xcoord.copy();
        var bestScore = this.xcoord_score(xbest);

        for (var i = 0; i <= this.maxXcoordIterations; i++) {
            this.try_shift_right(xcoord, true, true);
            this.try_straighten_long_edges(longEdges, xcoord);

            //this.displayGraph(xcoord.xcoord, 'Adj' + i);
            xcoord.normalize();

            var score = this.xcoord_score(xcoord);

            if (score.isBettertThan(bestScore)) {
                xbest = xcoord.copy();
                bestScore = score;
            } else break;
        }

        //this.displayGraph(xbest.xcoord, 'final');
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["o" /* printObject */])(xbest.xcoord);

        return xbest.xcoord;
    },

    xcoord_score: function (xcoord, considerOnlyRank, considerEdgesFromAbove, considerEdgesToBelow, fromOrderOnRank) {
        // Returns xcoord score, the less the better.
        //
        //  Score equal to the     Σ     (  Ω(e) * ω(e) * X[w] − X[v]  )
        //                      e = (v,w)
        //
        //   where  Ω(e) is an internal value distinct from the input edge weight ω(e),
        //   defined to favor straightening long edges and edges from relationships to child nodes:
        //   - for long edges, it is more important to reduce the horizontal distance between virtual
        //   nodes, so chains may be aligned vertically and thus straightened. The failure to
        //   straighten long edges can result in a ‘‘spaghetti effect’’. Thus Ω(e) is higher for
        //   edges between virtual edges
        //   - for relationship-to-child nodes, it just produces a visually more pleasing arrangement
        //   - Ω(e) is computed by the edge_importance_to_straighten() function

        var score = new __WEBPACK_IMPORTED_MODULE_2__xcoordclass__["c" /* XCoordScore */](this.GG.getMaxRealVertexId());

        var rankFrom = 1;
        var rankTo = this.maxRank;
        if (typeof considerOnlyRank != "undefined") {
            // we have edges:
            //   1) r-1 -> r
            //   2) r   -> r
            //   3) r   -> r+1
            // If not consider above, need to exclude edges of type 1
            // If not consider below, need to exclude edges of type 3
            // Always care about edges of type 2

            rankFrom = considerOnlyRank - 1;
            rankTo = considerOnlyRank;
            if (rankFrom == 0) rankFrom = 1;
            if (!considerEdgesFromAbove) rankFrom = considerOnlyRank; // exclude edges of type 1
        }

        for (var r = rankFrom; r <= rankTo; r++) {
            var len = this.order.order[r].length;

            var fromOrder = 0;
            if (typeof considerOnlyRank != "undefined" && r == considerOnlyRank) fromOrder = fromOrderOnRank;

            for (var i = fromOrder; i < len; ++i) {
                var v = this.order.order[r][i];

                var outEdges = this.GG.getOutEdges(v);
                var lenO = outEdges.length;

                for (var j = 0; j < lenO; ++j) {
                    var u = outEdges[j];

                    if (typeof considerOnlyRank != "undefined") {
                        if (!considerEdgesToBelow && this.ranks[u] != considerOnlyRank) // exclude edges of type 3
                            continue;
                        if (this.ranks[u] == considerOnlyRank && this.order.vOrder[u] < fromOrderOnRank) continue;
                        //if (considerEdgesFromAbove && considerEdgesToBelow && this.ranks[u] == considerOnlyRank && this.GG.isRelationship(v))
                        //    continue;
                    }

                    // have an edge from 'v' to 'u' with weight this.GG.weights[v][u]

                    // determine edge type: from real vertex to real, real to/from virtual or v. to v.
                    var coeff = this.edge_importance_to_straighten(v, u);

                    var w = this.xCoordEdgeWeightValue ? this.GG.weights[v][u] : 1.0;

                    var dist = Math.abs(xcoord.xcoord[v] - xcoord.xcoord[u]);

                    var thisScore = coeff * w * dist;

                    //if (this.GG.isChildhub(v)) thisScore *= Math.min( 15.0, dist );
                    //if (mostCompact) thisScore *= dist;  // place higher value on shorter edges

                    score.add(thisScore);

                    score.addEdge(v, u, dist);
                }
            }
        }

        //console.log("XcoordScore: " + stringifyObject(score));
        return score;
    },

    edge_importance_to_straighten: function (fromV, toV) {
        if (this.GG.isRelationship(toV)) return 1.0;

        if (!this.GG.isVirtual(fromV) && this.GG.isVirtual(toV)) return 1.5;

        if (this.GG.isRelationship(fromV)) return 8.0;

        if (this.GG.isVirtual(fromV)) {
            if (this.GG.isVirtual(toV)) return 16.0;
            return 4.0;
        }
        return 2.0;
    },

    try_shift_right: function (xcoord, scoreQualityOfNodesBelow, scoreQualityOfNodesAbove) {
        // goes over all ranks (top to bottom or bottom to top, depending on iteration)
        // and tries to shift vertices right one at a time. If a shift is good leaves it,
        // if not keeps going further.
        //
        // more precisely, tries to shift the vertex to the desired position up to and including
        // the position optimal according to the median rule, searching the positions in between.
        // Since we are not guaranteed the strictly increasing/decreasing score "smart" searches
        // such as binary search might not work well.

        //this.displayGraph( xcoord.xcoord, "shiftright-start" );
        for (var rr = 0; rr <= this.maxRank; rr++) {

            // go from top to bottom or bottom to top depending on which ranks (above or below)
            // we consider when trying to shift the nodes
            var r;
            if (!scoreQualityOfNodesAbove) r = this.maxRank - rr;else r = rr;

            if (r == 0) continue; // disregard all discarded vertices

            var considerEdgesToBelow = (scoreQualityOfNodesBelow || r == 1) && r != this.maxRank;
            var considerEdgesFromAbove = (scoreQualityOfNodesAbove || r == this.maxRank) && r != 1;

            var toO = 0;
            var fromO = this.order.order[r].length - 1;

            for (var i = fromO; i >= toO; i--) {

                var v = this.order.order[r][i];

                // we care about the quality of resulting graph only for some ranks: sometimes
                // only above the change, sometimes only below the change; in any case we know
                // the change of position of vertices on this rank is not going to affect ranks
                // far away, so we can only compute the score for the ranks we care about.

                var median = this.compute_median(v, xcoord, considerEdgesFromAbove, considerEdgesToBelow);

                //if (v == 28)
                //    console.log("[28] median: " + median);

                if (median != median) median = xcoord.xcoord[v];

                var maxShift = median - xcoord.xcoord[v];

                // speed optimization: shift which we can do without disturbing other vertices and
                //                     thus requiring no backup/restore process
                var noDisturbMax = xcoord.getRightMostNoDisturbPosition(v);
                var maxSafeShift = noDisturbMax < median ? noDisturbMax - xcoord.xcoord[v] : maxShift;

                //if (v==28)
                //    console.log("shiftright-rank-" + r + "-v-" + v + "  -->  DesiredShift: " + maxShift + ", maxSafe: " + maxSafeShift);

                if (maxShift <= 0) continue;

                var bestShift = 0;
                var bestScore = this.xcoord_score(xcoord, r, considerEdgesFromAbove, considerEdgesToBelow, i);
                var shiftAmount = maxShift;

                //if (v==28)
                //    console.log("InitScore: " + stringifyObject(bestScore));
                //if ( r == 7 ) this.displayGraph( xcoord.xcoord, "shiftright-rank-" + r + "-v-" + v + "(before)");

                do {
                    var newScore;

                    if (shiftAmount <= maxSafeShift) {
                        xcoord.xcoord[v] += shiftAmount;
                        newScore = this.xcoord_score(xcoord, r, considerEdgesFromAbove, considerEdgesToBelow, i);
                        xcoord.xcoord[v] -= shiftAmount;
                    } else {
                        var newCoord = xcoord.copy();
                        newCoord.shiftRightAndShiftOtherIfNecessary(v, shiftAmount);
                        newScore = this.xcoord_score(newCoord, r, considerEdgesFromAbove, considerEdgesToBelow, i);
                    }

                    //if (v==9 || v == 10)
                    //    console.log("Shift: " + shiftAmount + ", score: " + newScore.score + " / " + stringifyObject(newScore.inEdgeMaxLen));

                    if (newScore.isBettertThan(bestScore)) {
                        bestShift = shiftAmount;
                        bestScore = newScore;
                    }

                    shiftAmount -= 1;
                } while (shiftAmount >= Math.max(0, maxSafeShift));

                if (bestShift > 0) {
                    xcoord.shiftRightAndShiftOtherIfNecessary(v, bestShift);
                }
                //if ( r == 7 ) this.displayGraph( xcoord.xcoord, "shiftright-rank-" + r + "-v-" + v );
            }

            //this.displayGraph( xcoord.xcoord, "shiftright-rank-" + r + "-end");
        }
    },

    compute_median: function (v, xcoord, considerAbove, considerBelow) {
        var positionsAbove = [];
        var positionsBelow = [];

        var allEdgesWithWeights = this.GG.getAllEdgesWithWeights(v);

        for (var u in allEdgesWithWeights) {
            if (allEdgesWithWeights.hasOwnProperty(u)) {
                if (u == v) continue;
                var weight = allEdgesWithWeights[u]["weight"];

                var coeff = allEdgesWithWeights[u]["out"] ? this.edge_importance_to_straighten(v, u) : this.edge_importance_to_straighten(u, v);

                var w = this.xCoordEdgeWeightValue ? weight : 1.0;

                var score = coeff * w;

                for (var i = 0; i < score; i++) {
                    if (this.ranks[u] <= this.ranks[v]) {
                        positionsAbove.push(xcoord.xcoord[u]);
                    }
                    if (this.ranks[u] >= this.ranks[v]) {
                        positionsBelow.push(xcoord.xcoord[u]);
                    }
                }
            }
        }

        var numericSortFunc = function (a, b) {
            return a - b;
        };

        var median = undefined;
        var medianAbove = undefined;
        var medianBelow = undefined;

        if ((considerAbove || this.GG.isVirtual(v)) && positionsAbove.length > 0) {
            positionsAbove.sort(numericSortFunc);
            var middle = Math.ceil(positionsAbove.length / 2);
            if (middle >= positionsAbove.length) {
                middle = positionsAbove.length - 1;
            }
            if (positionsAbove.length % 2 == 0) medianAbove = Math.floor((positionsAbove[middle] + positionsAbove[middle - 1]) / 2);else medianAbove = positionsAbove[middle];
        }
        if ((considerBelow || this.GG.isVirtual(v)) && positionsBelow.length > 0) {
            positionsBelow.sort(numericSortFunc);
            var middle = Math.ceil(positionsBelow.length / 2);
            if (middle >= positionsBelow.length) middle = positionsBelow.length - 1;
            if (positionsBelow.length % 2 == 0) medianBelow = Math.floor((positionsBelow[middle] + positionsBelow[middle - 1]) / 2);else medianBelow = positionsBelow[middle];
        }

        if (medianAbove !== undefined && medianBelow !== undefined) median = Math.max(medianAbove, medianBelow);else if (medianAbove !== undefined) median = medianAbove;else median = medianBelow;

        return Math.ceil(median);
    },

    try_straighten_long_edges: function (longEdges, xcoord) {
        // try to straigten long edges without moving any other vertices
        var improved = false;

        for (var e = 0; e < longEdges.length; ++e) {
            var chain = longEdges[e];
            //console.log("trying to straighten edge " + stringifyObject(chain));

            // 1) try to straighten by shifting the head

            // go over all nodes from head to tail looking for a bend and trying
            // to move the head to remove the bend
            var currentCenter = xcoord.xcoord[chain[0]];
            var corridorLeft = xcoord.getLeftMostNoDisturbPosition(chain[0]);
            var corridorRight = xcoord.getRightMostNoDisturbPosition(chain[0]);

            // go over all nodes from head to tail looking for a bend
            for (var i = 1; i < chain.length; ++i) {
                var nextV = chain[i];
                var nextCenter = xcoord.xcoord[nextV];
                if (nextCenter != currentCenter) {
                    if (nextCenter >= corridorLeft && nextCenter <= corridorRight) {
                        // all the nodes above can be shifted to this location!
                        for (var j = 0; j < i; ++j) {
                            xcoord.xcoord[chain[j]] = nextCenter;
                        }
                        improved = true;
                        currentCenter = nextCenter;
                    } else break;
                }
                // narrow the coridor to the common available space including this vertex as well
                corridorLeft = Math.max(corridorLeft, xcoord.getLeftMostNoDisturbPosition(nextV));
                corridorRight = Math.min(corridorRight, xcoord.getRightMostNoDisturbPosition(nextV));
                if (corridorRight < corridorLeft) break; // no luck, can't straighten
            }

            // 2) try to straighten by shifting the tail

            // go over all nodes from tail to head looking for a bend and trying
            // to move the tail to remove the bend
            var lastNode = chain.length - 1;
            var currentCenter = xcoord.xcoord[chain[lastNode]];
            var corridorLeft = xcoord.getLeftMostNoDisturbPosition(chain[lastNode]);
            var corridorRight = xcoord.getRightMostNoDisturbPosition(chain[lastNode]);

            // go over all nodes from head to tail looking for a bend
            for (var i = lastNode - 1; i >= 0; --i) {
                var nextV = chain[i];
                var nextCenter = xcoord.xcoord[nextV];
                if (nextCenter != currentCenter) {
                    if (nextCenter >= corridorLeft && nextCenter <= corridorRight) {
                        // all the nodes below can be shifted to this location!
                        for (var j = lastNode; j > i; j--) {
                            xcoord.xcoord[chain[j]] = nextCenter;
                        }
                        improved = true;
                        currentCenter = nextCenter;
                    } else break;
                }
                // narrow the coridor to the common available space including this vertex as well
                corridorLeft = Math.max(corridorLeft, xcoord.getLeftMostNoDisturbPosition(nextV));
                corridorRight = Math.min(corridorRight, xcoord.getRightMostNoDisturbPosition(nextV));
                if (corridorRight < corridorLeft) break; // no luck, can't straighten
            }
        }

        return improved;
    },
    //========================================================================[position]=

    find_long_edges: function () {
        var longEdges = [];

        var maxRealId = this.GG.getMaxRealVertexId();
        var numVert = this.GG.getNumVertices();

        var checked = [];
        for (var v = maxRealId + 1; v < numVert; v++) checked[v] = false;

        for (var v = maxRealId + 1; v < numVert; v++) {

            if (checked[v] || this.ranks[v] == 0) continue;

            // find a long edge - an edge connecting real nodes of non-neighbouring ranks,
            // consisting of virtual vertices on intermediate ranks (plus source/target)

            // start from head node - the first virtual node
            var head = v;
            while (this.GG.isVirtual(this.GG.getInEdges(head)[0])) head = this.GG.getInEdges(head)[0];

            var chain = [];
            var next = head;

            // go towards the tail through out-edges
            do {
                checked[next] = true;
                chain.push(next);
                next = this.GG.getOutEdges(next)[0];
            } while (this.GG.isVirtual(next));

            console.log("Found long edge " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(chain));
            longEdges.push(chain);
        }
        return longEdges;
    }
};

//-------------------------------------------------------------

var DISPLAY_POSITIONING_DEBUG = false;
var TIME_DRAWING_DEBUG = 0;

function make_dynamic_positioned_graph(inputG, debugOutput) {
    var horizontalPersonSeparationDist = 10; // same relative units as in inputG.width fields. Min distance between two person nodes
    var horizontalRelSeparationDist = 6; // same relative units as in inputG.width fields. Min distance between a relationship node and other nodes

    var orderingInitBuckets = 5; // default: 5. It may take up to ~factorial_of_this_number iterations. See ordering()

    var orderingIterations = 24; // paper used: 24. Up to so many iterations are spent optimizing initial ordering

    var xcoordIterations = 4; // default: 8

    var timer = new __WEBPACK_IMPORTED_MODULE_0__helpers__["g" /* Timer */]();

    if (debugOutput) DISPLAY_POSITIONING_DEBUG = true;else DISPLAY_POSITIONING_DEBUG = false;
    var drawGraph = new PositionedGraph(inputG, horizontalPersonSeparationDist, horizontalRelSeparationDist, orderingInitBuckets, orderingIterations, xcoordIterations); // display debug

    console.log("=== Running time: " + timer.report() + "ms ==========");

    return new DynamicPositionedGraph(drawGraph);
}

/***/ }),
/* 175 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_prototype__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_prototype___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prototype__);


const Control = {};
/* harmony export (immutable) */ __webpack_exports__["a"] = Control;


Control.Slider = Class.create({
    initialize: function (d, a, b) {
        var c = this;
        if (Object.isArray(d)) {
            this.handles = d.collect(function (f) {
                return $(f);
            });
        } else {
            this.handles = [$(d)];
        }
        this.track = $(a);
        this.options = b || {};
        this.axis = this.options.axis || "horizontal";
        this.increment = this.options.increment || 1;
        this.step = parseInt(this.options.step || "1");
        this.range = this.options.range || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$R"])(0, 1);
        this.value = 0;
        this.values = this.handles.map(function () {
            return 0;
        });
        this.spans = this.options.spans ? this.options.spans.map(function (e) {
            return $(e);
        }) : false;
        this.options.startSpan = $(this.options.startSpan || null);
        this.options.endSpan = $(this.options.endSpan || null);
        this.restricted = this.options.restricted || false;
        this.maximum = this.options.maximum || this.range.end;
        this.minimum = this.options.minimum || this.range.start;
        this.alignX = parseInt(this.options.alignX || "0");
        this.alignY = parseInt(this.options.alignY || "0");
        this.trackLength = this.maximumOffset() - this.minimumOffset();
        this.handleLength = this.isVertical() ? this.handles[0].offsetHeight != 0 ? this.handles[0].offsetHeight : this.handles[0].style.height.replace(/px$/, "") : this.handles[0].offsetWidth != 0 ? this.handles[0].offsetWidth : this.handles[0].style.width.replace(/px$/, "");
        this.active = false;
        this.dragging = false;
        this.disabled = false;
        if (this.options.disabled) {
            this.setDisabled();
        }
        this.allowedValues = this.options.values ? this.options.values : false;
        if (this.allowedValues) {
            this.minimum = this.allowedValues.min();
            this.maximum = this.allowedValues.max();
        }
        this.eventMouseDown = this.startDrag.bindAsEventListener(this);
        this.eventMouseUp = this.endDrag.bindAsEventListener(this);
        this.eventMouseMove = this.update.bindAsEventListener(this);
        this.handles.each(function (f, e) {
            e = c.handles.length - 1 - e;
            c.setValue(parseFloat((Object.isArray(c.options.sliderValue) ? c.options.sliderValue[e] : c.options.sliderValue) || c.range.start), e);
            f.makePositioned().observe("mousedown", c.eventMouseDown);
        });
        this.track.observe("mousedown", this.eventMouseDown);
        document.observe("mouseup", this.eventMouseUp);
        document.observe("mousemove", this.eventMouseMove);
        this.initialized = true;
    },
    dispose: function () {
        var a = this;
        Event.stopObserving(this.track, "mousedown", this.eventMouseDown);
        Event.stopObserving(document, "mouseup", this.eventMouseUp);
        Event.stopObserving(document, "mousemove", this.eventMouseMove);
        this.handles.each(function (b) {
            Event.stopObserving(b, "mousedown", a.eventMouseDown);
        });
    },
    setDisabled: function () {
        this.disabled = true;
    },
    setEnabled: function () {
        this.disabled = false;
    },
    getNearestValue: function (a) {
        if (this.allowedValues) {
            if (a >= this.allowedValues.max()) {
                return this.allowedValues.max();
            }
            if (a <= this.allowedValues.min()) {
                return this.allowedValues.min();
            }
            var c = Math.abs(this.allowedValues[0] - a);
            var b = this.allowedValues[0];
            this.allowedValues.each(function (d) {
                var e = Math.abs(d - a);
                if (e <= c) {
                    b = d;
                    c = e;
                }
            });
            return b;
        }
        if (a > this.range.end) {
            return this.range.end;
        }
        if (a < this.range.start) {
            return this.range.start;
        }
        return a;
    },
    setValue: function (b, a) {
        if (!this.active) {
            this.activeHandleIdx = a || 0;
            this.activeHandle = this.handles[this.activeHandleIdx];
            this.updateStyles();
        }
        a = a || this.activeHandleIdx || 0;
        if (this.initialized && this.restricted) {
            if (a > 0 && b < this.values[a - 1]) {
                b = this.values[a - 1];
            }
            if (a < this.handles.length - 1 && b > this.values[a + 1]) {
                b = this.values[a + 1];
            }
        }
        b = this.getNearestValue(b);
        this.values[a] = b;
        this.value = this.values[0];
        this.handles[a].style[this.isVertical() ? "top" : "left"] = this.translateToPx(b);
        this.drawSpans();
        if (!this.dragging || !this.event) {
            this.updateFinished();
        }
    },
    setValueBy: function (b, a) {
        this.setValue(this.values[a || this.activeHandleIdx || 0] + b, a || this.activeHandleIdx || 0);
    },
    translateToPx: function (a) {
        return Math.round((this.trackLength - this.handleLength) / (this.range.end - this.range.start) * (a - this.range.start)) + "px";
    },
    translateToValue: function (a) {
        return a / (this.trackLength - this.handleLength) * (this.range.end - this.range.start) + this.range.start;
    },
    getRange: function (b) {
        var a = this.values;
        b = b || 0;
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$R"])(a[b], a[b + 1]);
    },
    minimumOffset: function () {
        return this.isVertical() ? this.alignY : this.alignX;
    },
    maximumOffset: function () {
        return this.isVertical() ? (this.track.offsetHeight != 0 ? this.track.offsetHeight : this.track.style.height.replace(/px$/, "")) - this.alignY : (this.track.offsetWidth != 0 ? this.track.offsetWidth : this.track.style.width.replace(/px$/, "")) - this.alignX;
    },
    isVertical: function () {
        return this.axis == "vertical";
    },
    drawSpans: function () {
        var a = this;
        if (this.spans) {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$R"])(0, this.spans.length - 1).each(function (b) {
                a.setSpan(a.spans[b], a.getRange(b));
            });
        }
        if (this.options.startSpan) {
            this.setSpan(this.options.startSpan, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$R"])(0, this.values.length > 1 ? this.getRange(0).min() : this.value));
        }
        if (this.options.endSpan) {
            this.setSpan(this.options.endSpan, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_prototype__["$R"])(this.values.length > 1 ? this.getRange(this.spans.length - 1).max() : this.value, this.maximum));
        }
    },
    setSpan: function (b, a) {
        if (this.isVertical()) {
            b.style.top = this.translateToPx(a.start);
            b.style.height = this.translateToPx(a.end - a.start + this.range.start);
        } else {
            b.style.left = this.translateToPx(a.start);
            b.style.width = this.translateToPx(a.end - a.start + this.range.start);
        }
    },
    updateStyles: function () {
        this.handles.each(function (a) {
            Element.removeClassName(a, "selected");
        });
        Element.addClassName(this.activeHandle, "selected");
    },
    startDrag: function (c) {
        if (Event.isLeftClick(c)) {
            if (!this.disabled) {
                this.active = true;
                var d = Event.element(c);
                var e = [Event.pointerX(c), Event.pointerY(c)];
                var a = d;
                if (a == this.track) {
                    var b = this.track.cumulativeOffset();
                    this.event = c;
                    this.setValue(this.translateToValue((this.isVertical() ? e[1] - b[1] : e[0] - b[0]) - this.handleLength / 2));
                    b = this.activeHandle.cumulativeOffset();
                    this.offsetX = e[0] - b[0];
                    this.offsetY = e[1] - b[1];
                } else {
                    while (this.handles.indexOf(d) == -1 && d.parentNode) {
                        d = d.parentNode;
                    }
                    if (this.handles.indexOf(d) != -1) {
                        this.activeHandle = d;
                        this.activeHandleIdx = this.handles.indexOf(this.activeHandle);
                        this.updateStyles();
                        var b = this.activeHandle.cumulativeOffset();
                        this.offsetX = e[0] - b[0];
                        this.offsetY = e[1] - b[1];
                    }
                }
            }
            Event.stop(c);
        }
    },
    update: function (a) {
        if (this.active) {
            if (!this.dragging) {
                this.dragging = true;
            }
            this.draw(a);
            // if (Prototype.Browser.WebKit) {
            //     window.scrollBy(0, 0)
            // }
            Event.stop(a);
        }
    },
    draw: function (b) {
        var c = [Event.pointerX(b), Event.pointerY(b)];
        var a = this.track.cumulativeOffset();
        c[0] -= this.offsetX + a[0];
        c[1] -= this.offsetY + a[1];
        this.event = b;
        this.setValue(this.translateToValue(this.isVertical() ? c[1] : c[0]));
        if (this.initialized && this.options.onSlide) {
            this.options.onSlide(this.values.length > 1 ? this.values : this.value, this);
        }
    },
    endDrag: function (a) {
        if (this.active && this.dragging) {
            this.finishDrag(a, true);
            Event.stop(a);
        }
        this.active = false;
        this.dragging = false;
    },
    finishDrag: function (a, b) {
        this.active = false;
        this.dragging = false;
        this.updateFinished();
    },
    updateFinished: function () {
        if (this.initialized && this.options.onChange) {
            this.options.onChange(this.values.length > 1 ? this.values : this.value, this);
        }
        this.event = null;
    }
});

/***/ }),
/* 176 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(5);


/**
 * ActionStack is responsible for keeping track of user actions and providing an undo/redo functionality
 *
 * @class ActionStack
 * @constructor
 */
const ActionStack = Class.create({
    initialize: function () {
        this._currentState = 0;
        this._stack = [];
        this._MAXUNDOSIZE = 100;
    },

    /**
     * Moves one state forward in the action stack
     *
     * @method redo
     */
    redo: function () {
        var nextState = this._getNextState();
        //console.log("Next state: " + stringifyObject(nextState));
        if (!nextState) return;

        if (nextState.eventToGetToThisState) {
            var memo = nextState.eventToGetToThisState.memo;
            memo["noUndoRedo"] = true; // so that this event is not added to the undo/redo stack again
            document.fire(nextState.eventToGetToThisState.eventName, memo);
            this._currentState++;
            return;
        }

        editor.getSaveLoadEngine().createGraphFromSerializedData(nextState.serializedState, true /* do not re-add to undo/redo stack */);
        this._currentState++;
    },

    /**
     * Moves one state backwards in the action stack
     *
     * @method undo
     */
    undo: function () {
        var prevState = this._getPreviousState();
        if (!prevState) return;

        // it may be more efficient to undo the current state instead of full prev state restore
        var currentState = this._getCurrentState();
        //console.log("Current state: " + stringifyObject(currentState));
        if (currentState.eventToUndo) {
            var memo = currentState.eventToUndo.memo;
            memo["noUndoRedo"] = true; // so that this event is not added to the undo/redo stack again
            document.fire(currentState.eventToUndo.eventName, memo);
            this._currentState--;
            return;
        }

        // no easy way - have to recreate the graph from serialization
        editor.getSaveLoadEngine().createGraphFromSerializedData(prevState.serializedState, true /* do not re-add to undo/redo stack */);
        this._currentState--;
    },

    /**
     * Pushes a new state to the end of the action stack
     * 
     *   eventToGetToThisState - optional. Event which should bring the graph from the previous state to this tsate
     *   eventToGoBack         - optional. Event which should bring the graph back to the previous state
     *   serializedState       - optional. Serialized state of the graph as accepted by the load() funciton.
     *                           may only be used when one of the events is not provided. Will be generated
     *                           automatically when needed if not provided.
     *   
     * If one of the events is not provided a complete serializatiomn of the graph will be used to transition
     * in that direction, which is less efficient (slower/requires more memory for state storage). 
     *
     * @method addState
     */
    addState: function (eventToGetToThisState, eventToUndo, serializedState) {
        //this._debug_print_states();

        // 1. remove all states after current state (i.e. all "redo" states) -
        //    they are replaced by the current chain of states starting with this state 
        if (this._currentState < this._size()) this._stack.splice(this._currentState, this._stack.length - this._currentState);

        if (!serializedState) {
            serializedState = editor.getSaveLoadEngine().serialize();
        }
        //console.log("Serialized state: " + stringifyObject(serializedState));

        //if (!eventToGetToThisState && !serializedState)
        //    serializedState = editor.getSaveLoadEngine().serialize();
        //
        //if (!eventToUndo && this._currentState > 0) {
        //    // no event procided to undo this action AND have a current state:
        //    // => current state needs to have a serialization
        //    .. TODO
        //}

        var state = new State(serializedState, eventToGetToThisState, eventToUndo);

        // 2. push this new state to the array and increment the current index

        // spcial case: consequtive name property changes are combined into one property change        
        var currentState = this._getCurrentState();
        if (eventToGetToThisState && currentState && currentState.eventToGetToThisState && currentState.eventToGetToThisState.eventName == "pedigree:node:setproperty" && this._combinableEvents(currentState.eventToGetToThisState, eventToGetToThisState)) {
            //console.log("[UNDOREDO] combining state changes");
            currentState.eventToGetToThisState = eventToGetToThisState;
            currentState.serializedState = serializedState;
            //this._debug_print_states();
            return;
        }

        this._addNewest(state);

        if (this._size() > this._MAXUNDOSIZE) this._removeOldest();

        //this._debug_print_states();
    },

    /**
     * Returns true iff undo/redo should combine event1 and event2,
     * e.g. name change from "some_old_value" to "Abc" and then to "Abcd" will be combined into
     *      one name chnage from "some_old_value" to "Abcd"
     *
     * @method _size
     * @return {Number}
     */
    _combinableEvents: function (event1, event2) {
        if (!event1.memo.hasOwnProperty("nodeID") || !event2.memo.hasOwnProperty("nodeID") || event1.memo.nodeID != event2.memo.nodeID) return false;
        if (event1.memo.properties.hasOwnProperty("setFirstName") && event2.memo.properties.hasOwnProperty("setFirstName")) return true;
        if (event1.memo.properties.hasOwnProperty("setLastName") && event2.memo.properties.hasOwnProperty("setLastName")) return true;
        if (event1.memo.properties.hasOwnProperty("setLastNameAtBirth") && event2.memo.properties.hasOwnProperty("setLastNameAtBirth")) return true;
        if (event1.memo.properties.hasOwnProperty("setComments") && event2.memo.properties.hasOwnProperty("setComments")) return true;
        if (event1.memo.properties.hasOwnProperty("setChildlessReason") && event2.memo.properties.hasOwnProperty("setChildlessReason")) return true;
        return false;
    },

    /**
     * Returns the number of elements in the stack
     *
     * @method _size
     * @return {Number}
     */
    _size: function () {
        return this._stack.length;
    },

    /**
     * Adds the given state as the latest state in the sequence
     *
     * @method _addNewest
     */
    _addNewest: function (state) {
        this._stack.push(state);
        this._currentState++;
    },

    /**
     * Removes the front element of the stack (i.e. the oldest stored state)
     *
     * @method _removeOldest
     */
    _removeOldest: function () {
        this._stack.splice(0, 1);
        this._currentState--;
    },

    /**
     * Returns the current state
     *
     * @method _getCurrentState
     * @return {null|Object}
     */
    _getCurrentState: function () {
        return this._size() == 0 || this._currentState == 0 ? null : this._stack[this._currentState - 1];
    },

    /**
     * Returns the next state
     *
     * @method _getNextState
     * @return {null|Object}
     */
    _getNextState: function () {
        return this._size() <= 1 || this._currentState >= this._size() ? null : this._stack[this._currentState];
    },

    /**
     * Returns the previous state
     *
     * @method _getPreviousState
     * @return {null|Object}
     */
    _getPreviousState: function () {
        return this._size() == 1 || this._currentState <= 1 ? null : this._stack[this._currentState - 2];
    },

    _debug_print_states: function () {
        console.log("------------");
        for (var i = 0; i < this._stack.length; i++) {
            console.log("[" + i + "] EventToState: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(this._stack[i].eventToGetToThisState) + "\n" + "    EventUndo: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(this._stack[i].eventToUndo) + "\n" + "    EventSerial: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__["c" /* stringifyObject */])(this._stack[i].serializedState));
        }
        console.log("------------");
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = ActionStack;


var State = Class.create({
    initialize: function (serializedState, eventToGetToThisState, eventToUndo) {
        this.serializedState = serializedState;
        this.eventToGetToThisState = eventToGetToThisState;
        this.eventToUndo = eventToUndo;
    }
});

/***/ }),
/* 177 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Raphael) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lineSet__ = __webpack_require__(166);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__pedigreeEditorAttributes__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__graphicHelpers__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__partnership__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__person__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__personGroup__ = __webpack_require__(171);







/**
 * View is responsible for graphical representation of th epedigree as well as user interaction
 *
 * @class View
 * @constructor
 */

const View = Class.create({

    initialize: function () {
        console.log("--- view init ---");

        this.preGenerateGraphics();

        this._nodeMap = {}; // {nodeID} : {AbstractNode}

        this.hoverModeZones = editor.getPaper().set();

        this._currentMarkedNew = [];
        this._currentGrownNodes = [];
        this._currentHoveredNode = null;
        this._currentDraggable = null;

        this._lineSet = new __WEBPACK_IMPORTED_MODULE_0__lineSet__["a" /* LineSet */](); // used to track intersecting lines
    },

    /**
     * Pre-generates paths and pre-computes bounding boxes for shapes which are commonly used in the graph.
     * Raphael is slow and re-computing each path/box for every node is noticeably slow
     *
     * @method preGenerateGraphics
     */
    preGenerateGraphics: function () {
        //
        // computing scaled icons:
        //   var iconScale = 0.6;
        //   var path = "...";
        //   console.log("scaled path: " + Raphael.transformPath(path, ["s", iconScale, iconScale, 0, 0]));
        //

        // 1) menu button
        // nonScaledPath = "M2.021,9.748L2.021,9.748V9.746V9.748zM2.022,9.746l5.771,5.773l-5.772,5.771l2.122,2.123l7.894-7.895L4.143,7.623L2.022,9.746zM12.248,23.269h14.419V20.27H12.248V23.269zM16.583,17.019h10.084V14.02H16.583V17.019zM12.248,7.769v3.001h14.419V7.769H12.248z";
        this.__menuButton_svgPath = "M1.213,5.849C1.213,5.849,1.213,5.849,1.213,5.849C1.213,5.849,1.213,5.848,1.213,5.848C1.213,5.848,1.213,5.849,1.213,5.849C1.213,5.849,1.213,5.849,1.213,5.849M1.213,5.848C1.213,5.848,4.676,9.3114,4.676,9.3114C4.676,9.3114,1.2126,12.774,1.2126,12.774C1.2126,12.774,2.486,14.048,2.486,14.048C2.486,14.048,7.222,9.311,7.222,9.311C7.222,9.311,2.486,4.574,2.486,4.574C2.486,4.574,1.213,5.848,1.213,5.8476C1.2131999999999998,5.8476,1.2131999999999998,5.8476,1.2131999999999998,5.8476M7.348799999999999,13.9614C7.348799999999999,13.9614,16.0002,13.9614,16.0002,13.9614C16.0002,13.9614,16.0002,12.161999999999999,16.0002,12.161999999999999C16.0002,12.161999999999999,7.348799999999999,12.161999999999999,7.348799999999999,12.161999999999999C7.348799999999999,12.161999999999999,7.348799999999999,13.9614,7.348799999999999,13.9614C7.348799999999999,13.9614,7.348799999999999,13.9614,7.348799999999999,13.9614M9.949799999999998,10.2114C9.949799999999998,10.2114,16.0002,10.2114,16.0002,10.2114C16.0002,10.2114,16.0002,8.411999999999999,16.0002,8.411999999999999C16.0002,8.411999999999999,9.949799999999998,8.411999999999999,9.949799999999998,8.411999999999999C9.949799999999998,8.411999999999999,9.949799999999998,10.2114,9.949799999999998,10.2114C9.949799999999998,10.2114,9.949799999999998,10.2114,9.949799999999998,10.2114M7.348799999999999,4.6613999999999995C7.348799999999999,4.6613999999999995,7.348799999999999,6.462,7.348799999999999,6.462C7.348799999999999,6.462,16.0002,6.462,16.0002,6.462C16.0002,6.462,16.0002,4.661,16.0,4.6614C16.0,4.6614,7.349,4.6614,7.349,4.6614C7.349,4.6614,7.349,4.6614,7.349,4.6614";
        this.__menuButton_BBox = Raphael.pathBBox(this.__menuButton_svgPath);

        // 2) delete button
        // nonScaledPath = var path = "M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z";
        this.__deleteButton_svgPath = "M14.867,12.851C14.867,12.851,11.566,9.55,11.566,9.55C11.566,9.55,14.866,6.249,14.866,6.249C14.866,6.249,13.169,4.551,13.169,4.551C13.169,4.551,9.868,7.852,9.868,7.852C9.868,7.852,6.567,4.551,6.567,4.551C6.567,4.551,4.87,6.249,4.87,6.249C4.87,6.249,8.171,9.55,8.171,9.55C8.171,9.55,4.87,12.851,4.870,12.851C4.870,12.851,6.568,14.549,6.568,14.549C6.568,14.549,9.868,11.248,9.868,11.248C9.868,11.248,13.169,14.549,13.169,14.549C13.169,14.549,14.867,12.851,14.867,12.851";
        this.__deleteButton_BBox = Raphael.pathBBox(this.__deleteButton_svgPath);

        // 3) twins button
        //this.__twinsButton_svgPath = "M0,15L8,0L16,15";
        //this.__twinsButton_BBox    = Raphael.pathBBox(this.__twinsButton_svgPath);

        // 4) proband arrow
        //this.__arrow_svgPath = "M7.589,20.935l-6.87,6.869l2.476,2.476l6.869-6.869l1.858,1.857l2.258-8.428l-8.428,2.258L7.589,20.935z";
        this.__arrow_svgPath = "M8.348,23.029C8.348,23.029,0.791,30.584,0.791,30.584C0.791,30.584,3.515,33.308,3.515,33.308C3.515,33.308,11.07,25.752,11.0704,25.752C11.07,25.752,13.114,27.795,13.114,27.795C13.114,27.795,15.598,18.524,15.598,18.524C15.598,18.524,6.327,21.008,6.327,21.008C6.327,21.008,8.348,23.029,8.348,23.0285C8.348,23.029,8.348,23.029,8.348,23.029";
        this.__probandArrowPath = Raphael.transformPath(this.__arrow_svgPath, ["s", 1.1, 1.1, 0, 0]);
    },

    /**
     * Returns a map of node IDs to nodes
     *
     * @method getNodeMap
     * @return {Object}
     *
     {
        {nodeID} : {AbstractNode}
     }
     */
    getNodeMap: function () {
        return this._nodeMap;
    },

    /**
     * Returns a node with the given node ID
     *
     * @method getNode
     * @param {nodeId} id of the node to be returned
     * @return {AbstractNode}
     *
     */
    getNode: function (nodeId) {
        if (!this._nodeMap.hasOwnProperty(nodeId)) {
            console.log("ERROR: requesting non-existent node " + nodeId);
            throw "ERROR";
            return null;
        }
        return this._nodeMap[nodeId];
    },

    getMaxNodeID: function () {
        var max = 0;
        for (var node in this._nodeMap) if (this._nodeMap.hasOwnProperty(node)) if (parseInt(node) > max) max = node;
        return max;
    },

    /**
     * Returns the person node containing x and y coordinates, or null if outside all person nodes
     *
     * @method getPersonNodeNear
     * @return {Object} or null
     */
    getPersonNodeNear: function (x, y) {
        for (var nodeID in this._nodeMap) {
            if (this._nodeMap.hasOwnProperty(nodeID)) {
                var node = this.getNode(nodeID);
                if ((node.getType() == "Person" || node.getType() == "PersonGroup") && node.getGraphics().containsXY(x, y)) return node;
            }
        }
        return null;
    },

    /**
     * Returns the node that is currently selected
     *
     * @method getCurrentHoveredNode
     * @return {AbstractNode}
     */
    getCurrentHoveredNode: function () {
        return this._currentHoveredNode;
    },

    /**
     * Returns the currently dragged element
     *
     * @method getCurrentDraggable
     * @return Either a handle from a hoverbox, or a PlaceHolder
     */
    getCurrentDraggable: function () {
        return this._currentDraggable;
    },

    /**
     * Returns the Object that is currently being dragged
     *
     * @method setCurrentDraggable
     * @param draggable A handle or a PlaceHolder
     */
    setCurrentDraggable: function (draggable) {
        this._currentDraggable = draggable;
    },

    /**
     * Removes given node from node index (Does not delete the node visuals).
     *
     * @method removeFromNodeMap
     * @param {nodeId} id of the node to be removed
     */
    removeFromNodeMap: function (nodeID) {
        delete this.getNodeMap()[nodeID];
    },

    /**
     * Creates a new set of raphael objects representing a curve from (xFrom, yFrom) trough (...,yTop) to (xTo, yTo).
     * The bend from (xTo,yTo) to vertical level yTop will happen "lastBend" pixels from xTo.
     * In case the flat part intersects any existing known lines a special crossing is drawn and added to the set.
     *
     * @method drawCurvedLineWithCrossings
     */
    drawCurvedLineWithCrossings: function (id, xFrom, yFrom, yTop, xTo, yTo, lastBend, attr, twoLines, secondLineBelow) {
        //console.log("yFrom: " + yFrom + ", yTo: " + yTo + ", yTop: " + yTop);

        if (yFrom == yTop && yFrom == yTo) return this.drawLineWithCrossings(id, xFrom, yFrom, xTo, yTo, attr, twoLines, secondLineBelow);

        var cornerRadius = __WEBPACK_IMPORTED_MODULE_2__pedigreeEditorAttributes__["a" /* PedigreeEditorAttributes */].curvedLinesCornerRadius * 0.8;
        var goesRight = xFrom > xTo;
        if (isFinite(lastBend)) {
            var xFinalBend = goesRight ? xTo + lastBend : xTo - lastBend;
            var xFinalBendVert = goesRight ? xTo + lastBend + cornerRadius : xTo - lastBend - cornerRadius;
            var xBeforeFinalBend = goesRight ? xTo + lastBend + cornerRadius * 2 : xTo - lastBend - cornerRadius * 2;
        } else {
            var xBeforeFinalBend = xTo;
        }
        var xFromAndBit = goesRight ? xFrom - cornerRadius / 2 : xFrom + cornerRadius / 2;
        var xFromAfterCorner = goesRight ? xFromAndBit - cornerRadius : xFromAndBit + cornerRadius;
        var xFromAfter2Corners = goesRight ? xFromAndBit - 2 * cornerRadius : xFromAndBit + 2 * cornerRadius;

        //console.log("XFinalBend: " + xFinalBend + ", xTo : " + xTo);

        if (yFrom <= yTop) {
            this.drawLineWithCrossings(id, xFrom, yFrom, xBeforeFinalBend, yFrom, attr, twoLines, !goesRight, true);
        } else {
            this.drawLineWithCrossings(id, xFrom, yFrom, xFromAndBit, yFrom, attr, twoLines, !goesRight, true);

            if (Math.abs(yFrom - yTop) >= cornerRadius * 2) {
                if (goesRight) __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__graphicHelpers__["a" /* drawCornerCurve */])(xFromAndBit, yFrom, xFromAfterCorner, yFrom - cornerRadius, true, attr, twoLines, -2.5, 2.5, 2.5, -2.5);else __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__graphicHelpers__["a" /* drawCornerCurve */])(xFromAndBit, yFrom, xFromAfterCorner, yFrom - cornerRadius, true, attr, twoLines, 2.5, 2.5, -2.5, -2.5);
                this.drawLineWithCrossings(id, xFromAfterCorner, yFrom - cornerRadius, xFromAfterCorner, yTop + cornerRadius, attr, twoLines, goesRight);
                if (goesRight) __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__graphicHelpers__["a" /* drawCornerCurve */])(xFromAfterCorner, yTop + cornerRadius, xFromAfter2Corners, yTop, false, attr, twoLines, -2.5, 2.5, 2.5, -2.5);else __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__graphicHelpers__["a" /* drawCornerCurve */])(xFromAfterCorner, yTop + cornerRadius, xFromAfter2Corners, yTop, false, attr, twoLines, 2.5, 2.5, -2.5, -2.5);
            } else {
                // draw one continuous curve
                if (goesRight) __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__graphicHelpers__["b" /* drawLevelChangeCurve */])(xFromAndBit, yFrom, xFromAfter2Corners, yTop, attr, twoLines, -2.5, 2.5, 2.5, -2.5);else __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__graphicHelpers__["b" /* drawLevelChangeCurve */])(xFromAndBit, yFrom, xFromAfter2Corners, yTop, attr, twoLines, 2.5, 2.5, -2.5, -2.5);
            }
            this.drawLineWithCrossings(id, xFromAfter2Corners, yTop, xBeforeFinalBend, yTop, attr, twoLines, !goesRight, true);
        }

        if (xBeforeFinalBend != xTo) {
            // curve down to yTo level
            if (Math.abs(yTo - yTop) >= cornerRadius * 2) {
                // draw corner
                if (goesRight) __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__graphicHelpers__["a" /* drawCornerCurve */])(xBeforeFinalBend, yTop, xFinalBendVert, yTop + cornerRadius, true, attr, twoLines, 2.5, 2.5, -2.5, -2.5);else __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__graphicHelpers__["a" /* drawCornerCurve */])(xBeforeFinalBend, yTop, xFinalBendVert, yTop + cornerRadius, true, attr, twoLines, 2.5, -2.5, -2.5, 2.5);
                this.drawLineWithCrossings(id, xFinalBendVert, yTop + cornerRadius, xFinalBendVert, yTo - cornerRadius, attr, twoLines, !goesRight);
                if (goesRight) __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__graphicHelpers__["a" /* drawCornerCurve */])(xFinalBendVert, yTo - cornerRadius, xFinalBend, yTo, false, attr, twoLines, 2.5, 2.5, -2.5, -2.5);else __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__graphicHelpers__["a" /* drawCornerCurve */])(xFinalBendVert, yTo - cornerRadius, xFinalBend, yTo, false, attr, twoLines, 2.5, -2.5, -2.5, 2.5);
            } else {
                // draw one continuous curve
                if (goesRight) __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__graphicHelpers__["b" /* drawLevelChangeCurve */])(xBeforeFinalBend, yTop, xFinalBend, yTo, attr, twoLines, 2.5, 2.5, -2.5, -2.5);else __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__graphicHelpers__["b" /* drawLevelChangeCurve */])(xBeforeFinalBend, yTop, xFinalBend, yTo, attr, twoLines, 2.5, -2.5, -2.5, 2.5);
            }
            this.drawLineWithCrossings(id, xFinalBend, yTo, xTo, yTo, attr, twoLines, !goesRight);
        }
    },

    /**
     * Creates a new set of raphael objects representing a line segment from (x1,y1) to (x2,y2).
     * In case this line segment intersects any existing known segments a special crossing is drawn and added to the set.
     *
     * @method drawLineWithCrossings
     */
    drawLineWithCrossings: function (owner, x1, y1, x2, y2, attr, twoLines, secondLineBelow, bothEndsGoDown) {

        // make sure line goes from the left to the right (and if vertical from the top to the bottom):
        // this simplifies drawing the line piece by piece from intersection to intersection
        if (x1 > x2 || x1 == x2 && y1 > y2) {
            var tx = x1;
            var ty = y1;
            x1 = x2;
            y1 = y2;
            x2 = tx;
            y2 = ty;
        }

        var isHorizontal = y1 == y2;
        var isVertical = x1 == x2;

        var intersections = this._lineSet.addLine(owner, x1, y1, x2, y2);

        // sort intersections by distance form the start
        var compareDistanceToStart = function (p1, p2) {
            var dist1 = (x1 - p1.x) * (x1 - p1.x) + (y1 - p1.y) * (y1 - p1.y);
            var dist2 = (x1 - p2.x) * (x1 - p2.x) + (y1 - p2.y) * (y1 - p2.y);
            return dist1 - dist2;
        };
        intersections.sort(compareDistanceToStart);
        //console.log("intersection points: " + stringifyObject(intersections));

        for (var lineNum = 0; lineNum < (twoLines ? 2 : 1); lineNum++) {

            // TODO: this is a bit hairy, just a quick hack to make two nice parallel curves
            //       for consang. relationships: simple raphael.transform() does not work well
            //       because then the curves around crossings wont be exactly above the crossing
            if (twoLines) {
                if (!bothEndsGoDown) {
                    x1 += -2.5 + lineNum * 7.5;
                    x2 += -2.5 + lineNum * 7.5;
                } else {
                    x1 -= 2.5;
                    x2 += 2.5;
                }

                if (secondLineBelow) {
                    y1 += 2.5 - lineNum * 7.5;
                    y2 += 2.5 - lineNum * 7.5;
                } else {
                    y1 += -2.5 + lineNum * 7.5;
                    y2 += -2.5 + lineNum * 7.5;
                }
            }

            var raphaelPath = "M " + x1 + " " + y1;
            for (var i = 0; i < intersections.length; i++) {
                var intersectPoint = intersections[i];

                var distance = function (p1, p2) {
                    return (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);
                };

                var noCrossSymbolProximity = isHorizontal ? 20 * 20 : 9 * 9;

                if (distance(intersectPoint, { "x": x1, "y": y1 }) < noCrossSymbolProximity) continue;
                if (distance(intersectPoint, { "x": x2, "y": y2 }) < noCrossSymbolProximity) continue;

                if (isHorizontal) {
                    if (twoLines) {
                        if (secondLineBelow) intersectPoint.y += 2.5 - lineNum * 7.5;else intersectPoint.y += -2.5 + lineNum * 7.5;
                    }
                    // a curve above the crossing
                    raphaelPath += " L " + (intersectPoint.x - 10) + " " + intersectPoint.y;
                    raphaelPath += " C " + (intersectPoint.x - 7) + " " + (intersectPoint.y + 1) + " " + (intersectPoint.x - 7) + " " + (intersectPoint.y - 7) + " " + intersectPoint.x + " " + (intersectPoint.y - 7);
                    raphaelPath += " C " + (intersectPoint.x + 7) + " " + (intersectPoint.y - 7) + " " + (intersectPoint.x + 7) + " " + (intersectPoint.y + 1) + " " + (intersectPoint.x + 10) + " " + intersectPoint.y;
                } else if (isVertical) {
                    if (twoLines) {
                        intersectPoint.x += -2.5 + lineNum * 7.5;
                    }
                    // a curve on the right around crossing
                    raphaelPath += " L " + intersectPoint.x + " " + (intersectPoint.y - 10);
                    raphaelPath += " C " + (intersectPoint.x - 1) + " " + (intersectPoint.y - 7) + " " + (intersectPoint.x + 7) + " " + (intersectPoint.y - 7) + " " + (intersectPoint.x + 7) + " " + intersectPoint.y;
                    raphaelPath += " C " + (intersectPoint.x + 7) + " " + (intersectPoint.y + 7) + " " + (intersectPoint.x - 1) + " " + (intersectPoint.y + 7) + " " + intersectPoint.x + " " + (intersectPoint.y + 10);
                }
                // else: some diagonal line: presumably there should be none, if there are some
                //       everything will be ok except there will be no special intersection graphic drawn
            }
            raphaelPath += " L " + x2 + " " + y2;
            editor.getPaper().path(raphaelPath).attr(attr).toBack();
        }
    },

    /**
     * Creates a new node in the graph and returns it. The node type is obtained from
     * editor.getGraph() and may be on of Person, Partnership or ... TODO. The position
     * of the node is also obtained form editor.getGraph()
     *
     * @method addPerson
     * @param {Number} [id] The id of the node
     * @return {Person}
     */
    addNode: function (id) {
        //console.log("add node");
        var positionedGraph = editor.getGraph();

        if (!positionedGraph.isValidID(id)) throw "addNode(): Invalid id";

        var node;
        var properties = positionedGraph.getProperties(id);

        var graphPos = positionedGraph.getPosition(id);
        var position = editor.convertGraphCoordToCanvasCoord(graphPos.x, graphPos.y);

        if (positionedGraph.isRelationship(id)) {
            console.log("-> add partnership");
            node = new __WEBPACK_IMPORTED_MODULE_4__partnership__["a" /* Partnership */](position.x, position.y, id, properties);
        } else if (positionedGraph.isPersonGroup(id)) {
            console.log("-> add person group");
            node = new __WEBPACK_IMPORTED_MODULE_6__personGroup__["a" /* PersonGroup */](position.x, position.y, id, properties);
        } else if (positionedGraph.isPerson(id)) {
            console.log("-> add person");
            node = new __WEBPACK_IMPORTED_MODULE_5__person__["a" /* Person */](position.x, position.y, id, properties);
        } else {
            throw "addNode(): unsupported node type";
        }

        this.getNodeMap()[id] = node;

        return node;
    },

    moveNode: function (id, animate) {
        var positionedGraph = editor.getGraph();
        var graphPos = positionedGraph.getPosition(id);
        var position = editor.convertGraphCoordToCanvasCoord(graphPos.x, graphPos.y);
        this.getNode(id).setPos(position.x, position.y, animate);
    },

    changeNodeIds: function (changedIdsSet) {
        var newNodeMap = {};

        // change all IDs at once so that have both new and old references at the same time
        for (var oldID in this._nodeMap) {
            var node = this.getNode(oldID);

            var newID = changedIdsSet.hasOwnProperty(oldID) ? changedIdsSet[oldID] : oldID;
            node.setID(newID);

            newNodeMap[newID] = node;
        }

        this._nodeMap = newNodeMap;

        this._lineSet.replaceIDs(changedIdsSet);
    },

    /**
     * Enters hover-mode state, which is when a handle or a PlaceHolder is being dragged around the screen
     *
     * @method enterHoverMode
     * @param sourceNode The node whose handle is being dragged, or the placeholder that is being dragged
     * @param hoverTypes Should be 'parent', 'child' or 'partner'. Only nodes which can be in the correponding
     *                   relationship with sourceNode will be highlighted
     * dragged on top of them.
     */
    enterHoverMode: function (sourceNode, hoverType) {

        //var timer = new Timer();

        var me = this;
        var validTargets = this.getValidDragTargets(sourceNode.getID(), hoverType);

        validTargets.each(function (nodeID) {
            me._currentGrownNodes.push(nodeID);

            var node = me.getNode(nodeID);
            node.getGraphics().grow();

            var hoverModeZone = node.getGraphics().getHoverBox().getHoverZoneMask().clone().toFront();
            //var hoverModeZone = node.getGraphics().getHoverBox().getHoverZoneMask().toFront();
            hoverModeZone.hover(function () {
                me._currentHoveredNode = nodeID;
                node.getGraphics().getHoverBox().setHighlighted(true);
            }, function () {
                me._currentHoveredNode = null;
                node.getGraphics().getHoverBox().setHighlighted(false);
            });

            me.hoverModeZones.push(hoverModeZone);
        });

        //timer.printSinceLast("=== Enter hover mode - highlight: ");
    },

    /**
     * Exits hover-mode state, which is when a handle or a PlaceHolder is being dragged around the screen
     *
     * @method exitHoverMode
     */
    exitHoverMode: function () {
        this._currentHoveredNode = null;

        this.hoverModeZones.remove();

        var me = this;
        this._currentGrownNodes.each(function (nodeID) {
            var node = me.getNode(nodeID);
            node.getGraphics().shrink();
            node.getGraphics().getHoverBox().setHighlighted(false);
        });

        this._currentGrownNodes = [];
    },

    unmarkAll: function () {
        for (var i = 0; i < this._currentMarkedNew.length; i++) {
            var node = this.getNode(this._currentMarkedNew[i]);
            node.getGraphics().unmark();
        }
        this._currentMarkedNew = [];
    },

    getValidDragTargets: function (sourceNodeID, hoverType) {
        var result = [];
        switch (hoverType) {
            case "sibling":
                result = editor.getGraph().getPossibleSiblingsOf(sourceNodeID);
                break;
            case "child":
                // all person nodes which are not ancestors of sourse node and which do not already have parents
                result = editor.getGraph().getPossibleChildrenOf(sourceNodeID);
                break;
            case "parent":
                result = editor.getGraph().getPossibleParentsOf(sourceNodeID);
                break;
            case "partnerR":
            case "partnerL":
                // all person nodes of the other gender or unknown gender (who ar enot already partners)
                result = editor.getGraph().getPossiblePartnersOf(sourceNodeID);
                //console.log("possible partners: " + stringifyObject(result));
                break;
            case "PlaceHolder":
                // all nodes which can be this placehodler: e.g. all that can be child of it's parents &&
                // partners of it's partners
                throw "TODO";
            default:
                throw "Incorrect hoverType";
        }
        return result;
    },

    applyChanges: function (changeSet, markNew) {
        // applies change set of the form {"new": {list of nodes}, "moved": {list of nodes} }
        console.log("Change set: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(changeSet));

        var timer = new __WEBPACK_IMPORTED_MODULE_1__helpers__["g" /* Timer */]();
        var timer2 = new __WEBPACK_IMPORTED_MODULE_1__helpers__["g" /* Timer */]();

        try {

            this.unmarkAll();

            // to simplify code which deals woith removed nodes making other mnodes to move
            if (!changeSet.hasOwnProperty("moved")) changeSet["moved"] = [];
            if (!changeSet.hasOwnProperty("removed")) changeSet["removed"] = [];
            if (!changeSet.hasOwnProperty("removedInternally")) changeSet["removedInternally"] = [];

            // 0. remove all removed
            //
            // 1. move all person nodes
            // 2. create all new person nodes
            //
            // 3. move all existing relationships - as all lines are attached to relationships we want to draw
            //                                      them after all person nodes are already in correct position
            // 4. create new relationships

            if (changeSet.hasOwnProperty("removed")) {
                var affectedByLineRemoval = {};

                for (var i = 0; i < changeSet.removed.length; i++) {
                    var nextRemoved = changeSet.removed[i];

                    this.getNodeMap()[nextRemoved].remove();
                    this.removeFromNodeMap(nextRemoved);

                    var affected = this._lineSet.removeAllLinesAffectedByOwnerMovement(nextRemoved);

                    for (var j = 0; j < affected.length; j++) if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["h" /* arrayContains */])(changeSet.removed, affected[j])) {
                        // ignore nodes which are removed anyway
                        //console.log("adding due to line removal: " + affected[j]);
                        affectedByLineRemoval[affected[j]] = true;
                    }
                }

                // for each removed node all nodes with higher ids get their IDs shifted down by 1
                var idChanged = false;
                var changedIDs = {};
                var maxCurrentNodeId = this.getMaxNodeID();
                for (var i = 0; i < changeSet.removedInternally.length; i++) {
                    var nextRemoved = changeSet.removedInternally[i];
                    for (var u = nextRemoved + 1; u <= maxCurrentNodeId; u++) {
                        idChanged = true;
                        if (!changedIDs.hasOwnProperty(u)) changedIDs[u] = u - 1;else changedIDs[u]--;
                    }
                }

                // change all IDs at once so that have both new and old references at the same time
                if (idChanged) this.changeNodeIds(changedIDs);

                //console.log("Affected by line removal: " + stringifyObject(affectedByLineRemoval));
                //console.log("LineSet: " + stringifyObject(this._lineSet));

                for (var node in affectedByLineRemoval) if (affectedByLineRemoval.hasOwnProperty(node)) {
                    var newID = changedIDs.hasOwnProperty(node) ? changedIDs[node] : node;
                    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["h" /* arrayContains */])(changeSet.moved, newID)) {
                        //console.log("moved due to line removal: oldID="+node + ", newID=" + newID);
                        changeSet.moved.push(newID);
                    }
                }
            }

            timer.printSinceLast("=== Removal runtime: ");

            var movedPersons = [];
            var movedRelationships = [];
            var newPersons = [];
            var newRelationships = [];
            var animate = {};

            /*
            // TODO: animations disabled because hoverboxes & labels behave strangely
            if (changeSet.hasOwnProperty("animate")) {
                for (var i = 0; i < changeSet.animate.length; i++) {
                    animate[changeSet.animate[i]] = true;
                }
            }*/

            //console.log("moved: " + stringifyObject(changeSet.moved));

            if (changeSet.hasOwnProperty("moved")) {
                // remove all lines so that we start drawing anew
                for (var i = 0; i < changeSet.moved.length; i++) {
                    var nextMoved = changeSet.moved[i];
                    if (editor.getGraph().isRelationship(nextMoved)) {
                        var affected = this._lineSet.removeAllLinesAffectedByOwnerMovement(nextMoved);
                        for (var j = 0; j < affected.length; j++) {
                            var node = affected[j];
                            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["h" /* arrayContains */])(changeSet.moved, node)) changeSet.moved.push(node);
                        }
                    }
                }

                // move actual nodes
                for (var i = 0; i < changeSet.moved.length; i++) {
                    var nextMoved = changeSet.moved[i];
                    if (editor.getGraph().isRelationship(nextMoved)) movedRelationships.push(nextMoved);else movedPersons.push(nextMoved);
                }
            }
            console.log("moved: " + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__["c" /* stringifyObject */])(changeSet.moved));
            if (changeSet.hasOwnProperty("new")) {
                for (var i = 0; i < changeSet["new"].length; i++) {
                    var nextNew = changeSet["new"][i];
                    if (editor.getGraph().isRelationship(nextNew)) newRelationships.push(nextNew);else newPersons.push(nextNew);
                }
            }

            timer.printSinceLast("=== Bookkeeping/sorting runtime: ");

            for (var i = 0; i < movedPersons.length; i++) this.moveNode(movedPersons[i], animate.hasOwnProperty(movedPersons[i]));

            timer.printSinceLast("=== Move persons runtime: ");

            for (var i = 0; i < newPersons.length; i++) {
                var newPerson = this.addNode(newPersons[i]);
                if (markNew) {
                    newPerson.getGraphics().markPermanently();
                    this._currentMarkedNew.push(newPersons[i]);
                }
            }

            timer.printSinceLast("=== New persons runtime: ");

            for (var i = 0; i < movedRelationships.length; i++) this.moveNode(movedRelationships[i]);

            timer.printSinceLast("=== Move rels runtime: ");

            for (var i = 0; i < newRelationships.length; i++) this.addNode(newRelationships[i]);

            timer.printSinceLast("=== New rels runtime: ");

            if (changeSet.hasOwnProperty("highlight")) {
                for (var i = 0; i < changeSet.highlight.length; i++) {
                    var nextHighlight = changeSet.highlight[i];
                    this.getNode(nextHighlight).getGraphics().markPermanently();
                    this._currentMarkedNew.push(nextHighlight);
                }
            }

            //timer.printSinceLast("=== highlight: ");

            // re-evaluate which buttons & handles are appropriate for the nodes (e.g. twin button appears/disappears)
            for (var nodeID in this._nodeMap) {
                if (this._nodeMap.hasOwnProperty(nodeID)) {
                    if (editor.getGraph().isPerson(nodeID) && !this.getNode(nodeID).getGraphics().getHoverBox().isMenuToggled()) {
                        this.getNode(nodeID).getGraphics().getHoverBox().removeButtons();
                        this.getNode(nodeID).getGraphics().getHoverBox().removeHandles();
                    }
                }
            }

            var checkNumberingEvent = { "memo": { "check": true, "noUndoRedo": true } };
            editor.getController().handleRenumber(checkNumberingEvent);

            // TODO: move the viewport to make changeSet.makevisible nodes visible on screen

            timer.printSinceLast("=== highlight & update handles runtime: ");
            timer2.printSinceLast("=== Total apply changes runtime: ");
        } catch (err) {
            console.log("[view] update error");
            console.trace(err);
        }
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = View;

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(27)))

/***/ }),
/* 178 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__saveLoadEngine__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__templateSelector__ = __webpack_require__(92);





const ViewerProbandDataLoader = Class.create(__WEBPACK_IMPORTED_MODULE_0__saveLoadEngine__["a" /* ProbandDataLoader */], {
    initialize: function (probandDataUrl) {
        this._probandDataUrl = probandDataUrl;
        this.probandData = undefined;
    },
    load: function (callWhenReady) {
        // new Ajax.Request(this._probandDataUrl, {
        //     method: "GET",
        //     onSuccess: this.onProbandDataReady.bind(this),
        //     onComplete: callWhenReady ? callWhenReady : {}
        // });
    }
});
/* unused harmony export ViewerProbandDataLoader */


const ViewerSaveLoadEngine = Class.create(__WEBPACK_IMPORTED_MODULE_0__saveLoadEngine__["b" /* SaveLoadEngine */], {

    initialize: function (pedigreeDataUrl) {
        this._pedigreeDataUrl = pedigreeDataUrl;
        this._saveInProgress = false;
    },
    load: function () {
        console.log("initiating load process");

        // new Ajax.Request(this._pedigreeDataUrl, {
        //     method: "GET",
        //     onCreate: function() {
        //         document.fire("pedigree:load:start");
        //     },
        //     onSuccess: function (response) {
        //         //console.log("Data from LOAD: " + stringifyObject(response));
        //         //console.log("[Data from LOAD]");
        //         var rawdata  = getSubSelectorTextFromXML(response.responseXML, "property", "name", "data", "value");
        //         var jsonData = unescapeRestData(rawdata);
        //         if (jsonData.trim()) {
        //             console.log("[LOAD] recived JSON: " + stringifyObject(jsonData));
        // 
        //             jsonData = editor.getVersionUpdater().updateToCurrentVersion(jsonData);
        // 
        //             this.createGraphFromSerializedData(jsonData);
        //         } else {
        //             new TemplateSelector(true);
        //         }
        //     }.bind(this)
        // });
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = ViewerSaveLoadEngine;


/***/ }),
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Raphael) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__workspace__ = __webpack_require__(180);


const ViewerWorkspace = Class.create(__WEBPACK_IMPORTED_MODULE_0__workspace__["a" /* Workspace */], {

    initialize: function () {
        var me = this;
        this.canvas = new Element('div', { 'id': 'canvas' });
        this.workArea = new Element('div', { 'id': 'work-area' }).update(this.canvas);
        if ($('body') && 'jquery' in $('body')) {
            $('#panogram').append(this.workArea);
        } else {
            $('panogram').update(this.workArea);
        }
        var screenDimensions = document.viewport.getDimensions();
        this.width = screenDimensions.width;
        this.height = screenDimensions.height - this.canvas.cumulativeOffset().top - 4;
        this._paper = Raphael("canvas", this.width, this.height);
        this.viewBoxX = 0;
        this.viewBoxY = 0;
        this.zoomCoefficient = 1;

        this.background = this.getPaper().rect(0, 0, this.width, this.height).attr({ stroke: 'none', opacity: 0 }).toBack();
        this.background.node.setAttribute("class", "panning-background");

        this.adjustSizeToScreen = this.adjustSizeToScreen.bind(this);
        Event.observe(window, 'resize', me.adjustSizeToScreen);
        this.generateViewControls();

        //Initialize pan by dragging
        var start = function () {
            if (editor.isAnyMenuVisible()) {
                return;
            }
            me.background.ox = me.background.attr("x");
            me.background.oy = me.background.attr("y");
            //me.background.attr({cursor: 'url(https://mail.google.com/mail/images/2/closedhand.cur)'});
            me.background.attr({ cursor: 'move' });
        };
        var move = function (dx, dy) {
            var deltax = me.viewBoxX - dx / me.zoomCoefficient;
            var deltay = me.viewBoxY - dy / me.zoomCoefficient;

            me.getPaper().setViewBox(deltax, deltay, me.width / me.zoomCoefficient, me.height / me.zoomCoefficient);
            me.background.ox = deltax;
            me.background.oy = deltay;
            me.background.attr({ x: deltax, y: deltay });
        };
        var end = function () {
            me.viewBoxX = me.background.ox;
            me.viewBoxY = me.background.oy;
            me.background.attr({ cursor: 'default' });
        };
        me.background.drag(move, start, end);

        if (document.addEventListener) {
            // adapted from from raphaelZPD
            me.handleMouseWheel = function (evt) {
                if (evt.preventDefault) evt.preventDefault();else evt.returnValue = false;

                // disable while menu is active - too easy to scroll and get the active node out of sight, which is confusing
                if (editor.isAnyMenuVisible()) {
                    return;
                }

                var delta;
                if (evt.wheelDelta) delta = -evt.wheelDelta; // Chrome/Safari
                else delta = evt.detail; // Mozilla

                //console.log("Mouse wheel: " + delta);
                if (delta > 0) {
                    var x = $$('.zoom-out')[0];
                    $$('.zoom-out')[0].click();
                } else {
                    $$('.zoom-in')[0].click();
                }
            };

            if (navigator.userAgent.toLowerCase().indexOf('webkit') >= 0) {
                this.canvas.addEventListener('mousewheel', me.handleMouseWheel, false); // Chrome/Safari
            } else {
                this.canvas.addEventListener('DOMMouseScroll', me.handleMouseWheel, false); // Others
            }
        }
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = ViewerWorkspace;

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(27)))

/***/ }),
/* 180 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Raphael) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__slider__ = __webpack_require__(175);


/**
 * Workspace contains the Raphael canvas, the zoom/pan controls and the menu bar
 * on the top. The class includes functions for managing the Raphael paper object and coordinate transformation methods
 * for taking pan and zoom levels into account.
 *
 * @class Workspace
 * @constructor
 */

const Workspace = Class.create({

    initialize: function () {
        var me = this;
        this.canvas = new Element('div', { 'id': 'canvas' });
        this.workArea = new Element('div', { 'id': 'work-area' }).update(this.canvas);
        $('panogram').update(this.workArea);
        var screenDimensions = document.viewport.getDimensions();
        // this.generateTopMenu();
        this.width = screenDimensions.width;
        this.height = screenDimensions.height - this.canvas.cumulativeOffset().top - 4;
        this._paper = Raphael("canvas", this.width, this.height);
        this.viewBoxX = 0;
        this.viewBoxY = 0;
        this.zoomCoefficient = 1;

        this.background = this.getPaper().rect(0, 0, this.width, this.height).attr({ fill: 'blue', stroke: 'none', opacity: 0 }).toBack();
        this.background.node.setAttribute("class", "panning-background");

        this.adjustSizeToScreen = this.adjustSizeToScreen.bind(this);
        Event.observe(window, 'resize', me.adjustSizeToScreen);
        this.generateViewControls();

        //Initialize pan by dragging
        var start = function () {
            if (editor.isAnyMenuVisible()) {
                return;
            }
            me.background.ox = me.background.attr("x");
            me.background.oy = me.background.attr("y");
            //me.background.attr({cursor: 'url(https://mail.google.com/mail/images/2/closedhand.cur)'});
            me.background.attr({ cursor: 'move' });
        };
        var move = function (dx, dy) {
            var deltax = me.viewBoxX - dx / me.zoomCoefficient;
            var deltay = me.viewBoxY - dy / me.zoomCoefficient;

            me.getPaper().setViewBox(deltax, deltay, me.width / me.zoomCoefficient, me.height / me.zoomCoefficient);
            me.background.ox = deltax;
            me.background.oy = deltay;
            me.background.attr({ x: deltax, y: deltay });
        };
        var end = function () {
            me.viewBoxX = me.background.ox;
            me.viewBoxY = me.background.oy;
            me.background.attr({ cursor: 'default' });
        };
        me.background.drag(move, start, end);

        if (document.addEventListener) {
            // adapted from from raphaelZPD
            me.handleMouseWheel = function (evt) {
                if (evt.preventDefault) evt.preventDefault();else evt.returnValue = false;

                // disable while menu is active - too easy to scroll and get the active node out of sight, which is confusing
                if (editor.isAnyMenuVisible()) {
                    return;
                }

                var delta;
                if (evt.wheelDelta) delta = -evt.wheelDelta; // Chrome/Safari
                else delta = evt.detail; // Mozilla

                //console.log("Mouse wheel: " + delta);
                if (delta > 0) {
                    var x = $$('.zoom-out')[0];
                    $$('.zoom-out')[0].click();
                } else {
                    $$('.zoom-in')[0].click();
                }
            };

            if (navigator.userAgent.toLowerCase().indexOf('webkit') >= 0) {
                this.canvas.addEventListener('mousewheel', me.handleMouseWheel, false); // Chrome/Safari
            } else {
                this.canvas.addEventListener('DOMMouseScroll', me.handleMouseWheel, false); // Others
            }
        }
    },

    /**
     * Returns the Raphael paper object.
     *
     * @method getPaper
     * @return {Object} Raphael Paper element
     */
    getPaper: function () {
        return this._paper;
    },

    /**
     * Returns the div element containing everything except the top menu bar
     *
     * @method getWorkArea
     * @return {HTMLElement}
     */
    getWorkArea: function () {
        return this.workArea;
    },

    /**
     * Returns width of the work area
     *
     * @method getWidth
     * @return {Number}
     */
    getWidth: function () {
        return this.width;
    },

    /**
     * Returns height of the work area
     *
     * @method getHeight
     * @return {Number}
     */
    getHeight: function () {
        return this.height;
    },

    /**
     * Creates the menu on the top
     *
     * @method generateTopMenu
     */
    generateTopMenu: function () {
        var menu = new Element('div', { 'id': 'editor-menu' });
        this.getWorkArea().insert({ before: menu });
        var submenus = [];

        if (editor.isUnsupportedBrowser()) {
            submenus = [{
                name: 'input',
                items: [{ key: 'readonlymessage', label: 'Unsuported browser mode', icon: 'exclamation-triangle' }]
            }, {
                name: 'output',
                items: [{ key: 'export', label: 'Export', icon: 'download' }, { key: 'reload', label: 'Reload', icon: 'refresh' }]
            }];
        } else {
            submenus = [{
                name: 'input',
                items: [{ key: 'templates', label: 'Templates', icon: 'copy' }, { key: 'import', label: 'Import', icon: 'upload' }]
            }, {
                name: 'edit',
                items: [{ key: 'undo', label: 'Undo', icon: 'undo' }, { key: 'redo', label: 'Redo', icon: 'repeat' }, { key: 'layout', label: 'Automatic layout', icon: 'sitemap' }, { key: 'number', label: 'Renumber', icon: 'sort-numeric-asc' }]
            }, {
                name: 'reset',
                items: [{ key: 'clear', label: 'Clear all', icon: 'times-circle' }, { key: 'reload', label: 'Reload', icon: 'refresh' }]
            }, {
                name: 'output',
                items: [{ key: 'export', label: 'Export', icon: 'download' }
                //{ key : 'print',     label : 'Print', icon : 'print'},
                ]
            }];
        }
        var _createSubmenu = function (data) {
            var submenu = new Element('div', { 'class': data.name + '-actions action-group' });
            menu.insert(submenu);
            data.items.each(function (item) {
                submenu.insert(_createMenuItem(item));
            });
        };
        var _createMenuItem = function (data) {
            var mi = new Element('span', { 'id': 'action-' + data.key, 'class': 'menu-item ' + data.key }).insert(new Element('span', { 'class': 'fa fa-' + data.icon })).insert(' ').insert(data.label);
            if (data.callback && typeof this[data.callback] == 'function') {
                mi.observe('click', function () {
                    this[data.callback]();
                });
            }
            return mi;
        };
        submenus.each(_createSubmenu);
    },

    /**
     * Adjusts the canvas viewbox to the given zoom coefficient
     *
     * @method zoom
     * @param {Number} zoomCoefficient The zooming ratio
     */
    zoom: function (zoomCoefficient) {
        if (zoomCoefficient < 0.15) zoomCoefficient = 0.15;
        if (zoomCoefficient > 0.15 && zoomCoefficient < 0.25) zoomCoefficient = 0.25;
        zoomCoefficient = Math.round(zoomCoefficient / 0.05) / 20;
        //console.log("zoom: " + zoomCoefficient);
        var newWidth = this.width / zoomCoefficient;
        var newHeight = this.height / zoomCoefficient;
        this.viewBoxX = this.viewBoxX + (this.width / this.zoomCoefficient - newWidth) / 2;
        this.viewBoxY = this.viewBoxY + (this.height / this.zoomCoefficient - newHeight) / 2;
        this.getPaper().setViewBox(this.viewBoxX, this.viewBoxY, newWidth, newHeight);
        this.zoomCoefficient = zoomCoefficient;
        this.background.attr({ x: this.viewBoxX, y: this.viewBoxY, width: newWidth, height: newHeight });
    },

    /**
     * Creates the controls for panning and zooming
     *
     * @method generateViewControls
     */
    generateViewControls: function () {
        var _this = this;
        this.__controls = new Element('div', { 'class': 'view-controls' });
        // Pan controls
        this.__pan = new Element('div', { 'class': 'view-controls-pan', title: 'Pan' });
        this.__controls.insert(this.__pan);
        ['up', 'right', 'down', 'left', 'home'].each(function (direction) {
            var faIconClass = direction == 'home' ? "fa-user" : "fa-arrow-" + direction;
            _this.__pan[direction] = new Element('span', { 'class': 'view-control-pan pan-' + direction + ' fa fa-fw ' + faIconClass, 'title': 'Pan ' + direction });
            _this.__pan.insert(_this.__pan[direction]);
            _this.__pan[direction].observe('click', function (event) {
                if (direction == 'home') {
                    _this.centerAroundNode(0);
                } else if (direction == 'up') {
                    _this.panTo(_this.viewBoxX, _this.viewBoxY - 300);
                } else if (direction == 'down') {
                    _this.panTo(_this.viewBoxX, _this.viewBoxY + 300);
                } else if (direction == 'left') {
                    _this.panTo(_this.viewBoxX - 300, _this.viewBoxY);
                } else {
                    _this.panTo(_this.viewBoxX + 300, _this.viewBoxY);
                }
            });
        });
        // Zoom controls
        var trackLength = 200;
        this.__zoom = new Element('div', { 'class': 'view-controls-zoom', title: 'Zoom' });
        this.__controls.insert(this.__zoom);
        this.__zoom.track = new Element('div', { 'class': 'zoom-track' });
        this.__zoom.handle = new Element('div', { 'class': 'zoom-handle', title: 'Drag to zoom' });
        this.__zoom['in'] = new Element('div', { 'class': 'zoom-button zoom-in fa fa-fw fa-search-plus', title: 'Zoom in' });
        this.__zoom['out'] = new Element('div', { 'class': 'zoom-button zoom-out fa fa-fw fa-search-minus', title: 'Zoom out' });
        this.__zoom.label = new Element('div', { 'class': 'zoom-crt-value' });
        this.__zoom.insert(this.__zoom['in']);
        this.__zoom.insert(this.__zoom.track);
        this.__zoom.track.insert(this.__zoom.handle);
        this.__zoom.track.style.height = trackLength + 'px';
        this.__zoom.insert(this.__zoom.out);
        this.__zoom.insert(this.__zoom.label);
        // Scriptaculous slider
        // see also http://madrobby.github.com/scriptaculous/slider/
        //
        // Here a non-linear scale is used: slider positions form [0 to 0.9] correspond to
        // zoom coefficients from 1.25x to 0.25x, and zoom positions from (0.9 to 1]
        // correspond to single deepest zoom level 0.15x
        this.zoomSlider = new __WEBPACK_IMPORTED_MODULE_0__slider__["a" /* Control */].Slider(this.__zoom.handle, this.__zoom.track, {
            axis: 'vertical',
            minimum: 0,
            maximum: trackLength,
            increment: 1,
            alignY: 6,
            onSlide: function (value) {
                // Called whenever the Slider is moved by dragging.
                // The called function gets the slider value (or array if slider has multiple handles) as its parameter.
                //console.log("new val: " + value + " current coeff: " + _this.zoomCoefficient );
                if (value <= 0.9) {
                    _this.zoom(-value / 0.9 + 1.25);
                } else {
                    _this.zoom(0.15);
                }
            },
            onChange: function (value) {
                // Called whenever the Slider has finished moving or has had its value changed via the setSlider Value function.
                // The called function gets the slider value (or array if slider has multiple handles) as its parameter.
                if (value <= 0.9) {
                    _this.zoom(-value / 0.9 + 1.25);
                } else {
                    _this.zoom(0.15);
                }
            }
        });
        if (editor.isUnsupportedBrowser()) {
            this.zoomSlider.setValue(0.25 * 0.9); // 0.25 * 0.9 corresponds to zoomCoefficient of 1, i.e. 1:1
            // - for best chance of decent looks on non-SVG browsers like IE8
        } else {
            this.zoomSlider.setValue(0.5 * 0.9); // 0.5 * 0.9 corresponds to zoomCoefficient of 0.75x
        }
        this.__zoom['in'].observe('click', function (event) {
            if (_this.zoomCoefficient < 0.25) _this.zoomSlider.setValue(0.9); // zoom in from the any value below 0.25x goes to 0.25x (which is 0.9 on the slider)
            else _this.zoomSlider.setValue(-(_this.zoomCoefficient - 1) * 0.9); // +0.25x
        });
        this.__zoom['out'].observe('click', function (event) {
            if (_this.zoomCoefficient <= 0.25) _this.zoomSlider.setValue(1); // zoom out from 0.25x goes to the final slider position
            else _this.zoomSlider.setValue(-(_this.zoomCoefficient - 1.5) * 0.9); // -0.25x
        });
        // Insert all controls in the document
        this.getWorkArea().insert(this.__controls);
    },

    /* To work around a bug in Raphael or Raphaelzpd (?) which creates differently sized lines
     * @ different zoom levels given the same "stroke-width" in pixels this function computes
     * the pixel size to be used at this zoom level to create a line of the correct size.
     *
     * Returns the pixel value to be used in stoke-width
     */
    getSizeNormalizedToDefaultZoom: function (pixelSizeAtDefaultZoom) {
        return pixelSizeAtDefaultZoom;
    },

    /**
     * Returns the current zoom level (not normalized to any value, larger numbers mean deeper zoom-in)
     */
    getCurrentZoomLevel: function (pixelSizeAtDefaultZoom) {
        return this.zoomCoefficient;
    },

    /**
     * Converts the coordinates relative to the Raphael canvas to coordinates relative to the canvas div
     * and returns them
     *
     * @method canvasToDiv
     * @param {Number} canvasX The x coordinate relative to the Raphael canvas (ie with pan/zoom transformations)
     * @param {Number} canvasY The y coordinate relative to the Raphael canvas (ie with pan/zoom transformations)
     * @return {{x: number, y: number}} Object with coordinates
     */
    canvasToDiv: function (canvasX, canvasY) {
        return {
            x: this.zoomCoefficient * (canvasX - this.viewBoxX),
            y: this.zoomCoefficient * (canvasY - this.viewBoxY)
        };
    },

    /**
     * Converts the coordinates relative to the canvas div to coordinates relative to the Raphael canvas
     * by applying zoom/pan transformations and returns them.
     *
     * @method divToCanvas
     * @param {Number} divX The x coordinate relative to the canvas
     * @param {Number} divY The y coordinate relative to the canvas
     * @return {{x: number, y: number}} Object with coordinates
     */
    divToCanvas: function (divX, divY) {
        return {
            x: divX / this.zoomCoefficient + this.viewBoxX,
            y: divY / this.zoomCoefficient + this.viewBoxY
        };
    },

    /**
     * Converts the coordinates relative to the browser viewport to coordinates relative to the canvas div,
     * and returns them.
     *
     * @method viewportToDiv
     * @param {Number} absX The x coordinate relative to the viewport
     * @param {Number} absY The y coordinate relative to the viewport
     * @return {{x: number, y: number}} Object with coordinates
     */
    viewportToDiv: function (absX, absY) {
        return {
            x: +absX - this.canvas.cumulativeOffset().left,
            y: absY - this.canvas.cumulativeOffset().top
        };
    },

    /**
     * Animates a transformation of the viewbox to the given coordinate
     *
     * @method panTo
     * @param {Number} x The x coordinate relative to the Raphael canvas
     * @param {Number} y The y coordinate relative to the Raphael canvas
     */
    panTo: function (x, y, instant) {
        var me = this,
            oX = this.viewBoxX,
            oY = this.viewBoxY,
            xDisplacement = x - oX,
            yDisplacement = y - oY;

        if (editor.isUnsupportedBrowser()) {
            instant = true;
        }

        var numSeconds = instant ? 0 : .4;
        var frames = instant ? 1 : 11;

        var xStep = xDisplacement / frames,
            yStep = yDisplacement / frames;

        if (xStep == 0 && yStep == 0) return;

        var progress = 0;

        (function draw() {
            setTimeout(function () {
                if (progress++ < frames) {
                    me.viewBoxX += xStep;
                    me.viewBoxY += yStep;
                    me.getPaper().setViewBox(me.viewBoxX, me.viewBoxY, me.width / me.zoomCoefficient, me.height / me.zoomCoefficient);
                    me.background.attr({ x: me.viewBoxX, y: me.viewBoxY });
                    draw();
                }
            }, 1000 * numSeconds / frames);
        })();
    },

    /**
     * Animates a transformation of the viewbox by the given delta in the X direction
     *
     * @method panTo
     * @param {Number} deltaX The move size
     */
    panByX: function (deltaX, instant) {
        this.panTo(this.viewBoxX + Math.floor(deltaX / this.zoomCoefficient), this.viewBoxY, instant);
    },

    /**
     * Adjusts the canvas size to the current viewport dimensions.
     *
     * @method adjustSizeToScreen
     */
    adjustSizeToScreen: function () {
        var screenDimensions = document.viewport.getDimensions();
        this.width = screenDimensions.width;
        this.height = screenDimensions.height - this.canvas.cumulativeOffset().top - 4;
        this.getPaper().setSize(this.width, this.height);
        this.getPaper().setViewBox(this.viewBoxX, this.viewBoxY, this.width / this.zoomCoefficient, this.height / this.zoomCoefficient);
        this.background && this.background.attr({ "width": this.width, "height": this.height });
        if (editor.getNodeMenu()) {
            editor.getNodeMenu().reposition();
        }
    },

    /**
     * Pans the canvas to put the node with the given id at the center.
     *
     * When (xCenterShift, yCenterShift) are given positions the node with the given shift relative
     * to the center instead of exact center of the screen
     *
     * @method centerAroundNode
     * @param {Number} nodeID The id of the node
     */
    centerAroundNode: function (nodeID, instant, xCenterShift, yCenterShift) {
        var node = editor.getNode(nodeID);
        if (node) {
            var x = node.getX(),
                y = node.getY();
            if (!xCenterShift) xCenterShift = 0;
            if (!yCenterShift) yCenterShift = 0;
            var xOffset = this.getWidth() / this.zoomCoefficient;
            var yOffset = this.getHeight() / this.zoomCoefficient;
            this.panTo(x - xOffset / 2 - xCenterShift, y - yOffset / 2 - yCenterShift, instant);
        }
    }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = Workspace;

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(27)))

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($H, $R, Sizzle) {var __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/
(function() {

/**
 * @preserve
 * Prototype JavaScript framework, version 1.7.1
 *  (c) 2005-2010 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/
/*
 * Prototype JavaScript framework, version 1.7.1
 *  (c) 2005-2010 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/
var Prototype = {
  Version: '1.7.1',
  Browser: (function(){
    var ua = navigator.userAgent;
    // Opera (at least) 8.x+ has "Opera" as a [[Class]] of `window.opera`
    // This is a safer inference than plain boolean type conversion of `window.opera`
    var isOpera = Object.prototype.toString.call(window.opera) == '[object Opera]';
    return {
      IE:             !!window.attachEvent && !isOpera,
      Opera:          isOpera,
      WebKit:         ua.indexOf('AppleWebKit/') > -1,
      Gecko:          ua.indexOf('Gecko') > -1 && ua.indexOf('KHTML') === -1,
      MobileSafari:   /Apple.*Mobile/.test(ua)
    }
  })(),
  BrowserFeatures: {
    XPath: !!document.evaluate,
    SelectorsAPI: !!document.querySelector,
    ElementExtensions: (function() {
      var constructor = window.Element || window.HTMLElement;
      return !!(constructor && constructor.prototype);
    })(),
    SpecificElementExtensions: (function() {
      // First, try the named class
      if (typeof window.HTMLDivElement !== 'undefined')
        return true;
      var div = document.createElement('div'),
          form = document.createElement('form'),
          isSupported = false;
      if (div['__proto__'] && (div['__proto__'] !== form['__proto__'])) {
        isSupported = true;
      }
      div = form = null;
      return isSupported;
    })()
  },
  ScriptFragment: '<script[^>]*>([\\S\\s]*?)<\/script\\s*>',
  JSONFilter: /^\/\*-secure-([\s\S]*)\*\/\s*$/,
  emptyFunction: function() { },
  K: function(x) { return x }
};
if (Prototype.Browser.MobileSafari)
  Prototype.BrowserFeatures.SpecificElementExtensions = false;
/* Based on Alex Arnell's inheritance implementation. */
var Class = (function() {
  
  // Some versions of JScript fail to enumerate over properties, names of which 
  // correspond to non-enumerable properties in the prototype chain
  var IS_DONTENUM_BUGGY = (function(){
    for (var p in { toString: 1 }) {
      // check actual property name, so that it works with augmented Object.prototype
      if (p === 'toString') return false;
    }
    return true;
  })();
  
  function subclass() {};
  function create() {
    var parent = null, properties = $A(arguments);
    if (Object.isFunction(properties[0]))
      parent = properties.shift();
    function klass() {
      this.initialize.apply(this, arguments);
    }
    Object.extend(klass, Class.Methods);
    klass.superclass = parent;
    klass.subclasses = [];
    if (parent) {
      subclass.prototype = parent.prototype;
      klass.prototype = new subclass;
      parent.subclasses.push(klass);
    }
    for (var i = 0, length = properties.length; i < length; i++)
      klass.addMethods(properties[i]);
    if (!klass.prototype.initialize)
      klass.prototype.initialize = Prototype.emptyFunction;
    klass.prototype.constructor = klass;
    return klass;
  }
  function addMethods(source) {
    var ancestor   = this.superclass && this.superclass.prototype,
        properties = Object.keys(source);
    // IE6 doesn't enumerate `toString` and `valueOf` (among other built-in `Object.prototype`) properties,
    // Force copy if they're not Object.prototype ones.
    // Do not copy other Object.prototype.* for performance reasons
    if (IS_DONTENUM_BUGGY) {
      if (source.toString != Object.prototype.toString)
        properties.push("toString");
      if (source.valueOf != Object.prototype.valueOf)
        properties.push("valueOf");
    }
    for (var i = 0, length = properties.length; i < length; i++) {
      var property = properties[i], value = source[property];
      if (ancestor && Object.isFunction(value) &&
          value.argumentNames()[0] == "$super") {
        var method = value;
        value = (function(m) {
          return function() { return ancestor[m].apply(this, arguments); };
        })(property).wrap(method);
        
        // We used to use `bind` to ensure that `toString` and `valueOf`
        // methods were called in the proper context, but now that we're 
        // relying on native bind and/or an existing polyfill, we can't rely
        // on the nuanced behavior of whatever `bind` implementation is on
        // the page.
        //
        // MDC's polyfill, for instance, doesn't like binding functions that
        // haven't got a `prototype` property defined.
        value.valueOf = (function(method) {
          return function() { return method.valueOf.call(method); };
        })(method);
        
        value.toString = (function(method) {
          return function() { return method.toString.call(method); };
        })(method);
      }
      this.prototype[property] = value;
    }
    return this;
  }
  return {
    create: create,
    Methods: {
      addMethods: addMethods
    }
  };
})();
(function() {
  var _toString = Object.prototype.toString,
      _hasOwnProperty = Object.prototype.hasOwnProperty,
      NULL_TYPE = 'Null',
      UNDEFINED_TYPE = 'Undefined',
      BOOLEAN_TYPE = 'Boolean',
      NUMBER_TYPE = 'Number',
      STRING_TYPE = 'String',
      OBJECT_TYPE = 'Object',
      FUNCTION_CLASS = '[object Function]',
      BOOLEAN_CLASS = '[object Boolean]',
      NUMBER_CLASS = '[object Number]',
      STRING_CLASS = '[object String]',
      ARRAY_CLASS = '[object Array]',
      DATE_CLASS = '[object Date]',
      NATIVE_JSON_STRINGIFY_SUPPORT = window.JSON &&
        typeof JSON.stringify === 'function' &&
        JSON.stringify(0) === '0' &&
        typeof JSON.stringify(Prototype.K) === 'undefined';
        
  
  
  var DONT_ENUMS = ['toString', 'toLocaleString', 'valueOf',
   'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];
  
  // Some versions of JScript fail to enumerate over properties, names of which 
  // correspond to non-enumerable properties in the prototype chain
  var IS_DONTENUM_BUGGY = (function(){
    for (var p in { toString: 1 }) {
      // check actual property name, so that it works with augmented Object.prototype
      if (p === 'toString') return false;
    }
    return true;
  })();
        
  function Type(o) {
    switch(o) {
      case null: return NULL_TYPE;
      case (void 0): return UNDEFINED_TYPE;
    }
    var type = typeof o;
    switch(type) {
      case 'boolean': return BOOLEAN_TYPE;
      case 'number':  return NUMBER_TYPE;
      case 'string':  return STRING_TYPE;
    }
    return OBJECT_TYPE;
  }
  
  function extend(destination, source) {
    for (var property in source)
      destination[property] = source[property];
    return destination;
  }
  function inspect(object) {
    try {
      if (isUndefined(object)) return 'undefined';
      if (object === null) return 'null';
      return object.inspect ? object.inspect() : String(object);
    } catch (e) {
      if (e instanceof RangeError) return '...';
      throw e;
    }
  }
  function toJSON(value) {
    return Str('', { '': value }, []);
  }
  function Str(key, holder, stack) {
    var value = holder[key];
    if (Type(value) === OBJECT_TYPE && typeof value.toJSON === 'function') {
      value = value.toJSON(key);
    }
    var _class = _toString.call(value);
    switch (_class) {
      case NUMBER_CLASS:
      case BOOLEAN_CLASS:
      case STRING_CLASS:
        value = value.valueOf();
    }
    switch (value) {
      case null: return 'null';
      case true: return 'true';
      case false: return 'false';
    }
    var type = typeof value;
    switch (type) {
      case 'string':
        return value.inspect(true);
      case 'number':
        return isFinite(value) ? String(value) : 'null';
      case 'object':
        for (var i = 0, length = stack.length; i < length; i++) {
          if (stack[i] === value) {
            throw new TypeError("Cyclic reference to '" + value + "' in object");
          }
        }
        stack.push(value);
        var partial = [];
        if (_class === ARRAY_CLASS) {
          for (var i = 0, length = value.length; i < length; i++) {
            var str = Str(i, value, stack);
            partial.push(typeof str === 'undefined' ? 'null' : str);
          }
          partial = '[' + partial.join(',') + ']';
        } else {
          var keys = Object.keys(value);
          for (var i = 0, length = keys.length; i < length; i++) {
            var key = keys[i], str = Str(key, value, stack);
            if (typeof str !== "undefined") {
               partial.push(key.inspect(true)+ ':' + str);
             }
          }
          partial = '{' + partial.join(',') + '}';
        }
        stack.pop();
        return partial;
    }
  }
  function stringify(object) {
    return JSON.stringify(object);
  }
  function toQueryString(object) {
    return $H(object).toQueryString();
  }
  function toHTML(object) {
    return object && object.toHTML ? object.toHTML() : String.interpret(object);
  }
  function keys(object) {
    if (Type(object) !== OBJECT_TYPE) { throw new TypeError(); }
    var results = [];
    for (var property in object) {
      if (_hasOwnProperty.call(object, property))
        results.push(property);
    }
    
    // Account for the DontEnum properties in affected browsers.
    if (IS_DONTENUM_BUGGY) {
      for (var i = 0; property = DONT_ENUMS[i]; i++) {
        if (_hasOwnProperty.call(object, property))
          results.push(property);
      }
    }
    
    return results;
  }
  function values(object) {
    var results = [];
    for (var property in object)
      results.push(object[property]);
    return results;
  }
  function clone(object) {
    return extend({ }, object);
  }
  function isElement(object) {
    return !!(object && object.nodeType == 1);
  }
  function isArray(object) {
    return _toString.call(object) === ARRAY_CLASS;
  }
  
  var hasNativeIsArray = (typeof Array.isArray == 'function') 
    && Array.isArray([]) && !Array.isArray({});
  
  if (hasNativeIsArray) {
    isArray = Array.isArray;
  }
  function isHash(object) {
    return object instanceof Hash;
  }
  function isFunction(object) {
    return _toString.call(object) === FUNCTION_CLASS;
  }
  function isString(object) {
    return _toString.call(object) === STRING_CLASS;
  }
  function isNumber(object) {
    return _toString.call(object) === NUMBER_CLASS;
  }
  
  function isDate(object) {
    return _toString.call(object) === DATE_CLASS;
  }
  function isUndefined(object) {
    return typeof object === "undefined";
  }
  extend(Object, {
    extend:        extend,
    inspect:       inspect,
    toJSON:        NATIVE_JSON_STRINGIFY_SUPPORT ? stringify : toJSON,
    toQueryString: toQueryString,
    toHTML:        toHTML,
    keys:          Object.keys || keys,
    values:        values,
    clone:         clone,
    isElement:     isElement,
    isArray:       isArray,
    isHash:        isHash,
    isFunction:    isFunction,
    isString:      isString,
    isNumber:      isNumber,
    isDate:        isDate,
    isUndefined:   isUndefined
  });
})();
Object.extend(Function.prototype, (function() {
  var slice = Array.prototype.slice;
  function update(array, args) {
    var arrayLength = array.length, length = args.length;
    while (length--) array[arrayLength + length] = args[length];
    return array;
  }
  function merge(array, args) {
    array = slice.call(array, 0);
    return update(array, args);
  }
  function argumentNames() {
    var names = this.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1]
      .replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, '')
      .replace(/\s+/g, '').split(',');
    return names.length == 1 && !names[0] ? [] : names;
  }
  function bind(context) {
    if (arguments.length < 2 && Object.isUndefined(arguments[0]))
      return this;
    if (!Object.isFunction(this))
      throw new TypeError("The object is not callable.");
      
    var nop = function() {};
    var __method = this, args = slice.call(arguments, 1);
    
    var bound = function() {
      var a = merge(args, arguments);
      // Ignore the supplied context when the bound function is called with
      // the "new" keyword.
      var c = this instanceof bound ? this : context;
      return __method.apply(c, a);
    };
        
    nop.prototype   = this.prototype;
    bound.prototype = new nop();
    return bound;
  }
  function bindAsEventListener(context) {
    var __method = this, args = slice.call(arguments, 1);
    return function(event) {
      var a = update([event || window.event], args);
      return __method.apply(context, a);
    }
  }
  function curry() {
    if (!arguments.length) return this;
    var __method = this, args = slice.call(arguments, 0);
    return function() {
      var a = merge(args, arguments);
      return __method.apply(this, a);
    }
  }
  function delay(timeout) {
    var __method = this, args = slice.call(arguments, 1);
    timeout = timeout * 1000;
    return window.setTimeout(function() {
      return __method.apply(__method, args);
    }, timeout);
  }
  function defer() {
    var args = update([0.01], arguments);
    return this.delay.apply(this, args);
  }
  function wrap(wrapper) {
    var __method = this;
    return function() {
      var a = update([__method.bind(this)], arguments);
      return wrapper.apply(this, a);
    }
  }
  function methodize() {
    if (this._methodized) return this._methodized;
    var __method = this;
    return this._methodized = function() {
      var a = update([this], arguments);
      return __method.apply(null, a);
    };
  }
  
  var extensions = {
    argumentNames:       argumentNames,
    bindAsEventListener: bindAsEventListener,
    curry:               curry,
    delay:               delay,
    defer:               defer,
    wrap:                wrap,
    methodize:           methodize
  };
  
  if (!Function.prototype.bind)
    extensions.bind = bind;
  return extensions;
})());
(function(proto) {
  
  
  function toISOString() {
    return this.getUTCFullYear() + '-' +
      (this.getUTCMonth() + 1).toPaddedString(2) + '-' +
      this.getUTCDate().toPaddedString(2) + 'T' +
      this.getUTCHours().toPaddedString(2) + ':' +
      this.getUTCMinutes().toPaddedString(2) + ':' +
      this.getUTCSeconds().toPaddedString(2) + 'Z';
  }
  
  function toJSON() {
    return this.toISOString();
  }
  
  if (!proto.toISOString) proto.toISOString = toISOString;
  if (!proto.toJSON) proto.toJSON = toJSON;
  
})(Date.prototype);
RegExp.prototype.match = RegExp.prototype.test;
RegExp.escape = function(str) {
  return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
};
var PeriodicalExecuter = Class.create({
  initialize: function(callback, frequency) {
    this.callback = callback;
    this.frequency = frequency;
    this.currentlyExecuting = false;
    this.registerCallback();
  },
  registerCallback: function() {
    this.timer = setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
  },
  execute: function() {
    this.callback(this);
  },
  stop: function() {
    if (!this.timer) return;
    clearInterval(this.timer);
    this.timer = null;
  },
  onTimerEvent: function() {
    if (!this.currentlyExecuting) {
      // IE doesn't support `finally` statements unless all errors are caught.
      // We mimic the behaviour of `finally` statements by duplicating code
      // that would belong in it. First at the bottom of the `try` statement
      // (for errorless cases). Secondly, inside a `catch` statement which
      // rethrows any caught errors.
      try {
        this.currentlyExecuting = true;
        this.execute();
        this.currentlyExecuting = false;
      } catch(e) {
        this.currentlyExecuting = false;
        throw e;
      }
    }
  }
});
Object.extend(String, {
  interpret: function(value) {
    return value == null ? '' : String(value);
  },
  specialChar: {
    '\b': '\\b',
    '\t': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '\\': '\\\\'
  }
});
Object.extend(String.prototype, (function() {
  var NATIVE_JSON_PARSE_SUPPORT = window.JSON &&
    typeof JSON.parse === 'function' &&
    JSON.parse('{"test": true}').test;
  function prepareReplacement(replacement) {
    if (Object.isFunction(replacement)) return replacement;
    var template = new Template(replacement);
    return function(match) { return template.evaluate(match) };
  }
  function gsub(pattern, replacement) {
    var result = '', source = this, match;
    replacement = prepareReplacement(replacement);
    if (Object.isString(pattern))
      pattern = RegExp.escape(pattern);
    if (!(pattern.length || pattern.source)) {
      replacement = replacement('');
      return replacement + source.split('').join(replacement) + replacement;
    }
    while (source.length > 0) {
      match = source.match(pattern);
      if (match && match[0].length > 0) {
        result += source.slice(0, match.index);
        result += String.interpret(replacement(match));
        source  = source.slice(match.index + match[0].length);
      } else {
        result += source, source = '';
      }
    }
    return result;
  }
  function sub(pattern, replacement, count) {
    replacement = prepareReplacement(replacement);
    count = Object.isUndefined(count) ? 1 : count;
    return this.gsub(pattern, function(match) {
      if (--count < 0) return match[0];
      return replacement(match);
    });
  }
  function scan(pattern, iterator) {
    this.gsub(pattern, iterator);
    return String(this);
  }
  function truncate(length, truncation) {
    length = length || 30;
    truncation = Object.isUndefined(truncation) ? '...' : truncation;
    return this.length > length ?
      this.slice(0, length - truncation.length) + truncation : String(this);
  }
  function strip() {
    return this.replace(/^\s+/, '').replace(/\s+$/, '');
  }
  function stripTags() {
    return this.replace(/<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?>|<\/\w+>/gi, '');
  }
  function stripScripts() {
    return this.replace(new RegExp(Prototype.ScriptFragment, 'img'), '');
  }
  function extractScripts() {
    var matchAll = new RegExp(Prototype.ScriptFragment, 'img'),
        matchOne = new RegExp(Prototype.ScriptFragment, 'im');
    return (this.match(matchAll) || []).map(function(scriptTag) {
      return (scriptTag.match(matchOne) || ['', ''])[1];
    });
  }
  function evalScripts() {
    return this.extractScripts().map(function(script) { return eval(script); });
  }
  function escapeHTML() {
    return this.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
  }
  function unescapeHTML() {
    // Warning: In 1.7 String#unescapeHTML will no longer call String#stripTags.
    return this.stripTags().replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&');
  }
  function toQueryParams(separator) {
    var match = this.strip().match(/([^?#]*)(#.*)?$/);
    if (!match) return { };
    return match[1].split(separator || '&').inject({ }, function(hash, pair) {
      if ((pair = pair.split('='))[0]) {
        var key = decodeURIComponent(pair.shift()),
            value = pair.length > 1 ? pair.join('=') : pair[0];
        if (value != undefined) {
          value = value.gsub('+', ' ');
          value = decodeURIComponent(value);
        }
        if (key in hash) {
          if (!Object.isArray(hash[key])) hash[key] = [hash[key]];
          hash[key].push(value);
        }
        else hash[key] = value;
      }
      return hash;
    });
  }
  function toArray() {
    return this.split('');
  }
  function succ() {
    return this.slice(0, this.length - 1) +
      String.fromCharCode(this.charCodeAt(this.length - 1) + 1);
  }
  function times(count) {
    return count < 1 ? '' : new Array(count + 1).join(this);
  }
  function camelize() {
    return this.replace(/-+(.)?/g, function(match, chr) {
      return chr ? chr.toUpperCase() : '';
    });
  }
  function capitalize() {
    return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();
  }
  function underscore() {
    return this.replace(/::/g, '/')
               .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
               .replace(/([a-z\d])([A-Z])/g, '$1_$2')
               .replace(/-/g, '_')
               .toLowerCase();
  }
  function dasherize() {
    return this.replace(/_/g, '-');
  }
  function inspect(useDoubleQuotes) {
    var escapedString = this.replace(/[\x00-\x1f\\]/g, function(character) {
      if (character in String.specialChar) {
        return String.specialChar[character];
      }
      return '\\u00' + character.charCodeAt().toPaddedString(2, 16);
    });
    if (useDoubleQuotes) return '"' + escapedString.replace(/"/g, '\\"') + '"';
    return "'" + escapedString.replace(/'/g, '\\\'') + "'";
  }
  function unfilterJSON(filter) {
    return this.replace(filter || Prototype.JSONFilter, '$1');
  }
  function isJSON() {
    var str = this;
    if (str.blank()) return false;
    str = str.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@');
    str = str.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']');
    str = str.replace(/(?:^|:|,)(?:\s*\[)+/g, '');
    return (/^[\],:{}\s]*$/).test(str);
  }
  function evalJSON(sanitize) {
    var json = this.unfilterJSON(),
        cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    if (cx.test(json)) {
      json = json.replace(cx, function (a) {
        return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      });
    }
    try {
      if (!sanitize || json.isJSON()) return eval('(' + json + ')');
    } catch (e) { }
    throw new SyntaxError('Badly formed JSON string: ' + this.inspect());
  }
  
  function parseJSON() {
    var json = this.unfilterJSON();
    return JSON.parse(json);
  }
  function include(pattern) {
    return this.indexOf(pattern) !== -1;
  }
  function startsWith(pattern, position) {
    position = Object.isNumber(position) ? position : 0;
    // We use `lastIndexOf` instead of `indexOf` to avoid tying execution
    // time to string length when string doesn't start with pattern.
    return this.lastIndexOf(pattern, position) === position;
  }
  function endsWith(pattern, position) {
    pattern = String(pattern);
    position = Object.isNumber(position) ? position : this.length;
    if (position < 0) position = 0;
    if (position > this.length) position = this.length;
    var d = position - pattern.length;
    // We use `indexOf` instead of `lastIndexOf` to avoid tying execution
    // time to string length when string doesn't end with pattern.
    return d >= 0 && this.indexOf(pattern, d) === d;
  }
  function empty() {
    return this == '';
  }
  function blank() {
    return /^\s*$/.test(this);
  }
  function interpolate(object, pattern) {
    return new Template(this, pattern).evaluate(object);
  }
  return {
    gsub:           gsub,
    sub:            sub,
    scan:           scan,
    truncate:       truncate,
    // Firefox 3.5+ supports String.prototype.trim
    // (`trim` is ~ 5x faster than `strip` in FF3.5)
    strip:          String.prototype.trim || strip,
    stripTags:      stripTags,
    stripScripts:   stripScripts,
    extractScripts: extractScripts,
    evalScripts:    evalScripts,
    escapeHTML:     escapeHTML,
    unescapeHTML:   unescapeHTML,
    toQueryParams:  toQueryParams,
    parseQuery:     toQueryParams,
    toArray:        toArray,
    succ:           succ,
    times:          times,
    camelize:       camelize,
    capitalize:     capitalize,
    underscore:     underscore,
    dasherize:      dasherize,
    inspect:        inspect,
    unfilterJSON:   unfilterJSON,
    isJSON:         isJSON,
    evalJSON:       NATIVE_JSON_PARSE_SUPPORT ? parseJSON : evalJSON,
    //ECMA 6 supports contains(), if it exists map include() to contains()
    include:        String.prototype.contains || include,
    // Firefox 18+ supports String.prototype.startsWith, String.prototype.endsWith
    startsWith:     String.prototype.startsWith || startsWith,
    endsWith:       String.prototype.endsWith || endsWith,
    empty:          empty,
    blank:          blank,
    interpolate:    interpolate
  };
})());
var Template = Class.create({
  initialize: function(template, pattern) {
    this.template = template.toString();
    this.pattern = pattern || Template.Pattern;
  },
  evaluate: function(object) {
    if (object && Object.isFunction(object.toTemplateReplacements))
      object = object.toTemplateReplacements();
    return this.template.gsub(this.pattern, function(match) {
      if (object == null) return (match[1] + '');
      var before = match[1] || '';
      if (before == '\\') return match[2];
      var ctx = object, expr = match[3],
          pattern = /^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;
          
      match = pattern.exec(expr);
      if (match == null) return before;
      while (match != null) {
        var comp = match[1].startsWith('[') ? match[2].replace(/\\\\]/g, ']') : match[1];
        ctx = ctx[comp];
        if (null == ctx || '' == match[3]) break;
        expr = expr.substring('[' == match[3] ? match[1].length : match[0].length);
        match = pattern.exec(expr);
      }
      return before + String.interpret(ctx);
    });
  }
});
Template.Pattern = /(^|.|\r|\n)(#\{(.*?)\})/;
var $break = { };
var Enumerable = (function() {
  function each(iterator, context) {
    try {
      this._each(iterator, context);
    } catch (e) {
      if (e != $break) throw e;
    }
    return this;
  }
  function eachSlice(number, iterator, context) {
    var index = -number, slices = [], array = this.toArray();
    if (number < 1) return array;
    while ((index += number) < array.length)
      slices.push(array.slice(index, index+number));
    return slices.collect(iterator, context);
  }
  function all(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = true;
    this.each(function(value, index) {
      if (!iterator.call(context, value, index, this)) {
          result = false;
          throw $break;
      }
    }, this);
    return result;
  }
  function any(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = false;
    this.each(function(value, index) {
      if (result = !!iterator.call(context, value, index, this))
        throw $break;
    }, this);
    return result;
  }
  function collect(iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];
    this.each(function(value, index) {
      results.push(iterator.call(context, value, index, this));
    }, this);
    return results;
  }
  function detect(iterator, context) {
    var result;
    this.each(function(value, index) {
      if (iterator.call(context, value, index, this)) {
        result = value;
        throw $break;
      }
    }, this);
    return result;
  }
  function findAll(iterator, context) {
    var results = [];
    this.each(function(value, index) {
      if (iterator.call(context, value, index, this))
        results.push(value);
    }, this);
    return results;
  }
  function grep(filter, iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];
    if (Object.isString(filter))
      filter = new RegExp(RegExp.escape(filter));
    this.each(function(value, index) {
      if (filter.match(value))
        results.push(iterator.call(context, value, index, this));
    }, this);
    return results;
  }
  function include(object) {
    if (Object.isFunction(this.indexOf) && this.indexOf(object) != -1)
      return true;
    var found = false;
    this.each(function(value) {
      if (value == object) {
        found = true;
        throw $break;
      }
    });
    return found;
  }
  function inGroupsOf(number, fillWith) {
    fillWith = Object.isUndefined(fillWith) ? null : fillWith;
    return this.eachSlice(number, function(slice) {
      while(slice.length < number) slice.push(fillWith);
      return slice;
    });
  }
  function inject(memo, iterator, context) {
    this.each(function(value, index) {
      memo = iterator.call(context, memo, value, index, this);
    }, this);
    return memo;
  }
  function invoke(method) {
    var args = $A(arguments).slice(1);
    return this.map(function(value) {
      return value[method].apply(value, args);
    });
  }
  function max(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function(value, index) {
      value = iterator.call(context, value, index, this);
      if (result == null || value >= result)
        result = value;
    }, this);
    return result;
  }
  function min(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function(value, index) {
      value = iterator.call(context, value, index, this);
      if (result == null || value < result)
        result = value;
    }, this);
    return result;
  }
  function partition(iterator, context) {
    iterator = iterator || Prototype.K;
    var trues = [], falses = [];
    this.each(function(value, index) {
      (iterator.call(context, value, index, this) ?
        trues : falses).push(value);
    }, this);
    return [trues, falses];
  }
  function pluck(property) {
    var results = [];
    this.each(function(value) {
      results.push(value[property]);
    });
    return results;
  }
  function reject(iterator, context) {
    var results = [];
    this.each(function(value, index) {
      if (!iterator.call(context, value, index, this))
        results.push(value);
    }, this);
    return results;
  }
  function sortBy(iterator, context) {
    return this.map(function(value, index) {
      return {
        value: value,
        criteria: iterator.call(context, value, index, this)
      };
    }, this).sort(function(left, right) {
      var a = left.criteria, b = right.criteria;
      return a < b ? -1 : a > b ? 1 : 0;
    }).pluck('value');
  }
  function toArray() {
    return this.map();
  }
  function zip() {
    var iterator = Prototype.K, args = $A(arguments);
    if (Object.isFunction(args.last()))
      iterator = args.pop();
    var collections = [this].concat(args).map($A);
    return this.map(function(value, index) {
      return iterator(collections.pluck(index));
    });
  }
  function size() {
    return this.toArray().length;
  }
  function inspect() {
    return '#<Enumerable:' + this.toArray().inspect() + '>';
  }
  return {
    each:       each,
    eachSlice:  eachSlice,
    all:        all,
    every:      all,
    any:        any,
    some:       any,
    collect:    collect,
    map:        collect,
    detect:     detect,
    findAll:    findAll,
    select:     findAll,
    filter:     findAll,
    grep:       grep,
    include:    include,
    member:     include,
    inGroupsOf: inGroupsOf,
    inject:     inject,
    invoke:     invoke,
    max:        max,
    min:        min,
    partition:  partition,
    pluck:      pluck,
    reject:     reject,
    sortBy:     sortBy,
    toArray:    toArray,
    entries:    toArray,
    zip:        zip,
    size:       size,
    inspect:    inspect,
    find:       detect
  };
})();
function $A(iterable) {
  if (!iterable) return [];
  // Safari <2.0.4 crashes when accessing property of a node list with property accessor.
  // It nevertheless works fine with `in` operator, which is why we use it here
  if ('toArray' in Object(iterable)) return iterable.toArray();
  var length = iterable.length || 0, results = new Array(length);
  while (length--) results[length] = iterable[length];
  return results;
}
function $w(string) {
  if (!Object.isString(string)) return [];
  string = string.strip();
  return string ? string.split(/\s+/) : [];
}
Array.from = $A;
(function() {
  var arrayProto = Array.prototype,
      slice = arrayProto.slice,
      _each = arrayProto.forEach,
      _entries = arrayProto.entries; // use native browser JS 1.6 implementation if available
  function each(iterator, context) {
    for (var i = 0, length = this.length >>> 0; i < length; i++) {
      if (i in this) iterator.call(context, this[i], i, this);
    }
  }
  if (!_each) _each = each;
  
  function clear() {
    this.length = 0;
    return this;
  }
  function first() {
    return this[0];
  }
  function last() {
    return this[this.length - 1];
  }
  function compact() {
    return this.select(function(value) {
      return value != null;
    });
  }
  function flatten() {
    return this.inject([], function(array, value) {
      if (Object.isArray(value))
        return array.concat(value.flatten());
      array.push(value);
      return array;
    });
  }
  function without() {
    var values = slice.call(arguments, 0);
    return this.select(function(value) {
      return !values.include(value);
    });
  }
  function reverse(inline) {
    return (inline === false ? this.toArray() : this)._reverse();
  }
  function uniq(sorted) {
    return this.inject([], function(array, value, index) {
      if (0 == index || (sorted ? array.last() != value : !array.include(value)))
        array.push(value);
      return array;
    });
  }
  function intersect(array) {
    return this.uniq().findAll(function(item) {
      return array.indexOf(item) !== -1;
    });
  }
  function clone() {
    return slice.call(this, 0);
  }
  function size() {
    return this.length;
  }
  function inspect() {
    return '[' + this.map(Object.inspect).join(', ') + ']';
  }
  function indexOf(item, i) {
    if (this == null) throw new TypeError();
    
    var array = Object(this), length = array.length >>> 0;
    if (length === 0) return -1;
    
    // The rules for the `fromIndex` argument are tricky. Let's follow the
    // spec line-by-line.
    i = Number(i);
    if (isNaN(i)) {
      i = 0;
    } else if (i !== 0 && isFinite(i)) {
      // Equivalent to ES5's `ToInteger` operation.
      i = (i > 0 ? 1 : -1) * Math.floor(Math.abs(i));
    }
    
    // If the search index is greater than the length of the array,
    // return -1.
    if (i > length) return -1;
    
    // If the search index is negative, take its absolute value, subtract it
    // from the length, and make that the new search index. If it's still
    // negative, make it 0.
    var k = i >= 0 ? i : Math.max(length - Math.abs(i), 0);
    for (; k < length; k++)
      if (k in array && array[k] === item) return k;
    return -1;
  }
  
  function lastIndexOf(item, i) {
    if (this == null) throw new TypeError();
    
    var array = Object(this), length = array.length >>> 0;
    if (length === 0) return -1;
    
    // The rules for the `fromIndex` argument are tricky. Let's follow the
    // spec line-by-line.
    if (!Object.isUndefined(i)) {
      i = Number(i);
      if (isNaN(i)) {
        i = 0;
      } else if (i !== 0 && isFinite(i)) {
        // Equivalent to ES5's `ToInteger` operation.
        i = (i > 0 ? 1 : -1) * Math.floor(Math.abs(i));
      }
    } else {
      i = length;
    }
    
    // If fromIndex is positive, clamp it to the last index in the array;
    // if it's negative, subtract its absolute value from the array's length.
    var k = i >= 0 ? Math.min(i, length - 1) :
     length - Math.abs(i);
    // (If fromIndex is still negative, it'll bypass this loop altogether and
    // return -1.)
    for (; k >= 0; k--)
      if (k in array && array[k] === item) return k;
    return -1;
  }
  // Replaces a built-in function. No PDoc needed.
  //
  // Used instead of the broken version of Array#concat in some versions of
  // Opera. Made to be ES5-compliant.
  function concat(_) {
    var array = [], items = slice.call(arguments, 0), item, n = 0;
    items.unshift(this);
    for (var i = 0, length = items.length; i < length; i++) {
      item = items[i];
      if (Object.isArray(item) && !('callee' in item)) {
        for (var j = 0, arrayLength = item.length; j < arrayLength; j++) {
          if (j in item) array[n] = item[j];
          n++;
        }
      } else {
        array[n++] = item;
      }
    }
    array.length = n;
    return array;
  }
  
  // Certain ES5 array methods have the same names as Prototype array methods
  // and perform the same functions.
  //
  // Prototype's implementations of these methods differ from the ES5 spec in
  // the way a missing iterator function is handled. Prototype uses 
  // `Prototype.K` as a default iterator, while ES5 specifies that a
  // `TypeError` must be thrown. Implementing the ES5 spec completely would 
  // break backward compatibility and would force users to pass `Prototype.K`
  // manually. 
  //
  // Instead, if native versions of these methods exist, we wrap the existing
  // methods with our own behavior. This has very little performance impact.
  // It violates the spec by suppressing `TypeError`s for certain methods,
  // but that's an acceptable trade-off.
  
  function wrapNative(method) {
    return function() {
      if (arguments.length === 0) {
        // No iterator was given. Instead of throwing a `TypeError`, use
        // `Prototype.K` as the default iterator.
        return method.call(this, Prototype.K);
      } else if (arguments[0] === undefined) {
        // Same as above.
        var args = slice.call(arguments, 1);
        args.unshift(Prototype.K);
        return method.apply(this, args);
      } else {
        // Pass straight through to the native method.
        return method.apply(this, arguments);
      }
    };
  }
  
  // Note that #map, #filter, #some, and #every take some extra steps for
  // ES5 compliance: the context in which they're called is coerced to an
  // object, and that object's `length` property is coerced to a finite
  // integer. This makes it easier to use the methods as generics.
  //
  // This means that they behave a little differently from other methods in
  // `Enumerable`/`Array` that don't collide with ES5, but that's OK.
  
  function map(iterator) {
    if (this == null) throw new TypeError();
    iterator = iterator || Prototype.K;
    var object = Object(this);
    var results = [], context = arguments[1], n = 0;
    for (var i = 0, length = object.length >>> 0; i < length; i++) {
      if (i in object) {
        results[n] = iterator.call(context, object[i], i, object);
      }
      n++;
    }
    results.length = n;
    return results;
  }
  
  if (arrayProto.map) {
    map = wrapNative(Array.prototype.map);
  }
  
  function filter(iterator) {
    if (this == null || !Object.isFunction(iterator))
      throw new TypeError();
    
    var object = Object(this);
    var results = [], context = arguments[1], value;
    for (var i = 0, length = object.length >>> 0; i < length; i++) {
      if (i in object) {
        value = object[i];
        if (iterator.call(context, value, i, object)) {
          results.push(value);
        }
      }
    }
    return results;
  }
  if (arrayProto.filter) {
    // `Array#filter` requires an iterator by nature, so we don't need to
    // wrap it.
    filter = Array.prototype.filter;
  }
  function some(iterator) {
    if (this == null) throw new TypeError();
    iterator = iterator || Prototype.K;
    var context = arguments[1];
    var object = Object(this);
    for (var i = 0, length = object.length >>> 0; i < length; i++) {
      if (i in object && iterator.call(context, object[i], i, object)) {
        return true;
      }
    }
      
    return false;
  }
  
  if (arrayProto.some) {
    var some = wrapNative(Array.prototype.some);
  }
  
  
  function every(iterator) {
    if (this == null) throw new TypeError();
    iterator = iterator || Prototype.K;
    var context = arguments[1];
    var object = Object(this);
    for (var i = 0, length = object.length >>> 0; i < length; i++) {
      if (i in object && !iterator.call(context, object[i], i, object)) {
        return false;
      }
    }
      
    return true;
  }
  
  if (arrayProto.every) {
    var every = wrapNative(Array.prototype.every);
  }
  
  function entries() {
    if (this == null) throw new TypeError();
    return this.map(function(i,index) {
        return [index,i];
    });
  }
  // Prototype's `Array#inject` behaves similarly to ES5's `Array#reduce`.
  var _reduce = arrayProto.reduce;
  function inject(memo, iterator) {
    iterator = iterator || Prototype.K;
    var context = arguments[2];
    // The iterator must be bound, as `Array#reduce` always binds to
    // `undefined`.
    return _reduce.call(this, iterator.bind(context), memo);
  }
  
  // Piggyback on `Array#reduce` if it exists; otherwise fall back to the
  // standard `Enumerable.inject`.
  if (!arrayProto.reduce) {
    var inject = Enumerable.inject;
  }
  Object.extend(arrayProto, Enumerable);
  if (!arrayProto._reverse)
    arrayProto._reverse = arrayProto.reverse;
  Object.extend(arrayProto, {
    _each:     _each,
    
    map:       map,
    collect:   map,
    select:    filter,
    filter:    filter,
    findAll:   filter,
    some:      some,
    any:       some,
    every:     every,
    all:       every,
    inject:    inject,
    
    clear:     clear,
    first:     first,
    last:      last,
    compact:   compact,
    flatten:   flatten,
    without:   without,
    reverse:   reverse,
    uniq:      uniq,
    intersect: intersect,
    clone:     clone,
    toArray:   clone,
    size:      size,
    inspect:   inspect,
    entries:   _entries || entries
  });
  // fix for opera
  var CONCAT_ARGUMENTS_BUGGY = (function() {
    return [].concat(arguments)[0][0] !== 1;
  })(1,2);
  if (CONCAT_ARGUMENTS_BUGGY) arrayProto.concat = concat;
  // Use native browser JS 1.6 implementations if available.
  if (!arrayProto.indexOf) arrayProto.indexOf = indexOf;
  if (!arrayProto.lastIndexOf) arrayProto.lastIndexOf = lastIndexOf;
})();
function $H(object) {
  return new Hash(object);
};
var Hash = Class.create(Enumerable, (function() {
  function initialize(object) {
    this._object = Object.isHash(object) ? object.toObject() : Object.clone(object);
  }
  // Docs for #each even though technically it's implemented by Enumerable
  // Our _internal_ each
  function _each(iterator, context) {
    var i = 0;
    for (var key in this._object) {
      var value = this._object[key], pair = [key, value];
      pair.key = key;
      pair.value = value;
      iterator.call(context, pair, i);
      i++;
    }
  }
  function set(key, value) {
    return this._object[key] = value;
  }
  function get(key) {
    // simulating poorly supported hasOwnProperty
    if (this._object[key] !== Object.prototype[key])
      return this._object[key];
  }
  function unset(key) {
    var value = this._object[key];
    delete this._object[key];
    return value;
  }
  function toObject() {
    return Object.clone(this._object);
  }
  
  
  function keys() {
    return this.pluck('key');
  }
  function values() {
    return this.pluck('value');
  }
  function index(value) {
    var match = this.detect(function(pair) {
      return pair.value === value;
    });
    return match && match.key;
  }
  function merge(object) {
    return this.clone().update(object);
  }
  function update(object) {
    return new Hash(object).inject(this, function(result, pair) {
      result.set(pair.key, pair.value);
      return result;
    });
  }
  // Private. No PDoc necessary.
  function toQueryPair(key, value) {
    if (Object.isUndefined(value)) return key;
    
    value = String.interpret(value);
    // Normalize newlines as \r\n because the HTML spec says newlines should
    // be encoded as CRLFs.
    value = value.gsub(/(\r)?\n/, '\r\n');
    value = encodeURIComponent(value);
    // Likewise, according to the spec, spaces should be '+' rather than
    // '%20'.
    value = value.gsub(/%20/, '+');
    return key + '=' + value;
  }
  function toQueryString() {
    return this.inject([], function(results, pair) {
      var key = encodeURIComponent(pair.key), values = pair.value;
      
      if (values && typeof values == 'object') {
        if (Object.isArray(values)) {
          // We used to use `Array#map` here to get the query pair for each
          // item in the array, but that caused test regressions once we
          // added the sparse array behavior for array iterator methods.
          // Changed to an ordinary `for` loop so that we can handle
          // `undefined` values ourselves rather than have them skipped.
          var queryValues = [];
          for (var i = 0, len = values.length, value; i < len; i++) {
            value = values[i];
            queryValues.push(toQueryPair(key, value));            
          }
          return results.concat(queryValues);
        }
      } else results.push(toQueryPair(key, values));
      return results;
    }).join('&');
  }
  function inspect() {
    return '#<Hash:{' + this.map(function(pair) {
      return pair.map(Object.inspect).join(': ');
    }).join(', ') + '}>';
  }
  function clone() {
    return new Hash(this);
  }
  return {
    initialize:             initialize,
    _each:                  _each,
    set:                    set,
    get:                    get,
    unset:                  unset,
    toObject:               toObject,
    toTemplateReplacements: toObject,
    keys:                   keys,
    values:                 values,
    index:                  index,
    merge:                  merge,
    update:                 update,
    toQueryString:          toQueryString,
    inspect:                inspect,
    toJSON:                 toObject,
    clone:                  clone
  };
})());
Hash.from = $H;
Object.extend(Number.prototype, (function() {
  function toColorPart() {
    return this.toPaddedString(2, 16);
  }
  function succ() {
    return this + 1;
  }
  function times(iterator, context) {
    $R(0, this, true).each(iterator, context);
    return this;
  }
  function toPaddedString(length, radix) {
    var string = this.toString(radix || 10);
    return '0'.times(length - string.length) + string;
  }
  function abs() {
    return Math.abs(this);
  }
  function round() {
    return Math.round(this);
  }
  function ceil() {
    return Math.ceil(this);
  }
  function floor() {
    return Math.floor(this);
  }
  return {
    toColorPart:    toColorPart,
    succ:           succ,
    times:          times,
    toPaddedString: toPaddedString,
    abs:            abs,
    round:          round,
    ceil:           ceil,
    floor:          floor
  };
})());
function $R(start, end, exclusive) {
  return new ObjectRange(start, end, exclusive);
}
var ObjectRange = Class.create(Enumerable, (function() {
  function initialize(start, end, exclusive) {
    this.start = start;
    this.end = end;
    this.exclusive = exclusive;
  }
  function _each(iterator, context) {
    var value = this.start, i;
    for (i = 0; this.include(value); i++) {
      iterator.call(context, value, i);
      value = value.succ();
    }
  }
  function include(value) {
    if (value < this.start)
      return false;
    if (this.exclusive)
      return value < this.end;
    return value <= this.end;
  }
  return {
    initialize: initialize,
    _each:      _each,
    include:    include
  };
})());
var Abstract = { };
var Try = {
  these: function() {
    var returnValue;
    for (var i = 0, length = arguments.length; i < length; i++) {
      var lambda = arguments[i];
      try {
        returnValue = lambda();
        break;
      } catch (e) { }
    }
    return returnValue;
  }
};
var Ajax = {
  getTransport: function() {
    return Try.these(
      function() {return new XMLHttpRequest()},
      function() {return new ActiveXObject('Msxml2.XMLHTTP')},
      function() {return new ActiveXObject('Microsoft.XMLHTTP')}
    ) || false;
  },
  activeRequestCount: 0
};
Ajax.Responders = {
  responders: [],
  _each: function(iterator, context) {
    this.responders._each(iterator, context);
  },
  register: function(responder) {
    if (!this.include(responder))
      this.responders.push(responder);
  },
  unregister: function(responder) {
    this.responders = this.responders.without(responder);
  },
  dispatch: function(callback, request, transport, json) {
    this.each(function(responder) {
      if (Object.isFunction(responder[callback])) {
        try {
          responder[callback].apply(responder, [request, transport, json]);
        } catch (e) { }
      }
    });
  }
};
Object.extend(Ajax.Responders, Enumerable);
Ajax.Responders.register({
  onCreate:   function() { Ajax.activeRequestCount++ },
  onComplete: function() { Ajax.activeRequestCount-- }
});
Ajax.Base = Class.create({
  initialize: function(options) {
    this.options = {
      method:       'post',
      asynchronous: true,
      contentType:  'application/x-www-form-urlencoded',
      encoding:     'UTF-8',
      parameters:   '',
      evalJSON:     true,
      evalJS:       true
    };
    Object.extend(this.options, options || { });
    this.options.method = this.options.method.toLowerCase();
    if (Object.isHash(this.options.parameters))
      this.options.parameters = this.options.parameters.toObject();
  }
});
Ajax.Request = Class.create(Ajax.Base, {
  _complete: false,
  initialize: function($super, url, options) {
    $super(options);
    this.transport = Ajax.getTransport();
    this.request(url);
  },
  request: function(url) {
    this.url = url;
    this.method = this.options.method;
    var params = Object.isString(this.options.parameters) ?
          this.options.parameters :
          Object.toQueryString(this.options.parameters);
    if (!['get', 'post'].include(this.method)) {
      // simulate other verbs over post
      params += (params ? '&' : '') + "_method=" + this.method;
      this.method = 'post';
    }
    if (params && this.method === 'get') {
      // when GET, append parameters to URL
      this.url += (this.url.include('?') ? '&' : '?') + params;
    }
    this.parameters = params.toQueryParams();
    try {
      var response = new Ajax.Response(this);
      if (this.options.onCreate) this.options.onCreate(response);
      Ajax.Responders.dispatch('onCreate', this, response);
      this.transport.open(this.method.toUpperCase(), this.url,
        this.options.asynchronous);
      if (this.options.asynchronous) this.respondToReadyState.bind(this).defer(1);
      this.transport.onreadystatechange = this.onStateChange.bind(this);
      this.setRequestHeaders();
      this.body = this.method == 'post' ? (this.options.postBody || params) : null;
      this.transport.send(this.body);
      /* Force Firefox to handle ready state 4 for synchronous requests */
      if (!this.options.asynchronous && this.transport.overrideMimeType)
        this.onStateChange();
    }
    catch (e) {
      this.dispatchException(e);
    }
  },
  onStateChange: function() {
    var readyState = this.transport.readyState;
    if (readyState > 1 && !((readyState == 4) && this._complete))
      this.respondToReadyState(this.transport.readyState);
  },
  setRequestHeaders: function() {
    var headers = {
      'X-Requested-With': 'XMLHttpRequest',
      'X-Prototype-Version': Prototype.Version,
      'Accept': 'text/javascript, text/html, application/xml, text/xml, */*'
    };
    if (this.method == 'post') {
      headers['Content-type'] = this.options.contentType +
        (this.options.encoding ? '; charset=' + this.options.encoding : '');
      /* Force "Connection: close" for older Mozilla browsers to work
       * around a bug where XMLHttpRequest sends an incorrect
       * Content-length header. See Mozilla Bugzilla #246651.
       */
      if (this.transport.overrideMimeType &&
          (navigator.userAgent.match(/Gecko\/(\d{4})/) || [0,2005])[1] < 2005)
            headers['Connection'] = 'close';
    }
    // user-defined headers
    if (typeof this.options.requestHeaders == 'object') {
      var extras = this.options.requestHeaders;
      if (Object.isFunction(extras.push))
        for (var i = 0, length = extras.length; i < length; i += 2)
          headers[extras[i]] = extras[i+1];
      else
        $H(extras).each(function(pair) { headers[pair.key] = pair.value });
    }
    // skip null or undefined values
    for (var name in headers)
      if (headers[name] != null)
        this.transport.setRequestHeader(name, headers[name]);
  },
  success: function() {
    var status = this.getStatus();
    return !status || (status >= 200 && status < 300) || status == 304;
  },
  getStatus: function() {
    try {
      // IE sometimes returns 1223 for a 204 response.
      if (this.transport.status === 1223) return 204;
      return this.transport.status || 0;
    } catch (e) { return 0 }
  },
  respondToReadyState: function(readyState) {
    var state = Ajax.Request.Events[readyState], response = new Ajax.Response(this);
    if (state == 'Complete') {
      try {
        this._complete = true;
        (this.options['on' + response.status]
         || this.options['on' + (this.success() ? 'Success' : 'Failure')]
         || Prototype.emptyFunction)(response, response.headerJSON);
      } catch (e) {
        this.dispatchException(e);
      }
      var contentType = response.getHeader('Content-type');
      if (this.options.evalJS == 'force'
          || (this.options.evalJS && this.isSameOrigin() && contentType
          && contentType.match(/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s*$/i)))
        this.evalResponse();
    }
    try {
      (this.options['on' + state] || Prototype.emptyFunction)(response, response.headerJSON);
      Ajax.Responders.dispatch('on' + state, this, response, response.headerJSON);
    } catch (e) {
      this.dispatchException(e);
    }
    if (state == 'Complete') {
      // avoid memory leak in MSIE: clean up
      this.transport.onreadystatechange = Prototype.emptyFunction;
    }
  },
  isSameOrigin: function() {
    var m = this.url.match(/^\s*https?:\/\/[^\/]*/);
    return !m || (m[0] == '#{protocol}//#{domain}#{port}'.interpolate({
      protocol: location.protocol,
      domain: document.domain,
      port: location.port ? ':' + location.port : ''
    }));
  },
  getHeader: function(name) {
    try {
      return this.transport.getResponseHeader(name) || null;
    } catch (e) { return null; }
  },
  evalResponse: function() {
    try {
      return eval((this.transport.responseText || '').unfilterJSON());
    } catch (e) {
      this.dispatchException(e);
    }
  },
  dispatchException: function(exception) {
    (this.options.onException || Prototype.emptyFunction)(this, exception);
    Ajax.Responders.dispatch('onException', this, exception);
  }
});
Ajax.Request.Events =
  ['Uninitialized', 'Loading', 'Loaded', 'Interactive', 'Complete'];
Ajax.Response = Class.create({
  // Don't document the constructor; should never be manually instantiated.
  initialize: function(request){
    this.request = request;
    var transport  = this.transport  = request.transport,
        readyState = this.readyState = transport.readyState;
    if ((readyState > 2 && !Prototype.Browser.IE) || readyState == 4) {
      this.status       = this.getStatus();
      this.statusText   = this.getStatusText();
      this.responseText = String.interpret(transport.responseText);
      this.headerJSON   = this._getHeaderJSON();
    }
    if (readyState == 4) {
      var xml = transport.responseXML;
      this.responseXML  = Object.isUndefined(xml) ? null : xml;
      this.responseJSON = this._getResponseJSON();
    }
  },
  status:      0,
  statusText: '',
  getStatus: Ajax.Request.prototype.getStatus,
  getStatusText: function() {
    try {
      return this.transport.statusText || '';
    } catch (e) { return '' }
  },
  getHeader: Ajax.Request.prototype.getHeader,
  getAllHeaders: function() {
    try {
      return this.getAllResponseHeaders();
    } catch (e) { return null }
  },
  getResponseHeader: function(name) {
    return this.transport.getResponseHeader(name);
  },
  getAllResponseHeaders: function() {
    return this.transport.getAllResponseHeaders();
  },
  _getHeaderJSON: function() {
    var json = this.getHeader('X-JSON');
    if (!json) return null;
    try {
      // Browsers expect HTTP headers to be ASCII and nothing else. Running
      // them through `decodeURIComponent` processes them with the page's
      // specified encoding.
      json = decodeURIComponent(escape(json));
    } catch(e) {
      // Except Chrome doesn't seem to need this, and calling
      // `decodeURIComponent` on text that's already in the proper encoding
      // will throw a `URIError`. The ugly solution is to assume that a
      // `URIError` raised here signifies that the text is, in fact, already 
      // in the correct encoding, and treat the failure as a good sign.
      //
      // This is ugly, but so too is sending extended characters in an HTTP
      // header with no spec to back you up.
    }
    
    try {
      return json.evalJSON(this.request.options.sanitizeJSON ||
        !this.request.isSameOrigin());
    } catch (e) {
      this.request.dispatchException(e);
    }
  },
  _getResponseJSON: function() {
    var options = this.request.options;
    if (!options.evalJSON || (options.evalJSON != 'force' &&
      !(this.getHeader('Content-type') || '').include('application/json')) ||
        this.responseText.blank())
          return null;
    try {
      return this.responseText.evalJSON(options.sanitizeJSON ||
        !this.request.isSameOrigin());
    } catch (e) {
      this.request.dispatchException(e);
    }
  }
});
Ajax.Updater = Class.create(Ajax.Request, {
  initialize: function($super, container, url, options) {
    this.container = {
      success: (container.success || container),
      failure: (container.failure || (container.success ? null : container))
    };
    options = Object.clone(options);
    var onComplete = options.onComplete;
    options.onComplete = (function(response, json) {
      this.updateContent(response.responseText);
      if (Object.isFunction(onComplete)) onComplete(response, json);
    }).bind(this);
    $super(url, options);
  },
  updateContent: function(responseText) {
    var receiver = this.container[this.success() ? 'success' : 'failure'],
        options = this.options;
    if (!options.evalScripts) responseText = responseText.stripScripts();
    if (receiver = $(receiver)) {
      if (options.insertion) {
        if (Object.isString(options.insertion)) {
          var insertion = { }; insertion[options.insertion] = responseText;
          receiver.insert(insertion);
        }
        else options.insertion(receiver, responseText);
      }
      else receiver.update(responseText);
    }
  }
});
Ajax.PeriodicalUpdater = Class.create(Ajax.Base, {
  initialize: function($super, container, url, options) {
    $super(options);
    this.onComplete = this.options.onComplete;
    this.frequency = (this.options.frequency || 2);
    this.decay = (this.options.decay || 1);
    this.updater = { };
    this.container = container;
    this.url = url;
    this.start();
  },
  start: function() {
    this.options.onComplete = this.updateComplete.bind(this);
    this.onTimerEvent();
  },
  stop: function() {
    this.updater.options.onComplete = undefined;
    clearTimeout(this.timer);
    (this.onComplete || Prototype.emptyFunction).apply(this, arguments);
  },
  updateComplete: function(response) {
    if (this.options.decay) {
      this.decay = (response.responseText == this.lastText ?
        this.decay * this.options.decay : 1);
      this.lastText = response.responseText;
    }
    this.timer = this.onTimerEvent.bind(this).delay(this.decay * this.frequency);
  },
  onTimerEvent: function() {
    this.updater = new Ajax.Updater(this.container, this.url, this.options);
  }
});
(function(GLOBAL) {
  
  var UNDEFINED;
  var SLICE = Array.prototype.slice;
  
  // Try to reuse the same created element as much as possible. We'll use
  // this DIV for capability checks (where possible) and for normalizing
  // HTML content.
  var DIV = document.createElement('div');
  
  function $(element) {
    if (arguments.length > 1) {
      for (var i = 0, elements = [], length = arguments.length; i < length; i++)
        elements.push($(arguments[i]));
      return elements;
    }
    
    if (Object.isString(element))
      element = document.getElementById(element);
    return Element.extend(element);
  }
  
  GLOBAL.$ = $;
  
  
  // Define the DOM Level 2 node type constants if they're missing.
  if (!GLOBAL.Node) GLOBAL.Node = {};
  
  if (!GLOBAL.Node.ELEMENT_NODE) {
    Object.extend(GLOBAL.Node, {
      ELEMENT_NODE:                1,
      ATTRIBUTE_NODE:              2,
      TEXT_NODE:                   3,
      CDATA_SECTION_NODE:          4,
      ENTITY_REFERENCE_NODE:       5,
      ENTITY_NODE:                 6,
      PROCESSING_INSTRUCTION_NODE: 7,
      COMMENT_NODE:                8,
      DOCUMENT_NODE:               9,
      DOCUMENT_TYPE_NODE:         10,
      DOCUMENT_FRAGMENT_NODE:     11,
      NOTATION_NODE:              12
    });
  }
  
  // The cache for all our created elements.
  var ELEMENT_CACHE = {};
  
  // For performance reasons, we create new elements by cloning a "blank"
  // version of a given element. But sometimes this causes problems. Skip
  // the cache if:
  //   (a) We're creating a SELECT element (troublesome in IE6);
  //   (b) We're setting the `type` attribute on an INPUT element
  //       (troublesome in IE9).
  function shouldUseCreationCache(tagName, attributes) {
    if (tagName === 'select') return false;
    if ('type' in attributes) return false;
    return true;
  }
  
  // IE requires that `name` and `type` attributes be set this way.
  var HAS_EXTENDED_CREATE_ELEMENT_SYNTAX = (function(){
    try {
      var el = document.createElement('<input name="x">');
      return el.tagName.toLowerCase() === 'input' && el.name === 'x';
    } 
    catch(err) {
      return false;
    }
  })();
  
  
  var oldElement = GLOBAL.Element;
  function Element(tagName, attributes) {
    attributes = attributes || {};
    tagName = tagName.toLowerCase();
    
    if (HAS_EXTENDED_CREATE_ELEMENT_SYNTAX && attributes.name) {
      tagName = '<' + tagName + ' name="' + attributes.name + '">';
      delete attributes.name;
      return Element.writeAttribute(document.createElement(tagName), attributes);
    }
    
    if (!ELEMENT_CACHE[tagName])
      ELEMENT_CACHE[tagName] = Element.extend(document.createElement(tagName));
    
    var node = shouldUseCreationCache(tagName, attributes) ?
     ELEMENT_CACHE[tagName].cloneNode(false) : document.createElement(tagName);
     
    return Element.writeAttribute(node, attributes);
  }
  
  GLOBAL.Element = Element;
  
  Object.extend(GLOBAL.Element, oldElement || {});
  if (oldElement) GLOBAL.Element.prototype = oldElement.prototype;
  
  Element.Methods = { ByTag: {}, Simulated: {} };
  // Temporary object for holding all our initial element methods. We'll add
  // them all at once at the bottom of this file.
  var methods = {};
  
  var INSPECT_ATTRIBUTES = { id: 'id', className: 'class' };
  function inspect(element) {
    element = $(element);
    var result = '<' + element.tagName.toLowerCase();
    
    var attribute, value;
    for (var property in INSPECT_ATTRIBUTES) {
      attribute = INSPECT_ATTRIBUTES[property];
      value = (element[property] || '').toString();
      if (value) result += ' ' + attribute + '=' + value.inspect(true);
    }
    
    return result + '>';
  }
  
  methods.inspect = inspect;
  
  // VISIBILITY
  
  function visible(element) {
    return $(element).style.display !== 'none';
  }
  
  function toggle(element, bool) {
    element = $(element);
    if (Object.isUndefined(bool))
      bool = !Element.visible(element);
    Element[bool ? 'show' : 'hide'](element);
    
    return element;
  }
  function hide(element) {
    element = $(element);
    element.style.display = 'none';
    return element;
  }
  
  function show(element) {
    element = $(element);
    element.style.display = '';
    return element;
  }
  
  
  Object.extend(methods, {
    visible: visible,
    toggle:  toggle,
    hide:    hide,
    show:    show
  });
  
  // MANIPULATION
  
  function remove(element) {
    element = $(element);
    element.parentNode.removeChild(element);
    return element;
  }
  
  // see: http://support.microsoft.com/kb/276228
  var SELECT_ELEMENT_INNERHTML_BUGGY = (function(){
    var el = document.createElement("select"),
        isBuggy = true;
    el.innerHTML = "<option value=\"test\">test</option>";
    if (el.options && el.options[0]) {
      isBuggy = el.options[0].nodeName.toUpperCase() !== "OPTION";
    }
    el = null;
    return isBuggy;
  })();
  // see: http://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx
  var TABLE_ELEMENT_INNERHTML_BUGGY = (function(){
    try {
      var el = document.createElement("table");
      if (el && el.tBodies) {
        el.innerHTML = "<tbody><tr><td>test</td></tr></tbody>";
        var isBuggy = typeof el.tBodies[0] == "undefined";
        el = null;
        return isBuggy;
      }
    } catch (e) {
      return true;
    }
  })();
  
  var LINK_ELEMENT_INNERHTML_BUGGY = (function() {
    try {
      var el = document.createElement('div');
      el.innerHTML = "<link />";
      var isBuggy = (el.childNodes.length === 0);
      el = null;
      return isBuggy;
    } catch(e) {
      return true;
    }
  })();
  
  var ANY_INNERHTML_BUGGY = SELECT_ELEMENT_INNERHTML_BUGGY ||
   TABLE_ELEMENT_INNERHTML_BUGGY || LINK_ELEMENT_INNERHTML_BUGGY;    
  var SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING = (function () {
    var s = document.createElement("script"),
        isBuggy = false;
    try {
      s.appendChild(document.createTextNode(""));
      isBuggy = !s.firstChild ||
        s.firstChild && s.firstChild.nodeType !== 3;
    } catch (e) {
      isBuggy = true;
    }
    s = null;
    return isBuggy;
  })();
  
  function update(element, content) {
    element = $(element);
    
    // Purge the element's existing contents of all storage keys and
    // event listeners, since said content will be replaced no matter
    // what.
    var descendants = element.getElementsByTagName('*'),
     i = descendants.length;
    while (i--) purgeElement(descendants[i]);
    
    if (content && content.toElement)
      content = content.toElement();
      
    if (Object.isElement(content))
      return element.update().insert(content);
      
    
    content = Object.toHTML(content);
    var tagName = element.tagName.toUpperCase();
    
    if (tagName === 'SCRIPT' && SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING) {
      // Scripts are not evaluated when updating a SCRIPT element.
      element.text = content;
      return element;
    }
    
    if (ANY_INNERHTML_BUGGY) {
      if (tagName in INSERTION_TRANSLATIONS.tags) {
        while (element.firstChild)
          element.removeChild(element.firstChild);
        
        var nodes = getContentFromAnonymousElement(tagName, content.stripScripts());        
        for (var i = 0, node; node = nodes[i]; i++)
          element.appendChild(node);
        
      } else if (LINK_ELEMENT_INNERHTML_BUGGY && Object.isString(content) && content.indexOf('<link') > -1) {
        // IE barfs when inserting a string that beings with a LINK
        // element. The workaround is to add any content to the beginning
        // of the string; we'll be inserting a text node (see
        // getContentFromAnonymousElement below).
        while (element.firstChild)
          element.removeChild(element.firstChild);
          
        var nodes = getContentFromAnonymousElement(tagName,
         content.stripScripts(), true);
        
        for (var i = 0, node; node = nodes[i]; i++)
          element.appendChild(node);
      } else {
        element.innerHTML = content.stripScripts();
      }
    } else {
      element.innerHTML = content.stripScripts();
    }
    
    content.evalScripts.bind(content).defer();
    return element;
  }
  
  function replace(element, content) {
    element = $(element);
    
    if (content && content.toElement) {
      content = content.toElement();      
    } else if (!Object.isElement(content)) {
      content = Object.toHTML(content);
      var range = element.ownerDocument.createRange();
      range.selectNode(element);
      content.evalScripts.bind(content).defer();
      content = range.createContextualFragment(content.stripScripts());
    }
      
    element.parentNode.replaceChild(content, element);
    return element;
  }
  
  var INSERTION_TRANSLATIONS = {
    before: function(element, node) {
      element.parentNode.insertBefore(node, element);
    },
    top: function(element, node) {
      element.insertBefore(node, element.firstChild);
    },
    bottom: function(element, node) {
      element.appendChild(node);
    },
    after: function(element, node) {
      element.parentNode.insertBefore(node, element.nextSibling);
    },
    
    tags: {
      TABLE:  ['<table>',                '</table>',                   1],
      TBODY:  ['<table><tbody>',         '</tbody></table>',           2],
      TR:     ['<table><tbody><tr>',     '</tr></tbody></table>',      3],
      TD:     ['<table><tbody><tr><td>', '</td></tr></tbody></table>', 4],
      SELECT: ['<select>',               '</select>',                  1]
    }
  };
  
  var tags = INSERTION_TRANSLATIONS.tags;
  
  Object.extend(tags, {
    THEAD: tags.TBODY,
    TFOOT: tags.TBODY,
    TH:    tags.TD
  });
  
  function replace_IE(element, content) {
    element = $(element);
    if (content && content.toElement)
      content = content.toElement();
    if (Object.isElement(content)) {
      element.parentNode.replaceChild(content, element);
      return element;
    }
    
    content = Object.toHTML(content);
    var parent = element.parentNode, tagName = parent.tagName.toUpperCase();
    
    if (tagName in INSERTION_TRANSLATIONS.tags) {
      var nextSibling = Element.next(element);
      var fragments = getContentFromAnonymousElement(
       tagName, content.stripScripts());
      
      parent.removeChild(element);
      
      var iterator;
      if (nextSibling)
        iterator = function(node) { parent.insertBefore(node, nextSibling) };
      else
        iterator = function(node) { parent.appendChild(node); }
        
      fragments.each(iterator);
    } else {
      // We don't need to special-case this one.
      element.outerHTML = content.stripScripts();
    }
    
    content.evalScripts.bind(content).defer();
    return element;
  }
  
  if ('outerHTML' in document.documentElement)
    replace = replace_IE;
  
  function isContent(content) {
    if (Object.isUndefined(content) || content === null) return false;
    
    if (Object.isString(content) || Object.isNumber(content)) return true;
    if (Object.isElement(content)) return true;    
    if (content.toElement || content.toHTML) return true;
    
    return false;
  }
  
  // This private method does the bulk of the work for Element#insert. The
  // actual insert method handles argument normalization and multiple
  // content insertions.
  function insertContentAt(element, content, position) {
    position   = position.toLowerCase();
    var method = INSERTION_TRANSLATIONS[position];
    
    if (content && content.toElement) content = content.toElement();
    if (Object.isElement(content)) {
      method(element, content);
      return element;
    }
    
    content = Object.toHTML(content);      
    var tagName = ((position === 'before' || position === 'after') ?
     element.parentNode : element).tagName.toUpperCase();
    
    var childNodes = getContentFromAnonymousElement(tagName, content.stripScripts());
    
    if (position === 'top' || position === 'after') childNodes.reverse();
    
    for (var i = 0, node; node = childNodes[i]; i++)
      method(element, node);
      
    content.evalScripts.bind(content).defer();    
  }
  function insert(element, insertions) {
    element = $(element);
    
    if (isContent(insertions))
      insertions = { bottom: insertions };
      
    for (var position in insertions)
      insertContentAt(element, insertions[position], position);
    
    return element;    
  }
  
  function wrap(element, wrapper, attributes) {
    element = $(element);
    
    if (Object.isElement(wrapper)) {
      // The wrapper argument is a DOM node.
      $(wrapper).writeAttribute(attributes || {});      
    } else if (Object.isString(wrapper)) {
      // The wrapper argument is a string representing a tag name.
      wrapper = new Element(wrapper, attributes);
    } else {
      // No wrapper was specified, which means the second argument is a set
      // of attributes.
      wrapper = new Element('div', wrapper);
    }
    
    if (element.parentNode)
      element.parentNode.replaceChild(wrapper, element);
    
    wrapper.appendChild(element);
    
    return wrapper;
  }
  
  function cleanWhitespace(element) {
    element = $(element);
    var node = element.firstChild;
    
    while (node) {
      var nextNode = node.nextSibling;
      if (node.nodeType === Node.TEXT_NODE && !/\S/.test(node.nodeValue))
        element.removeChild(node);
      node = nextNode;
    }
    return element;
  }
  
  function empty(element) {
    return $(element).innerHTML.blank();
  }
  
  // In older versions of Internet Explorer, certain elements don't like
  // having innerHTML set on them — including SELECT and most table-related
  // tags. So we wrap the string with enclosing HTML (if necessary), stick it
  // in a DIV, then grab the DOM nodes.
  function getContentFromAnonymousElement(tagName, html, force) {
    var t = INSERTION_TRANSLATIONS.tags[tagName], div = DIV;
    
    var workaround = !!t;
    if (!workaround && force) {
      workaround = true;
      t = ['', '', 0];
    }
    
    if (workaround) {
      div.innerHTML = '&#160;' + t[0] + html + t[1];
      div.removeChild(div.firstChild);
      for (var i = t[2]; i--; )
        div = div.firstChild;
    } else {
      div.innerHTML = html;
    }
    
    return $A(div.childNodes);
    //return SLICE.call(div.childNodes, 0);
  }
  
  function clone(element, deep) {
    if (!(element = $(element))) return;
    var clone = element.cloneNode(deep);
    if (!HAS_UNIQUE_ID_PROPERTY) {
      clone._prototypeUID = UNDEFINED;
      if (deep) {
        var descendants = Element.select(clone, '*'),
         i = descendants.length;
        while (i--)
          descendants[i]._prototypeUID = UNDEFINED;
      }
    }
    return Element.extend(clone);
  }
  
  // Performs cleanup on a single element before it is removed from the page.
  function purgeElement(element) {
    var uid = getUniqueElementID(element);
    if (uid) {
      Element.stopObserving(element);
      if (!HAS_UNIQUE_ID_PROPERTY)
        element._prototypeUID = UNDEFINED;
      delete Element.Storage[uid];
    }
  }
  
  function purgeCollection(elements) {
    var i = elements.length;
    while (i--)
      purgeElement(elements[i]);
  }
  
  function purgeCollection_IE(elements) {
    var i = elements.length, element, uid;
    while (i--) {
      element = elements[i];
      uid = getUniqueElementID(element);
      delete Element.Storage[uid];
      delete Event.cache[uid];
    }
  }
  
  if (HAS_UNIQUE_ID_PROPERTY) {
    purgeCollection = purgeCollection_IE;
  }
  
  
  function purge(element) {
    if (!(element = $(element))) return;
    purgeElement(element);
    
    var descendants = element.getElementsByTagName('*'),
     i = descendants.length;
     
    while (i--) purgeElement(descendants[i]);
    
    return null;
  }
  
  Object.extend(methods, {
    remove:  remove,
    update:  update,
    replace: replace,
    insert:  insert,
    wrap:    wrap,
    cleanWhitespace: cleanWhitespace,
    empty:   empty,
    clone:   clone,
    purge:   purge
  });
  
  // TRAVERSAL
  
  function recursivelyCollect(element, property, maximumLength) {
    element = $(element);
    maximumLength = maximumLength || -1;
    var elements = [];
    
    while (element = element[property]) {
      if (element.nodeType === Node.ELEMENT_NODE)
        elements.push(Element.extend(element));
        
      if (elements.length === maximumLength) break;
    }
    
    return elements;    
  }
  
  function ancestors(element) {
    return recursivelyCollect(element, 'parentNode');
  }
  
  function descendants(element) {
    return Element.select(element, '*');
  }
  
  function firstDescendant(element) {
    element = $(element).firstChild;
    while (element && element.nodeType !== Node.ELEMENT_NODE)
      element = element.nextSibling;
    return $(element);
  }
  
  function immediateDescendants(element) {
    var results = [], child = $(element).firstChild;
    
    while (child) {
      if (child.nodeType === Node.ELEMENT_NODE)
        results.push(Element.extend(child));
      
      child = child.nextSibling;
    }
    
    return results;
  }
  
  function previousSiblings(element) {
    return recursivelyCollect(element, 'previousSibling');
  }
  
  function nextSiblings(element) {
    return recursivelyCollect(element, 'nextSibling');
  }
  
  function siblings(element) {
    element = $(element);    
    var previous = previousSiblings(element),
     next = nextSiblings(element);
    return previous.reverse().concat(next);
  }
  
  function match(element, selector) {
    element = $(element);
    
    // If selector is a string, we assume it's a CSS selector.
    if (Object.isString(selector))
      return Prototype.Selector.match(element, selector);
      
    // Otherwise, we assume it's an object with its own `match` method.
    return selector.match(element);
  }
  
  
  // Internal method for optimizing traversal. Works like 
  // `recursivelyCollect`, except it stops at the first match and doesn't
  // extend any elements except for the returned element.
  function _recursivelyFind(element, property, expression, index) {
    element = $(element), expression = expression || 0, index = index || 0;
    if (Object.isNumber(expression)) {
      index = expression, expression = null;
    }
    
    while (element = element[property]) {
      // Skip any non-element nodes.
      if (element.nodeType !== 1) continue;
      // Skip any nodes that don't match the expression, if there is one.
      if (expression && !Prototype.Selector.match(element, expression))
        continue;
      // Skip the first `index` matches we find.
      if (--index >= 0) continue;
      
      return Element.extend(element);
    }
  }
  
  
  function up(element, expression, index) {
    element = $(element);
    if (arguments.length === 1) return $(element.parentNode);
    return _recursivelyFind(element, 'parentNode', expression, index);
  }
  function down(element, expression, index) {
    if (arguments.length === 1) return firstDescendant(element);
    element = $(element), expression = expression || 0, index = index || 0;
    
    if (Object.isNumber(expression))
      index = expression, expression = '*';
    
    var node = Prototype.Selector.select(expression, element)[index];
    return Element.extend(node);
  }
  function previous(element, expression, index) {
    return _recursivelyFind(element, 'previousSibling', expression, index);
  }
  
  function next(element, expression, index) {
    return _recursivelyFind(element, 'nextSibling', expression, index);
  }
    
  function select(element) {
    element = $(element);
    var expressions = SLICE.call(arguments, 1).join(', ');
    return Prototype.Selector.select(expressions, element);
  }
  function adjacent(element) {
    element = $(element);
    var expressions = SLICE.call(arguments, 1).join(', ');
    var siblings = Element.siblings(element), results = [];
    for (var i = 0, sibling; sibling = siblings[i]; i++) {
      if (Prototype.Selector.match(sibling, expressions))
        results.push(sibling);
    }
    
    return results;
  }
  
  function descendantOf_DOM(element, ancestor) {
    element = $(element), ancestor = $(ancestor);
    while (element = element.parentNode)
      if (element === ancestor) return true;
    return false;
  }
  
  function descendantOf_contains(element, ancestor) {
    element = $(element), ancestor = $(ancestor);
    // Some nodes, like `document`, don't have the "contains" method.
    if (!ancestor.contains) return descendantOf_DOM(element, ancestor);
    return ancestor.contains(element) && ancestor !== element;
  }
  
  function descendantOf_compareDocumentPosition(element, ancestor) {
    element = $(element), ancestor = $(ancestor);
    return (element.compareDocumentPosition(ancestor) & 8) === 8;
  }
  
  var descendantOf;
  if (DIV.compareDocumentPosition) {
    descendantOf = descendantOf_compareDocumentPosition;
  } else if (DIV.contains) {
    descendantOf = descendantOf_contains;
  } else {
    descendantOf = descendantOf_DOM;
  }
  
  
  Object.extend(methods, {
    recursivelyCollect:   recursivelyCollect,
    ancestors:            ancestors,
    descendants:          descendants,
    firstDescendant:      firstDescendant,
    immediateDescendants: immediateDescendants,
    previousSiblings:     previousSiblings,
    nextSiblings:         nextSiblings,
    siblings:             siblings,
    match:                match,
    up:                   up,
    down:                 down,
    previous:             previous,
    next:                 next,
    select:               select,
    adjacent:             adjacent,
    descendantOf:         descendantOf,
    
    // ALIASES
    getElementsBySelector: select,
    
    childElements:         immediateDescendants
  });
  
  
  // ATTRIBUTES
  var idCounter = 1;
  function identify(element) {
    element = $(element);
    var id = Element.readAttribute(element, 'id');
    if (id) return id;
    
    // The element doesn't have an ID of its own. Give it one, first ensuring
    // that it's unique.
    do { id = 'anonymous_element_' + idCounter++ } while ($(id));
    
    Element.writeAttribute(element, 'id', id);
    return id;
  }
  
  function readAttribute(element, name) {
    return $(element).getAttribute(name);
  }
  
  function readAttribute_IE(element, name) {
    element = $(element);
    
    // If the attribute name exists in the value translation table, it means
    // we should use a custom method for retrieving that attribute's value.
    var table = ATTRIBUTE_TRANSLATIONS.read;
    if (table.values[name])
      return table.values[name](element, name);
      
    // If it exists in the name translation table, it means the attribute has
    // an alias.
    if (table.names[name]) name = table.names[name];
    
    // Special-case namespaced attributes.
    if (name.include(':')) {
      if (!element.attributes || !element.attributes[name]) return null;
      return element.attributes[name].value;
    }
    
    return element.getAttribute(name);
  }
  
  function readAttribute_Opera(element, name) {
    if (name === 'title') return element.title;
    return element.getAttribute(name);
  }
  
  var PROBLEMATIC_ATTRIBUTE_READING = (function() {
    // This test used to set 'onclick' to `Prototype.emptyFunction`, but that
    // caused an (uncatchable) error in IE 10. For some reason, switching to
    // an empty array prevents this issue.
    DIV.setAttribute('onclick', []);
    var value = DIV.getAttribute('onclick');
    var isFunction = Object.isArray(value);
    DIV.removeAttribute('onclick');
    return isFunction;
  })();
  
  if (PROBLEMATIC_ATTRIBUTE_READING) {
    readAttribute = readAttribute_IE;
  } else if (Prototype.Browser.Opera) {
    readAttribute = readAttribute_Opera;
  }
  
  
  function writeAttribute(element, name, value) {
    element = $(element);
    var attributes = {}, table = ATTRIBUTE_TRANSLATIONS.write;
    
    if (typeof name === 'object') {
      attributes = name;
    } else {
      attributes[name] = Object.isUndefined(value) ? true : value;
    }
    
    for (var attr in attributes) {
      name = table.names[attr] || attr;
      value = attributes[attr];
      if (table.values[attr])
        name = table.values[attr](element, value) || name;
      if (value === false || value === null)
        element.removeAttribute(name);
      else if (value === true)
        element.setAttribute(name, name);
      else element.setAttribute(name, value);
    }
    return element;
  }
  
  function hasAttribute(element, attribute) {
    attribute = ATTRIBUTE_TRANSLATIONS.has[attribute] || attribute;
    var node = $(element).getAttributeNode(attribute);
    return !!(node && node.specified);
  }
  
  GLOBAL.Element.Methods.Simulated.hasAttribute = hasAttribute;
  
  function classNames(element) {
    return new Element.ClassNames(element);
  }
  
  var regExpCache = {};
  function getRegExpForClassName(className) {
    if (regExpCache[className]) return regExpCache[className];
    
    var re = new RegExp("(^|\\s+)" + className + "(\\s+|$)");
    regExpCache[className] = re;
    return re;
  }
  
  function hasClassName(element, className) {
    if (!(element = $(element))) return;
    
    var elementClassName = element.className;
    // We test these common cases first because we'd like to avoid creating
    // the regular expression, if possible.
    if (elementClassName.length === 0) return false;
    if (elementClassName === className) return true;
    
    return getRegExpForClassName(className).test(elementClassName);
  }
  
  function addClassName(element, className) {
    if (!(element = $(element))) return;
    
    if (!hasClassName(element, className))
      element.className += (element.className ? ' ' : '') + className;
      
    return element;
  }
  
  function removeClassName(element, className) {
    if (!(element = $(element))) return;
    
    element.className = element.className.replace(
     getRegExpForClassName(className), ' ').strip();
     
    return element;
  }
  
  function toggleClassName(element, className, bool) {
    if (!(element = $(element))) return;
    
    if (Object.isUndefined(bool))
      bool = !hasClassName(element, className);
      
    var method = Element[bool ? 'addClassName' : 'removeClassName'];
    return method(element, className);
  }
  
  var ATTRIBUTE_TRANSLATIONS = {};
  
  // Test attributes.
  var classProp = 'className', forProp = 'for';
  
  // Try "className" first (IE <8)
  DIV.setAttribute(classProp, 'x');
  if (DIV.className !== 'x') {
    // Try "class" (IE >=8)
    DIV.setAttribute('class', 'x');
    if (DIV.className === 'x')
      classProp = 'class';
  }
  
  var LABEL = document.createElement('label');
  LABEL.setAttribute(forProp, 'x');
  if (LABEL.htmlFor !== 'x') {
    LABEL.setAttribute('htmlFor', 'x');
    if (LABEL.htmlFor === 'x')
      forProp = 'htmlFor';
  }
  LABEL = null;
  
  function _getAttr(element, attribute) {
    return element.getAttribute(attribute);
  }
  
  function _getAttr2(element, attribute) {
    return element.getAttribute(attribute, 2);
  }
  
  function _getAttrNode(element, attribute) {
    var node = element.getAttributeNode(attribute);
    return node ? node.value : '';
  }
  
  function _getFlag(element, attribute) {
    return $(element).hasAttribute(attribute) ? attribute : null;
  }
  
  // Test whether attributes like `onclick` have their values serialized.
  DIV.onclick = Prototype.emptyFunction;
  var onclickValue = DIV.getAttribute('onclick');
  
  var _getEv;
  
  // IE <8
  if (String(onclickValue).indexOf('{') > -1) {
    // intrinsic event attributes are serialized as `function { ... }`
    _getEv = function(element, attribute) {
      var value = element.getAttribute(attribute);
      if (!value) return null;
      value = value.toString();
      value = value.split('{')[1];
      value = value.split('}')[0];
      return value.strip();
    };
  } 
  // IE >=8
  else if (onclickValue === '') {
    // only function body is serialized
    _getEv = function(element, attribute) {
      var value = element.getAttribute(attribute);
      if (!value) return null;
      return value.strip();
    };
  }
  
  ATTRIBUTE_TRANSLATIONS.read = {
    names: {
      'class':     classProp,
      'className': classProp,
      'for':       forProp,
      'htmlFor':   forProp
    },
        
    values: {
      style: function(element) {
        return element.style.cssText.toLowerCase();
      },
      title: function(element) {
        return element.title;
      }
    }
  };
  
  ATTRIBUTE_TRANSLATIONS.write = {
    names: {
      className:   'class',
      htmlFor:     'for',
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing'
    },
    
    values: {
      checked: function(element, value) {
        element.checked = !!value;
      },
      
      style: function(element, value) {
        element.style.cssText = value ? value : '';
      }
    }
  };
  
  ATTRIBUTE_TRANSLATIONS.has = { names: {} };
  
  Object.extend(ATTRIBUTE_TRANSLATIONS.write.names,
   ATTRIBUTE_TRANSLATIONS.read.names);
   
  var CAMEL_CASED_ATTRIBUTE_NAMES = $w('colSpan rowSpan vAlign dateTime ' +
   'accessKey tabIndex encType maxLength readOnly longDesc frameBorder');
   
  for (var i = 0, attr; attr = CAMEL_CASED_ATTRIBUTE_NAMES[i]; i++) {
    ATTRIBUTE_TRANSLATIONS.write.names[attr.toLowerCase()] = attr;
    ATTRIBUTE_TRANSLATIONS.has.names[attr.toLowerCase()]   = attr;
  }
  
  // The rest of the oddballs.
  Object.extend(ATTRIBUTE_TRANSLATIONS.read.values, {
    href:        _getAttr2,
    src:         _getAttr2,
    type:        _getAttr,
    action:      _getAttrNode,
    disabled:    _getFlag,
    checked:     _getFlag,
    readonly:    _getFlag,
    multiple:    _getFlag,
    onload:      _getEv,
    onunload:    _getEv,
    onclick:     _getEv,
    ondblclick:  _getEv,
    onmousedown: _getEv,
    onmouseup:   _getEv,
    onmouseover: _getEv,
    onmousemove: _getEv,
    onmouseout:  _getEv,
    onfocus:     _getEv,
    onblur:      _getEv,
    onkeypress:  _getEv,
    onkeydown:   _getEv,
    onkeyup:     _getEv,
    onsubmit:    _getEv,
    onreset:     _getEv,
    onselect:    _getEv,
    onchange:    _getEv    
  });
  
  
  Object.extend(methods, {
    identify:        identify,
    readAttribute:   readAttribute,
    writeAttribute:  writeAttribute,
    classNames:      classNames,
    hasClassName:    hasClassName,
    addClassName:    addClassName,
    removeClassName: removeClassName,
    toggleClassName: toggleClassName
  });
  
  
  // STYLES
  function normalizeStyleName(style) {
    if (style === 'float' || style === 'styleFloat')
      return 'cssFloat';
    return style.camelize();
  }
  
  function normalizeStyleName_IE(style) {
    if (style === 'float' || style === 'cssFloat')
      return 'styleFloat';
    return style.camelize();
  }
  function setStyle(element, styles) {
    element = $(element);
    var elementStyle = element.style, match;
    
    if (Object.isString(styles)) {
      // Set the element's CSS text directly.
      elementStyle.cssText += ';' + styles;
      if (styles.include('opacity')) {
        var opacity = styles.match(/opacity:\s*(\d?\.?\d*)/)[1];
        Element.setOpacity(element, opacity);
      }
      return element;
    }
    
    for (var property in styles) {
      if (property === 'opacity') {
        Element.setOpacity(element, styles[property]);
      } else {
        var value = styles[property];
        if (property === 'float' || property === 'cssFloat') {
          // Browsers disagree on whether this should be called `cssFloat`
          // or `styleFloat`. Check both.
          property = Object.isUndefined(elementStyle.styleFloat) ?
           'cssFloat' : 'styleFloat';
        }
        elementStyle[property] = value;
      }
    }
    
    return element;    
  }
  
  function getStyle(element, style) {
    if (style === 'opacity') return getOpacity(element);
    element = $(element);
    style = normalizeStyleName(style);
    // Try inline styles first.
    var value = element.style[style];
    if (!value || value === 'auto') {
      // Reluctantly retrieve the computed style.
      var css = document.defaultView.getComputedStyle(element, null);
      value = css ? css[style] : null;
    }
    
    return value === 'auto' ? null : value;
  }
  
  function getStyle_Opera(element, style) {
    switch (style) {
      case 'height': case 'width':
        // returns '0px' for hidden elements; we want it to return null
        if (!Element.visible(element)) return null;
        
        // Certain versions of Opera return border-box dimensions instead of
        // content-box dimensions, so we need to determine if we should
        // subtract padding and borders from the value.
        var dim = parseInt(getStyle(element, style), 10);
        
        if (dim !== element['offset' + style.capitalize()])
          return dim + 'px';
       
        return Element.measure(element, style);
        
      default: return getStyle(element, style);
    }
  }
  
  function getStyle_IE(element, style) {
    if (style === 'opacity') return getOpacity_IE(element);
    element = $(element);
    style = normalizeStyleName_IE(style);
    // Try inline styles first.
    var value = element.style[style];    
    if (!value && element.currentStyle) {
      // Reluctantly retrieve the current style.
      value = element.currentStyle[style];
    }
    
    if (value === 'auto') {
      // If we need a dimension, return null for hidden elements, but return
      // pixel values for visible elements.
      if ((style === 'width' || style === 'height') && Element.visible(element))
        return Element.measure(element, style) + 'px';
      return null;
    }
    
    return value;    
  }
  
  function stripAlphaFromFilter_IE(filter) {
    return (filter || '').replace(/alpha\([^\)]*\)/gi, '');
  }
  
  function hasLayout_IE(element) {
    if (!element.currentStyle || !element.currentStyle.hasLayout)
      element.style.zoom = 1;
    return element;
  }
  // Opacity feature test borrowed from Modernizr.
  var STANDARD_CSS_OPACITY_SUPPORTED = (function() {
    DIV.style.cssText = "opacity:.55";
    return /^0.55/.test(DIV.style.opacity);
  })();
  function setOpacity(element, value) {
    element = $(element);
    if (value == 1 || value === '') value = '';
    else if (value < 0.00001) value = 0;    
    element.style.opacity = value;    
    return element;
  }
  
  // The IE versions of `setOpacity` and `getOpacity` are aware of both
  // the standard approach (an `opacity` property in CSS) and the old-style
  // IE approach (a proprietary `filter` property). They are written to
  // prefer the standard approach unless it isn't supported.
  var setOpacity_IE = STANDARD_CSS_OPACITY_SUPPORTED ? setOpacity : function(element, value) {
    element = $(element);
    var style = element.style;
    if (!element.currentStyle || !element.currentStyle.hasLayout)
      style.zoom = 1;
    var filter = Element.getStyle(element, 'filter');
     
    if (value == 1 || value === '') {
      // Remove the `alpha` filter from IE's `filter` CSS property. If there
      // is anything left after removal, put it back where it was; otherwise
      // remove the property.
      filter = stripAlphaFromFilter_IE(filter);
      if (filter) style.filter = filter;
      else style.removeAttribute('filter');      
      return element;
    }
    
    if (value < 0.00001) value = 0;
        
    style.filter = stripAlphaFromFilter_IE(filter) + 
     ' alpha(opacity=' + (value * 100) + ')';
     
    return element;
  };
  
  
  function getOpacity(element) {
    element = $(element);
    // Try inline styles first.
    var value = element.style.opacity;
    if (!value || value === 'auto') {
      // Reluctantly retrieve the computed style.
      var css = document.defaultView.getComputedStyle(element, null);
      value = css ? css.opacity : null;
    }
    return value ? parseFloat(value) : 1.0;
  }
  
  // Prefer the standard CSS approach unless it's not supported.
  var getOpacity_IE = STANDARD_CSS_OPACITY_SUPPORTED ? getOpacity : function(element) {
    var filter = Element.getStyle(element, 'filter');
    if (filter.length === 0) return 1.0;
    var match = (filter || '').match(/alpha\(opacity=(.*)\)/i);
    if (match && match[1]) return parseFloat(match[1]) / 100;
    return 1.0;
  };
  
  
  Object.extend(methods, {
    setStyle:   setStyle,
    getStyle:   getStyle,
    setOpacity: setOpacity,
    getOpacity: getOpacity
  });
  if (Prototype.Browser.Opera) {
    // Opera also has 'styleFloat' in DIV.style
    methods.getStyle = getStyle_Opera;
  } else if ('styleFloat' in DIV.style) {
    methods.getStyle = getStyle_IE;
    methods.setOpacity = setOpacity_IE;
    methods.getOpacity = getOpacity_IE;
  }
  
  // STORAGE
  var UID = 0;
  
  GLOBAL.Element.Storage = { UID: 1 };
  
  function getUniqueElementID(element) {
    if (element === window) return 0;
    // Need to use actual `typeof` operator to prevent errors in some
    // environments when accessing node expandos.
    if (typeof element._prototypeUID === 'undefined')
      element._prototypeUID = Element.Storage.UID++;
    return element._prototypeUID;
  }
  
  // In Internet Explorer, DOM nodes have a `uniqueID` property. Saves us
  // from inventing our own.
  function getUniqueElementID_IE(element) {
    if (element === window) return 0;
    // The document object's `uniqueID` property changes each time you read it.
    if (element == document) return 1;
    return element.uniqueID;
  }
  
  var HAS_UNIQUE_ID_PROPERTY = ('uniqueID' in DIV);
  if (HAS_UNIQUE_ID_PROPERTY)
    getUniqueElementID = getUniqueElementID_IE;
  
  function getStorage(element) {
    if (!(element = $(element))) return;
    
    var uid = getUniqueElementID(element);
    
    if (!Element.Storage[uid])
      Element.Storage[uid] = $H();
      
    return Element.Storage[uid];
  }
  
  function store(element, key, value) {
    if (!(element = $(element))) return;
    var storage = getStorage(element);
    if (arguments.length === 2) {
      // Assume we've been passed an object full of key/value pairs.
      storage.update(key);
    } else {
      storage.set(key, value);
    }
    return element;
  }
  
  function retrieve(element, key, defaultValue) {
    if (!(element = $(element))) return;
    var storage = getStorage(element), value = storage.get(key);
    
    if (Object.isUndefined(value)) {
      storage.set(key, defaultValue);
      value = defaultValue;
    }
    
    return value;
  }
  
  
  Object.extend(methods, {
    getStorage: getStorage,
    store:      store,
    retrieve:   retrieve
  });
  
  
  // ELEMENT EXTENSION
  var Methods = {}, ByTag = Element.Methods.ByTag,
   F = Prototype.BrowserFeatures;
  
  // Handle environments which support extending element prototypes
  // but don't expose the standard class name.
  if (!F.ElementExtensions && ('__proto__' in DIV)) {
    GLOBAL.HTMLElement = {};
    GLOBAL.HTMLElement.prototype = DIV['__proto__'];
    F.ElementExtensions = true;
  }
  
  // Certain oddball element types can't be extended in IE8.
  function checkElementPrototypeDeficiency(tagName) {
    if (typeof window.Element === 'undefined') return false;
    var proto = window.Element.prototype;
    if (proto) {
      var id = '_' + (Math.random() + '').slice(2),
       el = document.createElement(tagName);
      proto[id] = 'x';
      var isBuggy = (el[id] !== 'x');
      delete proto[id];
      el = null;
      return isBuggy;
    }
    
    return false;    
  }
  
  var HTMLOBJECTELEMENT_PROTOTYPE_BUGGY = 
   checkElementPrototypeDeficiency('object');
  
  function extendElementWith(element, methods) {
    for (var property in methods) {
      var value = methods[property];
      if (Object.isFunction(value) && !(property in element))
        element[property] = value.methodize();
    }
  }
  
  // Keeps track of the UIDs of extended elements.
  var EXTENDED = {};
  function elementIsExtended(element) {
    var uid = getUniqueElementID(element);
    return (uid in EXTENDED);
  }
  
  function extend(element) {
    if (!element || elementIsExtended(element)) return element;
    if (element.nodeType !== Node.ELEMENT_NODE || element == window)
      return element;
      
    var methods = Object.clone(Methods),
     tagName = element.tagName.toUpperCase();
     
    // Add methods for specific tags.
    if (ByTag[tagName]) Object.extend(methods, ByTag[tagName]);
    
    extendElementWith(element, methods);
    EXTENDED[getUniqueElementID(element)] = true;
    return element;
  }
  
  // Because of the deficiency mentioned above, IE8 needs a very thin version
  // of Element.extend that acts like Prototype.K _except_ when the element
  // is one of the problematic types.
  function extend_IE8(element) {
    if (!element || elementIsExtended(element)) return element;
    
    var t = element.tagName;
    if (t && (/^(?:object|applet|embed)$/i.test(t))) {
      extendElementWith(element, Element.Methods);
      extendElementWith(element, Element.Methods.Simulated);
      extendElementWith(element, Element.Methods.ByTag[t.toUpperCase()]);
    }
    
    return element;
  }
  // If the browser lets us extend specific elements, we can replace `extend`
  // with a thinner version (or, ideally, an empty version).
  if (F.SpecificElementExtensions) {
    extend = HTMLOBJECTELEMENT_PROTOTYPE_BUGGY ? extend_IE8 : Prototype.K;
  }
  
  function addMethodsToTagName(tagName, methods) {
    tagName = tagName.toUpperCase();
    if (!ByTag[tagName]) ByTag[tagName] = {};
    Object.extend(ByTag[tagName], methods);
  }
  
  function mergeMethods(destination, methods, onlyIfAbsent) {
    if (Object.isUndefined(onlyIfAbsent)) onlyIfAbsent = false;
    for (var property in methods) {
      var value = methods[property];
      if (!Object.isFunction(value)) continue;
      if (!onlyIfAbsent || !(property in destination))
        destination[property] = value.methodize();
    }
  }
  
  function findDOMClass(tagName) {
    var klass;
    var trans = {
      "OPTGROUP": "OptGroup", "TEXTAREA": "TextArea", "P": "Paragraph",
      "FIELDSET": "FieldSet", "UL": "UList", "OL": "OList", "DL": "DList",
      "DIR": "Directory", "H1": "Heading", "H2": "Heading", "H3": "Heading",
      "H4": "Heading", "H5": "Heading", "H6": "Heading", "Q": "Quote",
      "INS": "Mod", "DEL": "Mod", "A": "Anchor", "IMG": "Image", "CAPTION":
      "TableCaption", "COL": "TableCol", "COLGROUP": "TableCol", "THEAD":
      "TableSection", "TFOOT": "TableSection", "TBODY": "TableSection", "TR":
      "TableRow", "TH": "TableCell", "TD": "TableCell", "FRAMESET":
      "FrameSet", "IFRAME": "IFrame"
    };
    if (trans[tagName]) klass = 'HTML' + trans[tagName] + 'Element';
    if (window[klass]) return window[klass];
    klass = 'HTML' + tagName + 'Element';
    if (window[klass]) return window[klass];
    klass = 'HTML' + tagName.capitalize() + 'Element';
    if (window[klass]) return window[klass];
    var element = document.createElement(tagName),
     proto = element['__proto__'] || element.constructor.prototype;
        
    element = null;
    return proto;
  }
  
  function addMethods(methods) {
    if (arguments.length === 0) addFormMethods();
    
    if (arguments.length === 2) {
      // Tag names have been specified.
      var tagName = methods;
      methods = arguments[1];
    }
    
    if (!tagName) {
      Object.extend(Element.Methods, methods || {});
    } else {
      if (Object.isArray(tagName)) {
        for (var i = 0, tag; tag = tagName[i]; i++)
          addMethodsToTagName(tag, methods);
      } else {
        addMethodsToTagName(tagName, methods);
      }
    }
    
    var ELEMENT_PROTOTYPE = window.HTMLElement ? HTMLElement.prototype :
     Element.prototype;
     
    if (F.ElementExtensions) {
      mergeMethods(ELEMENT_PROTOTYPE, Element.Methods);
      mergeMethods(ELEMENT_PROTOTYPE, Element.Methods.Simulated, true);
    }
    
    if (F.SpecificElementExtensions) {
      for (var tag in Element.Methods.ByTag) {
        var klass = findDOMClass(tag);
        if (Object.isUndefined(klass)) continue;
        mergeMethods(klass.prototype, ByTag[tag]);
      }
    }
    
    Object.extend(Element, Element.Methods);
    Object.extend(Element, Element.Methods.Simulated);
    delete Element.ByTag;
    delete Element.Simulated;
    
    Element.extend.refresh();
    
    // We need to replace the element creation cache because the nodes in the
    // cache now have stale versions of the element methods.
    ELEMENT_CACHE = {};
  }
  
  Object.extend(GLOBAL.Element, {
    extend:     extend,
    addMethods: addMethods
  });
  
  if (extend === Prototype.K) {
    GLOBAL.Element.extend.refresh = Prototype.emptyFunction;
  } else {
    GLOBAL.Element.extend.refresh = function() {
      if (Prototype.BrowserFeatures.ElementExtensions) return;
      Object.extend(Methods, Element.Methods);
      Object.extend(Methods, Element.Methods.Simulated);
      // All existing extended elements are stale and need to be refreshed.
      EXTENDED = {};
    };
  }
  
  function addFormMethods() {
    // Add relevant element methods from the forms API.
    Object.extend(Form, Form.Methods);
    Object.extend(Form.Element, Form.Element.Methods);
    Object.extend(Element.Methods.ByTag, {
      "FORM":     Object.clone(Form.Methods),
      "INPUT":    Object.clone(Form.Element.Methods),
      "SELECT":   Object.clone(Form.Element.Methods),
      "TEXTAREA": Object.clone(Form.Element.Methods),
      "BUTTON":   Object.clone(Form.Element.Methods)
    });
  }
  Element.addMethods(methods);
  // Prevent IE leaks on DIV and ELEMENT_CACHE
  function destroyCache_IE() {
    DIV = null;
    ELEMENT_CACHE = null;
  }
  if (window.attachEvent)
    window.attachEvent('onunload', destroyCache_IE);
})(this);
(function() {
  
  // Converts a CSS percentage value to a decimal.
  // Ex: toDecimal("30%"); // -> 0.3
  function toDecimal(pctString) {
    var match = pctString.match(/^(\d+)%?$/i);
    if (!match) return null;
    return (Number(match[1]) / 100);
  }
  
  // A bare-bones version of Element.getStyle. Needed because getStyle is
  // public-facing and too user-friendly for our tastes. We need raw,
  // non-normalized values.
  //
  // Camel-cased property names only.
  function getRawStyle(element, style) {
    element = $(element);
    // Try inline styles first.
    var value = element.style[style];
    if (!value || value === 'auto') {
      // Reluctantly retrieve the computed style.
      var css = document.defaultView.getComputedStyle(element, null);
      value = css ? css[style] : null;
    }
    
    if (style === 'opacity') return value ? parseFloat(value) : 1.0;
    return value === 'auto' ? null : value;
  }
  
  function getRawStyle_IE(element, style) {
    // Try inline styles first.
    var value = element.style[style];    
    if (!value && element.currentStyle) {
      // Reluctantly retrieve the current style.
      value = element.currentStyle[style];
    }
    return value;
  }
  
  // Quickly figures out the content width of an element. Used instead of
  // `element.measure('width')` in several places below; we don't want to 
  // call back into layout code recursively if we don't have to.
  //
  // But this means it doesn't handle edge cases. Use it when you know the
  // element in question is visible and will give accurate measurements.
  function getContentWidth(element, context) {
    var boxWidth = element.offsetWidth;
    
    var bl = getPixelValue(element, 'borderLeftWidth',  context) || 0;
    var br = getPixelValue(element, 'borderRightWidth', context) || 0;
    var pl = getPixelValue(element, 'paddingLeft',      context) || 0;
    var pr = getPixelValue(element, 'paddingRight',     context) || 0;
    
    return boxWidth - bl - br - pl - pr;
  }
  
  if ('currentStyle' in document.documentElement) {
    getRawStyle = getRawStyle_IE;
  }
  
  
  // Can be called like this:
  //   getPixelValue("11px");
  // Or like this:
  //   getPixelValue(someElement, 'paddingTop');  
  function getPixelValue(value, property, context) {
    var element = null;
    if (Object.isElement(value)) {
      element = value;
      value = getRawStyle(element, property);
    }
    if (value === null || Object.isUndefined(value)) {
      return null;
    }
    
    // Non-IE browsers will always return pixels if possible.
    // (We use parseFloat instead of parseInt because Firefox can return
    // non-integer pixel values.)
    if ((/^(?:-)?\d+(\.\d+)?(px)?$/i).test(value)) {
      return window.parseFloat(value);
    }
    var isPercentage = value.include('%'), isViewport = (context === document.viewport);
    
    // When IE gives us something other than a pixel value, this technique
    // (invented by Dean Edwards) will convert it to pixels.
    //
    // (This doesn't work for percentage values on elements with `position: fixed`
    // because those percentages are relative to the viewport.)
    if (/\d/.test(value) && element && element.runtimeStyle && !(isPercentage && isViewport)) {
      var style = element.style.left, rStyle = element.runtimeStyle.left; 
      element.runtimeStyle.left = element.currentStyle.left;
      element.style.left = value || 0;  
      value = element.style.pixelLeft;
      element.style.left = style;
      element.runtimeStyle.left = rStyle;
      
      return value;
    }
    // For other browsers, we have to do a bit of work.
    // (At this point, only percentages should be left; all other CSS units
    // are converted to pixels by getComputedStyle.)
    if (element && isPercentage) {
      // The `context` argument comes into play for percentage units; it's
      // the thing that the unit represents a percentage of. When an
      // absolutely-positioned element has a width of 50%, we know that's
      // 50% of its offset parent. If it's `position: fixed` instead, we know
      // it's 50% of the viewport. And so on.
      context = context || element.parentNode;
      var decimal = toDecimal(value), whole = null;
      
      var isHorizontal = property.include('left') || property.include('right') ||
       property.include('width');
       
      var isVertical   = property.include('top') || property.include('bottom') ||
        property.include('height');
        
      if (context === document.viewport) {
        if (isHorizontal) {
          whole = document.viewport.getWidth();
        } else if (isVertical) {
          whole = document.viewport.getHeight();
        }
      } else {
        if (isHorizontal) {
          whole = $(context).measure('width');
        } else if (isVertical) {
          whole = $(context).measure('height');
        }
      }
      
      return (whole === null) ? 0 : whole * decimal;
    }
    
    // If we get this far, we should probably give up.
    return 0;
  }
  
  // Turns plain numbers into pixel measurements.
  function toCSSPixels(number) {
    if (Object.isString(number) && number.endsWith('px'))
      return number;
    return number + 'px';    
  }
  
  // Shortcut for figuring out if an element is `display: none` or not.
  function isDisplayed(element) {
    while (element && element.parentNode) {
      var display = element.getStyle('display');
      if (display === 'none') {
        return false;
      }
      element = $(element.parentNode);
    }
    return true;
  }
  
  // In IE6-7, positioned elements often need hasLayout triggered before they
  // report accurate measurements.
  var hasLayout = Prototype.K;  
  if ('currentStyle' in document.documentElement) {
    hasLayout = function(element) {
      if (!element.currentStyle.hasLayout) {
        element.style.zoom = 1;
      }
      return element;
    };
  }
  // Converts the layout hash property names back to the CSS equivalents.
  // For now, only the border properties differ.
  function cssNameFor(key) {
    if (key.include('border')) key = key + '-width';
    return key.camelize();
  }
  
  Element.Layout = Class.create(Hash, {
    initialize: function($super, element, preCompute) {
      $super();
      this.element = $(element);
      
      // nullify all properties keys
      Element.Layout.PROPERTIES.each( function(property) {
        this._set(property, null);
      }, this);
      
      // The 'preCompute' boolean tells us whether we should fetch all values
      // at once. If so, we should do setup/teardown only once. We set a flag
      // so that we can ignore calls to `_begin` and `_end` elsewhere.
      if (preCompute) {
        this._preComputing = true;
        this._begin();
        Element.Layout.PROPERTIES.each( this._compute, this );
        this._end();
        this._preComputing = false;
      }
    },
    
    _set: function(property, value) {
      return Hash.prototype.set.call(this, property, value);
    },    
    
    // TODO: Investigate.
    set: function(property, value) {
      throw "Properties of Element.Layout are read-only.";
    },
    
    get: function($super, property) {
      // Try to fetch from the cache.
      var value = $super(property);
      return value === null ? this._compute(property) : value;
    },
    
    // `_begin` and `_end` are two functions that are called internally 
    // before and after any measurement is done. In certain conditions (e.g.,
    // when hidden), elements need a "preparation" phase that ensures
    // accuracy of measurements.
    _begin: function() {
      if (this._isPrepared()) return;
      
      var element = this.element;
      if (isDisplayed(element)) {
        this._setPrepared(true);
        return;
      }
      
      // If we get this far, it means this element is hidden. To get usable
      // measurements, we must remove `display: none`, but in a manner that 
      // isn't noticeable to the user. That means we also set
      // `visibility: hidden` to make it invisible, and `position: absolute`
      // so that it won't alter the document flow when displayed.
      //
      // Once we do this, the element is "prepared," and we can make our
      // measurements. When we're done, the `_end` method cleans up our
      // changes.
      
      // Remember the original values for some styles we're going to alter.
      var originalStyles = {
        position:   element.style.position   || '',
        width:      element.style.width      || '',
        visibility: element.style.visibility || '',
        display:    element.style.display    || ''
      };
      
      // We store them so that the `_end` method can retrieve them later.
      element.store('prototype_original_styles', originalStyles);
      
      var position = getRawStyle(element, 'position'), width = element.offsetWidth;
      if (width === 0 || width === null) {
        // Opera/IE won't report the true width of the element through
        // `getComputedStyle` if it's hidden. If we got a nonsensical value,
        // we need to show the element and try again.
        element.style.display = 'block';
        width = element.offsetWidth;
      }
      
      // Preserve the context in case we get a percentage value.  
      var context = (position === 'fixed') ? document.viewport :
       element.parentNode;
       
      var tempStyles = {
        visibility: 'hidden',
        display:    'block'
      };
      
      // If the element's `position: fixed`, it's already out of the document
      // flow, so it's both unnecessary and inaccurate to set
      // `position: absolute`.
      if (position !== 'fixed') tempStyles.position = 'absolute';
       
      element.setStyle(tempStyles);
      
      var positionedWidth = element.offsetWidth, newWidth;
      if (width && (positionedWidth === width)) {
        // If the element's width is the same both before and after
        // we set absolute positioning, that means:
        //  (a) it was already absolutely-positioned; or
        //  (b) it has an explicitly-set width, instead of width: auto.
        // Either way, it means the element is the width it needs to be
        // in order to report an accurate height.
        newWidth = getContentWidth(element, context);
      } else if (position === 'absolute' || position === 'fixed') {
        // Absolute- and fixed-position elements' dimensions don't depend
        // upon those of their parents.
        newWidth = getContentWidth(element, context);
      } else {
        // Otherwise, the element's width depends upon the width of its
        // parent.
        var parent = element.parentNode, pLayout = $(parent).getLayout();
        newWidth = pLayout.get('width') -
         this.get('margin-left') -
         this.get('border-left') -
         this.get('padding-left') -
         this.get('padding-right') -
         this.get('border-right') -
         this.get('margin-right');
      }
      
      // Whatever the case, we've now figured out the correct `width` value
      // for the element.
      element.setStyle({ width: newWidth + 'px' });
      
      // The element is now ready for measuring.
      this._setPrepared(true);
    },
    
    _end: function() {
      var element = this.element;
      var originalStyles = element.retrieve('prototype_original_styles');
      element.store('prototype_original_styles', null);
      element.setStyle(originalStyles);
      this._setPrepared(false);
    },
    
    _compute: function(property) {
      var COMPUTATIONS = Element.Layout.COMPUTATIONS;
      if (!(property in COMPUTATIONS)) {
        throw "Property not found.";
      }
      
      return this._set(property, COMPUTATIONS[property].call(this, this.element));
    },
    
    _isPrepared: function() {
      return this.element.retrieve('prototype_element_layout_prepared', false);
    },
    
    _setPrepared: function(bool) {
      return this.element.store('prototype_element_layout_prepared', bool);
    },
    
    toObject: function() {
      var args = $A(arguments);
      var keys = (args.length === 0) ? Element.Layout.PROPERTIES :
       args.join(' ').split(' ');
      var obj = {};
      keys.each( function(key) {
        // Key needs to be a valid Element.Layout property.
        if (!Element.Layout.PROPERTIES.include(key)) return;
        var value = this.get(key);
        if (value != null) obj[key] = value;
      }, this);
      return obj;
    },
    
    toHash: function() {
      var obj = this.toObject.apply(this, arguments);
      return new Hash(obj);
    },
    
    toCSS: function() {
      var args = $A(arguments);
      var keys = (args.length === 0) ? Element.Layout.PROPERTIES :
       args.join(' ').split(' ');
      var css = {};
      keys.each( function(key) {
        // Key needs to be a valid Element.Layout property...
        if (!Element.Layout.PROPERTIES.include(key)) return;        
        // ...but not a composite property.
        if (Element.Layout.COMPOSITE_PROPERTIES.include(key)) return;
        var value = this.get(key);
        if (value != null) css[cssNameFor(key)] = value + 'px';
      }, this);
      return css;
    },
    
    inspect: function() {
      return "#<Element.Layout>";
    }
  });
  
  Object.extend(Element.Layout, {
    PROPERTIES: $w('height width top left right bottom border-left border-right border-top border-bottom padding-left padding-right padding-top padding-bottom margin-top margin-bottom margin-left margin-right padding-box-width padding-box-height border-box-width border-box-height margin-box-width margin-box-height'),
    
    COMPOSITE_PROPERTIES: $w('padding-box-width padding-box-height margin-box-width margin-box-height border-box-width border-box-height'),
    
    COMPUTATIONS: {
      'height': function(element) {
        if (!this._preComputing) this._begin();
        
        var bHeight = this.get('border-box-height');
        if (bHeight <= 0) {
          if (!this._preComputing) this._end();
          return 0;
        }
        
        var bTop = this.get('border-top'),
         bBottom = this.get('border-bottom');
        var pTop = this.get('padding-top'),
         pBottom = this.get('padding-bottom');
        if (!this._preComputing) this._end();
        return bHeight - bTop - bBottom - pTop - pBottom;
      },
      
      'width': function(element) {
        if (!this._preComputing) this._begin();
        
        var bWidth = this.get('border-box-width');
        if (bWidth <= 0) {
          if (!this._preComputing) this._end();
          return 0;
        }
        var bLeft = this.get('border-left'),
         bRight = this.get('border-right');
        var pLeft = this.get('padding-left'),
         pRight = this.get('padding-right');
         
        if (!this._preComputing) this._end();
        return bWidth - bLeft - bRight - pLeft - pRight;
      },
      
      'padding-box-height': function(element) {
        var height = this.get('height'),
         pTop = this.get('padding-top'),
         pBottom = this.get('padding-bottom');
         
        return height + pTop + pBottom;
      },
      'padding-box-width': function(element) {
        var width = this.get('width'),
         pLeft = this.get('padding-left'),
         pRight = this.get('padding-right');
         
        return width + pLeft + pRight;
      },
      
      'border-box-height': function(element) {
        if (!this._preComputing) this._begin();
        var height = element.offsetHeight;
        if (!this._preComputing) this._end();
        return height;
      },
            
      'border-box-width': function(element) {
        if (!this._preComputing) this._begin();
        var width = element.offsetWidth;
        if (!this._preComputing) this._end();
        return width;
      },
      
      'margin-box-height': function(element) {
        var bHeight = this.get('border-box-height'),
         mTop = this.get('margin-top'),
         mBottom = this.get('margin-bottom');
         
        if (bHeight <= 0) return 0;
         
        return bHeight + mTop + mBottom;        
      },
      'margin-box-width': function(element) {
        var bWidth = this.get('border-box-width'),
         mLeft = this.get('margin-left'),
         mRight = this.get('margin-right');
        if (bWidth <= 0) return 0;
         
        return bWidth + mLeft + mRight;
      },
      
      'top': function(element) {
        var offset = element.positionedOffset();
        return offset.top;
      },
      
      'bottom': function(element) {
        var offset = element.positionedOffset(),
         parent = element.getOffsetParent(),
         pHeight = parent.measure('height');
        
        var mHeight = this.get('border-box-height');
        
        return pHeight - mHeight - offset.top;
        // 
        // return getPixelValue(element, 'bottom');
      },
      
      'left': function(element) {
        var offset = element.positionedOffset();
        return offset.left;
      },
      
      'right': function(element) {
        var offset = element.positionedOffset(),
         parent = element.getOffsetParent(),
         pWidth = parent.measure('width');
        
        var mWidth = this.get('border-box-width');
        
        return pWidth - mWidth - offset.left;
        //  
        // return getPixelValue(element, 'right');
      },
      
      'padding-top': function(element) {
        return getPixelValue(element, 'paddingTop');
      },
      
      'padding-bottom': function(element) {
        return getPixelValue(element, 'paddingBottom');
      },
      
      'padding-left': function(element) {
        return getPixelValue(element, 'paddingLeft');
      },
      
      'padding-right': function(element) {
        return getPixelValue(element, 'paddingRight');
      },
      
      'border-top': function(element) {
        return getPixelValue(element, 'borderTopWidth');
      },
      
      'border-bottom': function(element) {
        return getPixelValue(element, 'borderBottomWidth');
      },
      
      'border-left': function(element) {
        return getPixelValue(element, 'borderLeftWidth');
      },
      
      'border-right': function(element) {
        return getPixelValue(element, 'borderRightWidth');
      },
      
      'margin-top': function(element) {
        return getPixelValue(element, 'marginTop');
      },
      
      'margin-bottom': function(element) {
        return getPixelValue(element, 'marginBottom');
      },
      
      'margin-left': function(element) {
        return getPixelValue(element, 'marginLeft');
      },
      
      'margin-right': function(element) {
        return getPixelValue(element, 'marginRight');
      }
    }
  });
  
  // An easier way to compute right and bottom offsets.
  if ('getBoundingClientRect' in document.documentElement) {
    Object.extend(Element.Layout.COMPUTATIONS, {
      'right': function(element) {
        var parent = hasLayout(element.getOffsetParent());
        var rect = element.getBoundingClientRect(),
         pRect = parent.getBoundingClientRect();
         
        return (pRect.right - rect.right).round();
      },
      
      'bottom': function(element) {
        var parent = hasLayout(element.getOffsetParent());
        var rect = element.getBoundingClientRect(),
         pRect = parent.getBoundingClientRect();
         
        return (pRect.bottom - rect.bottom).round();
      }
    });
  }
  
  Element.Offset = Class.create({
    initialize: function(left, top) {
      this.left = left.round();
      this.top  = top.round();
      
      // Act like an array.
      this[0] = this.left;
      this[1] = this.top;
    },
    
    relativeTo: function(offset) {
      return new Element.Offset(
        this.left - offset.left, 
        this.top  - offset.top
      );
    },
    
    inspect: function() {
      return "#<Element.Offset left: #{left} top: #{top}>".interpolate(this);
    },
    
    toString: function() {
      return "[#{left}, #{top}]".interpolate(this);
    },
    
    toArray: function() {
      return [this.left, this.top];
    }
  });
  
  function getLayout(element, preCompute) {
    return new Element.Layout(element, preCompute);
  }
    
  function measure(element, property) {
    return $(element).getLayout().get(property);  
  }
  function getHeight(element) {
    return Element.getDimensions(element).height;
  }
  
  function getWidth(element) {
    return Element.getDimensions(element).width;
  }
  function getDimensions(element) {
    element = $(element);
    var display = Element.getStyle(element, 'display');
    
    if (display && display !== 'none') {
      return { width: element.offsetWidth, height: element.offsetHeight };
    }
    
    // All *Width and *Height properties give 0 on elements with
    // `display: none`, so show the element temporarily.
    var style = element.style;
    var originalStyles = {
      visibility: style.visibility,
      position:   style.position,
      display:    style.display
    };
    
    var newStyles = {
      visibility: 'hidden',
      display:    'block'
    };
    // Switching `fixed` to `absolute` causes issues in Safari.
    if (originalStyles.position !== 'fixed')
      newStyles.position = 'absolute';
    
    Element.setStyle(element, newStyles);
    
    var dimensions = {
      width:  element.offsetWidth,
      height: element.offsetHeight
    };
    
    Element.setStyle(element, originalStyles);
    return dimensions;
  }
  
  function getOffsetParent(element) {
    element = $(element);
    
    // For unusual cases like these, we standardize on returning the BODY
    // element as the offset parent.
    if (isDocument(element) || isDetached(element) || isBody(element) || isHtml(element))
      return $(document.body);
    // IE reports offset parent incorrectly for inline elements.
    var isInline = (Element.getStyle(element, 'display') === 'inline');
    if (!isInline && element.offsetParent) return isHtml(element.offsetParent) ? $(document.body) : $(element.offsetParent);
    
    while ((element = element.parentNode) && element !== document.body) {
      if (Element.getStyle(element, 'position') !== 'static') {
        return isHtml(element) ? $(document.body) : $(element);
      }
    }
    
    return $(document.body);
  }
  
  
  function cumulativeOffset(element) {
    element = $(element);
    var valueT = 0, valueL = 0;
    if (element.parentNode) {
      do {
        valueT += element.offsetTop  || 0;
        valueL += element.offsetLeft || 0;
        element = element.offsetParent;
      } while (element);
    }
    return new Element.Offset(valueL, valueT);
  }
  
  function positionedOffset(element) {    
    element = $(element);
    // Account for the margin of the element.
    var layout = element.getLayout();
    
    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      element = element.offsetParent;
      if (element) {
        if (isBody(element)) break;
        var p = Element.getStyle(element, 'position');
        if (p !== 'static') break;
      }
    } while (element);
    
    valueT -= layout.get('margin-top');
    valueL -= layout.get('margin-left');
    
    return new Element.Offset(valueL, valueT);
  }
  function cumulativeScrollOffset(element) {
    var valueT = 0, valueL = 0;
    do {
      if(element == document.body){
        valueT += (window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop || 0;
        valueL += (window.pageXOffset !== undefined) ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft || 0;
        break;
      } else {
        valueT += element.scrollTop  || 0;
        valueL += element.scrollLeft || 0;
        element = element.parentNode;
      }
    } while (element);
    return new Element.Offset(valueL, valueT);
  }
  function viewportOffset(forElement) {
    var valueT = 0, valueL = 0, docBody = document.body;
    forElement = $(forElement);
    var element = forElement;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      // Safari fix
      if (element.offsetParent == docBody &&
        Element.getStyle(element, 'position') == 'absolute') break;
    } while (element = element.offsetParent);
    element = forElement;
    do {
      // Opera < 9.5 sets scrollTop/Left on both HTML and BODY elements.
      // Other browsers set it only on the HTML element. The BODY element
      // can be skipped since its scrollTop/Left should always be 0.
      if (element != docBody) {
        valueT -= element.scrollTop  || 0;
        valueL -= element.scrollLeft || 0;
      }
    } while (element = element.parentNode);    
    return new Element.Offset(valueL, valueT);
  }
  
  function absolutize(element) {
    element = $(element);
    
    if (Element.getStyle(element, 'position') === 'absolute') {
      return element;
    }
    
    var offsetParent = getOffsetParent(element);    
    var eOffset = element.viewportOffset(),
     pOffset = offsetParent.viewportOffset();
     
    var offset = eOffset.relativeTo(pOffset);
    var layout = element.getLayout();    
    
    element.store('prototype_absolutize_original_styles', {
      position: element.getStyle('position'),
      left:     element.getStyle('left'),
      top:      element.getStyle('top'),
      width:    element.getStyle('width'),
      height:   element.getStyle('height')
    });
    
    element.setStyle({
      position: 'absolute',
      top:    offset.top + 'px',
      left:   offset.left + 'px',
      width:  layout.get('width') + 'px',
      height: layout.get('height') + 'px'
    });
    
    return element;
  }
  
  function relativize(element) {
    element = $(element);
    if (Element.getStyle(element, 'position') === 'relative') {
      return element;
    }
    
    // Restore the original styles as captured by Element#absolutize.
    var originalStyles = 
     element.retrieve('prototype_absolutize_original_styles');
    
    if (originalStyles) element.setStyle(originalStyles);
    return element;
  }
  
  
  function scrollTo(element) {
    element = $(element);
    var pos = Element.cumulativeOffset(element);
    window.scrollTo(pos.left, pos.top);
    return element;
  }
  
  function makePositioned(element) {
    element = $(element);
    var position = Element.getStyle(element, 'position'), styles = {};
    if (position === 'static' || !position) {
      styles.position = 'relative';
      // When an element is `position: relative` with an undefined `top` and
      // `left`, Opera returns the offset relative to positioning context.
      if (Prototype.Browser.Opera) {
        styles.top  = 0;
        styles.left = 0;
      }
      Element.setStyle(element, styles);
      Element.store(element, 'prototype_made_positioned', true);
    }
    return element;
  }
  
  function undoPositioned(element) {
    element = $(element);
    var storage = Element.getStorage(element),
     madePositioned = storage.get('prototype_made_positioned');
    
    if (madePositioned) {
      storage.unset('prototype_made_positioned');
      Element.setStyle(element, {
        position: '',
        top:      '',
        bottom:   '',
        left:     '',
        right:    ''
      });
    }  
    return element;
  }
  
  function makeClipping(element) {
    element = $(element);
    
    var storage = Element.getStorage(element),
     madeClipping = storage.get('prototype_made_clipping');
    
    // The "prototype_made_clipping" storage key is meant to hold the
    // original CSS overflow value. A string value or `null` means that we've
    // called `makeClipping` already. An `undefined` value means we haven't.
    if (Object.isUndefined(madeClipping)) {
      var overflow = Element.getStyle(element, 'overflow');
      storage.set('prototype_made_clipping', overflow);
      if (overflow !== 'hidden')
        element.style.overflow = 'hidden';
    }
    
    return element;
  }
  
  function undoClipping(element) {
    element = $(element);
    var storage = Element.getStorage(element),
     overflow = storage.get('prototype_made_clipping');
    
    if (!Object.isUndefined(overflow)) {
      storage.unset('prototype_made_clipping');
      element.style.overflow = overflow || '';
    }
    
    return element;
  }
  
  function clonePosition(element, source, options) {
    options = Object.extend({
      setLeft:    true,
      setTop:     true,
      setWidth:   true,
      setHeight:  true,
      offsetTop:  0,
      offsetLeft: 0
    }, options || {});
    
    // Find page position of source.    
    source  = $(source);
    element = $(element);    
    var p, delta, layout, styles = {};
    if (options.setLeft || options.setTop) {
      p = Element.viewportOffset(source);
      delta = [0, 0];
      // A delta of 0/0 will work for `positioned: fixed` elements, but
      // for `position: absolute` we need to get the parent's offset.
      if (Element.getStyle(element, 'position') === 'absolute') {
        var parent = Element.getOffsetParent(element);
        if (parent !== document.body) delta = Element.viewportOffset(parent);
      }
    }
    if (options.setWidth || options.setHeight) {
      layout = Element.getLayout(source);
    }
    // Set position.
    if (options.setLeft)
      styles.left = (p[0] - delta[0] + options.offsetLeft) + 'px';
    if (options.setTop)
      styles.top  = (p[1] - delta[1] + options.offsetTop)  + 'px';
    
    if (options.setWidth)
      styles.width  = layout.get('border-box-width')  + 'px';
    if (options.setHeight)
      styles.height = layout.get('border-box-height') + 'px';
    
    return Element.setStyle(element, styles);
  }
  
    
  if (Prototype.Browser.IE) {
    // IE doesn't report offsets correctly for static elements, so we change them
    // to "relative" to get the values, then change them back.
    getOffsetParent = getOffsetParent.wrap(
      function(proceed, element) {
        element = $(element);
        
        // For unusual cases like these, we standardize on returning the BODY
        // element as the offset parent.
        if (isDocument(element) || isDetached(element) || isBody(element) || isHtml(element))
          return $(document.body);
        var position = element.getStyle('position');
        if (position !== 'static') return proceed(element);
        element.setStyle({ position: 'relative' });
        var value = proceed(element);
        element.setStyle({ position: position });
        return value;
      }
    );
    
    positionedOffset = positionedOffset.wrap(function(proceed, element) {
      element = $(element);
      if (!element.parentNode) return new Element.Offset(0, 0);
      var position = element.getStyle('position');
      if (position !== 'static') return proceed(element);
      // Trigger hasLayout on the offset parent so that IE6 reports
      // accurate offsetTop and offsetLeft values for position: fixed.
      var offsetParent = element.getOffsetParent();
      if (offsetParent && offsetParent.getStyle('position') === 'fixed')
        hasLayout(offsetParent);
      element.setStyle({ position: 'relative' });
      var value = proceed(element);
      element.setStyle({ position: position });
      return value;
    });
  } else if (Prototype.Browser.Webkit) {    
    // Safari returns margins on body which is incorrect if the child is absolutely
    // positioned.  For performance reasons, redefine Element#cumulativeOffset for
    // KHTML/WebKit only.
    cumulativeOffset = function(element) {
      element = $(element);
      var valueT = 0, valueL = 0;
      do {
        valueT += element.offsetTop  || 0;
        valueL += element.offsetLeft || 0;
        if (element.offsetParent == document.body) {
          if (Element.getStyle(element, 'position') == 'absolute') break;
        }
        element = element.offsetParent;
      } while (element);
      return new Element.Offset(valueL, valueT);
    };
  }
  
  
  Element.addMethods({
    getLayout:              getLayout,
    measure:                measure,
    getWidth:               getWidth,
    getHeight:              getHeight,
    getDimensions:          getDimensions,
    getOffsetParent:        getOffsetParent,
    cumulativeOffset:       cumulativeOffset,
    positionedOffset:       positionedOffset,
    cumulativeScrollOffset: cumulativeScrollOffset,
    viewportOffset:         viewportOffset,    
    absolutize:             absolutize,
    relativize:             relativize,
    scrollTo:               scrollTo,
    makePositioned:         makePositioned,
    undoPositioned:         undoPositioned,
    makeClipping:           makeClipping,
    undoClipping:           undoClipping,
    clonePosition:          clonePosition
  });
  
  function isBody(element) {
    return element.nodeName.toUpperCase() === 'BODY';
  }
  
  function isHtml(element) {
    return element.nodeName.toUpperCase() === 'HTML';
  }
  
  function isDocument(element) {
    return element.nodeType === Node.DOCUMENT_NODE;
  }
  
  function isDetached(element) {
    return element !== document.body &&
     !Element.descendantOf(element, document.body);
  }
  
  // If the browser supports the nonstandard `getBoundingClientRect`
  // (currently only IE and Firefox), it becomes far easier to obtain
  // true offsets.
  if ('getBoundingClientRect' in document.documentElement) {
    Element.addMethods({
      viewportOffset: function(element) {
        element = $(element);        
        if (isDetached(element)) return new Element.Offset(0, 0);
        var rect = element.getBoundingClientRect(),
         docEl = document.documentElement;
        // The HTML element on IE < 8 has a 2px border by default, giving
        // an incorrect offset. We correct this by subtracting clientTop
        // and clientLeft.
        return new Element.Offset(rect.left - docEl.clientLeft,
         rect.top - docEl.clientTop);
      }
    }); 
  }
  
  
})();
(function() {
  
  var IS_OLD_OPERA = Prototype.Browser.Opera &&
   (window.parseFloat(window.opera.version()) < 9.5);
  var ROOT = null;
  function getRootElement() {
    if (ROOT) return ROOT;    
    ROOT = IS_OLD_OPERA ? document.body : document.documentElement;
    return ROOT;
  }
  function getDimensions() {
    return { width: this.getWidth(), height: this.getHeight() };
  }
  
  function getWidth() {
    return getRootElement().clientWidth;
  }
  
  function getHeight() {
    return getRootElement().clientHeight;
  }
  
  function getScrollOffsets() {
    var x = window.pageXOffset || document.documentElement.scrollLeft ||
     document.body.scrollLeft;
    var y = window.pageYOffset || document.documentElement.scrollTop ||
     document.body.scrollTop;
     
    return new Element.Offset(x, y);
  }
  
  document.viewport = {
    getDimensions:    getDimensions,
    getWidth:         getWidth,
    getHeight:        getHeight,
    getScrollOffsets: getScrollOffsets
  };
  
})();
window.$$ = function() {
  var expression = $A(arguments).join(', ');
  return Prototype.Selector.select(expression, document);
};
Prototype.Selector = (function() {
  
  function select() {
    throw new Error('Method "Prototype.Selector.select" must be defined.');
  }
  function match() {
    throw new Error('Method "Prototype.Selector.match" must be defined.');
  }
  function find(elements, expression, index) {
    index = index || 0;
    var match = Prototype.Selector.match, length = elements.length, matchIndex = 0, i;
    for (i = 0; i < length; i++) {
      if (match(elements[i], expression) && index == matchIndex++) {
        return Element.extend(elements[i]);
      }
    }
  }
  
  function extendElements(elements) {
    for (var i = 0, length = elements.length; i < length; i++) {
      Element.extend(elements[i]);
    }
    return elements;
  }
  
  
  var K = Prototype.K;
  
  return {
    select: select,
    match: match,
    find: find,
    extendElements: (Element.extend === K) ? K : extendElements,
    extendElement: Element.extend
  };
})();
/*!
 * Sizzle CSS Selector Engine v1.9.4-pre
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-06-03
 */
(function( window, undefined ) {
var i,
	support,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,
	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,
	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	hasDuplicate = false,
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}
		return 0;
	},
	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,
	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},
	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	// Regular expressions
	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),
	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",
	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",
	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	rsibling = new RegExp( whitespace + "*[+~]" ),
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),
	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),
	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},
	rnative = /^[^{]+\{\s*\[native \w/,
	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,
	rescape = /'|\\/g,
	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?
		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :
		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}
function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;
	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}
	context = context || document;
	results = results || [];
	if ( !selector || typeof selector !== "string" ) {
		return results;
	}
	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}
	if ( documentIsHTML && !seed ) {
		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}
			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;
			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}
		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;
			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );
				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";
				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}
			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}
	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}
function createCache() {
	var keys = [];
	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	}
	return cache;
}
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}
function assert( fn ) {
	var div = document.createElement("div");
	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;
	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );
	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}
	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}
	return a ? 1 : -1;
}
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;
			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};
support = Sizzle.support = {};
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;
	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}
	// Set our document
	document = doc;
	docElem = doc.documentElement;
	// Support tests
	documentIsHTML = !isXML( doc );
	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent.attachEvent && parent !== parent.top ) {
		parent.attachEvent( "onbeforeunload", function() {
			setDocument();
		});
	}
	/* Attributes
	---------------------------------------------------------------------- */
	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});
	/* getElement(s)By*
	---------------------------------------------------------------------- */
	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});
	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";
		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});
	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});
	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}
	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );
			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}
				return tmp;
			}
			return results;
		};
	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};
	/* QSA/matchesSelector
	---------------------------------------------------------------------- */
	// QSA and matchesSelector support
	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];
	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];
	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";
			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}
			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});
		assert(function( div ) {
			// Support: Opera 10-12/IE8
			// ^= $= *= and empty values
			// Should not select anything
			// Support: Windows 8 Native Apps
			// The type attribute is restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "t", "" );
			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}
			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}
			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}
	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {
		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );
			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}
	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	/* Contains
	---------------------------------------------------------------------- */
	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = rnative.test( docElem.contains ) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};
	/* Sorting
	---------------------------------------------------------------------- */
	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}
		var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );
		if ( compare ) {
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
				// Choose the first element that is related to our preferred document
				if ( a === doc || contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || contains(preferredDoc, b) ) {
					return 1;
				}
				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}
			return compare & 4 ? -1 : 1;
		}
		// Not directly comparable, sort on existence of method
		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}
		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}
		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}
		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :
			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};
	return doc;
};
Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};
Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}
	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );
	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
		try {
			var ret = matches.call( elem, expr );
			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}
	return Sizzle( expr, document, null, [elem] ).length > 0;
};
Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};
Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}
	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;
	return val === undefined ?
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null :
		val;
};
Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;
	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );
	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}
	return results;
};
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;
	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes
	return ret;
};
Expr = Sizzle.selectors = {
	// Can be adjusted by the user
	cacheLength: 50,
	createPseudo: markFunction,
	match: matchExpr,
	attrHandle: {},
	find: {},
	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},
	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );
			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );
			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}
			return match.slice( 0, 4 );
		},
		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();
			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}
				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}
			return match;
		},
		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];
			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}
			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];
			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}
			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},
	filter: {
		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},
		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];
			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},
		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );
				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}
				result += "";
				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},
		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";
			return first === 1 && last === 0 ?
				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :
				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;
					if ( parent ) {
						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}
						start = [ forward ? parent.firstChild : parent.lastChild ];
						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {
								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}
						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];
						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {
								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}
									if ( node === elem ) {
										break;
									}
								}
							}
						}
						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},
		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );
			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}
			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}
			return fn;
		}
	},
	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );
			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;
					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),
		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),
		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),
		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),
		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},
		"root": function( elem ) {
			return elem === docElem;
		},
		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},
		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},
		"disabled": function( elem ) {
			return elem.disabled === true;
		},
		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},
		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}
			return elem.selected === true;
		},
		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},
		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},
		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},
		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},
		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},
		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},
		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),
		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),
		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),
		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),
		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),
		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),
		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};
Expr.pseudos["nth"] = Expr.pseudos["eq"];
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();
function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];
	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}
	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;
	while ( soFar ) {
		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}
		matched = false;
		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}
		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}
		if ( !matched ) {
			break;
		}
	}
	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}
function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}
function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;
	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :
		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;
			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}
function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}
function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;
	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}
	return newUnmatched;
}
function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,
			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,
			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
					// ...intermediate processing is necessary
					[] :
					// ...otherwise use results directly
					results :
				matcherIn;
		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}
		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );
			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}
		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}
				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {
						seed[temp] = !(results[temp] = elem);
					}
				}
			}
		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}
function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,
		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];
	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}
	return elementMatcher( matchers );
}
function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);
			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}
			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}
				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}
					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}
			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}
				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}
					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}
				// Add matches to results
				push.apply( results, setMatched );
				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {
					Sizzle.uniqueSort( results );
				}
			}
			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}
			return unmatched;
		};
	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}
compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];
	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}
		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};
function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}
function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );
	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {
			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector.slice( tokens.shift().value.length );
			}
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
						break;
					}
				}
			}
		}
	}
	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector )
	);
	return results;
}
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
support.detectDuplicates = hasDuplicate;
setDocument();
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return (val = elem.getAttributeNode( name )) && val.specified ?
				val.value :
				elem[ name ] === true ? name.toLowerCase() : null;
		}
	});
}
if ( true ) {
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return Sizzle; }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
	window.Sizzle = Sizzle;
}
})( window );
Prototype._original_property = window.Sizzle;
;(function(engine) {
  var extendElements = Prototype.Selector.extendElements;
  function select(selector, scope) {
    return extendElements(engine(selector, scope || document));
  }
  function match(element, selector) {
    return engine.matches(selector, [element]).length == 1;
  }
  Prototype.Selector.engine = engine;
  Prototype.Selector.select = select;
  Prototype.Selector.match = match;
})(Sizzle);
window.Sizzle = Prototype._original_property;
delete Prototype._original_property;
var Form = {
  reset: function(form) {
    form = $(form);
    form.reset();
    return form;
  },
  serializeElements: function(elements, options) {
    // An earlier version accepted a boolean second parameter (hash) where
    // the default if omitted was false; respect that, but if they pass in an
    // options object (e.g., the new signature) but don't specify the hash option,
    // default true, as that's the new preferred approach.
    if (typeof options != 'object') options = { hash: !!options };
    else if (Object.isUndefined(options.hash)) options.hash = true;
    var key, value, submitted = false, submit = options.submit, accumulator, initial;
    
    if (options.hash) {
      initial = {};
      accumulator = function(result, key, value) {
        if (key in result) {
          if (!Object.isArray(result[key])) result[key] = [result[key]];
          result[key] = result[key].concat(value);
        } else result[key] = value;
        return result;
      };
    } else {
      initial = '';
      accumulator = function(result, key, values) {
        if (!Object.isArray(values)) {values = [values];}
        if (!values.length) {return result;}
        // According to the spec, spaces should be '+' rather than '%20'.
        var encodedKey = encodeURIComponent(key).gsub(/%20/, '+');
        return result + (result ? "&" : "") + values.map(function (value) {
          // Normalize newlines as \r\n because the HTML spec says newlines should
          // be encoded as CRLFs.
          value = value.gsub(/(\r)?\n/, '\r\n');
          value = encodeURIComponent(value);
          // According to the spec, spaces should be '+' rather than '%20'.
          value = value.gsub(/%20/, '+');
          return encodedKey + "=" + value;
        }).join("&");
      };
    }
    
    return elements.inject(initial, function(result, element) {
      if (!element.disabled && element.name) {
        key = element.name; value = $(element).getValue();
        if (value != null && element.type != 'file' && (element.type != 'submit' || (!submitted &&
            submit !== false && (!submit || key == submit) && (submitted = true)))) {
          result = accumulator(result, key, value);
        }
      }
      return result;
    });
  }
};
Form.Methods = {
  serialize: function(form, options) {
    return Form.serializeElements(Form.getElements(form), options);
  },
  
  getElements: function(form) {
    var elements = $(form).getElementsByTagName('*');
    var element, results = [], serializers = Form.Element.Serializers;
    
    for (var i = 0; element = elements[i]; i++) {
      if (serializers[element.tagName.toLowerCase()])
        results.push(Element.extend(element));
    }
    return results;
  },
  getInputs: function(form, typeName, name) {
    form = $(form);
    var inputs = form.getElementsByTagName('input');
    if (!typeName && !name) return $A(inputs).map(Element.extend);
    for (var i = 0, matchingInputs = [], length = inputs.length; i < length; i++) {
      var input = inputs[i];
      if ((typeName && input.type != typeName) || (name && input.name != name))
        continue;
      matchingInputs.push(Element.extend(input));
    }
    return matchingInputs;
  },
  disable: function(form) {
    form = $(form);
    Form.getElements(form).invoke('disable');
    return form;
  },
  enable: function(form) {
    form = $(form);
    Form.getElements(form).invoke('enable');
    return form;
  },
  findFirstElement: function(form) {
    var elements = $(form).getElements().findAll(function(element) {
      return 'hidden' != element.type && !element.disabled;
    });
    var firstByIndex = elements.findAll(function(element) {
      return element.hasAttribute('tabIndex') && element.tabIndex >= 0;
    }).sortBy(function(element) { return element.tabIndex }).first();
    return firstByIndex ? firstByIndex : elements.find(function(element) {
      return /^(?:input|select|textarea)$/i.test(element.tagName);
    });
  },
  focusFirstElement: function(form) {
    form = $(form);
    var element = form.findFirstElement();
    if (element) element.activate();
    return form;
  },
  request: function(form, options) {
    form = $(form), options = Object.clone(options || { });
    var params = options.parameters, action = form.readAttribute('action') || '';
    if (action.blank()) action = window.location.href;
    options.parameters = form.serialize(true);
    if (params) {
      if (Object.isString(params)) params = params.toQueryParams();
      Object.extend(options.parameters, params);
    }
    if (form.hasAttribute('method') && !options.method)
      options.method = form.method;
    return new Ajax.Request(action, options);
  }
};
/*--------------------------------------------------------------------------*/
Form.Element = {
  focus: function(element) {
    $(element).focus();
    return element;
  },
  select: function(element) {
    $(element).select();
    return element;
  }
};
Form.Element.Methods = {
  serialize: function(element) {
    element = $(element);
    if (!element.disabled && element.name) {
      var value = element.getValue();
      if (value != undefined) {
        var pair = { };
        pair[element.name] = value;
        return Object.toQueryString(pair);
      }
    }
    return '';
  },
  getValue: function(element) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    return Form.Element.Serializers[method](element);
  },
  setValue: function(element, value) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    Form.Element.Serializers[method](element, value);
    return element;
  },
  clear: function(element) {
    $(element).value = '';
    return element;
  },
  present: function(element) {
    return $(element).value != '';
  },
  activate: function(element) {
    element = $(element);
    try {
      element.focus();
      if (element.select && (element.tagName.toLowerCase() != 'input' ||
          !(/^(?:button|reset|submit)$/i.test(element.type))))
        element.select();
    } catch (e) { }
    return element;
  },
  disable: function(element) {
    element = $(element);
    element.disabled = true;
    return element;
  },
  enable: function(element) {
    element = $(element);
    element.disabled = false;
    return element;
  }
};
/*--------------------------------------------------------------------------*/
var Field = Form.Element;
var $F = Form.Element.Methods.getValue;
/*--------------------------------------------------------------------------*/
Form.Element.Serializers = (function() {
  function input(element, value) {
    switch (element.type.toLowerCase()) {
      case 'checkbox':
      case 'radio':
        return inputSelector(element, value);
      default:
        return valueSelector(element, value);
    }
  }
  
  function inputSelector(element, value) {
    if (Object.isUndefined(value))
      return element.checked ? element.value : null;
    else element.checked = !!value;    
  }
  
  function valueSelector(element, value) {
    if (Object.isUndefined(value)) return element.value;
    else element.value = value;
  }
  
  function select(element, value) {
    if (Object.isUndefined(value))
      return (element.type === 'select-one' ? selectOne : selectMany)(element);
       
    var opt, currentValue, single = !Object.isArray(value);
    for (var i = 0, length = element.length; i < length; i++) {
      opt = element.options[i];
      currentValue = this.optionValue(opt);
      if (single) {
        if (currentValue == value) {
          opt.selected = true;
          return;
        }
      }
      else opt.selected = value.include(currentValue);
    }
  }
  
  function selectOne(element) {
    var index = element.selectedIndex;
    return index >= 0 ? optionValue(element.options[index]) : null;
  }
  
  function selectMany(element) {
    var values, length = element.length;
    if (!length) return null;
    for (var i = 0, values = []; i < length; i++) {
      var opt = element.options[i];
      if (opt.selected) values.push(optionValue(opt));
    }
    return values;
  }
  
  function optionValue(opt) {
    return Element.hasAttribute(opt, 'value') ? opt.value : opt.text;
  }
  
  return {
    input:         input,
    inputSelector: inputSelector,
    textarea:      valueSelector,
    select:        select,
    selectOne:     selectOne,
    selectMany:    selectMany,
    optionValue:   optionValue,
    button:        valueSelector
  };
})();
/*--------------------------------------------------------------------------*/
Abstract.TimedObserver = Class.create(PeriodicalExecuter, {
  initialize: function($super, element, frequency, callback) {
    $super(callback, frequency);
    this.element   = $(element);
    this.lastValue = this.getValue();
  },
  execute: function() {
    var value = this.getValue();
    if (Object.isString(this.lastValue) && Object.isString(value) ?
        this.lastValue != value : String(this.lastValue) != String(value)) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  }
});
Form.Element.Observer = Class.create(Abstract.TimedObserver, {
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});
Form.Observer = Class.create(Abstract.TimedObserver, {
  getValue: function() {
    return Form.serialize(this.element);
  }
});
/*--------------------------------------------------------------------------*/
Abstract.EventObserver = Class.create({
  initialize: function(element, callback) {
    this.element  = $(element);
    this.callback = callback;
    this.lastValue = this.getValue();
    if (this.element.tagName.toLowerCase() == 'form')
      this.registerFormCallbacks();
    else
      this.registerCallback(this.element);
  },
  onElementEvent: function() {
    var value = this.getValue();
    if (this.lastValue != value) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  },
  registerFormCallbacks: function() {
    Form.getElements(this.element).each(this.registerCallback, this);
  },
  registerCallback: function(element) {
    if (element.type) {
      switch (element.type.toLowerCase()) {
        case 'checkbox':
        case 'radio':
          Event.observe(element, 'click', this.onElementEvent.bind(this));
          break;
        default:
          Event.observe(element, 'change', this.onElementEvent.bind(this));
          break;
      }
    }
  }
});
Form.Element.EventObserver = Class.create(Abstract.EventObserver, {
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});
Form.EventObserver = Class.create(Abstract.EventObserver, {
  getValue: function() {
    return Form.serialize(this.element);
  }
});
(function(GLOBAL) {
  var DIV = document.createElement('div');
  var docEl = document.documentElement;
  var MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED = 'onmouseenter' in docEl
   && 'onmouseleave' in docEl;
  
  var Event = {
    KEY_BACKSPACE: 8,
    KEY_TAB:       9,
    KEY_RETURN:   13,
    KEY_ESC:      27,
    KEY_LEFT:     37,
    KEY_UP:       38,
    KEY_RIGHT:    39,
    KEY_DOWN:     40,
    KEY_DELETE:   46,
    KEY_HOME:     36,
    KEY_END:      35,
    KEY_PAGEUP:   33,
    KEY_PAGEDOWN: 34,
    KEY_INSERT:   45
  };
  
  // We need to support three different event "modes":
  //  1. browsers with only DOM L2 Events (WebKit, FireFox);
  //  2. browsers with only IE's legacy events system (IE 6-8);
  //  3. browsers with _both_ systems (IE 9 and arguably Opera).
  //
  // Groups 1 and 2 are easy; group three is trickier.
  var isIELegacyEvent = function(event) { return false; };
  if (window.attachEvent) {
    if (window.addEventListener) {
      // Both systems are supported. We need to decide at runtime.
      // (Though Opera supports both systems, the event object appears to be
      // the same no matter which system is used. That means that this function
      // will always return `true` in Opera, but that's OK; it keeps us from
      // having to do a browser sniff.)
      isIELegacyEvent = function(event) {
        return !(event instanceof window.Event);
      };
    } else {
      // No support for DOM L2 events. All events will be legacy.
      isIELegacyEvent = function(event) { return true; };
    }
  }
  
  // The two systems have different ways of indicating which button was used
  // for a mouse event.
  var _isButton;
  function _isButtonForDOMEvents(event, code) {
    return event.which ? (event.which === code + 1) : (event.button === code);
  }
  var legacyButtonMap = { 0: 1, 1: 4, 2: 2 };
  function _isButtonForLegacyEvents(event, code) {
    return event.button === legacyButtonMap[code];
  }
  // In WebKit we have to account for when the user holds down the "meta" key.
  function _isButtonForWebKit(event, code) {
    switch (code) {
      case 0: return event.which == 1 && !event.metaKey;
      case 1: return event.which == 2 || (event.which == 1 && event.metaKey);
      case 2: return event.which == 3;
      default: return false;
    }
  }
  if (window.attachEvent) {
    if (!window.addEventListener) {
      // Legacy IE events only.
      _isButton = _isButtonForLegacyEvents;      
    } else {
      // Both systems are supported; decide at runtime.
      _isButton = function(event, code) {
        return isIELegacyEvent(event) ? _isButtonForLegacyEvents(event, code) :
         _isButtonForDOMEvents(event, code);
      }
    }
  } else if (Prototype.Browser.WebKit) {
    _isButton = _isButtonForWebKit;
  } else {
    _isButton = _isButtonForDOMEvents;
  }
  
  function isLeftClick(event)   { return _isButton(event, 0) }
  function isMiddleClick(event) { return _isButton(event, 1) }
  function isRightClick(event)  { return _isButton(event, 2) }
  
  function element(event) {
    // The public version of `Event.element` is a thin wrapper around the
    // private `_element` method below. We do this so that we can use it
    // internally as `_element` without having to extend the node.
    return Element.extend(_element(event));
  }
  
  function _element(event) {
    event = Event.extend(event);
    var node = event.target, type = event.type,
     currentTarget = event.currentTarget;
    if (currentTarget && currentTarget.tagName) {
      // Firefox screws up the "click" event when moving between radio buttons
      // via arrow keys. It also screws up the "load" and "error" events on images,
      // reporting the document as the target instead of the original image.
      if (type === 'load' || type === 'error' ||
        (type === 'click' && currentTarget.tagName.toLowerCase() === 'input'
          && currentTarget.type === 'radio'))
            node = currentTarget;
    }
    // Fix a Safari bug where a text node gets passed as the target of an
    // anchor click rather than the anchor itself.
    return node.nodeType == Node.TEXT_NODE ? node.parentNode : node;
  }
  function findElement(event, expression) {
    var element = _element(event), selector = Prototype.Selector;
    if (!expression) return Element.extend(element);
    while (element) {
      if (Object.isElement(element) && selector.match(element, expression))
        return Element.extend(element);
      element = element.parentNode;
    }
  }
  
  function pointer(event) {
    return { x: pointerX(event), y: pointerY(event) };
  }
  function pointerX(event) {
    var docElement = document.documentElement,
     body = document.body || { scrollLeft: 0 };
    return event.pageX || (event.clientX +
      (docElement.scrollLeft || body.scrollLeft) -
      (docElement.clientLeft || 0));
  }
  function pointerY(event) {
    var docElement = document.documentElement,
     body = document.body || { scrollTop: 0 };
    return  event.pageY || (event.clientY +
       (docElement.scrollTop || body.scrollTop) -
       (docElement.clientTop || 0));
  }
  function stop(event) {
    Event.extend(event);
    event.preventDefault();
    event.stopPropagation();
    // Set a "stopped" property so that a custom event can be inspected
    // after the fact to determine whether or not it was stopped.
    event.stopped = true;
  }
  Event.Methods = {
    isLeftClick:   isLeftClick,
    isMiddleClick: isMiddleClick,
    isRightClick:  isRightClick,
    element:     element,
    findElement: findElement,
    pointer:  pointer,
    pointerX: pointerX,
    pointerY: pointerY,
    stop: stop
  };
  // Compile the list of methods that get extended onto Events.
  var methods = Object.keys(Event.Methods).inject({ }, function(m, name) {
    m[name] = Event.Methods[name].methodize();
    return m;
  });
  if (window.attachEvent) {
    // For IE's event system, we need to do some work to make the event
    // object behave like a standard event object.
    function _relatedTarget(event) {
      var element;
      switch (event.type) {
        case 'mouseover':
        case 'mouseenter':
          element = event.fromElement;
          break;
        case 'mouseout':
        case 'mouseleave':
          element = event.toElement;
          break;
        default:
          return null;
      }
      return Element.extend(element);
    }
    // These methods should be added _only_ to legacy IE event objects.
    var additionalMethods = {
      stopPropagation: function() { this.cancelBubble = true },
      preventDefault:  function() { this.returnValue = false },
      inspect: function() { return '[object Event]' }
    };
    // IE's method for extending events.
    Event.extend = function(event, element) {
      if (!event) return false;
      
      // If it's not a legacy event, it doesn't need extending.
      if (!isIELegacyEvent(event)) return event;
      // Mark this event so we know not to extend a second time.
      if (event._extendedByPrototype) return event;
      event._extendedByPrototype = Prototype.emptyFunction;
      
      var pointer = Event.pointer(event);
      // The optional `element` argument gives us a fallback value for the
      // `target` property in case IE doesn't give us through `srcElement`.
      Object.extend(event, {
        target: event.srcElement || element,
        relatedTarget: _relatedTarget(event),
        pageX:  pointer.x,
        pageY:  pointer.y
      });
      
      Object.extend(event, methods);
      Object.extend(event, additionalMethods);
      
      return event;
    };
  } else {
    // Only DOM events, so no manual extending necessary.
    Event.extend = Prototype.K;
  }
  
  if (window.addEventListener) {
    // In all browsers that support DOM L2 Events, we can augment
    // `Event.prototype` directly.
    Event.prototype = window.Event.prototype || document.createEvent('HTMLEvents').__proto__;
    Object.extend(Event.prototype, methods);
  }
  
  //
  // EVENT REGISTRY
  //
  var EVENT_TRANSLATIONS = {
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  };
  
  function getDOMEventName(eventName) {
    return EVENT_TRANSLATIONS[eventName] || eventName;
  }
  
  if (MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED)
    getDOMEventName = Prototype.K;
  
  function getUniqueElementID(element) {
    if (element === window) return 0;
    // Need to use actual `typeof` operator to prevent errors in some
    // environments when accessing node expandos.
    if (typeof element._prototypeUID === 'undefined')
      element._prototypeUID = Element.Storage.UID++;
    return element._prototypeUID;
  }
  
  // In Internet Explorer, DOM nodes have a `uniqueID` property. Saves us
  // from inventing our own.
  function getUniqueElementID_IE(element) {
    if (element === window) return 0;
    // The document object's `uniqueID` property changes each time you read it.
    if (element == document) return 1;
    return element.uniqueID;
  }
  
  if ('uniqueID' in DIV)
    getUniqueElementID = getUniqueElementID_IE;
  function isCustomEvent(eventName) {
    return eventName.include(':');
  }
  Event._isCustomEvent = isCustomEvent;
  // These two functions take an optional UID as a second argument so that we
  // can skip lookup if we've already got the element's UID.
  function getRegistryForElement(element, uid) {
    var CACHE = GLOBAL.Event.cache;
    if (Object.isUndefined(uid))
      uid = getUniqueElementID(element);
    if (!CACHE[uid]) CACHE[uid] = { element: element };
    return CACHE[uid];
  }
  
  function destroyRegistryForElement(element, uid) {
    if (Object.isUndefined(uid))
      uid = getUniqueElementID(element);
    delete GLOBAL.Event.cache[uid];
  }
  
  // The `register` and `unregister` functions handle creating the responder
  // and managing an event registry. They _don't_ attach and detach the
  // listeners themselves.
  
  // Add an event to the element's event registry.
  function register(element, eventName, handler) {
    var registry = getRegistryForElement(element);
    if (!registry[eventName]) registry[eventName] = [];
    var entries = registry[eventName];
    // Make sure this handler isn't already attached.
    var i = entries.length;
    while (i--)
      if (entries[i].handler === handler) return null;
      
    var uid = getUniqueElementID(element);
    var responder = GLOBAL.Event._createResponder(uid, eventName, handler);
    var entry = {
      responder: responder,
      handler:   handler
    };
    entries.push(entry);    
    return entry;
  }
  
  // Remove an event from the element's event registry.
  function unregister(element, eventName, handler) {
    var registry = getRegistryForElement(element);
    var entries = registry[eventName];
    if (!entries) return;
    
    var i = entries.length, entry;
    while (i--) {
      if (entries[i].handler === handler) {
        entry = entries[i];
        break;
      }
    }
    
    // This handler wasn't in the collection, so it doesn't need to be
    // unregistered.
    if (!entry) return;
    // Remove the entry from the collection;
    var index = entries.indexOf(entry);
    entries.splice(index, 1);
    if (entries.length == 0) {
      stopObservingEventName(element, eventName);
    }
    return entry;
  }  
  
  
  //
  // EVENT OBSERVING
  //
  function observe(element, eventName, handler) {
    element = $(element);
    var entry = register(element, eventName, handler);
    
    if (entry === null) return element;
    var responder = entry.responder;    
    if (isCustomEvent(eventName))
      observeCustomEvent(element, eventName, responder);
    else
      observeStandardEvent(element, eventName, responder);
      
    return element;
  }
  
  function observeStandardEvent(element, eventName, responder) {
    var actualEventName = getDOMEventName(eventName);
    if (element.addEventListener) {
      element.addEventListener(actualEventName, responder, false);
    } else {
      element.attachEvent('on' + actualEventName, responder);
    }
  }
  
  function observeCustomEvent(element, eventName, responder) {
    if (element.addEventListener) {
      element.addEventListener('dataavailable', responder, false);
    } else {
      // We observe two IE-proprietarty events: one for custom events that
      // bubble and one for custom events that do not bubble.
      element.attachEvent('ondataavailable', responder);
      element.attachEvent('onlosecapture',   responder);
    }
  }
  
  function stopObserving(element, eventName, handler) {
    element = $(element);
    var handlerGiven = !Object.isUndefined(handler),
     eventNameGiven = !Object.isUndefined(eventName);
     
    if (!eventNameGiven && !handlerGiven) {
      stopObservingElement(element);
      return element;
    }
    
    if (!handlerGiven) {
      stopObservingEventName(element, eventName);
      return element;
    }
    
    var entry = unregister(element, eventName, handler);
    
    if (!entry) return element; 
    removeEvent(element, eventName, entry.responder);
    return element;
  }
  
  function stopObservingStandardEvent(element, eventName, responder) {
    var actualEventName = getDOMEventName(eventName);
    if (element.removeEventListener) {
      element.removeEventListener(actualEventName, responder, false);      
    } else {
      element.detachEvent('on' + actualEventName, responder);
    }
  }
  
  function stopObservingCustomEvent(element, eventName, responder) {
    if (element.removeEventListener) {
      element.removeEventListener('dataavailable', responder, false);
    } else {
      element.detachEvent('ondataavailable', responder);
      element.detachEvent('onlosecapture',   responder);
    }
  }
  
  // The `stopObservingElement` and `stopObservingEventName` functions are
  // for bulk removal of event listeners. We use them rather than recurse
  // back into `stopObserving` to avoid touching the registry more often than
  // necessary.
  // Stop observing _all_ listeners on an element.
  function stopObservingElement(element) {
    // Do a manual registry lookup because we don't want to create a registry
    // if one doesn't exist.
    var uid = getUniqueElementID(element), registry = GLOBAL.Event.cache[uid];
    // This way we can return early if there is no registry.
    if (!registry) return;
    destroyRegistryForElement(element, uid);
    var entries, i;
    for (var eventName in registry) {
      // Explicitly skip elements so we don't accidentally find one with a
      // `length` property.
      if (eventName === 'element') continue;
      entries = registry[eventName];
      i = entries.length;
      while (i--)
        removeEvent(element, eventName, entries[i].responder);
    }
  }
  
  // Stop observing all listeners of a certain event name on an element.
  function stopObservingEventName(element, eventName) {
    var registry = getRegistryForElement(element);
    var entries = registry[eventName];
    if (!entries) return;
    delete registry[eventName];
    
    var i = entries.length;
    while (i--)
      removeEvent(element, eventName, entries[i].responder);
    for (var name in registry) {
      if (name === 'element') continue;
      return; // There is another registered event
    }
    // No other events for the element, destroy the registry:
    destroyRegistryForElement(element);
  }
  
  function removeEvent(element, eventName, handler) {
    if (isCustomEvent(eventName))
      stopObservingCustomEvent(element, eventName, handler);
    else
      stopObservingStandardEvent(element, eventName, handler);
  }
  
  
  
  // FIRING CUSTOM EVENTS
  function getFireTarget(element) {
    if (element !== document) return element;
    if (document.createEvent && !element.dispatchEvent)
      return document.documentElement;
    return element;
  }
  
  function fire(element, eventName, memo, bubble) {
    element = getFireTarget($(element));
    if (Object.isUndefined(bubble)) bubble = true;      
    memo = memo || {};
      
    var event = fireEvent(element, eventName, memo, bubble);
    return Event.extend(event);
  }
  
  function fireEvent_DOM(element, eventName, memo, bubble) {
    var event = document.createEvent('HTMLEvents');
    event.initEvent('dataavailable', bubble, true);
    
    event.eventName = eventName;
    event.memo = memo;
    
    element.dispatchEvent(event);
    return event;
  }
  
  function fireEvent_IE(element, eventName, memo, bubble) {
    var event = document.createEventObject();
    event.eventType = bubble ? 'ondataavailable' : 'onlosecapture';
    
    event.eventName = eventName;
    event.memo = memo;
    
    element.fireEvent(event.eventType, event);    
    return event;
  }
  
  var fireEvent = document.createEvent ? fireEvent_DOM : fireEvent_IE;
  
  
  // EVENT DELEGATION
  
  Event.Handler = Class.create({
    initialize: function(element, eventName, selector, callback) {
      this.element   = $(element);
      this.eventName = eventName;
      this.selector  = selector;
      this.callback  = callback;
      this.handler   = this.handleEvent.bind(this);
    },
    
    start: function() {
      Event.observe(this.element, this.eventName, this.handler);
      return this;
    },
    
    stop: function() {
      Event.stopObserving(this.element, this.eventName, this.handler);
      return this;
    },
    
    handleEvent: function(event) {
      var element = Event.findElement(event, this.selector);
      if (element) this.callback.call(this.element, event, element);
    }
  });
  
  function on(element, eventName, selector, callback) {
    element = $(element);
    if (Object.isFunction(selector) && Object.isUndefined(callback)) {
      callback = selector, selector = null;
    }
    
    return new Event.Handler(element, eventName, selector, callback).start();
  }
  
  Object.extend(Event, Event.Methods);
  Object.extend(Event, {
    fire:          fire,
    observe:       observe,
    stopObserving: stopObserving,
    on:            on
  });
  Element.addMethods({
    fire:          fire,
    observe:       observe,
    stopObserving: stopObserving,
    
    on:            on
  });
  Object.extend(document, {
    fire:          fire.methodize(),
    observe:       observe.methodize(),
    stopObserving: stopObserving.methodize(),
    
    on:            on.methodize(),
    loaded:        false
  });
  // Export to the global scope.
  if (GLOBAL.Event) Object.extend(window.Event, Event);
  else GLOBAL.Event = Event;
  
  GLOBAL.Event.cache = {};
    
  function destroyCache_IE() {
    GLOBAL.Event.cache = null;
  }
  
  if (window.attachEvent)
    window.attachEvent('onunload', destroyCache_IE);
    
  DIV = null;
  docEl = null;
})(this);
(function(GLOBAL) {  
  /* Code for creating leak-free event responders is based on work by
   John-David Dalton. */
  
  var docEl = document.documentElement;
  var MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED = 'onmouseenter' in docEl
    && 'onmouseleave' in docEl;
    
  function isSimulatedMouseEnterLeaveEvent(eventName) {
    return !MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED &&
     (eventName === 'mouseenter' || eventName === 'mouseleave');
  }
  
  // The functions for creating responders accept the element's UID rather
  // than the element itself. This way, there are _no_ DOM objects inside the
  // closure we create, meaning there's no need to unregister event listeners
  // on unload.
  function createResponder(uid, eventName, handler) {    
    if (Event._isCustomEvent(eventName))
      return createResponderForCustomEvent(uid, eventName, handler);      
    if (isSimulatedMouseEnterLeaveEvent(eventName))
      return createMouseEnterLeaveResponder(uid, eventName, handler);
    
    return function(event) {
      if (!Event.cache) return;
      
      var element = Event.cache[uid].element;
      Event.extend(event, element);
      handler.call(element, event);
    };
  }
  
  function createResponderForCustomEvent(uid, eventName, handler) {
    return function(event) {
      var element = Event.cache[uid] !== undefined ? Event.cache[uid].element : event.target;
      if (Object.isUndefined(event.eventName))
        return false;
        
      if (event.eventName !== eventName)
        return false;
        
      Event.extend(event, element);
      handler.call(element, event);
    };
  }
  
  function createMouseEnterLeaveResponder(uid, eventName, handler) {
    return function(event) {
      var element = Event.cache[uid].element;
      
      Event.extend(event, element);
      var parent = event.relatedTarget;
      
      // Walk up the DOM tree to see if the related target is a descendant of
      // the original element. If it is, we ignore the event to match the
      // behavior of mouseenter/mouseleave.
      while (parent && parent !== element) {
        try { parent = parent.parentNode; }
        catch(e) { parent = element; }
      }
      
      if (parent === element) return;      
      handler.call(element, event);
    }
  }
  
  GLOBAL.Event._createResponder = createResponder;
  docEl = null;
})(this);
(function(GLOBAL) {
  /* Support for the DOMContentLoaded event is based on work by Dan Webb,
     Matthias Miller, Dean Edwards, John Resig, and Diego Perini. */
  
  var TIMER;
  
  function fireContentLoadedEvent() {
    if (document.loaded) return;
    if (TIMER) window.clearTimeout(TIMER);
    document.loaded = true;
    document.fire('dom:loaded');
  }
  
  function checkReadyState() {
    if (document.readyState === 'complete') {
      document.detachEvent('onreadystatechange', checkReadyState);
      fireContentLoadedEvent();
    }
  }
  
  function pollDoScroll() {
    try {
      document.documentElement.doScroll('left');
    } catch (e) {
      TIMER = pollDoScroll.defer();
      return;
    }
    
    fireContentLoadedEvent();
  }
  if (document.readyState === 'complete') {
    // We must have been loaded asynchronously, because the DOMContentLoaded
    // event has already fired. We can just fire `dom:loaded` and be done
    // with it.
    fireContentLoadedEvent();
    return;
  }
  
  if (document.addEventListener) {
    // All browsers that support DOM L2 Events support DOMContentLoaded,
    // including IE 9.
    document.addEventListener('DOMContentLoaded', fireContentLoadedEvent, false);
  } else {
    document.attachEvent('onreadystatechange', checkReadyState);
    if (window == top) TIMER = pollDoScroll.defer();
  }
  
  // Worst-case fallback.
  Event.observe(window, 'load', fireContentLoadedEvent);
})(this);
Element.addMethods();
/*------------------------------- DEPRECATED -------------------------------*/
Hash.toQueryString = Object.toQueryString;
var Toggle = { display: Element.toggle };
Element.Methods.childOf = Element.Methods.descendantOf;
var Insertion = {
  Before: function(element, content) {
    return Element.insert(element, {before:content});
  },
  Top: function(element, content) {
    return Element.insert(element, {top:content});
  },
  Bottom: function(element, content) {
    return Element.insert(element, {bottom:content});
  },
  After: function(element, content) {
    return Element.insert(element, {after:content});
  }
};
var $continue = new Error('"throw $continue" is deprecated, use "return" instead');
var Position = {
  // set to true if needed, warning: firefox performance problems
  // NOT neeeded for page scrolling, only if draggable contained in
  // scrollable elements
  includeScrollOffsets: false,
  // must be called before calling withinIncludingScrolloffset, every time the
  // page is scrolled
  prepare: function() {
    this.deltaX =  window.pageXOffset
                || document.documentElement.scrollLeft
                || document.body.scrollLeft
                || 0;
    this.deltaY =  window.pageYOffset
                || document.documentElement.scrollTop
                || document.body.scrollTop
                || 0;
  },
  // caches x/y coordinate pair to use with overlap
  within: function(element, x, y) {
    if (this.includeScrollOffsets)
      return this.withinIncludingScrolloffsets(element, x, y);
    this.xcomp = x;
    this.ycomp = y;
    this.offset = Element.cumulativeOffset(element);
    return (y >= this.offset[1] &&
            y <  this.offset[1] + element.offsetHeight &&
            x >= this.offset[0] &&
            x <  this.offset[0] + element.offsetWidth);
  },
  withinIncludingScrolloffsets: function(element, x, y) {
    var offsetcache = Element.cumulativeScrollOffset(element);
    this.xcomp = x + offsetcache[0] - this.deltaX;
    this.ycomp = y + offsetcache[1] - this.deltaY;
    this.offset = Element.cumulativeOffset(element);
    return (this.ycomp >= this.offset[1] &&
            this.ycomp <  this.offset[1] + element.offsetHeight &&
            this.xcomp >= this.offset[0] &&
            this.xcomp <  this.offset[0] + element.offsetWidth);
  },
  // within must be called directly before
  overlap: function(mode, element) {
    if (!mode) return 0;
    if (mode == 'vertical')
      return ((this.offset[1] + element.offsetHeight) - this.ycomp) /
        element.offsetHeight;
    if (mode == 'horizontal')
      return ((this.offset[0] + element.offsetWidth) - this.xcomp) /
        element.offsetWidth;
  },
  // Deprecation layer -- use newer Element methods now (1.5.2).
  cumulativeOffset: Element.Methods.cumulativeOffset,
  positionedOffset: Element.Methods.positionedOffset,
  absolutize: function(element) {
    Position.prepare();
    return Element.absolutize(element);
  },
  relativize: function(element) {
    Position.prepare();
    return Element.relativize(element);
  },
  realOffset: Element.Methods.cumulativeScrollOffset,
  offsetParent: Element.Methods.getOffsetParent,
  page: Element.Methods.viewportOffset,
  clone: function(source, target, options) {
    options = options || { };
    return Element.clonePosition(target, source, options);
  }
};
/*--------------------------------------------------------------------------*/
if (!document.getElementsByClassName) document.getElementsByClassName = function(instanceMethods){
  function iter(name) {
    return name.blank() ? null : "[contains(concat(' ', @class, ' '), ' " + name + " ')]";
  }
  instanceMethods.getElementsByClassName = Prototype.BrowserFeatures.XPath ?
  function(element, className) {
    className = className.toString().strip();
    var cond = /\s/.test(className) ? $w(className).map(iter).join('') : iter(className);
    return cond ? document._getElementsByXPath('.//*' + cond, element) : [];
  } : function(element, className) {
    className = className.toString().strip();
    var elements = [], classNames = (/\s/.test(className) ? $w(className) : null);
    if (!classNames && !className) return elements;
    var nodes = $(element).getElementsByTagName('*');
    className = ' ' + className + ' ';
    for (var i = 0, child, cn; child = nodes[i]; i++) {
      if (child.className && (cn = ' ' + child.className + ' ') && (cn.include(className) ||
          (classNames && classNames.all(function(name) {
            return !name.toString().blank() && cn.include(' ' + name + ' ');
          }))))
        elements.push(Element.extend(child));
    }
    return elements;
  };
  return function(className, parentElement) {
    return $(parentElement || document.body).getElementsByClassName(className);
  };
}(Element.Methods);
/*--------------------------------------------------------------------------*/
Element.ClassNames = Class.create();
Element.ClassNames.prototype = {
  initialize: function(element) {
    this.element = $(element);
  },
  _each: function(iterator, context) {
    this.element.className.split(/\s+/).select(function(name) {
      return name.length > 0;
    })._each(iterator, context);
  },
  set: function(className) {
    this.element.className = className;
  },
  add: function(classNameToAdd) {
    if (this.include(classNameToAdd)) return;
    this.set($A(this).concat(classNameToAdd).join(' '));
  },
  remove: function(classNameToRemove) {
    if (!this.include(classNameToRemove)) return;
    this.set($A(this).without(classNameToRemove).join(' '));
  },
  toString: function() {
    return $A(this).join(' ');
  }
};
Object.extend(Element.ClassNames.prototype, Enumerable);
/*--------------------------------------------------------------------------*/
(function() {
  window.Selector = Class.create({
    initialize: function(expression) {
      this.expression = expression.strip();
    },
  
    findElements: function(rootElement) {
      return Prototype.Selector.select(this.expression, rootElement);
    },
  
    match: function(element) {
      return Prototype.Selector.match(element, this.expression);
    },
  
    toString: function() {
      return this.expression;
    },
  
    inspect: function() {
      return "#<Selector: " + this.expression + ">";
    }
  });
  Object.extend(Selector, {
    matchElements: function(elements, expression) {
      var match = Prototype.Selector.match,
          results = [];
          
      for (var i = 0, length = elements.length; i < length; i++) {
        var element = elements[i];
        if (match(element, expression)) {
          results.push(Element.extend(element));
        }
      }
      return results;
    },
    findElement: function(elements, expression, index) {
      index = index || 0;
      var matchIndex = 0, element;
      // Match each element individually, since Sizzle.matches does not preserve order
      for (var i = 0, length = elements.length; i < length; i++) {
        element = elements[i];
        if (Prototype.Selector.match(element, expression) && index === matchIndex++) {
          return Element.extend(element);
        }
      }
    },
    findChildElements: function(element, expressions) {
      var selector = expressions.toArray().join(', ');
      return Prototype.Selector.select(selector, element || document);
    }
  });
})();

/*** EXPORTS FROM exports-loader ***/
module.exports = $w;
}.call(window));
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(45), __webpack_require__(46), __webpack_require__(84)))

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

var Enumerable, Prototype, Class, Template, PeriodicalExecuter;
Prototype =   __webpack_require__(6);
              __webpack_require__(8);
Class =       __webpack_require__(10);
              __webpack_require__(13);
              __webpack_require__(15);
              __webpack_require__(18);
              __webpack_require__(23);
Template =    __webpack_require__(24);
Enumerable =  __webpack_require__(28);

module.exports = PeriodicalExecuter = Class.create({
  initialize: function(callback, frequency) {
    this.callback = callback;
    this.frequency = frequency;
    this.currentlyExecuting = false;

    this.registerCallback();
  },

  registerCallback: function() {
    this.timer = setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
  },

  execute: function() {
    this.callback(this);
  },

  stop: function() {
    if (!this.timer) return;
    clearInterval(this.timer);
    this.timer = null;
  },

  onTimerEvent: function() {
    if (!this.currentlyExecuting) {
      try {
        this.currentlyExecuting = true;
        this.execute();
        this.currentlyExecuting = false;
      } catch(e) {
        this.currentlyExecuting = false;
        throw e;
      }
    }
  }
});

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

var $R, $H, $A, $w, Enumerable, Prototype, Class, Template, Try;
Prototype =   __webpack_require__(6);
              __webpack_require__(8);
Class =       __webpack_require__(10);
              __webpack_require__(13);
              __webpack_require__(15);
              __webpack_require__(18);
              __webpack_require__(23);
Template =    __webpack_require__(24);
Enumerable =  __webpack_require__(28);
$A =          __webpack_require__(17).A;
$w =          __webpack_require__(17).w;
$H =          __webpack_require__(31).H;
              __webpack_require__(67);
$R =          __webpack_require__(68).R;

module.exports = Try = {
  these: function() {
    var returnValue;

    for (var i = 0, length = arguments.length; i < length; i++) {
      var lambda = arguments[i];
      try {
        returnValue = lambda();
        break;
      } catch (e) { }
    }

    return returnValue;
  }
};

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

var always = __webpack_require__(32);


/**
 * A function that always returns `false`. Any passed in parameters are ignored.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig * -> Boolean
 * @param {*}
 * @return {Boolean}
 * @see R.always, R.T
 * @example
 *
 *      R.F(); //=> false
 */
module.exports = always(false);


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

var always = __webpack_require__(32);


/**
 * A function that always returns `true`. Any passed in parameters are ignored.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig * -> Boolean
 * @param {*}
 * @return {Boolean}
 * @see R.always, R.F
 * @example
 *
 *      R.T(); //=> true
 */
module.exports = always(true);


/***/ }),
/* 186 */
/***/ (function(module, exports) {

/**
 * A special placeholder value used to specify "gaps" within curried functions,
 * allowing partial application of any combination of arguments, regardless of
 * their positions.
 *
 * If `g` is a curried ternary function and `_` is `R.__`, the following are
 * equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2, _)(1, 3)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @constant
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @example
 *
 *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');
 *      greet('Alice'); //=> 'Hello, Alice!'
 */
module.exports = {'@@functional/placeholder': true};


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

var _concat = __webpack_require__(16);
var _curry1 = __webpack_require__(1);
var curryN = __webpack_require__(7);


/**
 * Creates a new list iteration function from an existing one by adding two new
 * parameters to its callback function: the current index, and the entire list.
 *
 * This would turn, for instance, Ramda's simple `map` function into one that
 * more closely resembles `Array.prototype.map`. Note that this will only work
 * for functions in which the iteration callback function is the first
 * parameter, and where the list is the last parameter. (This latter might be
 * unimportant if the list parameter is not used.)
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Function
 * @category List
 * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)
 * @param {Function} fn A list iteration function that does not pass index or list to its callback
 * @return {Function} An altered list iteration function that passes (item, index, list) to its callback
 * @example
 *
 *      var mapIndexed = R.addIndex(R.map);
 *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);
 *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']
 */
module.exports = _curry1(function addIndex(fn) {
  return curryN(fn.length, function() {
    var idx = 0;
    var origFn = arguments[0];
    var list = arguments[arguments.length - 1];
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = function() {
      var result = origFn.apply(this, _concat(arguments, [idx, list]));
      idx += 1;
      return result;
    };
    return fn.apply(this, args);
  });
});


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xall = __webpack_require__(259);


/**
 * Returns `true` if all elements of the list match the predicate, `false` if
 * there are any that don't.
 *
 * Dispatches to the `all` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is satisfied by every element, `false`
 *         otherwise.
 * @see R.any, R.none, R.transduce
 * @example
 *
 *      var equals3 = R.equals(3);
 *      R.all(equals3)([3, 3, 3, 3]); //=> true
 *      R.all(equals3)([3, 3, 1, 3]); //=> false
 */
module.exports = _curry2(_dispatchable(['all'], _xall, function all(fn, list) {
  var idx = 0;
  while (idx < list.length) {
    if (!fn(list[idx])) {
      return false;
    }
    idx += 1;
  }
  return true;
}));


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var curryN = __webpack_require__(7);
var max = __webpack_require__(33);
var pluck = __webpack_require__(39);
var reduce = __webpack_require__(22);


/**
 * Takes a list of predicates and returns a predicate that returns true for a
 * given list of arguments if every one of the provided predicates is satisfied
 * by those arguments.
 *
 * The function returned is a curried function whose arity matches that of the
 * highest-arity predicate.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Logic
 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
 * @param {Array} predicates An array of predicates to check
 * @return {Function} The combined predicate
 * @see R.anyPass
 * @example
 *
 *      var isQueen = R.propEq('rank', 'Q');
 *      var isSpade = R.propEq('suit', '♠︎');
 *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);
 *
 *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false
 *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true
 */
module.exports = _curry1(function allPass(preds) {
  return curryN(reduce(max, 0, pluck('length', preds)), function() {
    var idx = 0;
    var len = preds.length;
    while (idx < len) {
      if (!preds[idx].apply(this, arguments)) {
        return false;
      }
      idx += 1;
    }
    return true;
  });
});


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var curryN = __webpack_require__(7);
var max = __webpack_require__(33);
var pluck = __webpack_require__(39);
var reduce = __webpack_require__(22);


/**
 * Takes a list of predicates and returns a predicate that returns true for a
 * given list of arguments if at least one of the provided predicates is
 * satisfied by those arguments.
 *
 * The function returned is a curried function whose arity matches that of the
 * highest-arity predicate.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Logic
 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
 * @param {Array} predicates An array of predicates to check
 * @return {Function} The combined predicate
 * @see R.allPass
 * @example
 *
 *      var isClub = R.propEq('suit', '♣');
 *      var isSpade = R.propEq('suit', '♠');
 *      var isBlackCard = R.anyPass([isClub, isSpade]);
 *
 *      isBlackCard({rank: '10', suit: '♣'}); //=> true
 *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true
 *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false
 */
module.exports = _curry1(function anyPass(preds) {
  return curryN(reduce(max, 0, pluck('length', preds)), function() {
    var idx = 0;
    var len = preds.length;
    while (idx < len) {
      if (preds[idx].apply(this, arguments)) {
        return true;
      }
      idx += 1;
    }
    return false;
  });
});


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

var _aperture = __webpack_require__(242);
var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xaperture = __webpack_require__(260);


/**
 * Returns a new list, composed of n-tuples of consecutive elements If `n` is
 * greater than the length of the list, an empty list is returned.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig Number -> [a] -> [[a]]
 * @param {Number} n The size of the tuples to create
 * @param {Array} list The list to split into `n`-length tuples
 * @return {Array} The resulting list of `n`-length tuples
 * @see R.transduce
 * @example
 *
 *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]
 *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]
 *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []
 */
module.exports = _curry2(_dispatchable([], _xaperture, _aperture));


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

var _concat = __webpack_require__(16);
var _curry2 = __webpack_require__(0);


/**
 * Returns a new list containing the contents of the given list, followed by
 * the given element.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} el The element to add to the end of the new list.
 * @param {Array} list The list of elements to add a new item to.
 *        list.
 * @return {Array} A new list containing the elements of the old list followed by `el`.
 * @see R.prepend
 * @example
 *
 *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']
 *      R.append('tests', []); //=> ['tests']
 *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]
 */
module.exports = _curry2(function append(el, list) {
  return _concat(list, [el]);
});


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var apply = __webpack_require__(99);
var curryN = __webpack_require__(7);
var map = __webpack_require__(11);
var max = __webpack_require__(33);
var pluck = __webpack_require__(39);
var reduce = __webpack_require__(22);
var values = __webpack_require__(151);


/**
 * Given a spec object recursively mapping properties to functions, creates a
 * function producing an object of the same structure, by mapping each property
 * to the result of calling its associated function with the supplied arguments.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Function
 * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})
 * @param {Object} spec an object recursively mapping properties to functions for
 *        producing the values for these properties.
 * @return {Function} A function that returns an object of the same structure
 * as `spec', with each property set to the value returned by calling its
 * associated function with the supplied arguments.
 * @see R.converge, R.juxt
 * @example
 *
 *      var getMetrics = R.applySpec({
 *                                      sum: R.add,
 *                                      nested: { mul: R.multiply }
 *                                   });
 *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }
 * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }
 */
module.exports = _curry1(function applySpec(spec) {
  spec = map(function(v) { return typeof v == 'function' ? v : applySpec(v); },
             spec);
  return curryN(reduce(max, 0, pluck('length', values(spec))),
                function() {
                  var args = arguments;
                  return map(function(f) { return apply(f, args); }, spec);
                });
});


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Makes an ascending comparator function out of a function that returns a value
 * that can be compared with `<` and `>`.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Function
 * @sig Ord b => (a -> b) -> a -> a -> Number
 * @param {Function} fn A function of arity one that returns a value that can be compared
 * @param {*} a The first item to be compared.
 * @param {*} b The second item to be compared.
 * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`
 * @example
 *
 *      var byAge = R.ascend(R.prop('age'));
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByYoungestFirst = R.sort(byAge, people);
 */
module.exports = _curry3(function ascend(fn, a, b) {
  var aa = fn(a);
  var bb = fn(b);
  return aa < bb ? -1 : aa > bb ? 1 : 0;
});


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var nAry = __webpack_require__(58);


/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly 2 parameters. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Function
 * @sig (* -> c) -> (a, b -> c)
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity 2.
 * @example
 *
 *      var takesThreeArgs = function(a, b, c) {
 *        return [a, b, c];
 *      };
 *      takesThreeArgs.length; //=> 3
 *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]
 *
 *      var takesTwoArgs = R.binary(takesThreeArgs);
 *      takesTwoArgs.length; //=> 2
 *      // Only 2 arguments are passed to the wrapped function
 *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]
 * @symb R.binary(f)(a, b, c) = f(a, b)
 */
module.exports = _curry1(function binary(fn) {
  return nAry(2, fn);
});


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _isFunction = __webpack_require__(52);
var and = __webpack_require__(97);
var lift = __webpack_require__(57);


/**
 * A function which calls the two provided functions and returns the `&&`
 * of the results.
 * It returns the result of the first function if it is false-y and the result
 * of the second function otherwise. Note that this is short-circuited,
 * meaning that the second function will not be invoked if the first returns a
 * false-y value.
 *
 * In addition to functions, `R.both` also accepts any fantasy-land compatible
 * applicative functor.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
 * @param {Function} f A predicate
 * @param {Function} g Another predicate
 * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.
 * @see R.and
 * @example
 *
 *      var gt10 = R.gt(R.__, 10)
 *      var lt20 = R.lt(R.__, 20)
 *      var f = R.both(gt10, lt20);
 *      f(15); //=> true
 *      f(30); //=> false
 */
module.exports = _curry2(function both(f, g) {
  return _isFunction(f) ?
    function _both() {
      return f.apply(this, arguments) && g.apply(this, arguments);
    } :
    lift(and)(f, g);
});


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

var curry = __webpack_require__(49);


/**
 * Returns the result of calling its first argument with the remaining
 * arguments. This is occasionally useful as a converging function for
 * `R.converge`: the left branch can produce a function while the right branch
 * produces a value to be passed to that function as an argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig (*... -> a),*... -> a
 * @param {Function} fn The function to apply to the remaining arguments.
 * @param {...*} args Any number of positional arguments.
 * @return {*}
 * @see R.apply
 * @example
 *
 *      R.call(R.add, 1, 2); //=> 3
 *
 *      var indentN = R.pipe(R.times(R.always(' ')),
 *                           R.join(''),
 *                           R.replace(/^(?!$)/gm));
 *
 *      var format = R.converge(R.call, [
 *                                  R.pipe(R.prop('indent'), indentN),
 *                                  R.prop('value')
 *                              ]);
 *
 *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'
 * @symb R.call(f, a, b) = f(a, b)
 */
module.exports = curry(function call(fn) {
  return fn.apply(this, Array.prototype.slice.call(arguments, 1));
});


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);

/**
 * Restricts a number to be within a range.
 *
 * Also works for other ordered types such as Strings and Dates.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Relation
 * @sig Ord a => a -> a -> a -> a
 * @param {Number} minimum The lower limit of the clamp (inclusive)
 * @param {Number} maximum The upper limit of the clamp (inclusive)
 * @param {Number} value Value to be clamped
 * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise
 * @example
 *
 *      R.clamp(1, 10, -5) // => 1
 *      R.clamp(1, 10, 15) // => 10
 *      R.clamp(1, 10, 4)  // => 4
 */
module.exports = _curry3(function clamp(min, max, value) {
  if (min > max) {
    throw new Error('min must not be greater than max in clamp(min, max, value)');
  }
  return value < min ? min :
         value > max ? max :
         value;
});


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

var _clone = __webpack_require__(113);
var _curry1 = __webpack_require__(1);


/**
 * Creates a deep copy of the value which may contain (nested) `Array`s and
 * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are
 * assigned by reference rather than copied
 *
 * Dispatches to a `clone` method if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {*} -> {*}
 * @param {*} value The object or array to clone
 * @return {*} A deeply cloned copy of `val`
 * @example
 *
 *      var objects = [{}, {}, {}];
 *      var objectsClone = R.clone(objects);
 *      objects === objectsClone; //=> false
 *      objects[0] === objectsClone[0]; //=> false
 */
module.exports = _curry1(function clone(value) {
  return value != null && typeof value.clone === 'function' ?
    value.clone() :
    _clone(value, [], [], true);
});


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);


/**
 * Makes a comparator function out of a function that reports whether the first
 * element is less than the second.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a, b -> Boolean) -> (a, b -> Number)
 * @param {Function} pred A predicate function of arity two which will return `true` if the first argument
 * is less than the second, `false` otherwise
 * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`
 * @example
 *
 *      var byAge = R.comparator((a, b) => a.age < b.age);
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByIncreasingAge = R.sort(byAge, people);
 */
module.exports = _curry1(function comparator(pred) {
  return function(a, b) {
    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
  };
});


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

var lift = __webpack_require__(57);
var not = __webpack_require__(135);


/**
 * Takes a function `f` and returns a function `g` such that if called with the same arguments
 * when `f` returns a "truthy" value, `g` returns `false` and when `f` returns a "falsy" value `g` returns `true`.
 *
 * `R.complement` may be applied to any functor
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> *) -> (*... -> Boolean)
 * @param {Function} f
 * @return {Function}
 * @see R.not
 * @example
 *
 *      var isNotNil = R.complement(R.isNil);
 *      isNil(null); //=> true
 *      isNotNil(null); //=> false
 *      isNil(7); //=> false
 *      isNotNil(7); //=> true
 */
module.exports = lift(not);


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

var pipeP = __webpack_require__(141);
var reverse = __webpack_require__(61);


/**
 * Performs right-to-left composition of one or more Promise-returning
 * functions. The rightmost function may have any arity; the remaining
 * functions must be unary.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)
 * @param {...Function} functions The functions to compose
 * @return {Function}
 * @see R.pipeP
 * @example
 *
 *      var db = {
 *        users: {
 *          JOE: {
 *            name: 'Joe',
 *            followers: ['STEVE', 'SUZY']
 *          }
 *        }
 *      }
 *
 *      // We'll pretend to do a db lookup which returns a promise
 *      var lookupUser = (userId) => Promise.resolve(db.users[userId])
 *      var lookupFollowers = (user) => Promise.resolve(user.followers)
 *      lookupUser('JOE').then(lookupFollowers)
 *
 *      //  followersForUser :: String -> Promise [UserId]
 *      var followersForUser = R.composeP(lookupFollowers, lookupUser);
 *      followersForUser('JOE').then(followers => console.log('Followers:', followers))
 *      // Followers: ["STEVE","SUZY"]
 */
module.exports = function composeP() {
  if (arguments.length === 0) {
    throw new Error('composeP requires at least one argument');
  }
  return pipeP.apply(this, reverse(arguments));
};


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

var _arity = __webpack_require__(20);
var _curry1 = __webpack_require__(1);
var map = __webpack_require__(11);
var max = __webpack_require__(33);
var reduce = __webpack_require__(22);


/**
 * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.
 * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments
 * to `fn` are applied to each of the predicates in turn until one returns a
 * "truthy" value, at which point `fn` returns the result of applying its
 * arguments to the corresponding transformer. If none of the predicates
 * matches, `fn` returns undefined.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Logic
 * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
 * @param {Array} pairs A list of [predicate, transformer]
 * @return {Function}
 * @example
 *
 *      var fn = R.cond([
 *        [R.equals(0),   R.always('water freezes at 0°C')],
 *        [R.equals(100), R.always('water boils at 100°C')],
 *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']
 *      ]);
 *      fn(0); //=> 'water freezes at 0°C'
 *      fn(50); //=> 'nothing special happens at 50°C'
 *      fn(100); //=> 'water boils at 100°C'
 */
module.exports = _curry1(function cond(pairs) {
  var arity = reduce(max,
                     0,
                     map(function(pair) { return pair[0].length; }, pairs));
  return _arity(arity, function() {
    var idx = 0;
    while (idx < pairs.length) {
      if (pairs[idx][0].apply(this, arguments)) {
        return pairs[idx][1].apply(this, arguments);
      }
      idx += 1;
    }
  });
});


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var constructN = __webpack_require__(103);


/**
 * Wraps a constructor function inside a curried function that can be called
 * with the same arguments and returns the same type.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (* -> {*}) -> (* -> {*})
 * @param {Function} fn The constructor function to wrap.
 * @return {Function} A wrapped, curried constructor function.
 * @example
 *
 *      // Constructor function
 *      function Animal(kind) {
 *        this.kind = kind;
 *      };
 *      Animal.prototype.sighting = function() {
 *        return "It's a " + this.kind + "!";
 *      }
 *
 *      var AnimalConstructor = R.construct(Animal)
 *
 *      // Notice we no longer need the 'new' keyword:
 *      AnimalConstructor('Pig'); //=> {"kind": "Pig", "sighting": function (){...}};
 *
 *      var animalTypes = ["Lion", "Tiger", "Bear"];
 *      var animalSighting = R.invoker(0, 'sighting');
 *      var sightNewAnimal = R.compose(animalSighting, AnimalConstructor);
 *      R.map(sightNewAnimal, animalTypes); //=> ["It's a Lion!", "It's a Tiger!", "It's a Bear!"]
 */
module.exports = _curry1(function construct(Fn) {
  return constructN(Fn.length, Fn);
});


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

var _contains = __webpack_require__(29);
var _curry2 = __webpack_require__(0);


/**
 * Returns `true` if the specified value is equal, in `R.equals` terms, to at
 * least one element of the given list; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Boolean
 * @param {Object} a The item to compare against.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.
 * @see R.any
 * @example
 *
 *      R.contains(3, [1, 2, 3]); //=> true
 *      R.contains(4, [1, 2, 3]); //=> false
 *      R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true
 *      R.contains([42], [[42]]); //=> true
 */
module.exports = _curry2(_contains);


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

var reduceBy = __webpack_require__(59);


/**
 * Counts the elements of a list according to how many match each value of a
 * key generated by the supplied function. Returns an object mapping the keys
 * produced by `fn` to the number of occurrences in the list. Note that all
 * keys are coerced to strings because of how JavaScript objects work.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig (a -> String) -> [a] -> {*}
 * @param {Function} fn The function used to map values to keys.
 * @param {Array} list The list to count elements from.
 * @return {Object} An object mapping keys to number of occurrences in the list.
 * @example
 *
 *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];
 *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}
 *
 *      var letters = ['a', 'b', 'A', 'a', 'B', 'c'];
 *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}
 */
module.exports = reduceBy(function(acc, elem) { return acc + 1; }, 0);


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

var add = __webpack_require__(47);


/**
 * Decrements its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number} n - 1
 * @see R.inc
 * @example
 *
 *      R.dec(42); //=> 41
 */
module.exports = add(-1);


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Makes a descending comparator function out of a function that returns a value
 * that can be compared with `<` and `>`.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Function
 * @sig Ord b => (a -> b) -> a -> a -> Number
 * @param {Function} fn A function of arity one that returns a value that can be compared
 * @param {*} a The first item to be compared.
 * @param {*} b The second item to be compared.
 * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`
 * @example
 *
 *      var byAge = R.descend(R.prop('age'));
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByOldestFirst = R.sort(byAge, people);
 */
module.exports = _curry3(function descend(fn, a, b) {
  var aa = fn(a);
  var bb = fn(b);
  return aa > bb ? -1 : aa < bb ? 1 : 0;
});


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var assoc = __webpack_require__(48);
var dissoc = __webpack_require__(108);


/**
 * Makes a shallow clone of an object, omitting the property at the given path.
 * Note that this copies and flattens prototype properties onto the new object
 * as well. All non-primitive properties are copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.11.0
 * @category Object
 * @sig [String] -> {k: v} -> {k: v}
 * @param {Array} path The path to the value to omit
 * @param {Object} obj The object to clone
 * @return {Object} A new object without the property at path
 * @see R.assocPath
 * @example
 *
 *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}
 */
module.exports = _curry2(function dissocPath(path, obj) {
  switch (path.length) {
    case 0:
      return obj;
    case 1:
      return dissoc(path[0], obj);
    default:
      var head = path[0];
      var tail = Array.prototype.slice.call(path, 1);
      return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);
  }
});


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Divides two numbers. Equivalent to `a / b`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a / b`.
 * @see R.multiply
 * @example
 *
 *      R.divide(71, 100); //=> 0.71
 *
 *      var half = R.divide(R.__, 2);
 *      half(42); //=> 21
 *
 *      var reciprocal = R.divide(1);
 *      reciprocal(4);   //=> 0.25
 */
module.exports = _curry2(function divide(a, b) { return a / b; });


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _dropLast = __webpack_require__(244);
var _xdropLast = __webpack_require__(263);


/**
 * Returns a list containing all but the last `n` elements of the given `list`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n The number of elements of `list` to skip.
 * @param {Array} list The list of elements to consider.
 * @return {Array} A copy of the list with only the first `list.length - n` elements
 * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile
 * @example
 *
 *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
 *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']
 *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []
 *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []
 *      R.dropLast(3, 'ramda');               //=> 'ra'
 */
module.exports = _curry2(_dispatchable([], _xdropLast, _dropLast));


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _dropLastWhile = __webpack_require__(245);
var _xdropLastWhile = __webpack_require__(264);


/**
 * Returns a new list excluding all the tailing elements of a given list which
 * satisfy the supplied predicate function. It passes each value from the right
 * to the supplied predicate function, skipping elements until the predicate
 * function returns a `falsy` value. The predicate function is applied to one argument:
 * *(value)*.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @param {Function} predicate The function to be called on each element
 * @param {Array} list The collection to iterate over.
 * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.
 * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile
 * @example
 *
 *      var lteThree = x => x <= 3;
 *
 *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]
 */
module.exports = _curry2(_dispatchable([], _xdropLastWhile, _dropLastWhile));


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _dispatchable = __webpack_require__(3);
var _xdropRepeatsWith = __webpack_require__(125);
var dropRepeatsWith = __webpack_require__(110);
var equals = __webpack_require__(19);


/**
 * Returns a new list without any consecutively repeating elements. `R.equals`
 * is used to determine equality.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig [a] -> [a]
 * @param {Array} list The array to consider.
 * @return {Array} `list` without repeating elements.
 * @see R.transduce
 * @example
 *
 *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]
 */
module.exports = _curry1(_dispatchable([], _xdropRepeatsWith(equals), dropRepeatsWith(equals)));


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xdropWhile = __webpack_require__(265);


/**
 * Returns a new list excluding the leading elements of a given list which
 * satisfy the supplied predicate function. It passes each value to the supplied
 * predicate function, skipping elements while the predicate function returns
 * `true`. The predicate function is applied to one argument: *(value)*.
 *
 * Dispatches to the `dropWhile` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @param {Function} fn The function called per iteration.
 * @param {Array} list The collection to iterate over.
 * @return {Array} A new array.
 * @see R.takeWhile, R.transduce, R.addIndex
 * @example
 *
 *      var lteTwo = x => x <= 2;
 *
 *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]
 */
module.exports = _curry2(_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len && pred(list[idx])) {
    idx += 1;
  }
  return Array.prototype.slice.call(list, idx);
}));


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _isFunction = __webpack_require__(52);
var lift = __webpack_require__(57);
var or = __webpack_require__(137);


/**
 * A function wrapping calls to the two functions in an `||` operation,
 * returning the result of the first function if it is truth-y and the result
 * of the second function otherwise. Note that this is short-circuited,
 * meaning that the second function will not be invoked if the first returns a
 * truth-y value.
 *
 * In addition to functions, `R.either` also accepts any fantasy-land compatible
 * applicative functor.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
 * @param {Function} f a predicate
 * @param {Function} g another predicate
 * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.
 * @see R.or
 * @example
 *
 *      var gt10 = x => x > 10;
 *      var even = x => x % 2 === 0;
 *      var f = R.either(gt10, even);
 *      f(101); //=> true
 *      f(8); //=> true
 */
module.exports = _curry2(function either(f, g) {
  return _isFunction(f) ?
    function _either() {
      return f.apply(this, arguments) || g.apply(this, arguments);
    } :
    lift(or)(f, g);
});


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var equals = __webpack_require__(19);


/**
 * Takes a function and two values in its domain and returns `true` if the
 * values map to the same value in the codomain; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Relation
 * @sig (a -> b) -> a -> a -> Boolean
 * @param {Function} f
 * @param {*} x
 * @param {*} y
 * @return {Boolean}
 * @example
 *
 *      R.eqBy(Math.abs, 5, -5); //=> true
 */
module.exports = _curry3(function eqBy(f, x, y) {
  return equals(f(x), f(y));
});


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var equals = __webpack_require__(19);


/**
 * Reports whether two objects have the same value, in `R.equals` terms, for
 * the specified property. Useful as a curried predicate.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig k -> {k: v} -> {k: v} -> Boolean
 * @param {String} prop The name of the property to compare
 * @param {Object} obj1
 * @param {Object} obj2
 * @return {Boolean}
 *
 * @example
 *
 *      var o1 = { a: 1, b: 2, c: 3, d: 4 };
 *      var o2 = { a: 10, b: 20, c: 3, d: 40 };
 *      R.eqProps('a', o1, o2); //=> false
 *      R.eqProps('c', o1, o2); //=> true
 */
module.exports = _curry3(function eqProps(prop, obj1, obj2) {
  return equals(obj1[prop], obj2[prop]);
});


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Creates a new object by recursively evolving a shallow copy of `object`,
 * according to the `transformation` functions. All non-primitive properties
 * are copied by reference.
 *
 * A `transformation` function will not be invoked if its corresponding key
 * does not exist in the evolved object.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {k: (v -> v)} -> {k: v} -> {k: v}
 * @param {Object} transformations The object specifying transformation functions to apply
 *        to the object.
 * @param {Object} object The object to be transformed.
 * @return {Object} The transformed object.
 * @example
 *
 *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};
 *      var transformations = {
 *        firstName: R.trim,
 *        lastName: R.trim, // Will not get invoked.
 *        data: {elapsed: R.add(1), remaining: R.add(-1)}
 *      };
 *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}
 */
module.exports = _curry2(function evolve(transformations, object) {
  var result = {};
  var transformation, key, type;
  for (key in object) {
    transformation = transformations[key];
    type = typeof transformation;
    result[key] = type === 'function'                 ? transformation(object[key])
                : transformation && type === 'object' ? evolve(transformation, object[key])
                                                      : object[key];
  }
  return result;
});


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xfind = __webpack_require__(267);


/**
 * Returns the first element of the list which matches the predicate, or
 * `undefined` if no element matches.
 *
 * Dispatches to the `find` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> a | undefined
 * @param {Function} fn The predicate function used to determine if the element is the
 *        desired one.
 * @param {Array} list The array to consider.
 * @return {Object} The element found, or `undefined`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1}, {a: 2}, {a: 3}];
 *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}
 *      R.find(R.propEq('a', 4))(xs); //=> undefined
 */
module.exports = _curry2(_dispatchable(['find'], _xfind, function find(fn, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (fn(list[idx])) {
      return list[idx];
    }
    idx += 1;
  }
}));


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xfindIndex = __webpack_require__(268);


/**
 * Returns the index of the first element of the list which matches the
 * predicate, or `-1` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> Number
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Number} The index of the element found, or `-1`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1}, {a: 2}, {a: 3}];
 *      R.findIndex(R.propEq('a', 2))(xs); //=> 1
 *      R.findIndex(R.propEq('a', 4))(xs); //=> -1
 */
module.exports = _curry2(_dispatchable([], _xfindIndex, function findIndex(fn, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (fn(list[idx])) {
      return idx;
    }
    idx += 1;
  }
  return -1;
}));


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xfindLast = __webpack_require__(269);


/**
 * Returns the last element of the list which matches the predicate, or
 * `undefined` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> a | undefined
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Object} The element found, or `undefined`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
 *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}
 *      R.findLast(R.propEq('a', 4))(xs); //=> undefined
 */
module.exports = _curry2(_dispatchable([], _xfindLast, function findLast(fn, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    if (fn(list[idx])) {
      return list[idx];
    }
    idx -= 1;
  }
}));


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xfindLastIndex = __webpack_require__(270);


/**
 * Returns the index of the last element of the list which matches the
 * predicate, or `-1` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> Number
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Number} The index of the element found, or `-1`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
 *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1
 *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1
 */
module.exports = _curry2(_dispatchable([], _xfindLastIndex, function findLastIndex(fn, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    if (fn(list[idx])) {
      return idx;
    }
    idx -= 1;
  }
  return -1;
}));


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _makeFlat = __webpack_require__(123);


/**
 * Returns a new list by pulling every item out of it (and all its sub-arrays)
 * and putting them in a new array, depth-first.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b]
 * @param {Array} list The array to consider.
 * @return {Array} The flattened list.
 * @see R.unnest
 * @example
 *
 *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
 *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 */
module.exports = _curry1(_makeFlat(true));


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

var _checkForMethod = __webpack_require__(34);
var _curry2 = __webpack_require__(0);


/**
 * Iterate over an input `list`, calling a provided function `fn` for each
 * element in the list.
 *
 * `fn` receives one argument: *(value)*.
 *
 * Note: `R.forEach` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.forEach` method. For more
 * details on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
 *
 * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns
 * the original array. In some libraries this function is named `each`.
 *
 * Dispatches to the `forEach` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> *) -> [a] -> [a]
 * @param {Function} fn The function to invoke. Receives one argument, `value`.
 * @param {Array} list The list to iterate over.
 * @return {Array} The original list.
 * @see R.addIndex
 * @example
 *
 *      var printXPlusFive = x => console.log(x + 5);
 *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]
 *      // logs 6
 *      // logs 7
 *      // logs 8
 * @symb R.forEach(f, [a, b, c]) = [a, b, c]
 */
module.exports = _curry2(_checkForMethod('forEach', function forEach(fn, list) {
  var len = list.length;
  var idx = 0;
  while (idx < len) {
    fn(list[idx]);
    idx += 1;
  }
  return list;
}));


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var keys = __webpack_require__(21);


/**
 * Iterate over an input `object`, calling a provided function `fn` for each
 * key and value in the object.
 *
 * `fn` receives three argument: *(value, key, obj)*.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Object
 * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a
 * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.
 * @param {Object} obj The object to iterate over.
 * @return {Object} The original object.
 * @example
 *
 *      var printKeyConcatValue = (value, key) => console.log(key + ':' + value);
 *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}
 *      // logs x:1
 *      // logs y:2
 * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}
 */
module.exports = _curry2(function forEachObjIndexed(fn, obj) {
  var keyList = keys(obj);
  var idx = 0;
  while (idx < keyList.length) {
    var key = keyList[idx];
    fn(obj[key], key, obj);
    idx += 1;
  }
  return obj;
});


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);


/**
 * Creates a new object from a list key-value pairs. If a key appears in
 * multiple pairs, the rightmost pair is included in the object.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [[k,v]] -> {k: v}
 * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.
 * @return {Object} The object made by pairing up `keys` and `values`.
 * @see R.toPairs, R.pair
 * @example
 *
 *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}
 */
module.exports = _curry1(function fromPairs(pairs) {
  var result = {};
  var idx = 0;
  while (idx < pairs.length) {
    result[pairs[idx][0]] = pairs[idx][1];
    idx += 1;
  }
  return result;
});


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

var _checkForMethod = __webpack_require__(34);
var _curry2 = __webpack_require__(0);
var reduceBy = __webpack_require__(59);

/**
 * Splits a list into sub-lists stored in an object, based on the result of
 * calling a String-returning function on each element, and grouping the
 * results according to values returned.
 *
 * Dispatches to the `groupBy` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> String) -> [a] -> {String: [a]}
 * @param {Function} fn Function :: a -> String
 * @param {Array} list The array to group
 * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
 *         that produced that key when passed to `fn`.
 * @see R.transduce
 * @example
 *
 *      var byGrade = R.groupBy(function(student) {
 *        var score = student.score;
 *        return score < 65 ? 'F' :
 *               score < 70 ? 'D' :
 *               score < 80 ? 'C' :
 *               score < 90 ? 'B' : 'A';
 *      });
 *      var students = [{name: 'Abby', score: 84},
 *                      {name: 'Eddy', score: 58},
 *                      // ...
 *                      {name: 'Jack', score: 69}];
 *      byGrade(students);
 *      // {
 *      //   'A': [{name: 'Dianne', score: 99}],
 *      //   'B': [{name: 'Abby', score: 84}]
 *      //   // ...,
 *      //   'F': [{name: 'Eddy', score: 58}]
 *      // }
 */
module.exports = _curry2(_checkForMethod('groupBy', reduceBy(function(acc, item) {
  if (acc == null) {
    acc = [];
  }
  acc.push(item);
  return acc;
}, null)));


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);

/**
 * Takes a list and returns a list of lists where each sublist's elements are
 * all "equal" according to the provided equality function.
 *
 * @func
 * @memberOf R
 * @since v0.21.0
 * @category List
 * @sig ((a, a) → Boolean) → [a] → [[a]]
 * @param {Function} fn Function for determining whether two given (adjacent)
 *        elements should be in the same group
 * @param {Array} list The array to group. Also accepts a string, which will be
 *        treated as a list of characters.
 * @return {List} A list that contains sublists of equal elements,
 *         whose concatenations are equal to the original list.
 * @example
 *
 * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]
 *
 * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]
 *
 * R.groupWith(R.eqBy(isVowel), 'aestiou')
 * //=> ['ae', 'st', 'iou']
 */
module.exports = _curry2(function(fn, list) {
  var res = [];
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    var nextidx = idx + 1;
    while (nextidx < len && fn(list[idx], list[nextidx])) {
      nextidx += 1;
    }
    res.push(list.slice(idx, nextidx));
    idx = nextidx;
  }
  return res;
});


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns `true` if the first argument is greater than the second; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @see R.lt
 * @example
 *
 *      R.gt(2, 1); //=> true
 *      R.gt(2, 2); //=> false
 *      R.gt(2, 3); //=> false
 *      R.gt('a', 'z'); //=> false
 *      R.gt('z', 'a'); //=> true
 */
module.exports = _curry2(function gt(a, b) { return a > b; });


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns `true` if the first argument is greater than or equal to the second;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean}
 * @see R.lte
 * @example
 *
 *      R.gte(2, 1); //=> true
 *      R.gte(2, 2); //=> true
 *      R.gte(2, 3); //=> false
 *      R.gte('a', 'z'); //=> false
 *      R.gte('z', 'a'); //=> true
 */
module.exports = _curry2(function gte(a, b) { return a >= b; });


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _has = __webpack_require__(9);


/**
 * Returns whether or not an object has an own property with the specified name
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Object
 * @sig s -> {s: x} -> Boolean
 * @param {String} prop The name of the property to check for.
 * @param {Object} obj The object to query.
 * @return {Boolean} Whether the property exists.
 * @example
 *
 *      var hasName = R.has('name');
 *      hasName({name: 'alice'});   //=> true
 *      hasName({name: 'bob'});     //=> true
 *      hasName({});                //=> false
 *
 *      var point = {x: 0, y: 0};
 *      var pointHas = R.has(R.__, point);
 *      pointHas('x');  //=> true
 *      pointHas('y');  //=> true
 *      pointHas('z');  //=> false
 */
module.exports = _curry2(_has);


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns whether or not an object or its prototype chain has a property with
 * the specified name
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Object
 * @sig s -> {s: x} -> Boolean
 * @param {String} prop The name of the property to check for.
 * @param {Object} obj The object to query.
 * @return {Boolean} Whether the property exists.
 * @example
 *
 *      function Rectangle(width, height) {
 *        this.width = width;
 *        this.height = height;
 *      }
 *      Rectangle.prototype.area = function() {
 *        return this.width * this.height;
 *      };
 *
 *      var square = new Rectangle(2, 2);
 *      R.hasIn('width', square);  //=> true
 *      R.hasIn('area', square);  //=> true
 */
module.exports = _curry2(function hasIn(prop, obj) {
  return prop in obj;
});


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

var nth = __webpack_require__(37);


/**
 * Returns the first element of the given list or string. In some libraries
 * this function is named `first`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> a | Undefined
 * @sig String -> String
 * @param {Array|String} list
 * @return {*}
 * @see R.tail, R.init, R.last
 * @example
 *
 *      R.head(['fi', 'fo', 'fum']); //=> 'fi'
 *      R.head([]); //=> undefined
 *
 *      R.head('abc'); //=> 'a'
 *      R.head(''); //=> ''
 */
module.exports = nth(0);


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var curryN = __webpack_require__(7);


/**
 * Creates a function that will process either the `onTrue` or the `onFalse`
 * function depending upon the result of the `condition` predicate.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
 * @param {Function} condition A predicate function
 * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.
 * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.
 * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`
 *                    function depending upon the result of the `condition` predicate.
 * @see R.unless, R.when
 * @example
 *
 *      var incCount = R.ifElse(
 *        R.has('count'),
 *        R.over(R.lensProp('count'), R.inc),
 *        R.assoc('count', 1)
 *      );
 *      incCount({});           //=> { count: 1 }
 *      incCount({ count: 1 }); //=> { count: 2 }
 */
module.exports = _curry3(function ifElse(condition, onTrue, onFalse) {
  return curryN(Math.max(condition.length, onTrue.length, onFalse.length),
    function _ifElse() {
      return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
    }
  );
});


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

var add = __webpack_require__(47);


/**
 * Increments its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number} n + 1
 * @see R.dec
 * @example
 *
 *      R.inc(42); //=> 43
 */
module.exports = add(1);


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

var reduceBy = __webpack_require__(59);


/**
 * Given a function that generates a key, turns a list of objects into an
 * object indexing the objects by the given key. Note that if multiple
 * objects generate the same value for the indexing key only the last value
 * will be included in the generated object.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}
 * @param {Function} fn Function :: a -> String
 * @param {Array} array The array of objects to index
 * @return {Object} An object indexing each array element by the given property.
 * @example
 *
 *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];
 *      R.indexBy(R.prop('id'), list);
 *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}
 */
module.exports = reduceBy(function(acc, elem) { return elem; }, null);


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _indexOf = __webpack_require__(118);
var _isArray = __webpack_require__(25);


/**
 * Returns the position of the first occurrence of an item in an array, or -1
 * if the item is not included in the array. `R.equals` is used to determine
 * equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Number
 * @param {*} target The item to find.
 * @param {Array} xs The array to search in.
 * @return {Number} the index of the target, or -1 if the target is not found.
 * @see R.lastIndexOf
 * @example
 *
 *      R.indexOf(3, [1,2,3,4]); //=> 2
 *      R.indexOf(10, [1,2,3,4]); //=> -1
 */
module.exports = _curry2(function indexOf(target, xs) {
  return typeof xs.indexOf === 'function' && !_isArray(xs) ?
    xs.indexOf(target) :
    _indexOf(xs, target, 0);
});


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

var slice = __webpack_require__(30);


/**
 * Returns all but the last element of the given list or string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.last, R.head, R.tail
 * @example
 *
 *      R.init([1, 2, 3]);  //=> [1, 2]
 *      R.init([1, 2]);     //=> [1]
 *      R.init([1]);        //=> []
 *      R.init([]);         //=> []
 *
 *      R.init('abc');  //=> 'ab'
 *      R.init('ab');   //=> 'a'
 *      R.init('a');    //=> ''
 *      R.init('');     //=> ''
 */
module.exports = slice(0, -1);


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Inserts the supplied element into the list, at index `index`. _Note that
 * this is not destructive_: it returns a copy of the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.2.2
 * @category List
 * @sig Number -> a -> [a] -> [a]
 * @param {Number} index The position to insert the element
 * @param {*} elt The element to insert into the Array
 * @param {Array} list The list to insert into
 * @return {Array} A new Array with `elt` inserted at `index`.
 * @example
 *
 *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]
 */
module.exports = _curry3(function insert(idx, elt, list) {
  idx = idx < list.length && idx >= 0 ? idx : list.length;
  var result = Array.prototype.slice.call(list, 0);
  result.splice(idx, 0, elt);
  return result;
});


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Inserts the sub-list into the list, at index `index`. _Note that this is not
 * destructive_: it returns a copy of the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig Number -> [a] -> [a] -> [a]
 * @param {Number} index The position to insert the sub-list
 * @param {Array} elts The sub-list to insert into the Array
 * @param {Array} list The list to insert the sub-list into
 * @return {Array} A new Array with `elts` inserted starting at `index`.
 * @example
 *
 *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]
 */
module.exports = _curry3(function insertAll(idx, elts, list) {
  idx = idx < list.length && idx >= 0 ? idx : list.length;
  return [].concat(Array.prototype.slice.call(list, 0, idx),
                   elts,
                   Array.prototype.slice.call(list, idx));
});


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

var _contains = __webpack_require__(29);


// A simple Set type that honours R.equals semantics
module.exports = (function() {
  function _Set() {
    /* globals Set */
    this._nativeSet = typeof Set === 'function' ? new Set() : null;
    this._items = {};
  }

  // until we figure out why jsdoc chokes on this
  // @param item The item to add to the Set
  // @returns {boolean} true if the item did not exist prior, otherwise false
  //
  _Set.prototype.add = function(item) {
    return !hasOrAdd(item, true, this);
  };

  //
  // @param item The item to check for existence in the Set
  // @returns {boolean} true if the item exists in the Set, otherwise false
  //
  _Set.prototype.has = function(item) {
    return hasOrAdd(item, false, this);
  };

  //
  // Combines the logic for checking whether an item is a member of the set and
  // for adding a new item to the set.
  //
  // @param item       The item to check or add to the Set instance.
  // @param shouldAdd  If true, the item will be added to the set if it doesn't
  //                   already exist.
  // @param set        The set instance to check or add to.
  // @return {boolean} true if the item already existed, otherwise false.
  //
  function hasOrAdd(item, shouldAdd, set) {
    var type = typeof item;
    var prevSize, newSize;
    switch (type) {
      case 'string':
      case 'number':
        // distinguish between +0 and -0
        if (item === 0 && 1 / item === -Infinity) {
          if (set._items['-0']) {
            return true;
          } else {
            if (shouldAdd) {
              set._items['-0'] = true;
            }
            return false;
          }
        }
        // these types can all utilise the native Set
        if (set._nativeSet !== null) {
          if (shouldAdd) {
            prevSize = set._nativeSet.size;
            set._nativeSet.add(item);
            newSize = set._nativeSet.size;
            return newSize === prevSize;
          } else {
            return set._nativeSet.has(item);
          }
        } else {
          if (!(type in set._items)) {
            if (shouldAdd) {
              set._items[type] = {};
              set._items[type][item] = true;
            }
            return false;
          } else if (item in set._items[type]) {
            return true;
          } else {
            if (shouldAdd) {
              set._items[type][item] = true;
            }
            return false;
          }
        }

      case 'boolean':
        // set._items['boolean'] holds a two element array
        // representing [ falseExists, trueExists ]
        if (type in set._items) {
          var bIdx = item ? 1 : 0;
          if (set._items[type][bIdx]) {
            return true;
          } else {
            if (shouldAdd) {
              set._items[type][bIdx] = true;
            }
            return false;
          }
        } else {
          if (shouldAdd) {
            set._items[type] = item ? [false, true] : [true, false];
          }
          return false;
        }

      case 'function':
        // compare functions for reference equality
        if (set._nativeSet !== null) {
          if (shouldAdd) {
            prevSize = set._nativeSet.size;
            set._nativeSet.add(item);
            newSize = set._nativeSet.size;
            return newSize === prevSize;
          } else {
            return set._nativeSet.has(item);
          }
        } else {
          if (!(type in set._items)) {
            if (shouldAdd) {
              set._items[type] = [item];
            }
            return false;
          }
          if (!_contains(item, set._items[type])) {
            if (shouldAdd) {
              set._items[type].push(item);
            }
            return false;
          }
          return true;
        }

      case 'undefined':
        if (set._items[type]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type] = true;
          }
          return false;
        }

      case 'object':
        if (item === null) {
          if (!set._items['null']) {
            if (shouldAdd) {
              set._items['null'] = true;
            }
            return false;
          }
          return true;
        }
      /* falls through */
      default:
        // reduce the search size of heterogeneous sets by creating buckets
        // for each type.
        type = Object.prototype.toString.call(item);
        if (!(type in set._items)) {
          if (shouldAdd) {
            set._items[type] = [item];
          }
          return false;
        }
        // scan through all previously applied items
        if (!_contains(item, set._items[type])) {
          if (shouldAdd) {
            set._items[type].push(item);
          }
          return false;
        }
        return true;
    }
  }
  return _Set;
}());


/***/ }),
/* 242 */
/***/ (function(module, exports) {

module.exports = function _aperture(n, list) {
  var idx = 0;
  var limit = list.length - (n - 1);
  var acc = new Array(limit >= 0 ? limit : 0);
  while (idx < limit) {
    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);
    idx += 1;
  }
  return acc;
};


/***/ }),
/* 243 */
/***/ (function(module, exports) {

module.exports = function _arrayFromIterator(iter) {
  var list = [];
  var next;
  while (!(next = iter.next()).done) {
    list.push(next.value);
  }
  return list;
};


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

var take = __webpack_require__(146);

module.exports = function dropLast(n, xs) {
  return take(n < xs.length ? xs.length - n : 0, xs);
};


/***/ }),
/* 245 */
/***/ (function(module, exports) {

module.exports = function dropLastWhile(pred, list) {
  var idx = list.length - 1;
  while (idx >= 0 && pred(list[idx])) {
    idx -= 1;
  }
  return Array.prototype.slice.call(list, 0, idx + 1);
};


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

var _arrayFromIterator = __webpack_require__(243);
var _functionName = __webpack_require__(249);
var _has = __webpack_require__(9);
var identical = __webpack_require__(112);
var keys = __webpack_require__(21);
var type = __webpack_require__(81);


module.exports = function _equals(a, b, stackA, stackB) {
  if (identical(a, b)) {
    return true;
  }

  if (type(a) !== type(b)) {
    return false;
  }

  if (a == null || b == null) {
    return false;
  }

  if (typeof a.equals === 'function' || typeof b.equals === 'function') {
    return typeof a.equals === 'function' && a.equals(b) &&
           typeof b.equals === 'function' && b.equals(a);
  }

  switch (type(a)) {
    case 'Arguments':
    case 'Array':
    case 'Object':
      if (typeof a.constructor === 'function' &&
          _functionName(a.constructor) === 'Promise') {
        return a === b;
      }
      break;
    case 'Boolean':
    case 'Number':
    case 'String':
      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {
        return false;
      }
      break;
    case 'Date':
      if (!identical(a.valueOf(), b.valueOf())) {
        return false;
      }
      break;
    case 'Error':
      return a.name === b.name && a.message === b.message;
    case 'RegExp':
      if (!(a.source === b.source &&
            a.global === b.global &&
            a.ignoreCase === b.ignoreCase &&
            a.multiline === b.multiline &&
            a.sticky === b.sticky &&
            a.unicode === b.unicode)) {
        return false;
      }
      break;
    case 'Map':
    case 'Set':
      if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {
        return false;
      }
      break;
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
      break;
    case 'ArrayBuffer':
      break;
    default:
      // Values of other types are only equal if identical.
      return false;
  }

  var keysA = keys(a);
  if (keysA.length !== keys(b).length) {
    return false;
  }

  var idx = stackA.length - 1;
  while (idx >= 0) {
    if (stackA[idx] === a) {
      return stackB[idx] === b;
    }
    idx -= 1;
  }

  stackA.push(a);
  stackB.push(b);
  idx = keysA.length - 1;
  while (idx >= 0) {
    var key = keysA[idx];
    if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {
      return false;
    }
    idx -= 1;
  }
  stackA.pop();
  stackB.pop();
  return true;
};


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

var _forceReduced = __webpack_require__(248);
var _reduce = __webpack_require__(14);
var _xfBase = __webpack_require__(4);
var isArrayLike = __webpack_require__(36);

module.exports = (function() {
  var preservingReduced = function(xf) {
    return {
      '@@transducer/init': _xfBase.init,
      '@@transducer/result': function(result) {
        return xf['@@transducer/result'](result);
      },
      '@@transducer/step': function(result, input) {
        var ret = xf['@@transducer/step'](result, input);
        return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;
      }
    };
  };

  return function _xcat(xf) {
    var rxf = preservingReduced(xf);
    return {
      '@@transducer/init': _xfBase.init,
      '@@transducer/result': function(result) {
        return rxf['@@transducer/result'](result);
      },
      '@@transducer/step': function(result, input) {
        return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);
      }
    };
  };
}());


/***/ }),
/* 248 */
/***/ (function(module, exports) {

module.exports = function _forceReduced(x) {
  return {
    '@@transducer/value': x,
    '@@transducer/reduced': true
  };
};


/***/ }),
/* 249 */
/***/ (function(module, exports) {

module.exports = function _functionName(f) {
  // String(x => x) evaluates to "x => x", so the pattern may not match.
  var match = String(f).match(/^function (\w*)/);
  return match == null ? '' : match[1];
};


/***/ }),
/* 250 */
/***/ (function(module, exports) {

module.exports = function _isRegExp(x) {
  return Object.prototype.toString.call(x) === '[object RegExp]';
};


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

var _has = __webpack_require__(9);

// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
module.exports = function _objectAssign(target) {
  if (target == null) {
    throw new TypeError('Cannot convert undefined or null to object');
  }

  var output = Object(target);
  var idx = 1;
  var length = arguments.length;
  while (idx < length) {
    var source = arguments[idx];
    if (source != null) {
      for (var nextKey in source) {
        if (_has(nextKey, source)) {
          output[nextKey] = source[nextKey];
        }
      }
    }
    idx += 1;
  }
  return output;
};


/***/ }),
/* 252 */
/***/ (function(module, exports) {

module.exports = function _of(x) { return [x]; };


/***/ }),
/* 253 */
/***/ (function(module, exports) {

module.exports = function _pipe(f, g) {
  return function() {
    return g.call(this, f.apply(this, arguments));
  };
};


/***/ }),
/* 254 */
/***/ (function(module, exports) {

module.exports = function _pipeP(f, g) {
  return function() {
    var ctx = this;
    return f.apply(ctx, arguments).then(function(x) {
      return g.call(ctx, x);
    });
  };
};


/***/ }),
/* 255 */
/***/ (function(module, exports) {

module.exports = function _quote(s) {
  var escaped = s
    .replace(/\\/g, '\\\\')
    .replace(/[\b]/g, '\\b')  // \b matches word boundary; [\b] matches backspace
    .replace(/\f/g, '\\f')
    .replace(/\n/g, '\\n')
    .replace(/\r/g, '\\r')
    .replace(/\t/g, '\\t')
    .replace(/\v/g, '\\v')
    .replace(/\0/g, '\\0');

  return '"' + escaped.replace(/"/g, '\\"') + '"';
};


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

var _assign = __webpack_require__(75);
var _identity = __webpack_require__(77);
var _isTransformer = __webpack_require__(78);
var isArrayLike = __webpack_require__(36);
var objOf = __webpack_require__(136);


module.exports = (function() {
  var _stepCatArray = {
    '@@transducer/init': Array,
    '@@transducer/step': function(xs, x) {
      xs.push(x);
      return xs;
    },
    '@@transducer/result': _identity
  };
  var _stepCatString = {
    '@@transducer/init': String,
    '@@transducer/step': function(a, b) { return a + b; },
    '@@transducer/result': _identity
  };
  var _stepCatObject = {
    '@@transducer/init': Object,
    '@@transducer/step': function(result, input) {
      return _assign(
        result,
        isArrayLike(input) ? objOf(input[0], input[1]) : input
      );
    },
    '@@transducer/result': _identity
  };

  return function _stepCat(obj) {
    if (_isTransformer(obj)) {
      return obj;
    }
    if (isArrayLike(obj)) {
      return _stepCatArray;
    }
    if (typeof obj === 'string') {
      return _stepCatString;
    }
    if (typeof obj === 'object') {
      return _stepCatObject;
    }
    throw new Error('Cannot create transformer for ' + obj);
  };
}());


/***/ }),
/* 257 */
/***/ (function(module, exports) {

/**
 * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
 */
module.exports = (function() {
  var pad = function pad(n) { return (n < 10 ? '0' : '') + n; };

  return typeof Date.prototype.toISOString === 'function' ?
    function _toISOString(d) {
      return d.toISOString();
    } :
    function _toISOString(d) {
      return (
        d.getUTCFullYear() + '-' +
        pad(d.getUTCMonth() + 1) + '-' +
        pad(d.getUTCDate()) + 'T' +
        pad(d.getUTCHours()) + ':' +
        pad(d.getUTCMinutes()) + ':' +
        pad(d.getUTCSeconds()) + '.' +
        (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z'
      );
    };
}());


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

var _contains = __webpack_require__(29);
var _map = __webpack_require__(55);
var _quote = __webpack_require__(255);
var _toISOString = __webpack_require__(257);
var keys = __webpack_require__(21);
var reject = __webpack_require__(60);


module.exports = function _toString(x, seen) {
  var recur = function recur(y) {
    var xs = seen.concat([x]);
    return _contains(y, xs) ? '<Circular>' : _toString(y, xs);
  };

  //  mapPairs :: (Object, [String]) -> [String]
  var mapPairs = function(obj, keys) {
    return _map(function(k) { return _quote(k) + ': ' + recur(obj[k]); }, keys.slice().sort());
  };

  switch (Object.prototype.toString.call(x)) {
    case '[object Arguments]':
      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';
    case '[object Array]':
      return '[' + _map(recur, x).concat(mapPairs(x, reject(function(k) { return /^\d+$/.test(k); }, keys(x)))).join(', ') + ']';
    case '[object Boolean]':
      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();
    case '[object Date]':
      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';
    case '[object Null]':
      return 'null';
    case '[object Number]':
      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);
    case '[object String]':
      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);
    case '[object Undefined]':
      return 'undefined';
    default:
      if (typeof x.toString === 'function') {
        var repr = x.toString();
        if (repr !== '[object Object]') {
          return repr;
        }
      }
      return '{' + mapPairs(x, keys(x)).join(', ') + '}';
  }
};


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _reduced = __webpack_require__(26);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XAll(f, xf) {
    this.xf = xf;
    this.f = f;
    this.all = true;
  }
  XAll.prototype['@@transducer/init'] = _xfBase.init;
  XAll.prototype['@@transducer/result'] = function(result) {
    if (this.all) {
      result = this.xf['@@transducer/step'](result, true);
    }
    return this.xf['@@transducer/result'](result);
  };
  XAll.prototype['@@transducer/step'] = function(result, input) {
    if (!this.f(input)) {
      this.all = false;
      result = _reduced(this.xf['@@transducer/step'](result, false));
    }
    return result;
  };

  return _curry2(function _xall(f, xf) { return new XAll(f, xf); });
}());


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

var _concat = __webpack_require__(16);
var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XAperture(n, xf) {
    this.xf = xf;
    this.pos = 0;
    this.full = false;
    this.acc = new Array(n);
  }
  XAperture.prototype['@@transducer/init'] = _xfBase.init;
  XAperture.prototype['@@transducer/result'] = function(result) {
    this.acc = null;
    return this.xf['@@transducer/result'](result);
  };
  XAperture.prototype['@@transducer/step'] = function(result, input) {
    this.store(input);
    return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;
  };
  XAperture.prototype.store = function(input) {
    this.acc[this.pos] = input;
    this.pos += 1;
    if (this.pos === this.acc.length) {
      this.pos = 0;
      this.full = true;
    }
  };
  XAperture.prototype.getCopy = function() {
    return _concat(Array.prototype.slice.call(this.acc, this.pos),
                   Array.prototype.slice.call(this.acc, 0, this.pos));
  };

  return _curry2(function _xaperture(n, xf) { return new XAperture(n, xf); });
}());


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _flatCat = __webpack_require__(247);
var map = __webpack_require__(11);


module.exports = _curry2(function _xchain(f, xf) {
  return map(f, _flatCat(xf));
});


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XDrop(n, xf) {
    this.xf = xf;
    this.n = n;
  }
  XDrop.prototype['@@transducer/init'] = _xfBase.init;
  XDrop.prototype['@@transducer/result'] = _xfBase.result;
  XDrop.prototype['@@transducer/step'] = function(result, input) {
    if (this.n > 0) {
      this.n -= 1;
      return result;
    }
    return this.xf['@@transducer/step'](result, input);
  };

  return _curry2(function _xdrop(n, xf) { return new XDrop(n, xf); });
}());


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XDropLast(n, xf) {
    this.xf = xf;
    this.pos = 0;
    this.full = false;
    this.acc = new Array(n);
  }
  XDropLast.prototype['@@transducer/init'] = _xfBase.init;
  XDropLast.prototype['@@transducer/result'] =  function(result) {
    this.acc = null;
    return this.xf['@@transducer/result'](result);
  };
  XDropLast.prototype['@@transducer/step'] = function(result, input) {
    if (this.full) {
      result = this.xf['@@transducer/step'](result, this.acc[this.pos]);
    }
    this.store(input);
    return result;
  };
  XDropLast.prototype.store = function(input) {
    this.acc[this.pos] = input;
    this.pos += 1;
    if (this.pos === this.acc.length) {
      this.pos = 0;
      this.full = true;
    }
  };

  return _curry2(function _xdropLast(n, xf) { return new XDropLast(n, xf); });
}());


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _reduce = __webpack_require__(14);
var _xfBase = __webpack_require__(4);

module.exports = (function() {
  function XDropLastWhile(fn, xf) {
    this.f = fn;
    this.retained = [];
    this.xf = xf;
  }
  XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;
  XDropLastWhile.prototype['@@transducer/result'] = function(result) {
    this.retained = null;
    return this.xf['@@transducer/result'](result);
  };
  XDropLastWhile.prototype['@@transducer/step'] = function(result, input) {
    return this.f(input) ? this.retain(result, input)
                         : this.flush(result, input);
  };
  XDropLastWhile.prototype.flush = function(result, input) {
    result = _reduce(
      this.xf['@@transducer/step'],
      result,
      this.retained
    );
    this.retained = [];
    return this.xf['@@transducer/step'](result, input);
  };
  XDropLastWhile.prototype.retain = function(result, input) {
    this.retained.push(input);
    return result;
  };

  return _curry2(function _xdropLastWhile(fn, xf) { return new XDropLastWhile(fn, xf); });
}());


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XDropWhile(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XDropWhile.prototype['@@transducer/init'] = _xfBase.init;
  XDropWhile.prototype['@@transducer/result'] = _xfBase.result;
  XDropWhile.prototype['@@transducer/step'] = function(result, input) {
    if (this.f) {
      if (this.f(input)) {
        return result;
      }
      this.f = null;
    }
    return this.xf['@@transducer/step'](result, input);
  };

  return _curry2(function _xdropWhile(f, xf) { return new XDropWhile(f, xf); });
}());


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XFilter(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XFilter.prototype['@@transducer/init'] = _xfBase.init;
  XFilter.prototype['@@transducer/result'] = _xfBase.result;
  XFilter.prototype['@@transducer/step'] = function(result, input) {
    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
  };

  return _curry2(function _xfilter(f, xf) { return new XFilter(f, xf); });
}());


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _reduced = __webpack_require__(26);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XFind(f, xf) {
    this.xf = xf;
    this.f = f;
    this.found = false;
  }
  XFind.prototype['@@transducer/init'] = _xfBase.init;
  XFind.prototype['@@transducer/result'] = function(result) {
    if (!this.found) {
      result = this.xf['@@transducer/step'](result, void 0);
    }
    return this.xf['@@transducer/result'](result);
  };
  XFind.prototype['@@transducer/step'] = function(result, input) {
    if (this.f(input)) {
      this.found = true;
      result = _reduced(this.xf['@@transducer/step'](result, input));
    }
    return result;
  };

  return _curry2(function _xfind(f, xf) { return new XFind(f, xf); });
}());


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _reduced = __webpack_require__(26);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XFindIndex(f, xf) {
    this.xf = xf;
    this.f = f;
    this.idx = -1;
    this.found = false;
  }
  XFindIndex.prototype['@@transducer/init'] = _xfBase.init;
  XFindIndex.prototype['@@transducer/result'] = function(result) {
    if (!this.found) {
      result = this.xf['@@transducer/step'](result, -1);
    }
    return this.xf['@@transducer/result'](result);
  };
  XFindIndex.prototype['@@transducer/step'] = function(result, input) {
    this.idx += 1;
    if (this.f(input)) {
      this.found = true;
      result = _reduced(this.xf['@@transducer/step'](result, this.idx));
    }
    return result;
  };

  return _curry2(function _xfindIndex(f, xf) { return new XFindIndex(f, xf); });
}());


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XFindLast(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XFindLast.prototype['@@transducer/init'] = _xfBase.init;
  XFindLast.prototype['@@transducer/result'] = function(result) {
    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));
  };
  XFindLast.prototype['@@transducer/step'] = function(result, input) {
    if (this.f(input)) {
      this.last = input;
    }
    return result;
  };

  return _curry2(function _xfindLast(f, xf) { return new XFindLast(f, xf); });
}());


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XFindLastIndex(f, xf) {
    this.xf = xf;
    this.f = f;
    this.idx = -1;
    this.lastIdx = -1;
  }
  XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;
  XFindLastIndex.prototype['@@transducer/result'] = function(result) {
    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));
  };
  XFindLastIndex.prototype['@@transducer/step'] = function(result, input) {
    this.idx += 1;
    if (this.f(input)) {
      this.lastIdx = this.idx;
    }
    return result;
  };

  return _curry2(function _xfindLastIndex(f, xf) { return new XFindLastIndex(f, xf); });
}());


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XMap(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XMap.prototype['@@transducer/init'] = _xfBase.init;
  XMap.prototype['@@transducer/result'] = _xfBase.result;
  XMap.prototype['@@transducer/step'] = function(result, input) {
    return this.xf['@@transducer/step'](result, this.f(input));
  };

  return _curry2(function _xmap(f, xf) { return new XMap(f, xf); });
}());


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

var _curryN = __webpack_require__(51);
var _has = __webpack_require__(9);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XReduceBy(valueFn, valueAcc, keyFn, xf) {
    this.valueFn = valueFn;
    this.valueAcc = valueAcc;
    this.keyFn = keyFn;
    this.xf = xf;
    this.inputs = {};
  }
  XReduceBy.prototype['@@transducer/init'] = _xfBase.init;
  XReduceBy.prototype['@@transducer/result'] = function(result) {
    var key;
    for (key in this.inputs) {
      if (_has(key, this.inputs)) {
        result = this.xf['@@transducer/step'](result, this.inputs[key]);
        if (result['@@transducer/reduced']) {
          result = result['@@transducer/value'];
          break;
        }
      }
    }
    this.inputs = null;
    return this.xf['@@transducer/result'](result);
  };
  XReduceBy.prototype['@@transducer/step'] = function(result, input) {
    var key = this.keyFn(input);
    this.inputs[key] = this.inputs[key] || [key, this.valueAcc];
    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
    return result;
  };

  return _curryN(4, [],
                 function _xreduceBy(valueFn, valueAcc, keyFn, xf) {
                   return new XReduceBy(valueFn, valueAcc, keyFn, xf);
                 });
}());


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _reduced = __webpack_require__(26);
var _xfBase = __webpack_require__(4);

module.exports = (function() {
  function XTake(n, xf) {
    this.xf = xf;
    this.n = n;
    this.i = 0;
  }
  XTake.prototype['@@transducer/init'] = _xfBase.init;
  XTake.prototype['@@transducer/result'] = _xfBase.result;
  XTake.prototype['@@transducer/step'] = function(result, input) {
    this.i += 1;
    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);
    return this.i >= this.n ? _reduced(ret) : ret;
  };

  return _curry2(function _xtake(n, xf) { return new XTake(n, xf); });
}());


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _reduced = __webpack_require__(26);
var _xfBase = __webpack_require__(4);


module.exports = (function() {
  function XTakeWhile(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;
  XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;
  XTakeWhile.prototype['@@transducer/step'] = function(result, input) {
    return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);
  };

  return _curry2(function _xtakeWhile(f, xf) { return new XTakeWhile(f, xf); });
}());


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

var _contains = __webpack_require__(29);
var _curry2 = __webpack_require__(0);
var _filter = __webpack_require__(117);
var flip = __webpack_require__(50);
var uniq = __webpack_require__(82);


/**
 * Combines two lists into a set (i.e. no duplicates) composed of those
 * elements common to both lists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The list of elements found in both `list1` and `list2`.
 * @see R.intersectionWith
 * @example
 *
 *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]
 */
module.exports = _curry2(function intersection(list1, list2) {
  var lookupList, filteredList;
  if (list1.length > list2.length) {
    lookupList = list1;
    filteredList = list2;
  } else {
    lookupList = list2;
    filteredList = list1;
  }
  return uniq(_filter(flip(_contains)(lookupList), filteredList));
});


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

var _containsWith = __webpack_require__(76);
var _curry3 = __webpack_require__(2);
var uniqWith = __webpack_require__(83);


/**
 * Combines two lists into a set (i.e. no duplicates) composed of those
 * elements common to both lists. Duplication is determined according to the
 * value returned by applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
 * @param {Function} pred A predicate function that determines whether
 *        the two supplied elements are equal.
 * @param {Array} list1 One list of items to compare
 * @param {Array} list2 A second list of items to compare
 * @return {Array} A new list containing those elements common to both lists.
 * @see R.intersection
 * @example
 *
 *      var buffaloSpringfield = [
 *        {id: 824, name: 'Richie Furay'},
 *        {id: 956, name: 'Dewey Martin'},
 *        {id: 313, name: 'Bruce Palmer'},
 *        {id: 456, name: 'Stephen Stills'},
 *        {id: 177, name: 'Neil Young'}
 *      ];
 *      var csny = [
 *        {id: 204, name: 'David Crosby'},
 *        {id: 456, name: 'Stephen Stills'},
 *        {id: 539, name: 'Graham Nash'},
 *        {id: 177, name: 'Neil Young'}
 *      ];
 *
 *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);
 *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]
 */
module.exports = _curry3(function intersectionWith(pred, list1, list2) {
  var lookupList, filteredList;
  if (list1.length > list2.length) {
    lookupList = list1;
    filteredList = list2;
  } else {
    lookupList = list2;
    filteredList = list1;
  }
  var results = [];
  var idx = 0;
  while (idx < filteredList.length) {
    if (_containsWith(pred, filteredList[idx], lookupList)) {
      results[results.length] = filteredList[idx];
    }
    idx += 1;
  }
  return uniqWith(pred, results);
});


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

var _checkForMethod = __webpack_require__(34);
var _curry2 = __webpack_require__(0);


/**
 * Creates a new list with the separator interposed between elements.
 *
 * Dispatches to the `intersperse` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} separator The element to add to the list.
 * @param {Array} list The list to be interposed.
 * @return {Array} The new list.
 * @example
 *
 *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']
 */
module.exports = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {
  var out = [];
  var idx = 0;
  var length = list.length;
  while (idx < length) {
    if (idx === length - 1) {
      out.push(list[idx]);
    } else {
      out.push(list[idx], separator);
    }
    idx += 1;
  }
  return out;
}));


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

var _clone = __webpack_require__(113);
var _curry3 = __webpack_require__(2);
var _isTransformer = __webpack_require__(78);
var _reduce = __webpack_require__(14);
var _stepCat = __webpack_require__(256);


/**
 * Transforms the items of the list with the transducer and appends the
 * transformed items to the accumulator using an appropriate iterator function
 * based on the accumulator type.
 *
 * The accumulator can be an array, string, object or a transformer. Iterated
 * items will be appended to arrays and concatenated to strings. Objects will
 * be merged directly or 2-item arrays will be merged as key, value pairs.
 *
 * The accumulator can also be a transformer object that provides a 2-arity
 * reducing iterator function, step, 0-arity initial value function, init, and
 * 1-arity result extraction function result. The step function is used as the
 * iterator function in reduce. The result function is used to convert the
 * final accumulator into the return type and in most cases is R.identity. The
 * init function is used to provide the initial accumulator.
 *
 * The iteration is performed with R.reduce after initializing the transducer.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig a -> (b -> b) -> [c] -> a
 * @param {*} acc The initial accumulator value.
 * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
 *
 *      R.into([], transducer, numbers); //=> [2, 3]
 *
 *      var intoArray = R.into([]);
 *      intoArray(transducer, numbers); //=> [2, 3]
 */
module.exports = _curry3(function into(acc, xf, list) {
  return _isTransformer(acc) ?
    _reduce(xf(acc), acc['@@transducer/init'](), list) :
    _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);
});


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _has = __webpack_require__(9);
var keys = __webpack_require__(21);


/**
 * Same as R.invertObj, however this accounts for objects with duplicate values
 * by putting the values into an array.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {s: x} -> {x: [ s, ... ]}
 * @param {Object} obj The object or array to invert
 * @return {Object} out A new object with keys
 * in an array.
 * @example
 *
 *      var raceResultsByFirstName = {
 *        first: 'alice',
 *        second: 'jake',
 *        third: 'alice',
 *      };
 *      R.invert(raceResultsByFirstName);
 *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }
 */
module.exports = _curry1(function invert(obj) {
  var props = keys(obj);
  var len = props.length;
  var idx = 0;
  var out = {};

  while (idx < len) {
    var key = props[idx];
    var val = obj[key];
    var list = _has(val, out) ? out[val] : (out[val] = []);
    list[list.length] = key;
    idx += 1;
  }
  return out;
});


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var keys = __webpack_require__(21);


/**
 * Returns a new object with the keys of the given object as values, and the
 * values of the given object, which are coerced to strings, as keys. Note
 * that the last key found is preferred when handling the same value.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {s: x} -> {x: s}
 * @param {Object} obj The object or array to invert
 * @return {Object} out A new object
 * @example
 *
 *      var raceResults = {
 *        first: 'alice',
 *        second: 'jake'
 *      };
 *      R.invertObj(raceResults);
 *      //=> { 'alice': 'first', 'jake':'second' }
 *
 *      // Alternatively:
 *      var raceResults = ['alice', 'jake'];
 *      R.invertObj(raceResults);
 *      //=> { 'alice': '0', 'jake':'1' }
 */
module.exports = _curry1(function invertObj(obj) {
  var props = keys(obj);
  var len = props.length;
  var idx = 0;
  var out = {};

  while (idx < len) {
    var key = props[idx];
    out[obj[key]] = key;
    idx += 1;
  }
  return out;
});


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var empty = __webpack_require__(111);
var equals = __webpack_require__(19);


/**
 * Returns `true` if the given value is its type's empty value; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> Boolean
 * @param {*} x
 * @return {Boolean}
 * @see R.empty
 * @example
 *
 *      R.isEmpty([1, 2, 3]);   //=> false
 *      R.isEmpty([]);          //=> true
 *      R.isEmpty('');          //=> true
 *      R.isEmpty(null);        //=> false
 *      R.isEmpty({});          //=> true
 *      R.isEmpty({length: 0}); //=> false
 */
module.exports = _curry1(function isEmpty(x) {
  return x != null && equals(x, empty(x));
});


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);


/**
 * Checks if the input value is `null` or `undefined`.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Type
 * @sig * -> Boolean
 * @param {*} x The value to test.
 * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.
 * @example
 *
 *      R.isNil(null); //=> true
 *      R.isNil(undefined); //=> true
 *      R.isNil(0); //=> false
 *      R.isNil([]); //=> false
 */
module.exports = _curry1(function isNil(x) { return x == null; });


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

var invoker = __webpack_require__(35);


/**
 * Returns a string made by inserting the `separator` between each element and
 * concatenating all the elements into a single string.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig String -> [a] -> String
 * @param {Number|String} separator The string used to separate the elements.
 * @param {Array} xs The elements to join into a string.
 * @return {String} str The string made by concatenating `xs` with `separator`.
 * @see R.split
 * @example
 *
 *      var spacer = R.join(' ');
 *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'
 *      R.join('|', [1, 2, 3]);    //=> '1|2|3'
 */
module.exports = invoker(1, 'join');


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);


/**
 * Returns a list containing the names of all the properties of the supplied
 * object, including prototype properties.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own and prototype properties.
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.keysIn(f); //=> ['x', 'y']
 */
module.exports = _curry1(function keysIn(obj) {
  var prop;
  var ks = [];
  for (prop in obj) {
    ks[ks.length] = prop;
  }
  return ks;
});


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _isArray = __webpack_require__(25);
var equals = __webpack_require__(19);


/**
 * Returns the position of the last occurrence of an item in an array, or -1 if
 * the item is not included in the array. `R.equals` is used to determine
 * equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Number
 * @param {*} target The item to find.
 * @param {Array} xs The array to search in.
 * @return {Number} the index of the target, or -1 if the target is not found.
 * @see R.indexOf
 * @example
 *
 *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6
 *      R.lastIndexOf(10, [1,2,3,4]); //=> -1
 */
module.exports = _curry2(function lastIndexOf(target, xs) {
  if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {
    return xs.lastIndexOf(target);
  } else {
    var idx = xs.length - 1;
    while (idx >= 0) {
      if (equals(xs[idx], target)) {
        return idx;
      }
      idx -= 1;
    }
    return -1;
  }
});


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var lens = __webpack_require__(56);
var nth = __webpack_require__(37);
var update = __webpack_require__(149);


/**
 * Returns a lens whose focus is the specified index.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Number -> Lens s a
 * @param {Number} n
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var headLens = R.lensIndex(0);
 *
 *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'
 *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']
 *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']
 */
module.exports = _curry1(function lensIndex(n) {
  return lens(nth(n), update(n));
});


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var assocPath = __webpack_require__(100);
var lens = __webpack_require__(56);
var path = __webpack_require__(38);


/**
 * Returns a lens whose focus is the specified path.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @typedefn Idx = String | Int
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig [Idx] -> Lens s a
 * @param {Array} path The path to use.
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var xHeadYLens = R.lensPath(['x', 0, 'y']);
 *
 *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> 2
 *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}
 *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}
 */
module.exports = _curry1(function lensPath(p) {
  return lens(path(p), assocPath(p));
});


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var assoc = __webpack_require__(48);
var lens = __webpack_require__(56);
var prop = __webpack_require__(79);


/**
 * Returns a lens whose focus is the specified property.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig String -> Lens s a
 * @param {String} k
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.view(xLens, {x: 1, y: 2});            //=> 1
 *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
 *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
 */
module.exports = _curry1(function lensProp(k) {
  return lens(prop(k), assoc(k));
});


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns `true` if the first argument is less than the second; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @see R.gt
 * @example
 *
 *      R.lt(2, 1); //=> false
 *      R.lt(2, 2); //=> false
 *      R.lt(2, 3); //=> true
 *      R.lt('a', 'z'); //=> true
 *      R.lt('z', 'a'); //=> false
 */
module.exports = _curry2(function lt(a, b) { return a < b; });


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns `true` if the first argument is less than or equal to the second;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean}
 * @see R.gte
 * @example
 *
 *      R.lte(2, 1); //=> false
 *      R.lte(2, 2); //=> true
 *      R.lte(2, 3); //=> true
 *      R.lte('a', 'z'); //=> true
 *      R.lte('z', 'a'); //=> false
 */
module.exports = _curry2(function lte(a, b) { return a <= b; });


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * The mapAccum function behaves like a combination of map and reduce; it
 * applies a function to each element of a list, passing an accumulating
 * parameter from left to right, and returning a final value of this
 * accumulator together with the new list.
 *
 * The iterator function receives two arguments, *acc* and *value*, and should
 * return a tuple *[acc, value]*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.addIndex, R.mapAccumRight
 * @example
 *
 *      var digits = ['1', '2', '3', '4'];
 *      var appender = (a, b) => [a + b, a + b];
 *
 *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]
 * @symb R.mapAccum(f, a, [b, c, d]) = [
 *   f(f(f(a, b)[0], c)[0], d)[0],
 *   [
 *     f(a, b)[1],
 *     f(f(a, b)[0], c)[1],
 *     f(f(f(a, b)[0], c)[0], d)[1]
 *   ]
 * ]
 */
module.exports = _curry3(function mapAccum(fn, acc, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  var tuple = [acc];
  while (idx < len) {
    tuple = fn(tuple[0], list[idx]);
    result[idx] = tuple[1];
    idx += 1;
  }
  return [tuple[0], result];
});


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * The mapAccumRight function behaves like a combination of map and reduce; it
 * applies a function to each element of a list, passing an accumulating
 * parameter from right to left, and returning a final value of this
 * accumulator together with the new list.
 *
 * Similar to `mapAccum`, except moves through the input list from the right to
 * the left.
 *
 * The iterator function receives two arguments, *value* and *acc*, and should
 * return a tuple *[value, acc]*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.addIndex, R.mapAccum
 * @example
 *
 *      var digits = ['1', '2', '3', '4'];
 *      var append = (a, b) => [a + b, a + b];
 *
 *      R.mapAccumRight(append, 5, digits); //=> [['12345', '2345', '345', '45'], '12345']
 * @symb R.mapAccumRight(f, a, [b, c, d]) = [
 *   [
 *     f(b, f(c, f(d, a)[0])[0])[1],
 *     f(c, f(d, a)[0])[1],
 *     f(d, a)[1],
 *   ]
 *   f(b, f(c, f(d, a)[0])[0])[0],
 * ]
 */
module.exports = _curry3(function mapAccumRight(fn, acc, list) {
  var idx = list.length - 1;
  var result = [];
  var tuple = [acc];
  while (idx >= 0) {
    tuple = fn(list[idx], tuple[0]);
    result[idx] = tuple[1];
    idx -= 1;
  }
  return [result, tuple[0]];
});


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _reduce = __webpack_require__(14);
var keys = __webpack_require__(21);


/**
 * An Object-specific version of `map`. The function is applied to three
 * arguments: *(value, key, obj)*. If only the value is significant, use
 * `map` instead.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig ((*, String, Object) -> *) -> Object -> Object
 * @param {Function} fn
 * @param {Object} obj
 * @return {Object}
 * @see R.map
 * @example
 *
 *      var values = { x: 1, y: 2, z: 3 };
 *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);
 *
 *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }
 */
module.exports = _curry2(function mapObjIndexed(fn, obj) {
  return _reduce(function(acc, key) {
    acc[key] = fn(obj[key], key, obj);
    return acc;
  }, {}, keys(obj));
});


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Tests a regular expression against a String. Note that this function will
 * return an empty array when there are no matches. This differs from
 * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)
 * which returns `null` when there are no matches.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category String
 * @sig RegExp -> String -> [String | Undefined]
 * @param {RegExp} rx A regular expression.
 * @param {String} str The string to match against
 * @return {Array} The list of matches or empty array.
 * @see R.test
 * @example
 *
 *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']
 *      R.match(/a/, 'b'); //=> []
 *      R.match(/a/, null); //=> TypeError: null does not have a method named "match"
 */
module.exports = _curry2(function match(rx, str) {
  return str.match(rx) || [];
});


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _isInteger = __webpack_require__(120);


/**
 * mathMod behaves like the modulo operator should mathematically, unlike the
 * `%` operator (and by extension, R.modulo). So while "-17 % 5" is -2,
 * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN
 * when the modulus is zero or negative.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} m The dividend.
 * @param {Number} p the modulus.
 * @return {Number} The result of `b mod a`.
 * @example
 *
 *      R.mathMod(-17, 5);  //=> 3
 *      R.mathMod(17, 5);   //=> 2
 *      R.mathMod(17, -5);  //=> NaN
 *      R.mathMod(17, 0);   //=> NaN
 *      R.mathMod(17.2, 5); //=> NaN
 *      R.mathMod(17, 5.3); //=> NaN
 *
 *      var clock = R.mathMod(R.__, 12);
 *      clock(15); //=> 3
 *      clock(24); //=> 0
 *
 *      var seventeenMod = R.mathMod(17);
 *      seventeenMod(3);  //=> 2
 *      seventeenMod(4);  //=> 1
 *      seventeenMod(10); //=> 7
 */
module.exports = _curry2(function mathMod(m, p) {
  if (!_isInteger(m)) { return NaN; }
  if (!_isInteger(p) || p < 1) { return NaN; }
  return ((m % p) + p) % p;
});


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Takes a function and two values, and returns whichever value produces the
 * larger result when passed to the provided function.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Relation
 * @sig Ord b => (a -> b) -> a -> a -> a
 * @param {Function} f
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.max, R.minBy
 * @example
 *
 *      //  square :: Number -> Number
 *      var square = n => n * n;
 *
 *      R.maxBy(square, -3, 2); //=> -3
 *
 *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5
 *      R.reduce(R.maxBy(square), 0, []); //=> 0
 */
module.exports = _curry3(function maxBy(f, a, b) {
  return f(b) > f(a) ? b : a;
});


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var mean = __webpack_require__(132);


/**
 * Returns the median of the given list of numbers.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list
 * @return {Number}
 * @example
 *
 *      R.median([2, 9, 7]); //=> 7
 *      R.median([7, 2, 10, 9]); //=> 8
 *      R.median([]); //=> NaN
 */
module.exports = _curry1(function median(list) {
  var len = list.length;
  if (len === 0) {
    return NaN;
  }
  var width = 2 - len % 2;
  var idx = (len - width) / 2;
  return mean(Array.prototype.slice.call(list, 0).sort(function(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }).slice(idx, idx + width));
});


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

var _arity = __webpack_require__(20);
var _curry1 = __webpack_require__(1);
var _has = __webpack_require__(9);
var toString = __webpack_require__(40);


/**
 * Creates a new function that, when invoked, caches the result of calling `fn`
 * for a given argument set and returns the result. Subsequent calls to the
 * memoized `fn` with the same argument set will not result in an additional
 * call to `fn`; instead, the cached result for that set of arguments will be
 * returned.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (*... -> a) -> (*... -> a)
 * @param {Function} fn The function to memoize.
 * @return {Function} Memoized version of `fn`.
 * @example
 *
 *      var count = 0;
 *      var factorial = R.memoize(n => {
 *        count += 1;
 *        return R.product(R.range(1, n + 1));
 *      });
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      count; //=> 1
 */
module.exports = _curry1(function memoize(fn) {
  var cache = {};
  return _arity(fn.length, function() {
    var key = toString(arguments);
    if (!_has(key, cache)) {
      cache[key] = fn.apply(this, arguments);
    }
    return cache[key];
  });
});


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

var _assign = __webpack_require__(75);
var _curry2 = __webpack_require__(0);


/**
 * Create a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects,
 * the value from the second object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> {k: v} -> {k: v}
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeWith, R.mergeWithKey
 * @example
 *
 *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
 *      //=> { 'name': 'fred', 'age': 40 }
 *
 *      var resetToDefault = R.merge(R.__, {x: 0});
 *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}
 * @symb R.merge({ x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: 5, z: 3 }
 */
module.exports = _curry2(function merge(l, r) {
  return _assign({}, l, r);
});


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

var _assign = __webpack_require__(75);
var _curry1 = __webpack_require__(1);


/**
 * Merges a list of objects together into one object.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig [{k: v}] -> {k: v}
 * @param {Array} list An array of objects
 * @return {Object} A merged object.
 * @see R.reduce
 * @example
 *
 *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}
 *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}
 * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }
 */
module.exports = _curry1(function mergeAll(list) {
  return _assign.apply(null, [{}].concat(list));
});


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var mergeWithKey = __webpack_require__(133);


/**
 * Creates a new object with the own properties of the two provided objects. If
 * a key exists in both objects, the provided function is applied to the values
 * associated with the key in each object, with the result being used as the
 * value associated with the key in the returned object. The key will be
 * excluded from the returned object if the resulting value is `undefined`.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @sig (a -> a -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.merge, R.mergeWithKey
 * @example
 *
 *      R.mergeWith(R.concat,
 *                  { a: true, values: [10, 20] },
 *                  { b: true, values: [15, 35] });
 *      //=> { a: true, b: true, values: [10, 20, 15, 35] }
 */
module.exports = _curry3(function mergeWith(fn, l, r) {
  return mergeWithKey(function(_, _l, _r) {
    return fn(_l, _r);
  }, l, r);
});


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns the smaller of its two arguments.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> a
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.minBy, R.max
 * @example
 *
 *      R.min(789, 123); //=> 123
 *      R.min('a', 'b'); //=> 'a'
 */
module.exports = _curry2(function min(a, b) { return b < a ? b : a; });


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Takes a function and two values, and returns whichever value produces the
 * smaller result when passed to the provided function.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Relation
 * @sig Ord b => (a -> b) -> a -> a -> a
 * @param {Function} f
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.min, R.maxBy
 * @example
 *
 *      //  square :: Number -> Number
 *      var square = n => n * n;
 *
 *      R.minBy(square, -3, 2); //=> 2
 *
 *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1
 *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity
 */
module.exports = _curry3(function minBy(f, a, b) {
  return f(b) < f(a) ? b : a;
});


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Divides the first parameter by the second and returns the remainder. Note
 * that this function preserves the JavaScript-style behavior for modulo. For
 * mathematical modulo see `mathMod`.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The value to the divide.
 * @param {Number} b The pseudo-modulus
 * @return {Number} The result of `b % a`.
 * @see R.mathMod
 * @example
 *
 *      R.modulo(17, 3); //=> 2
 *      // JS behavior:
 *      R.modulo(-17, 3); //=> -2
 *      R.modulo(17, -3); //=> 2
 *
 *      var isOdd = R.modulo(R.__, 2);
 *      isOdd(42); //=> 0
 *      isOdd(21); //=> 1
 */
module.exports = _curry2(function modulo(a, b) { return a % b; });


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);


/**
 * Negates its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number}
 * @example
 *
 *      R.negate(42); //=> -42
 */
module.exports = _curry1(function negate(n) { return -n; });


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

var _complement = __webpack_require__(115);
var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xany = __webpack_require__(124);
var any = __webpack_require__(98);


/**
 * Returns `true` if no elements of the list match the predicate, `false`
 * otherwise.
 *
 * Dispatches to the `any` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.
 * @see R.all, R.any
 * @example
 *
 *      var isEven = n => n % 2 === 0;
 *
 *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true
 *      R.none(isEven, [1, 3, 5, 7, 8, 11]); //=> false
 */
module.exports = _curry2(_complement(_dispatchable(['any'], _xany, any)));


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var curryN = __webpack_require__(7);
var nth = __webpack_require__(37);


/**
 * Returns a function which returns its nth argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig Number -> *... -> *
 * @param {Number} n
 * @return {Function}
 * @example
 *
 *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'
 *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'
 * @symb R.nthArg(-1)(a, b, c) = c
 * @symb R.nthArg(0)(a, b, c) = a
 * @symb R.nthArg(1)(a, b, c) = b
 */
module.exports = _curry1(function nthArg(n) {
  var arity = n < 0 ? 1 : n + 1;
  return curryN(arity, function() {
    return nth(n, arguments);
  });
});


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _of = __webpack_require__(252);


/**
 * Returns a singleton array containing the value provided.
 *
 * Note this `of` is different from the ES6 `of`; See
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig a -> [a]
 * @param {*} x any value
 * @return {Array} An array wrapping `x`.
 * @example
 *
 *      R.of(null); //=> [null]
 *      R.of([42]); //=> [[42]]
 */
module.exports = _curry1(_of);


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

var _contains = __webpack_require__(29);
var _curry2 = __webpack_require__(0);


/**
 * Returns a partial copy of an object omitting the keys specified.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [String] -> {String: *} -> {String: *}
 * @param {Array} names an array of String property names to omit from the new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with properties from `names` not on it.
 * @see R.pick
 * @example
 *
 *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}
 */
module.exports = _curry2(function omit(names, obj) {
  var result = {};
  for (var prop in obj) {
    if (!_contains(prop, names)) {
      result[prop] = obj[prop];
    }
  }
  return result;
});


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

var _arity = __webpack_require__(20);
var _curry1 = __webpack_require__(1);


/**
 * Accepts a function `fn` and returns a function that guards invocation of
 * `fn` such that `fn` can only ever be called once, no matter how many times
 * the returned function is invoked. The first value calculated is returned in
 * subsequent invocations.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a... -> b) -> (a... -> b)
 * @param {Function} fn The function to wrap in a call-only-once wrapper.
 * @return {Function} The wrapped function.
 * @example
 *
 *      var addOneOnce = R.once(x => x + 1);
 *      addOneOnce(10); //=> 11
 *      addOneOnce(addOneOnce(50)); //=> 11
 */
module.exports = _curry1(function once(fn) {
  var called = false;
  var result;
  return _arity(fn.length, function() {
    if (called) {
      return result;
    }
    called = true;
    result = fn.apply(this, arguments);
    return result;
  });
});


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category List
 * @sig a -> b -> (a,b)
 * @param {*} fst
 * @param {*} snd
 * @return {Array}
 * @see R.objOf, R.of
 * @example
 *
 *      R.pair('foo', 'bar'); //=> ['foo', 'bar']
 */
module.exports = _curry2(function pair(fst, snd) { return [fst, snd]; });


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

var _concat = __webpack_require__(16);
var _createPartialApplicator = __webpack_require__(116);


/**
 * Takes a function `f` and a list of arguments, and returns a function `g`.
 * When applied, `g` returns the result of applying `f` to the arguments
 * provided initially followed by the arguments provided to `g`.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
 * @param {Function} f
 * @param {Array} args
 * @return {Function}
 * @see R.partialRight
 * @example
 *
 *      var multiply2 = (a, b) => a * b;
 *      var double = R.partial(multiply2, [2]);
 *      double(2); //=> 4
 *
 *      var greet = (salutation, title, firstName, lastName) =>
 *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
 *
 *      var sayHello = R.partial(greet, ['Hello']);
 *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);
 *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'
 * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)
 */
module.exports = _createPartialApplicator(_concat);


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

var _concat = __webpack_require__(16);
var _createPartialApplicator = __webpack_require__(116);
var flip = __webpack_require__(50);


/**
 * Takes a function `f` and a list of arguments, and returns a function `g`.
 * When applied, `g` returns the result of applying `f` to the arguments
 * provided to `g` followed by the arguments provided initially.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
 * @param {Function} f
 * @param {Array} args
 * @return {Function}
 * @see R.partial
 * @example
 *
 *      var greet = (salutation, title, firstName, lastName) =>
 *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
 *
 *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);
 *
 *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'
 * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)
 */
module.exports = _createPartialApplicator(flip(_concat));


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

var filter = __webpack_require__(73);
var juxt = __webpack_require__(128);
var reject = __webpack_require__(60);


/**
 * Takes a predicate and a list or other "filterable" object and returns the
 * pair of filterable objects of the same type of elements which do and do not
 * satisfy, the predicate, respectively.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]
 * @param {Function} pred A predicate to determine which side the element belongs to.
 * @param {Array} filterable the list (or other filterable) to partition.
 * @return {Array} An array, containing first the subset of elements that satisfy the
 *         predicate, and second the subset of elements that do not satisfy.
 * @see R.filter, R.reject
 * @example
 *
 *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);
 *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
 *
 *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });
 *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]
 */
module.exports = juxt([filter, reject]);


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var equals = __webpack_require__(19);
var path = __webpack_require__(38);


/**
 * Determines whether a nested path on an object has a specific value, in
 * `R.equals` terms. Most likely used to filter a list.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Relation
 * @typedefn Idx = String | Int
 * @sig [Idx] -> a -> {a} -> Boolean
 * @param {Array} path The path of the nested property to use
 * @param {*} val The value to compare the nested property with
 * @param {Object} obj The object to check the nested property in
 * @return {Boolean} `true` if the value equals the nested object property,
 *         `false` otherwise.
 * @example
 *
 *      var user1 = { address: { zipCode: 90210 } };
 *      var user2 = { address: { zipCode: 55555 } };
 *      var user3 = { name: 'Bob' };
 *      var users = [ user1, user2, user3 ];
 *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);
 *      R.filter(isFamous, users); //=> [ user1 ]
 */
module.exports = _curry3(function pathEq(_path, val, obj) {
  return equals(path(_path, obj), val);
});


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var defaultTo = __webpack_require__(105);
var path = __webpack_require__(38);


/**
 * If the given, non-null object has a value at the given path, returns the
 * value at that path. Otherwise returns the provided default value.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig a -> [Idx] -> {a} -> a
 * @param {*} d The default value.
 * @param {Array} p The path to use.
 * @param {Object} obj The object to retrieve the nested property from.
 * @return {*} The data at `path` of the supplied object or the default value.
 * @example
 *
 *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2
 *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> "N/A"
 */
module.exports = _curry3(function pathOr(d, p, obj) {
  return defaultTo(d, path(p, obj));
});


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var path = __webpack_require__(38);


/**
 * Returns `true` if the specified object property at given path satisfies the
 * given predicate; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Logic
 * @typedefn Idx = String | Int
 * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean
 * @param {Function} pred
 * @param {Array} propPath
 * @param {*} obj
 * @return {Boolean}
 * @see R.propSatisfies, R.path
 * @example
 *
 *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true
 */
module.exports = _curry3(function pathSatisfies(pred, propPath, obj) {
  return propPath.length > 0 && pred(path(propPath, obj));
});


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns a partial copy of an object containing only the keys specified. If
 * the key does not exist, the property is ignored.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> {k: v}
 * @param {Array} names an array of String property names to copy onto a new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties from `names` on it.
 * @see R.omit, R.props
 * @example
 *
 *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
 *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}
 */
module.exports = _curry2(function pick(names, obj) {
  var result = {};
  var idx = 0;
  while (idx < names.length) {
    if (names[idx] in obj) {
      result[names[idx]] = obj[names[idx]];
    }
    idx += 1;
  }
  return result;
});


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns a partial copy of an object containing only the keys that satisfy
 * the supplied predicate.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @sig (v, k -> Boolean) -> {k: v} -> {k: v}
 * @param {Function} pred A predicate to determine whether or not a key
 *        should be included on the output object.
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties that satisfy `pred`
 *         on it.
 * @see R.pick, R.filter
 * @example
 *
 *      var isUpperCase = (val, key) => key.toUpperCase() === key;
 *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}
 */
module.exports = _curry2(function pickBy(test, obj) {
  var result = {};
  for (var prop in obj) {
    if (test(obj[prop], prop, obj)) {
      result[prop] = obj[prop];
    }
  }
  return result;
});


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

var composeK = __webpack_require__(102);
var reverse = __webpack_require__(61);

/**
 * Returns the left-to-right Kleisli composition of the provided functions,
 * each of which must return a value of a type supported by [`chain`](#chain).
 *
 * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Function
 * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)
 * @param {...Function}
 * @return {Function}
 * @see R.composeK
 * @example
 *
 *      //  parseJson :: String -> Maybe *
 *      //  get :: String -> Object -> Maybe *
 *
 *      //  getStateCode :: Maybe String -> Maybe String
 *      var getStateCode = R.pipeK(
 *        parseJson,
 *        get('user'),
 *        get('address'),
 *        get('state'),
 *        R.compose(Maybe.of, R.toUpper)
 *      );
 *
 *      getStateCode('{"user":{"address":{"state":"ny"}}}');
 *      //=> Just('NY')
 *      getStateCode('[Invalid JSON]');
 *      //=> Nothing()
 * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))
 */
module.exports = function pipeK() {
  if (arguments.length === 0) {
    throw new Error('pipeK requires at least one argument');
  }
  return composeK.apply(this, reverse(arguments));
};


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

var multiply = __webpack_require__(134);
var reduce = __webpack_require__(22);


/**
 * Multiplies together all the elements of a list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list An array of numbers
 * @return {Number} The product of all the numbers in the list.
 * @see R.reduce
 * @example
 *
 *      R.product([2,4,6,8,100,1]); //=> 38400
 */
module.exports = reduce(multiply, 1);


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

var _map = __webpack_require__(55);
var identity = __webpack_require__(74);
var pickAll = __webpack_require__(139);
var useWith = __webpack_require__(150);


/**
 * Reasonable analog to SQL `select` statement.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @category Relation
 * @sig [k] -> [{k: v}] -> [{k: v}]
 * @param {Array} props The property names to project
 * @param {Array} objs The objects to query
 * @return {Array} An array of objects with just the `props` properties.
 * @example
 *
 *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};
 *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};
 *      var kids = [abby, fred];
 *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]
 */
module.exports = useWith(_map, [pickAll, identity]); // passing `identity` gives correct arity


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var equals = __webpack_require__(19);


/**
 * Returns `true` if the specified object property is equal, in `R.equals`
 * terms, to the given value; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig String -> a -> Object -> Boolean
 * @param {String} name
 * @param {*} val
 * @param {*} obj
 * @return {Boolean}
 * @see R.equals, R.propSatisfies
 * @example
 *
 *      var abby = {name: 'Abby', age: 7, hair: 'blond'};
 *      var fred = {name: 'Fred', age: 12, hair: 'brown'};
 *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};
 *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};
 *      var kids = [abby, fred, rusty, alois];
 *      var hasBrownHair = R.propEq('hair', 'brown');
 *      R.filter(hasBrownHair, kids); //=> [fred, rusty]
 */
module.exports = _curry3(function propEq(name, val, obj) {
  return equals(val, obj[name]);
});


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var is = __webpack_require__(127);


/**
 * Returns `true` if the specified object property is of the given type;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Type
 * @sig Type -> String -> Object -> Boolean
 * @param {Function} type
 * @param {String} name
 * @param {*} obj
 * @return {Boolean}
 * @see R.is, R.propSatisfies
 * @example
 *
 *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true
 *      R.propIs(Number, 'x', {x: 'foo'});    //=> false
 *      R.propIs(Number, 'x', {});            //=> false
 */
module.exports = _curry3(function propIs(type, name, obj) {
  return is(type, obj[name]);
});


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var _has = __webpack_require__(9);


/**
 * If the given, non-null object has an own property with the specified name,
 * returns the value of that property. Otherwise returns the provided default
 * value.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Object
 * @sig a -> String -> Object -> a
 * @param {*} val The default value.
 * @param {String} p The name of the property to return.
 * @param {Object} obj The object to query.
 * @return {*} The value of given property of the supplied object or the default value.
 * @example
 *
 *      var alice = {
 *        name: 'ALICE',
 *        age: 101
 *      };
 *      var favorite = R.prop('favoriteLibrary');
 *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');
 *
 *      favorite(alice);  //=> undefined
 *      favoriteWithDefault(alice);  //=> 'Ramda'
 */
module.exports = _curry3(function propOr(val, p, obj) {
  return (obj != null && _has(p, obj)) ? obj[p] : val;
});


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Returns `true` if the specified object property satisfies the given
 * predicate; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Logic
 * @sig (a -> Boolean) -> String -> {String: a} -> Boolean
 * @param {Function} pred
 * @param {String} name
 * @param {*} obj
 * @return {Boolean}
 * @see R.propEq, R.propIs
 * @example
 *
 *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true
 */
module.exports = _curry3(function propSatisfies(pred, name, obj) {
  return pred(obj[name]);
});


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Acts as multiple `prop`: array of keys in, array of values out. Preserves
 * order.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> [v]
 * @param {Array} ps The property names to fetch
 * @param {Object} obj The object to query
 * @return {Array} The corresponding values or partially applied function.
 * @example
 *
 *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]
 *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]
 *
 *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));
 *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'
 */
module.exports = _curry2(function props(ps, obj) {
  var len = ps.length;
  var out = [];
  var idx = 0;

  while (idx < len) {
    out[idx] = obj[ps[idx]];
    idx += 1;
  }

  return out;
});


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _isNumber = __webpack_require__(121);


/**
 * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> Number -> [Number]
 * @param {Number} from The first number in the list.
 * @param {Number} to One more than the last number in the list.
 * @return {Array} The list of numbers in tthe set `[a, b)`.
 * @example
 *
 *      R.range(1, 5);    //=> [1, 2, 3, 4]
 *      R.range(50, 53);  //=> [50, 51, 52]
 */
module.exports = _curry2(function range(from, to) {
  if (!(_isNumber(from) && _isNumber(to))) {
    throw new TypeError('Both arguments to range must be numbers');
  }
  var result = [];
  var n = from;
  while (n < to) {
    result.push(n);
    n += 1;
  }
  return result;
});


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

var _curryN = __webpack_require__(51);
var _reduce = __webpack_require__(14);
var _reduced = __webpack_require__(26);


/**
 * Like `reduce`, `reduceWhile` returns a single item by iterating through
 * the list, successively calling the iterator function. `reduceWhile` also
 * takes a predicate that is evaluated before each step. If the predicate returns
 * `false`, it "short-circuits" the iteration and returns the current value
 * of the accumulator.
 *
 * @func
 * @memberOf R
 * @since v0.22.0
 * @category List
 * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} pred The predicate. It is passed the accumulator and the
 *        current element.
 * @param {Function} fn The iterator function. Receives two values, the
 *        accumulator and the current element.
 * @param {*} a The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.reduced
 * @example
 *
 *      var isOdd = (acc, x) => x % 2 === 1;
 *      var xs = [1, 3, 5, 60, 777, 800];
 *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9
 *
 *      var ys = [2, 4, 6]
 *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111
 */
module.exports = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {
  return _reduce(function(acc, x) {
    return pred(acc, x) ? fn(acc, x) : _reduced(acc);
  }, a, list);
});


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _reduced = __webpack_require__(26);

/**
 * Returns a value wrapped to indicate that it is the final value of the reduce
 * and transduce functions. The returned value should be considered a black
 * box: the internal structure is not guaranteed to be stable.
 *
 * Note: this optimization is unavailable to functions not explicitly listed
 * above. For instance, it is not currently supported by reduceRight.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category List
 * @sig a -> *
 * @param {*} x The final value of the reduce.
 * @return {*} The wrapped value.
 * @see R.reduce, R.transduce
 * @example
 *
 *      R.reduce(
 *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),
 *        0,
 *        [1, 2, 3, 4, 5]) // 10
 */

module.exports = _curry1(_reduced);


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Removes the sub-list of `list` starting at index `start` and containing
 * `count` elements. _Note that this is not destructive_: it returns a copy of
 * the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.2.2
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @param {Number} start The position to start removing elements
 * @param {Number} count The number of elements to remove
 * @param {Array} list The list to remove from
 * @return {Array} A new Array with `count` elements from `start` removed.
 * @example
 *
 *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]
 */
module.exports = _curry3(function remove(start, count, list) {
  var result = Array.prototype.slice.call(list, 0);
  result.splice(start, count);
  return result;
});


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var always = __webpack_require__(32);
var times = __webpack_require__(147);


/**
 * Returns a fixed list of size `n` containing a specified identical value.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig a -> n -> [a]
 * @param {*} value The value to repeat.
 * @param {Number} n The desired size of the output list.
 * @return {Array} A new array containing `n` `value`s.
 * @example
 *
 *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']
 *
 *      var obj = {};
 *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]
 *      repeatedObjs[0] === repeatedObjs[1]; //=> true
 * @symb R.repeat(a, 0) = []
 * @symb R.repeat(a, 1) = [a]
 * @symb R.repeat(a, 2) = [a, a]
 */
module.exports = _curry2(function repeat(value, n) {
  return times(always(value), n);
});


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Replace a substring or regex match in a string with a replacement.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category String
 * @sig RegExp|String -> String -> String -> String
 * @param {RegExp|String} pattern A regular expression or a substring to match.
 * @param {String} replacement The string to replace the matches with.
 * @param {String} str The String to do the search and replacement in.
 * @return {String} The result.
 * @example
 *
 *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'
 *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'
 *
 *      // Use the "g" (global) flag to replace all occurrences:
 *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'
 */
module.exports = _curry3(function replace(regex, replacement, str) {
  return str.replace(regex, replacement);
});


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Scan is similar to reduce, but returns a list of successively reduced values
 * from the left
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig (a,b -> a) -> a -> [b] -> [a]
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {Array} A list of all intermediately reduced values.
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]
 * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]
 */
module.exports = _curry3(function scan(fn, acc, list) {
  var idx = 0;
  var len = list.length;
  var result = [acc];
  while (idx < len) {
    acc = fn(acc, list[idx]);
    result[idx + 1] = acc;
    idx += 1;
  }
  return result;
});


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var always = __webpack_require__(32);
var over = __webpack_require__(138);


/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given lens to the given value.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> a -> s -> s
 * @param {Lens} lens
 * @param {*} v
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}
 *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}
 */
module.exports = _curry3(function set(lens, v, x) {
  return over(lens, always(v), x);
});


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns a copy of the list, sorted according to the comparator function,
 * which should accept two values at a time and return a negative number if the
 * first value is smaller, a positive number if it's larger, and zero if they
 * are equal. Please note that this is a **copy** of the list. It does not
 * modify the original.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a,a -> Number) -> [a] -> [a]
 * @param {Function} comparator A sorting function :: a -> b -> Int
 * @param {Array} list The list to sort
 * @return {Array} a new array with its elements sorted by the comparator function.
 * @example
 *
 *      var diff = function(a, b) { return a - b; };
 *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]
 */
module.exports = _curry2(function sort(comparator, list) {
  return Array.prototype.slice.call(list, 0).sort(comparator);
});


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Sorts the list according to the supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord b => (a -> b) -> [a] -> [a]
 * @param {Function} fn
 * @param {Array} list The list to sort.
 * @return {Array} A new list sorted by the keys generated by `fn`.
 * @example
 *
 *      var sortByFirstItem = R.sortBy(R.prop(0));
 *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));
 *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];
 *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]
 *      var alice = {
 *        name: 'ALICE',
 *        age: 101
 *      };
 *      var bob = {
 *        name: 'Bob',
 *        age: -10
 *      };
 *      var clara = {
 *        name: 'clara',
 *        age: 314.159
 *      };
 *      var people = [clara, bob, alice];
 *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]
 */
module.exports = _curry2(function sortBy(fn, list) {
  return Array.prototype.slice.call(list, 0).sort(function(a, b) {
    var aa = fn(a);
    var bb = fn(b);
    return aa < bb ? -1 : aa > bb ? 1 : 0;
  });
});


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Sorts a list according to a list of comparators.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Relation
 * @sig [a -> a -> Number] -> [a] -> [a]
 * @param {Array} functions A list of comparator functions.
 * @param {Array} list The list to sort.
 * @return {Array} A new list sorted according to the comarator functions.
 * @example
 *
 *      var alice = {
 *        name: 'alice',
 *        age: 40
 *      };
 *      var bob = {
 *        name: 'bob',
 *        age: 30
 *      };
 *      var clara = {
 *        name: 'clara',
 *        age: 40
 *      };
 *      var people = [clara, bob, alice];
 *      var ageNameSort = R.sortWith([
 *        R.descend(R.prop('age')),
 *        R.ascend(R.prop('name'))
 *      ]);
 *      ageNameSort(people); //=> [alice, clara, bob]
 */
module.exports = _curry2(function sortWith(fns, list) {
  return Array.prototype.slice.call(list, 0).sort(function(a, b) {
    var result = 0;
    var i = 0;
    while (result === 0 && i < fns.length) {
      result = fns[i](a, b);
      i += 1;
    }
    return result;
  });
});


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

var invoker = __webpack_require__(35);


/**
 * Splits a string into an array of strings based on the given
 * separator.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category String
 * @sig (String | RegExp) -> String -> [String]
 * @param {String|RegExp} sep The pattern.
 * @param {String} str The string to separate into an array.
 * @return {Array} The array of strings from `str` separated by `str`.
 * @see R.join
 * @example
 *
 *      var pathComponents = R.split('/');
 *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']
 *
 *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']
 */
module.exports = invoker(1, 'split');


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var length = __webpack_require__(130);
var slice = __webpack_require__(30);


/**
 * Splits a given list or string at a given index.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig Number -> [a] -> [[a], [a]]
 * @sig Number -> String -> [String, String]
 * @param {Number} index The index where the array/string is split.
 * @param {Array|String} array The array/string to be split.
 * @return {Array}
 * @example
 *
 *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]
 *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']
 *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']
 */
module.exports = _curry2(function splitAt(index, array) {
  return [slice(0, index, array), slice(index, length(array), array)];
});


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var slice = __webpack_require__(30);


/**
 * Splits a collection into slices of the specified length.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [[a]]
 * @sig Number -> String -> [String]
 * @param {Number} n
 * @param {Array} list
 * @return {Array}
 * @example
 *
 *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]
 *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']
 */
module.exports = _curry2(function splitEvery(n, list) {
  if (n <= 0) {
    throw new Error('First argument to splitEvery must be a positive integer');
  }
  var result = [];
  var idx = 0;
  while (idx < list.length) {
    result.push(slice(idx, idx += n, list));
  }
  return result;
});


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Takes a list and a predicate and returns a pair of lists with the following properties:
 *
 *  - the result of concatenating the two output lists is equivalent to the input list;
 *  - none of the elements of the first output list satisfies the predicate; and
 *  - if the second output list is non-empty, its first element satisfies the predicate.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [[a], [a]]
 * @param {Function} pred The predicate that determines where the array is split.
 * @param {Array} list The array to be split.
 * @return {Array}
 * @example
 *
 *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]
 */
module.exports = _curry2(function splitWhen(pred, list) {
  var idx = 0;
  var len = list.length;
  var prefix = [];

  while (idx < len && !pred(list[idx])) {
    prefix.push(list[idx]);
    idx += 1;
  }

  return [prefix, Array.prototype.slice.call(list, idx)];
});


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Subtracts its second argument from its first argument.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a - b`.
 * @see R.add
 * @example
 *
 *      R.subtract(10, 8); //=> 2
 *
 *      var minus5 = R.subtract(R.__, 5);
 *      minus5(17); //=> 12
 *
 *      var complementaryAngle = R.subtract(90);
 *      complementaryAngle(30); //=> 60
 *      complementaryAngle(72); //=> 18
 */
module.exports = _curry2(function subtract(a, b) {
  return Number(a) - Number(b);
});


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var concat = __webpack_require__(72);
var difference = __webpack_require__(106);


/**
 * Finds the set (i.e. no duplicates) of all elements contained in the first or
 * second list, but not both.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` or `list2`, but not both.
 * @see R.symmetricDifferenceWith, R.difference, R.differenceWith
 * @example
 *
 *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]
 *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]
 */
module.exports = _curry2(function symmetricDifference(list1, list2) {
  return concat(difference(list1, list2), difference(list2, list1));
});


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var concat = __webpack_require__(72);
var differenceWith = __webpack_require__(107);


/**
 * Finds the set (i.e. no duplicates) of all elements contained in the first or
 * second list, but not both. Duplication is determined according to the value
 * returned by applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` or `list2`, but not both.
 * @see R.symmetricDifference, R.difference, R.differenceWith
 * @example
 *
 *      var eqA = R.eqBy(R.prop('a'));
 *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];
 *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];
 *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]
 */
module.exports = _curry3(function symmetricDifferenceWith(pred, list1, list2) {
  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));
});


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var drop = __webpack_require__(109);


/**
 * Returns a new list containing the last `n` elements of the given list.
 * If `n > list.length`, returns a list of `list.length` elements.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n The number of elements to return.
 * @param {Array} xs The collection to consider.
 * @return {Array}
 * @see R.dropLast
 * @example
 *
 *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']
 *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
 *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.takeLast(3, 'ramda');               //=> 'mda'
 */
module.exports = _curry2(function takeLast(n, xs) {
  return drop(n >= 0 ? xs.length - n : 0, xs);
});


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns a new list containing the last `n` elements of a given list, passing
 * each value to the supplied predicate function, and terminating when the
 * predicate function returns `false`. Excludes the element that caused the
 * predicate function to fail. The predicate function is passed one argument:
 * *(value)*.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @param {Function} fn The function called per iteration.
 * @param {Array} list The collection to iterate over.
 * @return {Array} A new array.
 * @see R.dropLastWhile, R.addIndex
 * @example
 *
 *      var isNotOne = x => x !== 1;
 *
 *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]
 */
module.exports = _curry2(function takeLastWhile(fn, list) {
  var idx = list.length - 1;
  while (idx >= 0 && fn(list[idx])) {
    idx -= 1;
  }
  return Array.prototype.slice.call(list, idx + 1);
});


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xtakeWhile = __webpack_require__(274);


/**
 * Returns a new list containing the first `n` elements of a given list,
 * passing each value to the supplied predicate function, and terminating when
 * the predicate function returns `false`. Excludes the element that caused the
 * predicate function to fail. The predicate function is passed one argument:
 * *(value)*.
 *
 * Dispatches to the `takeWhile` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @param {Function} fn The function called per iteration.
 * @param {Array} list The collection to iterate over.
 * @return {Array} A new array.
 * @see R.dropWhile, R.transduce, R.addIndex
 * @example
 *
 *      var isNotFour = x => x !== 4;
 *
 *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]
 */
module.exports = _curry2(_dispatchable(['takeWhile'], _xtakeWhile, function takeWhile(fn, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len && fn(list[idx])) {
    idx += 1;
  }
  return Array.prototype.slice.call(list, 0, idx);
}));


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Runs the given function with the supplied object, then returns the object.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a -> *) -> a -> a
 * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.
 * @param {*} x
 * @return {*} `x`.
 * @example
 *
 *      var sayX = x => console.log('x is ' + x);
 *      R.tap(sayX, 100); //=> 100
 *      // logs 'x is 100'
 * @symb R.tap(f, a) = a
 */
module.exports = _curry2(function tap(fn, x) {
  fn(x);
  return x;
});


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

var _cloneRegExp = __webpack_require__(114);
var _curry2 = __webpack_require__(0);
var _isRegExp = __webpack_require__(250);
var toString = __webpack_require__(40);


/**
 * Determines whether a given string matches a given regular expression.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category String
 * @sig RegExp -> String -> Boolean
 * @param {RegExp} pattern
 * @param {String} str
 * @return {Boolean}
 * @see R.match
 * @example
 *
 *      R.test(/^x/, 'xyz'); //=> true
 *      R.test(/^y/, 'xyz'); //=> false
 */
module.exports = _curry2(function test(pattern, str) {
  if (!_isRegExp(pattern)) {
    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString(pattern));
  }
  return _cloneRegExp(pattern).test(str);
});


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

var invoker = __webpack_require__(35);


/**
 * The lower case version of a string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to lower case.
 * @return {String} The lower case version of `str`.
 * @see R.toUpper
 * @example
 *
 *      R.toLower('XYZ'); //=> 'xyz'
 */
module.exports = invoker(0, 'toLowerCase');


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var _has = __webpack_require__(9);


/**
 * Converts an object into an array of key, value arrays. Only the object's
 * own properties are used.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Object
 * @sig {String: *} -> [[String,*]]
 * @param {Object} obj The object to extract from
 * @return {Array} An array of key, value arrays from the object's own properties.
 * @see R.fromPairs
 * @example
 *
 *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
 */
module.exports = _curry1(function toPairs(obj) {
  var pairs = [];
  for (var prop in obj) {
    if (_has(prop, obj)) {
      pairs[pairs.length] = [prop, obj[prop]];
    }
  }
  return pairs;
});


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);


/**
 * Converts an object into an array of key, value arrays. The object's own
 * properties and prototype properties are used. Note that the order of the
 * output array is not guaranteed to be consistent across different JS
 * platforms.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Object
 * @sig {String: *} -> [[String,*]]
 * @param {Object} obj The object to extract from
 * @return {Array} An array of key, value arrays from the object's own
 *         and prototype properties.
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]
 */
module.exports = _curry1(function toPairsIn(obj) {
  var pairs = [];
  for (var prop in obj) {
    pairs[pairs.length] = [prop, obj[prop]];
  }
  return pairs;
});


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

var invoker = __webpack_require__(35);


/**
 * The upper case version of a string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to upper case.
 * @return {String} The upper case version of `str`.
 * @see R.toLower
 * @example
 *
 *      R.toUpper('abc'); //=> 'ABC'
 */
module.exports = invoker(0, 'toUpperCase');


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

var _reduce = __webpack_require__(14);
var _xwrap = __webpack_require__(126);
var curryN = __webpack_require__(7);


/**
 * Initializes a transducer using supplied iterator function. Returns a single
 * item by iterating through the list, successively calling the transformed
 * iterator function and passing it an accumulator value and the current value
 * from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It will be
 * wrapped as a transformer to initialize the transducer. A transformer can be
 * passed directly in place of an iterator function. In both cases, iteration
 * may be stopped early with the `R.reduced` function.
 *
 * A transducer is a function that accepts a transformer and returns a
 * transformer and can be composed directly.
 *
 * A transformer is an an object that provides a 2-arity reducing iterator
 * function, step, 0-arity initial value function, init, and 1-arity result
 * extraction function, result. The step function is used as the iterator
 * function in reduce. The result function is used to convert the final
 * accumulator into the return type and in most cases is R.identity. The init
 * function can be used to provide an initial accumulator, but is ignored by
 * transduce.
 *
 * The iteration is performed with R.reduce after initializing the transducer.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a
 * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array. Wrapped as transformer, if necessary, and used to
 *        initialize the transducer
 * @param {*} acc The initial accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.reduced, R.into
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
 *
 *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]
 */
module.exports = curryN(4, function transduce(xf, fn, acc, list) {
  return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);
});


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);


/**
 * Transposes the rows and columns of a 2D list.
 * When passed a list of `n` lists of length `x`,
 * returns a list of `x` lists of length `n`.
 *
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig [[a]] -> [[a]]
 * @param {Array} list A 2D list
 * @return {Array} A 2D list
 * @example
 *
 *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]
 *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]
 *
 * If some of the rows are shorter than the following rows, their elements are skipped:
 *
 *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]
 * @symb R.transpose([[a], [b], [c]]) = [a, b, c]
 * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]
 * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]
 */
module.exports = _curry1(function transpose(outerlist) {
  var i = 0;
  var result = [];
  while (i < outerlist.length) {
    var innerlist = outerlist[i];
    var j = 0;
    while (j < innerlist.length) {
      if (typeof result[j] === 'undefined') {
        result[j] = [];
      }
      result[j].push(innerlist[j]);
      j += 1;
    }
    i += 1;
  }
  return result;
});


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);
var map = __webpack_require__(11);
var sequence = __webpack_require__(144);


/**
 * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning
 * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),
 * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative
 * into an Applicative of Traversable.
 *
 * Dispatches to the `sequence` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
 * @param {Function} of
 * @param {Function} f
 * @param {*} traversable
 * @return {*}
 * @see R.sequence
 * @example
 *
 *      // Returns `Nothing` if the given divisor is `0`
 *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)
 *
 *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])
 *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing
 */
module.exports = _curry3(function traverse(of, f, traversable) {
  return sequence(of, map(f, traversable));
});


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);


/**
 * Removes (strips) whitespace from both ends of the string.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to trim.
 * @return {String} Trimmed version of `str`.
 * @example
 *
 *      R.trim('   xyz  '); //=> 'xyz'
 *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']
 */
module.exports = (function() {
  var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
           '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' +
           '\u2029\uFEFF';
  var zeroWidth = '\u200b';
  var hasProtoTrim = (typeof String.prototype.trim === 'function');
  if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {
    return _curry1(function trim(str) {
      var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');
      var endRx = new RegExp('[' + ws + '][' + ws + ']*$');
      return str.replace(beginRx, '').replace(endRx, '');
    });
  } else {
    return _curry1(function trim(str) {
      return str.trim();
    });
  }
}());


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

var _arity = __webpack_require__(20);
var _concat = __webpack_require__(16);
var _curry2 = __webpack_require__(0);


/**
 * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned
 * function evaluates the `tryer`; if it does not throw, it simply returns the
 * result. If the `tryer` *does* throw, the returned function evaluates the
 * `catcher` function and returns its result. Note that for effective
 * composition with this function, both the `tryer` and `catcher` functions
 * must return the same type of results.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Function
 * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
 * @param {Function} tryer The function that may throw.
 * @param {Function} catcher The function that will be evaluated if `tryer` throws.
 * @return {Function} A new function that will catch exceptions and send then to the catcher.
 * @example
 *
 *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true
 *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false
 */
module.exports = _curry2(function _tryCatch(tryer, catcher) {
  return _arity(tryer.length, function() {
    try {
      return tryer.apply(this, arguments);
    } catch (e) {
      return catcher.apply(this, _concat([e], arguments));
    }
  });
});


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);


/**
 * Takes a function `fn`, which takes a single array argument, and returns a
 * function which:
 *
 *   - takes any number of positional arguments;
 *   - passes these arguments to `fn` as an array; and
 *   - returns the result.
 *
 * In other words, R.unapply derives a variadic function from a function which
 * takes an array. R.unapply is the inverse of R.apply.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Function
 * @sig ([*...] -> a) -> (*... -> a)
 * @param {Function} fn
 * @return {Function}
 * @see R.apply
 * @example
 *
 *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'
 * @symb R.unapply(f)(a, b) = f([a, b])
 */
module.exports = _curry1(function unapply(fn) {
  return function() {
    return fn(Array.prototype.slice.call(arguments, 0));
  };
});


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);
var nAry = __webpack_require__(58);


/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly 1 parameter. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Function
 * @sig (* -> b) -> (a -> b)
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity 1.
 * @example
 *
 *      var takesTwoArgs = function(a, b) {
 *        return [a, b];
 *      };
 *      takesTwoArgs.length; //=> 2
 *      takesTwoArgs(1, 2); //=> [1, 2]
 *
 *      var takesOneArg = R.unary(takesTwoArgs);
 *      takesOneArg.length; //=> 1
 *      // Only 1 argument is passed to the wrapped function
 *      takesOneArg(1, 2); //=> [1, undefined]
 * @symb R.unary(f)(a, b, c) = f(a)
 */
module.exports = _curry1(function unary(fn) {
  return nAry(1, fn);
});


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var curryN = __webpack_require__(7);


/**
 * Returns a function of arity `n` from a (manually) curried function.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Function
 * @sig Number -> (a -> b) -> (a -> c)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to uncurry.
 * @return {Function} A new function.
 * @see R.curry
 * @example
 *
 *      var addFour = a => b => c => d => a + b + c + d;
 *
 *      var uncurriedAddFour = R.uncurryN(4, addFour);
 *      uncurriedAddFour(1, 2, 3, 4); //=> 10
 */
module.exports = _curry2(function uncurryN(depth, fn) {
  return curryN(depth, function() {
    var currentDepth = 1;
    var value = fn;
    var idx = 0;
    var endIdx;
    while (currentDepth <= depth && typeof value === 'function') {
      endIdx = currentDepth === depth ? arguments.length : idx + value.length;
      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));
      currentDepth += 1;
      idx = endIdx;
    }
    return value;
  });
});


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Builds a list from a seed value. Accepts an iterator function, which returns
 * either false to stop iteration or an array of length 2 containing the value
 * to add to the resulting list and the seed to be used in the next call to the
 * iterator function.
 *
 * The iterator function receives one argument: *(seed)*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig (a -> [b]) -> * -> [b]
 * @param {Function} fn The iterator function. receives one argument, `seed`, and returns
 *        either false to quit iteration or an array of length two to proceed. The element
 *        at index 0 of this array will be added to the resulting array, and the element
 *        at index 1 will be passed to the next call to `fn`.
 * @param {*} seed The seed value.
 * @return {Array} The final list.
 * @example
 *
 *      var f = n => n > 50 ? false : [-n, n + 10];
 *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]
 * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]
 */
module.exports = _curry2(function unfold(fn, seed) {
  var pair = fn(seed);
  var result = [];
  while (pair && pair.length) {
    result[result.length] = pair[0];
    pair = fn(pair[1]);
  }
  return result;
});


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

var _concat = __webpack_require__(16);
var _curry2 = __webpack_require__(0);
var compose = __webpack_require__(71);
var uniq = __webpack_require__(82);


/**
 * Combines two lists into a set (i.e. no duplicates) composed of the elements
 * of each list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} as The first list.
 * @param {Array} bs The second list.
 * @return {Array} The first and second lists concatenated, with
 *         duplicates removed.
 * @example
 *
 *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
 */
module.exports = _curry2(compose(uniq, _concat));


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

var _concat = __webpack_require__(16);
var _curry3 = __webpack_require__(2);
var uniqWith = __webpack_require__(83);


/**
 * Combines two lists into a set (i.e. no duplicates) composed of the elements
 * of each list. Duplication is determined according to the value returned by
 * applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The first and second lists concatenated, with
 *         duplicates removed.
 * @see R.union
 * @example
 *
 *      var l1 = [{a: 1}, {a: 2}];
 *      var l2 = [{a: 1}, {a: 4}];
 *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]
 */
module.exports = _curry3(function unionWith(pred, list1, list2) {
  return uniqWith(pred, _concat(list1, list2));
});


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Tests the final argument by passing it to the given predicate function. If
 * the predicate is not satisfied, the function will return the result of
 * calling the `whenFalseFn` function with the same argument. If the predicate
 * is satisfied, the argument is returned as is.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred        A predicate function
 * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates
 *                               to a falsy value.
 * @param {*}        x           An object to test with the `pred` function and
 *                               pass to `whenFalseFn` if necessary.
 * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.
 * @see R.ifElse, R.when
 * @example
 *
 *      // coerceArray :: (a|[a]) -> [a]
 *      var coerceArray = R.unless(R.isArrayLike, R.of);
 *      coerceArray([1, 2, 3]); //=> [1, 2, 3]
 *      coerceArray(1);         //=> [1]
 */
module.exports = _curry3(function unless(pred, whenFalseFn, x) {
  return pred(x) ? x : whenFalseFn(x);
});


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

var _identity = __webpack_require__(77);
var chain = __webpack_require__(70);


/**
 * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from
 * any [Chain](https://github.com/fantasyland/fantasy-land#chain).
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig Chain c => c (c a) -> c a
 * @param {*} list
 * @return {*}
 * @see R.flatten, R.chain
 * @example
 *
 *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
 *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
 */
module.exports = chain(_identity);


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Takes a predicate, a transformation function, and an initial value,
 * and returns a value of the same type as the initial value.
 * It does so by applying the transformation until the predicate is satisfied,
 * at which point it returns the satisfactory value.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred A predicate function
 * @param {Function} fn The iterator function
 * @param {*} init Initial value
 * @return {*} Final value that satisfies predicate
 * @example
 *
 *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128
 */
module.exports = _curry3(function until(pred, fn, init) {
  var val = init;
  while (!pred(val)) {
    val = fn(val);
  }
  return val;
});


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

var _curry1 = __webpack_require__(1);


/**
 * Returns a list of all the properties, including prototype properties, of the
 * supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @sig {k: v} -> [v]
 * @param {Object} obj The object to extract values from
 * @return {Array} An array of the values of the object's own and prototype properties.
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.valuesIn(f); //=> ['X', 'Y']
 */
module.exports = _curry1(function valuesIn(obj) {
  var prop;
  var vs = [];
  for (prop in obj) {
    vs[vs.length] = obj[prop];
  }
  return vs;
});


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Returns a "view" of the given data structure, determined by the given lens.
 * The lens's focus determines which portion of the data structure is visible.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> s -> a
 * @param {Lens} lens
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.view(xLens, {x: 1, y: 2});  //=> 1
 *      R.view(xLens, {x: 4, y: 2});  //=> 4
 */
module.exports = (function() {
  // `Const` is a functor that effectively ignores the function given to `map`.
  var Const = function(x) {
    return {value: x, map: function() { return this; }};
  };

  return _curry2(function view(lens, x) {
    // Using `Const` effectively ignores the setter function of the `lens`,
    // leaving the value returned by the getter function unmodified.
    return lens(Const)(x).value;
  });
}());


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Tests the final argument by passing it to the given predicate function. If
 * the predicate is satisfied, the function will return the result of calling
 * the `whenTrueFn` function with the same argument. If the predicate is not
 * satisfied, the argument is returned as is.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred       A predicate function
 * @param {Function} whenTrueFn A function to invoke when the `condition`
 *                              evaluates to a truthy value.
 * @param {*}        x          An object to test with the `pred` function and
 *                              pass to `whenTrueFn` if necessary.
 * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.
 * @see R.ifElse, R.unless
 * @example
 *
 *      // truncate :: String -> String
 *      var truncate = R.when(
 *        R.propSatisfies(R.gt(R.__, 10), 'length'),
 *        R.pipe(R.take(10), R.append('…'), R.join(''))
 *      );
 *      truncate('12345');         //=> '12345'
 *      truncate('0123456789ABC'); //=> '0123456789…'
 */
module.exports = _curry3(function when(pred, whenTrueFn, x) {
  return pred(x) ? whenTrueFn(x) : x;
});


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);
var equals = __webpack_require__(19);
var map = __webpack_require__(11);
var where = __webpack_require__(152);


/**
 * Takes a spec object and a test object; returns true if the test satisfies
 * the spec, false otherwise. An object satisfies the spec if, for each of the
 * spec's own properties, accessing that property of the object gives the same
 * value (in `R.equals` terms) as accessing that property of the spec.
 *
 * `whereEq` is a specialization of [`where`](#where).
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @sig {String: *} -> {String: *} -> Boolean
 * @param {Object} spec
 * @param {Object} testObj
 * @return {Boolean}
 * @see R.where
 * @example
 *
 *      // pred :: Object -> Boolean
 *      var pred = R.whereEq({a: 1, b: 2});
 *
 *      pred({a: 1});              //=> false
 *      pred({a: 1, b: 2});        //=> true
 *      pred({a: 1, b: 2, c: 3});  //=> true
 *      pred({a: 1, b: 1});        //=> false
 */
module.exports = _curry2(function whereEq(spec, testObj) {
  return where(map(equals, spec), testObj);
});


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

var _contains = __webpack_require__(29);
var _curry2 = __webpack_require__(0);
var flip = __webpack_require__(50);
var reject = __webpack_require__(60);


/**
 * Returns a new list without values in the first argument.
 * `R.equals` is used to determine equality.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig [a] -> [a] -> [a]
 * @param {Array} list1 The values to be removed from `list2`.
 * @param {Array} list2 The array to remove values from.
 * @return {Array} The new array without values in `list1`.
 * @see R.transduce
 * @example
 *
 *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]
 */
module.exports = _curry2(function(xs, list) {
  return reject(flip(_contains)(xs), list);
});


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Creates a new list out of the two supplied by creating each possible pair
 * from the lists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b] -> [[a,b]]
 * @param {Array} as The first list.
 * @param {Array} bs The second list.
 * @return {Array} The list made by combining each possible pair from
 *         `as` and `bs` into pairs (`[a, b]`).
 * @example
 *
 *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]
 * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]
 */
module.exports = _curry2(function xprod(a, b) { // = xprodWith(prepend); (takes about 3 times as long...)
  var idx = 0;
  var ilen = a.length;
  var j;
  var jlen = b.length;
  var result = [];
  while (idx < ilen) {
    j = 0;
    while (j < jlen) {
      result[result.length] = [a[idx], b[j]];
      j += 1;
    }
    idx += 1;
  }
  return result;
});


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Creates a new list out of the two supplied by pairing up equally-positioned
 * items from both lists. The returned list is truncated to the length of the
 * shorter of the two input lists.
 * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b] -> [[a,b]]
 * @param {Array} list1 The first array to consider.
 * @param {Array} list2 The second array to consider.
 * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.
 * @example
 *
 *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]
 * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]
 */
module.exports = _curry2(function zip(a, b) {
  var rv = [];
  var idx = 0;
  var len = Math.min(a.length, b.length);
  while (idx < len) {
    rv[idx] = [a[idx], b[idx]];
    idx += 1;
  }
  return rv;
});


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

var _curry2 = __webpack_require__(0);


/**
 * Creates a new object out of a list of keys and a list of values.
 * Key/value pairing is truncated to the length of the shorter of the two lists.
 * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [String] -> [*] -> {String: *}
 * @param {Array} keys The array that will be properties on the output object.
 * @param {Array} values The list of values on the output object.
 * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.
 * @example
 *
 *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}
 */
module.exports = _curry2(function zipObj(keys, values) {
  var idx = 0;
  var len = Math.min(keys.length, values.length);
  var out = {};
  while (idx < len) {
    out[keys[idx]] = values[idx];
    idx += 1;
  }
  return out;
});


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

var _curry3 = __webpack_require__(2);


/**
 * Creates a new list out of the two supplied by applying the function to each
 * equally-positioned pair in the lists. The returned list is truncated to the
 * length of the shorter of the two input lists.
 *
 * @function
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a,b -> c) -> [a] -> [b] -> [c]
 * @param {Function} fn The function used to combine the two elements into one value.
 * @param {Array} list1 The first array to consider.
 * @param {Array} list2 The second array to consider.
 * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`
 *         using `fn`.
 * @example
 *
 *      var f = (x, y) => {
 *        // ...
 *      };
 *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);
 *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]
 * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]
 */
module.exports = _curry3(function zipWith(fn, a, b) {
  var rv = [];
  var idx = 0;
  var len = Math.min(a.length, b.length);
  while (idx < len) {
    rv[idx] = fn(a[idx], b[idx]);
    idx += 1;
  }
  return rv;
});


/***/ }),
/* 378 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jquery, jQuery) {Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_viewerPedigree__ = __webpack_require__(153);


window.jQuery = jquery;
window.jquery = jquery;

const prefix = "/js/ext-lib/panogram";
const probandDataUrl = "/public/xwiki/PhenoTips.PatientClass/0.xml";
const pedigreeDataUrl = "/public/xwiki/PhenoTips.PedigreeClass/0.xml";

const render = ({ data, probandDataUrl, pedigreeDataUrl }) => {
    jquery("doc").ready(() => {
        new __WEBPACK_IMPORTED_MODULE_0__src_viewerPedigree__["a" /* ViewerPedigree */]({
            type: "simpleJSON",
            data,
            probandDataUrl, // TODO replace loading of this with webpak module
            pedigreeDataUrl
        });
    });
};

const getPedigreeData = patientId => jquery.ajax({
    url: `/patient/${patientId}/pedigree.json`,
    method: "GET"
});

const getDataAndRender = patientId => {
    getPedigreeData(patientId).then(data => render({
        data,
        probandDataUrl,
        pedigreeDataUrl
    })).catch(err => {
        if (err.status === 403) {
            jquery('body').append('<p>please <a href="http://localhost:8000">log in</a></p>');
        }
        console.trace(err);
    });
};

const createInput = () => {
    jquery(document).ready(() => {
        jquery('body').prepend('<span>Patient ID: </span><input type="number" name="patientId" id="patientId"></input><button id="go">go</button> <a href="" id="525">525</a>, <a href="" id="9971">9971</a>, <a href="" id="4247">4247</a>');
        jquery('#go').on('click', e => {
            e.preventDefault();
            const patientId = jquery('#patientId').val().strip();
            getDataAndRender(patientId);
        });
        jquery('#9971').on('click', e => {
            e.preventDefault();
            getDataAndRender(9971);
        });
        jquery('#525').on('click', e => {
            e.preventDefault();
            getDataAndRender(525);
        });
        jquery('#4247').on('click', e => {
            e.preventDefault();
            getDataAndRender(4247);
        });
    });
};

jquery('doc').ready(() => {
    const patientId = jQuery('#panogram').data('patient-id');
    const development = jQuery('#panogram').data('env') === 'dev';

    if (development) {
        createInput();
    }

    getDataAndRender(patientId);
});
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(62), __webpack_require__(62)))

/***/ })
/******/ ]);
//# sourceMappingURL=main.bundle.js.map